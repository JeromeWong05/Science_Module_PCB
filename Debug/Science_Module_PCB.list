
Science_Module_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009a84  08009a84  0000aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bcc  08009bcc  0000b168  2**0
                  CONTENTS
  4 .ARM          00000008  08009bcc  08009bcc  0000abcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd4  08009bd4  0000b168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd4  08009bd4  0000abd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08009bdc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e34  20000168  08009d44  0000b168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f9c  08009d44  0000bf9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a6c  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003934  00000000  00000000  00021c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00025538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc4  00000000  00000000  000269f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002efd8  00000000  00000000  000279bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f45  00000000  00000000  00056994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110b39  00000000  00000000  0006f8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180412  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f50  00000000  00000000  00180458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001863a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000168 	.word	0x20000168
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009a6c 	.word	0x08009a6c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000016c 	.word	0x2000016c
 80001fc:	08009a6c 	.word	0x08009a6c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fb47 	bl	8000966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f844 	bl	8000364 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f8c6 	bl	800046c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002e0:	f007 fb0c 	bl	80078fc <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80002e4:	f000 f88c 	bl	8000400 <MX_TIM6_Init>

  /* USER CODE BEGIN 2 */
  DWT_DelayInit();
 80002e8:	f000 f9ce 	bl	8000688 <DWT_DelayInit>
  HAL_Delay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f0:	f000 fbae 	bl	8000a50 <HAL_Delay>
  printf("> ");
 80002f4:	4814      	ldr	r0, [pc, #80]	@ (8000348 <main+0x78>)
 80002f6:	f008 fb17 	bl	8008928 <iprintf>

  // begin timer6 ISR
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 80002fa:	4b14      	ldr	r3, [pc, #80]	@ (800034c <main+0x7c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f06f 0201 	mvn.w	r2, #1
 8000302:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8000304:	4811      	ldr	r0, [pc, #68]	@ (800034c <main+0x7c>)
 8000306:	f003 fda7 	bl	8003e58 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // too lazy so just set the LED flags to turn on and off 
    Update_LED();
 800030a:	f000 f963 	bl	80005d4 <Update_LED>

    if (Timer6_flag)
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <main+0x80>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f9      	beq.n	800030a <main+0x3a>
    {
      tim6_val = Get_timer6_us();
 8000316:	f000 f989 	bl	800062c <Get_timer6_us>
 800031a:	4603      	mov	r3, r0
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <main+0x84>)
 800031e:	6013      	str	r3, [r2, #0]
      while(Get_timer6_us() - tim6_val < 10e6);
 8000320:	bf00      	nop
 8000322:	f000 f983 	bl	800062c <Get_timer6_us>
 8000326:	4602      	mov	r2, r0
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <main+0x84>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <main+0x88>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d3f6      	bcc.n	8000322 <main+0x52>
      printf("10 seconds reached\r\n");
 8000334:	4809      	ldr	r0, [pc, #36]	@ (800035c <main+0x8c>)
 8000336:	f008 fb5f 	bl	80089f8 <puts>
      LED2 = 1; 
 800033a:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <main+0x90>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
      Timer6_flag = 0; 
 8000340:	4b03      	ldr	r3, [pc, #12]	@ (8000350 <main+0x80>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
    Update_LED();
 8000346:	e7e0      	b.n	800030a <main+0x3a>
 8000348:	08009a84 	.word	0x08009a84
 800034c:	20000184 	.word	0x20000184
 8000350:	200001d4 	.word	0x200001d4
 8000354:	200001d8 	.word	0x200001d8
 8000358:	00989680 	.word	0x00989680
 800035c:	08009a88 	.word	0x08009a88
 8000360:	200001d1 	.word	0x200001d1

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b098      	sub	sp, #96	@ 0x60
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	2248      	movs	r2, #72	@ 0x48
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f008 fc40 	bl	8008bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000386:	2000      	movs	r0, #0
 8000388:	f001 fff8 	bl	800237c <HAL_PWREx_ControlVoltageScaling>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000392:	f000 f991 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	2303      	movs	r3, #3
 80003a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 80003ac:	231e      	movs	r3, #30
 80003ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003b0:	2302      	movs	r3, #2
 80003b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003b8:	2302      	movs	r3, #2
 80003ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0318 	add.w	r3, r7, #24
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 f88f 	bl	80024e4 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003cc:	f000 f974 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
 80003d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	2303      	movs	r3, #3
 80003d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2105      	movs	r1, #5
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 fcf7 	bl	8002ddc <HAL_RCC_ClockConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003f4:	f000 f960 	bl	80006b8 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3760      	adds	r7, #96	@ 0x60
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000412:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <MX_TIM6_Init+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000418:	2277      	movs	r2, #119	@ 0x77
 800041a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_TIM6_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000428:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_TIM6_Init+0x64>)
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000430:	480c      	ldr	r0, [pc, #48]	@ (8000464 <MX_TIM6_Init+0x64>)
 8000432:	f003 fcb9 	bl	8003da8 <HAL_TIM_Base_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800043c:	f000 f93c 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000440:	2300      	movs	r3, #0
 8000442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_TIM6_Init+0x64>)
 800044e:	f003 ff49 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000458:	f000 f92e 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000184 	.word	0x20000184
 8000468:	40001000 	.word	0x40001000

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	@ 0x28
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000482:	4b47      	ldr	r3, [pc, #284]	@ (80005a0 <MX_GPIO_Init+0x134>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000486:	4a46      	ldr	r2, [pc, #280]	@ (80005a0 <MX_GPIO_Init+0x134>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800048e:	4b44      	ldr	r3, [pc, #272]	@ (80005a0 <MX_GPIO_Init+0x134>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	f003 0304 	and.w	r3, r3, #4
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800049a:	4b41      	ldr	r3, [pc, #260]	@ (80005a0 <MX_GPIO_Init+0x134>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	4a40      	ldr	r2, [pc, #256]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004a6:	4b3e      	ldr	r3, [pc, #248]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b3b      	ldr	r3, [pc, #236]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b6:	4a3a      	ldr	r2, [pc, #232]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004be:	4b38      	ldr	r3, [pc, #224]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b35      	ldr	r3, [pc, #212]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	4a34      	ldr	r2, [pc, #208]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004d0:	f043 0302 	orr.w	r3, r3, #2
 80004d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004d6:	4b32      	ldr	r3, [pc, #200]	@ (80005a0 <MX_GPIO_Init+0x134>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ec:	f000 fd78 	bl	8000fe0 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 80004f0:	2200      	movs	r2, #0
 80004f2:	f64f 31cf 	movw	r1, #64463	@ 0xfbcf
 80004f6:	482b      	ldr	r0, [pc, #172]	@ (80005a4 <MX_GPIO_Init+0x138>)
 80004f8:	f000 fd72 	bl	8000fe0 <HAL_GPIO_WritePin>
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SM_EN__GPIO_Port, MCU_SM_EN__Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2108      	movs	r1, #8
 8000500:	4829      	ldr	r0, [pc, #164]	@ (80005a8 <MX_GPIO_Init+0x13c>)
 8000502:	f000 fd6d 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_Flow1_Pin MCU_Flow2_Pin MCU_Flow3_Pin */
  GPIO_InitStruct.Pin = MCU_Flow1_Pin|MCU_Flow2_Pin|MCU_Flow3_Pin;
 8000506:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4824      	ldr	r0, [pc, #144]	@ (80005ac <MX_GPIO_Init+0x140>)
 800051c:	f000 fbce 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_BANK_EN_Pin MCU_Pump3_HS_LR_Pin MCU_Pump3_LS_LR_Pin MCU_Pump3_HS_RL_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 8000520:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000524:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053c:	f000 fbbe 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_Pump3_LS_RL_Pin MCU_Pump2_HS_LR_Pin MCU_Pump2_LS_LR_Pin MCU_Pump2_LS_RL_Pin
                           P3_LS_RL_Pin P3_LS_LR_Pin P3_HS_LR_Pin P3_HS_RL_Pin
                           LED2_Pin MCU_SM_PUL__Pin MCU_SM_DIR__Pin MCU_VM_EN_Pin
                           MCU_AM_EN_Pin */
  GPIO_InitStruct.Pin = MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 8000540:	f64f 33cf 	movw	r3, #64463	@ 0xfbcf
 8000544:	617b      	str	r3, [r7, #20]
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <MX_GPIO_Init+0x138>)
 800055a:	f000 fbaf 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_Pump2_HS_RL_Pin */
  GPIO_InitStruct.Pin = MCU_Pump2_HS_RL_Pin;
 800055e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000564:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_Pump2_HS_RL_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <MX_GPIO_Init+0x138>)
 8000576:	f000 fba1 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SM_EN__Pin */
  GPIO_InitStruct.Pin = MCU_SM_EN__Pin;
 800057a:	2308      	movs	r3, #8
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_SM_EN__GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_GPIO_Init+0x13c>)
 8000592:	f000 fb93 	bl	8000cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	bf00      	nop
 8000598:	3728      	adds	r7, #40	@ 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000400 	.word	0x48000400
 80005a8:	48001c00 	.word	0x48001c00
 80005ac:	48000800 	.word	0x48000800

080005b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) 
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	68b8      	ldr	r0, [r7, #8]
 80005c4:	f007 fb50 	bl	8007c68 <CDC_Transmit_FS>
  return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <Update_LED>:

void Update_LED(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  if (LED1) HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <Update_LED+0x4c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d007      	beq.n	80005f0 <Update_LED+0x1c>
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ea:	f000 fcf9 	bl	8000fe0 <HAL_GPIO_WritePin>
 80005ee:	e006      	b.n	80005fe <Update_LED+0x2a>
  else HAL_GPIO_WritePin(GPIOA, LED1_Pin, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f000 fcf1 	bl	8000fe0 <HAL_GPIO_WritePin>
  if (LED2) HAL_GPIO_WritePin(GPIOB, LED2_Pin, 1);
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <Update_LED+0x50>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <Update_LED+0x3e>
 8000606:	2201      	movs	r2, #1
 8000608:	2108      	movs	r1, #8
 800060a:	4807      	ldr	r0, [pc, #28]	@ (8000628 <Update_LED+0x54>)
 800060c:	f000 fce8 	bl	8000fe0 <HAL_GPIO_WritePin>
  else HAL_GPIO_WritePin(GPIOB, LED2_Pin, 0);
}
 8000610:	e004      	b.n	800061c <Update_LED+0x48>
  else HAL_GPIO_WritePin(GPIOB, LED2_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2108      	movs	r1, #8
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <Update_LED+0x54>)
 8000618:	f000 fce2 	bl	8000fe0 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200001d0 	.word	0x200001d0
 8000624:	200001d1 	.word	0x200001d1
 8000628:	48000400 	.word	0x48000400

0800062c <Get_timer6_us>:

uint32_t Get_timer6_us(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
  int temp = __HAL_TIM_GET_COUNTER(&htim6);
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <Get_timer6_us+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000638:	607b      	str	r3, [r7, #4]
  return tim6_overflow * 65536 + temp;
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <Get_timer6_us+0x28>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	041a      	lsls	r2, r3, #16
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4413      	add	r3, r2
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	20000184 	.word	0x20000184
 8000654:	200001dc 	.word	0x200001dc

08000658 <HAL_TIM_PeriodElapsedCallback>:

// INTERRUPT CALLBACKS
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) //check if timer6 IT flag
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d104      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    tim6_overflow++;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000670:	6013      	str	r3, [r2, #0]
  }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000184 	.word	0x20000184
 8000684:	200001dc 	.word	0x200001dc

08000688 <DWT_DelayInit>:

static void DWT_DelayInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <DWT_DelayInit+0x28>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <DWT_DelayInit+0x28>)
 8000692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000696:	60d3      	str	r3, [r2, #12]
    DWT->CTRL         |= DWT_CTRL_CYCCNTENA_Msk;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <DWT_DelayInit+0x2c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <DWT_DelayInit+0x2c>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000edf0 	.word	0xe000edf0
 80006b4:	e0001000 	.word	0xe0001000

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <HAL_MspInit+0x44>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0d      	ldr	r2, [pc, #52]	@ (8000750 <HAL_TIM_Base_MspInit+0x44>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d113      	bne.n	8000746 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <HAL_TIM_Base_MspInit+0x48>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	4a0c      	ldr	r2, [pc, #48]	@ (8000754 <HAL_TIM_Base_MspInit+0x48>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6593      	str	r3, [r2, #88]	@ 0x58
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <HAL_TIM_Base_MspInit+0x48>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	f003 0310 	and.w	r3, r3, #16
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2036      	movs	r0, #54	@ 0x36
 800073c:	f000 fa87 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000740:	2036      	movs	r0, #54	@ 0x36
 8000742:	f000 faa0 	bl	8000c86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40001000 	.word	0x40001000
 8000754:	40021000 	.word	0x40021000

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <NMI_Handler+0x4>

08000760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <MemManage_Handler+0x4>

08000770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <UsageFault_Handler+0x4>

08000780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ae:	f000 f92f 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <TIM6_DAC_IRQHandler+0x10>)
 80007be:	f003 fbbb 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000184 	.word	0x20000184

080007cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <OTG_FS_IRQHandler+0x10>)
 80007d2:	f000 fd5b 	bl	800128c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000174c 	.word	0x2000174c

080007e0 <_read>:
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e00a      	b.n	8000808 <_read+0x28>
 80007f2:	f3af 8000 	nop.w
 80007f6:	4601      	mov	r1, r0
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf0      	blt.n	80007f2 <_read+0x12>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_close>:
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_fstat>:
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	2300      	movs	r3, #0
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <_isatty>:
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	2301      	movs	r3, #1
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <_lseek>:
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	2300      	movs	r3, #0
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <_sbrk>:
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
 80008b4:	f008 f9ee 	bl	8008c94 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20050000 	.word	0x20050000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	200001e0 	.word	0x200001e0
 80008ec:	20001fa0 	.word	0x20001fa0

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800094c <LoopForever+0x2>
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopForever+0x6>)
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopForever+0xa>)
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopForever+0xe>)
 8000922:	2300      	movs	r3, #0
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:
 8000926:	58d4      	ldr	r4, [r2, r3]
 8000928:	50c4      	str	r4, [r0, r3]
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:
 800092c:	18c4      	adds	r4, r0, r3
 800092e:	428c      	cmp	r4, r1
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopForever+0x12>)
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopForever+0x16>)
 8000936:	2300      	movs	r3, #0
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:
 800093e:	42a2      	cmp	r2, r4
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>
 8000942:	f008 f9ad 	bl	8008ca0 <__libc_init_array>
 8000946:	f7ff fcc3 	bl	80002d0 <main>

0800094a <LoopForever>:
 800094a:	e7fe      	b.n	800094a <LoopForever>
 800094c:	20050000 	.word	0x20050000
 8000950:	20000000 	.word	0x20000000
 8000954:	20000168 	.word	0x20000168
 8000958:	08009bdc 	.word	0x08009bdc
 800095c:	20000168 	.word	0x20000168
 8000960:	20001f9c 	.word	0x20001f9c

08000964 <ADC1_2_IRQHandler>:
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>

08000966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f961 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f80e 	bl	8000998 <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e001      	b.n	800098c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000988:	f7ff fe9c 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d023      	beq.n	80009f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <HAL_InitTick+0x70>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f96d 	bl	8000ca2 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10f      	bne.n	80009ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d809      	bhi.n	80009e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f937 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_InitTick+0x74>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e001      	b.n	80009f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200001e4 	.word	0x200001e4

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200001e4 	.word	0x200001e4

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	@ (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	@ (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	@ (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	@ 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	@ 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e166      	b.n	8000f9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8158 	beq.w	8000f94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x40>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 0201 	and.w	r2, r3, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	6939      	ldr	r1, [r7, #16]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80b2 	beq.w	8000f94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b61      	ldr	r3, [pc, #388]	@ (8000fb8 <HAL_GPIO_Init+0x2fc>)
 8000e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e34:	4a60      	ldr	r2, [pc, #384]	@ (8000fb8 <HAL_GPIO_Init+0x2fc>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb8 <HAL_GPIO_Init+0x2fc>)
 8000e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e48:	4a5c      	ldr	r2, [pc, #368]	@ (8000fbc <HAL_GPIO_Init+0x300>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e72:	d02b      	beq.n	8000ecc <HAL_GPIO_Init+0x210>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a52      	ldr	r2, [pc, #328]	@ (8000fc0 <HAL_GPIO_Init+0x304>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d025      	beq.n	8000ec8 <HAL_GPIO_Init+0x20c>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a51      	ldr	r2, [pc, #324]	@ (8000fc4 <HAL_GPIO_Init+0x308>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d01f      	beq.n	8000ec4 <HAL_GPIO_Init+0x208>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a50      	ldr	r2, [pc, #320]	@ (8000fc8 <HAL_GPIO_Init+0x30c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4f      	ldr	r2, [pc, #316]	@ (8000fcc <HAL_GPIO_Init+0x310>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x200>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd0 <HAL_GPIO_Init+0x314>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1fc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd4 <HAL_GPIO_Init+0x318>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1f8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd8 <HAL_GPIO_Init+0x31c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1f4>
 8000eac:	2307      	movs	r3, #7
 8000eae:	e00e      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	e00c      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	e00a      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000eb8:	2305      	movs	r3, #5
 8000eba:	e008      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x212>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ede:	4937      	ldr	r1, [pc, #220]	@ (8000fbc <HAL_GPIO_Init+0x300>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eec:	4b3b      	ldr	r3, [pc, #236]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f10:	4a32      	ldr	r2, [pc, #200]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f16:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f3a:	4a28      	ldr	r2, [pc, #160]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f64:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f8e:	4a13      	ldr	r2, [pc, #76]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f ae91 	bne.w	8000ccc <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48001400 	.word	0x48001400
 8000fd4:	48001800 	.word	0x48001800
 8000fd8:	48001c00 	.word	0x48001c00
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e101      	b.n	8001226 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f006 ff70 	bl	8007f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fac9 	bl	80045e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7c1a      	ldrb	r2, [r3, #16]
 800105c:	f88d 2000 	strb.w	r2, [sp]
 8001060:	3304      	adds	r3, #4
 8001062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001064:	f003 f9e4 	bl	8004430 <USB_CoreInit>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0d5      	b.n	8001226 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fac1 	bl	8004608 <USB_SetCurrentMode>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0c6      	b.n	8001226 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e04a      	b.n	8001134 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3315      	adds	r3, #21
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3314      	adds	r3, #20
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	b298      	uxth	r0, r3
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	332e      	adds	r3, #46	@ 0x2e
 80010da:	4602      	mov	r2, r0
 80010dc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3318      	adds	r3, #24
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	331c      	adds	r3, #28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3320      	adds	r3, #32
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3324      	adds	r3, #36	@ 0x24
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3af      	bcc.n	800109e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e044      	b.n	80011ce <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3b5      	bcc.n	8001144 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7c1a      	ldrb	r2, [r3, #16]
 80011e0:	f88d 2000 	strb.w	r2, [sp]
 80011e4:	3304      	adds	r3, #4
 80011e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e8:	f003 fa5a 	bl	80046a0 <USB_DevInit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e013      	b.n	8001226 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7b1b      	ldrb	r3, [r3, #12]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f001 f86d 	bl	80022f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fa11 	bl	8005646 <USB_DevDisconnect>

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_PCD_Start+0x1c>
 8001246:	2302      	movs	r3, #2
 8001248:	e01c      	b.n	8001284 <HAL_PCD_Start+0x56>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b5b      	ldrb	r3, [r3, #13]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d105      	bne.n	8001266 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800125e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 f9aa 	bl	80045c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f9c5 	bl	8005604 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b08d      	sub	sp, #52	@ 0x34
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fa83 	bl	80057ae <USB_GetMode>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 8481 	bne.w	8001bb2 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 f9e7 	bl	8005688 <USB_ReadInterrupts>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8477 	beq.w	8001bb0 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 f9d4 	bl	8005688 <USB_ReadInterrupts>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d107      	bne.n	80012fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f002 0202 	and.w	r2, r2, #2
 80012f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 f9c2 	bl	8005688 <USB_ReadInterrupts>
 8001304:	4603      	mov	r3, r0
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b10      	cmp	r3, #16
 800130c:	d161      	bne.n	80013d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0210 	bic.w	r2, r2, #16
 800131c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f003 020f 	and.w	r2, r3, #15
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	0c5b      	lsrs	r3, r3, #17
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	2b02      	cmp	r3, #2
 8001348:	d124      	bne.n	8001394 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d035      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	6a38      	ldr	r0, [r7, #32]
 800136a:	f003 fff9 	bl	8005360 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	441a      	add	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138c:	441a      	add	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	e016      	b.n	80013c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	0c5b      	lsrs	r3, r3, #17
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	2b06      	cmp	r3, #6
 800139e:	d110      	bne.n	80013c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013a6:	2208      	movs	r2, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	6a38      	ldr	r0, [r7, #32]
 80013ac:	f003 ffd8 	bl	8005360 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013bc:	441a      	add	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0210 	orr.w	r2, r2, #16
 80013d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 f956 	bl	8005688 <USB_ReadInterrupts>
 80013dc:	4603      	mov	r3, r0
 80013de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013e6:	f040 80a7 	bne.w	8001538 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 f95b 	bl	80056ae <USB_ReadDevAllOutEpInterrupt>
 80013f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013fa:	e099      	b.n	8001530 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 808e 	beq.w	8001524 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f004 f97f 	bl	8005716 <USB_ReadDevOutEPInterrupt>
 8001418:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	015a      	lsls	r2, r3, #5
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	4413      	add	r3, r2
 800142c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001430:	461a      	mov	r2, r3
 8001432:	2301      	movs	r3, #1
 8001434:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fe81 	bl	8002140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	4413      	add	r3, r2
 8001450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001454:	461a      	mov	r2, r3
 8001456:	2308      	movs	r3, #8
 8001458:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800145a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 febd 	bl	80021dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001478:	461a      	mov	r2, r3
 800147a:	2310      	movs	r3, #16
 800147c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d030      	beq.n	80014ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001490:	2b80      	cmp	r3, #128	@ 0x80
 8001492:	d109      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	3304      	adds	r3, #4
 80014bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2200      	movs	r2, #0
 80014ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f006 fe76 	bl	80081c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2302      	movs	r3, #2
 80014e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	015a      	lsls	r2, r3, #5
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001500:	461a      	mov	r2, r3
 8001502:	2320      	movs	r3, #32
 8001504:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800151c:	461a      	mov	r2, r3
 800151e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001522:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	3301      	adds	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800152a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f af62 	bne.w	80013fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f004 f8a3 	bl	8005688 <USB_ReadInterrupts>
 8001542:	4603      	mov	r3, r0
 8001544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001548:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800154c:	f040 80a4 	bne.w	8001698 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f8c4 	bl	80056e2 <USB_ReadDevAllInEpInterrupt>
 800155a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001560:	e096      	b.n	8001690 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 808b 	beq.w	8001684 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f004 f8ea 	bl	8005752 <USB_ReadDevInEPInterrupt>
 800157e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d020      	beq.n	80015cc <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	2201      	movs	r2, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800159e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69f9      	ldr	r1, [r7, #28]
 80015a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015aa:	4013      	ands	r3, r2
 80015ac:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ba:	461a      	mov	r2, r3
 80015bc:	2301      	movs	r3, #1
 80015be:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f006 fd67 	bl	800809a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e2:	461a      	mov	r2, r3
 80015e4:	2308      	movs	r3, #8
 80015e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d008      	beq.n	8001604 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	015a      	lsls	r2, r3, #5
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015fe:	461a      	mov	r2, r3
 8001600:	2310      	movs	r3, #16
 8001602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800161a:	461a      	mov	r2, r3
 800161c:	2340      	movs	r3, #64	@ 0x40
 800161e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d023      	beq.n	8001672 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800162a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800162c:	6a38      	ldr	r0, [r7, #32]
 800162e:	f003 f97f 	bl	8004930 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	3310      	adds	r3, #16
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	3304      	adds	r3, #4
 8001644:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	78db      	ldrb	r3, [r3, #3]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2200      	movs	r2, #0
 8001652:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f006 fdc4 	bl	80081e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800166c:	461a      	mov	r2, r3
 800166e:	2302      	movs	r3, #2
 8001670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800167c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fcd6 	bl	8002030 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	3301      	adds	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800168a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001692:	2b00      	cmp	r3, #0
 8001694:	f47f af65 	bne.w	8001562 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fff3 	bl	8005688 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016ac:	d122      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d108      	bne.n	80016de <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016d4:	2100      	movs	r1, #0
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f006 fff8 	bl	80086cc <HAL_PCDEx_LPM_Callback>
 80016dc:	e002      	b.n	80016e4 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f006 fd48 	bl	8008174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 ffc5 	bl	8005688 <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001708:	d112      	bne.n	8001730 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f006 fd04 	bl	8008128 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800172e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f003 ffa7 	bl	8005688 <USB_ReadInterrupts>
 800173a:	4603      	mov	r3, r0
 800173c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001740:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001744:	d121      	bne.n	800178a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001754:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800175c:	2b00      	cmp	r3, #0
 800175e:	d111      	bne.n	8001784 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	f003 020f 	and.w	r2, r3, #15
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800177a:	2101      	movs	r1, #1
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f006 ffa5 	bl	80086cc <HAL_PCDEx_LPM_Callback>
 8001782:	e002      	b.n	800178a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f006 fccf 	bl	8008128 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 ff7a 	bl	8005688 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800179e:	f040 80b6 	bne.w	800190e <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2110      	movs	r1, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 f8b7 	bl	8004930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c6:	e046      	b.n	8001856 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017d4:	461a      	mov	r2, r3
 80017d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ec:	0151      	lsls	r1, r2, #5
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	440a      	add	r2, r1
 80017f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001808:	461a      	mov	r2, r3
 800180a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800180e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001820:	0151      	lsls	r1, r2, #5
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	440a      	add	r2, r1
 8001826:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800182a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800182e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001840:	0151      	lsls	r1, r2, #5
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	440a      	add	r2, r1
 8001846:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800184a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800184e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	3301      	adds	r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	461a      	mov	r2, r3
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	4293      	cmp	r3, r2
 8001860:	d3b2      	bcc.n	80017c8 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001870:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001874:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7bdb      	ldrb	r3, [r3, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800188e:	f043 030b 	orr.w	r3, r3, #11
 8001892:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a4:	f043 030b 	orr.w	r3, r3, #11
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	e015      	b.n	80018d8 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018be:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d2:	f043 030b 	orr.w	r3, r3, #11
 80018d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f003 ff89 	bl	8005810 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800190c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f003 feb8 	bl	8005688 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800191e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001922:	d123      	bne.n	800196c <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 ff4e 	bl	80057ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f875 	bl	8004a22 <USB_GetDevSpeed>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	f001 fc10 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8001948:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800194e:	461a      	mov	r2, r3
 8001950:	4620      	mov	r0, r4
 8001952:	f002 fd9b 	bl	800448c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 fbc7 	bl	80080ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fe89 	bl	8005688 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b08      	cmp	r3, #8
 800197e:	d10a      	bne.n	8001996 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f006 fba4 	bl	80080ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f002 0208 	and.w	r2, r2, #8
 8001994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fe74 	bl	8005688 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a6:	2b80      	cmp	r3, #128	@ 0x80
 80019a8:	d123      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b6:	2301      	movs	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ba:	e014      	b.n	80019e6 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 faf7 	bl	8001fce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	3301      	adds	r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	791b      	ldrb	r3, [r3, #4]
 80019ea:	461a      	mov	r2, r3
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d3e4      	bcc.n	80019bc <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fe46 	bl	8005688 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a06:	d13c      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a08:	2301      	movs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0c:	e02b      	b.n	8001a66 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d115      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da12      	bge.n	8001a60 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3317      	adds	r3, #23
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fab7 	bl	8001fce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	3301      	adds	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	791b      	ldrb	r3, [r3, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d3cd      	bcc.n	8001a0e <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fdfe 	bl	8005688 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a96:	d156      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a98:	2301      	movs	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9c:	e045      	b.n	8001b2a <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d12e      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da2b      	bge.n	8001b24 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ad8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d121      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10a      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b20:	6053      	str	r3, [r2, #4]
            break;
 8001b22:	e008      	b.n	8001b36 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	3301      	adds	r3, #1
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	791b      	ldrb	r3, [r3, #4]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d3b3      	bcc.n	8001a9e <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fd9c 	bl	8005688 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5a:	d10a      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f006 fb55 	bl	800820c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fd86 	bl	8005688 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d115      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f006 fb45 	bl	8008228 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	e000      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x926>
      return;
 8001bb0:	bf00      	nop
    }
  }
}
 8001bb2:	3734      	adds	r7, #52	@ 0x34
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_SetAddress+0x1a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e012      	b.n	8001bf8 <HAL_PCD_SetAddress+0x40>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fce5 	bl	80055b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	70fb      	strb	r3, [r7, #3]
 8001c12:	460b      	mov	r3, r1
 8001c14:	803b      	strh	r3, [r7, #0]
 8001c16:	4613      	mov	r3, r2
 8001c18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da0f      	bge.n	8001c46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3310      	adds	r3, #16
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	705a      	strb	r2, [r3, #1]
 8001c44:	e00f      	b.n	8001c66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 020f 	and.w	r2, r3, #15
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	78ba      	ldrb	r2, [r7, #2]
 8001c80:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	785b      	ldrb	r3, [r3, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d004      	beq.n	8001c94 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c94:	78bb      	ldrb	r3, [r7, #2]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d102      	bne.n	8001ca0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_PCD_EP_Open+0xae>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e00e      	b.n	8001ccc <HAL_PCD_EP_Open+0xcc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68f9      	ldr	r1, [r7, #12]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fecf 	bl	8004a60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001cca:	7afb      	ldrb	r3, [r7, #11]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da0f      	bge.n	8001d08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	3310      	adds	r3, #16
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	705a      	strb	r2, [r3, #1]
 8001d06:	e00f      	b.n	8001d28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 020f 	and.w	r2, r3, #15
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_PCD_EP_Close+0x6e>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e00e      	b.n	8001d60 <HAL_PCD_EP_Close+0x8c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 ff0d 	bl	8004b70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	460b      	mov	r3, r1
 8001d76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	7afb      	ldrb	r3, [r7, #11]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2200      	movs	r2, #0
 8001da8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6979      	ldr	r1, [r7, #20]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 ffb3 	bl	8004d28 <USB_EPStartXfer>

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	f003 020f 	and.w	r2, r3, #15
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3310      	adds	r3, #16
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 ff6a 	bl	8004d28 <USB_EPStartXfer>

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	7912      	ldrb	r2, [r2, #4]
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e04e      	b.n	8001f1a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da0f      	bge.n	8001ea4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3310      	adds	r3, #16
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	705a      	strb	r2, [r3, #1]
 8001ea2:	e00d      	b.n	8001ec0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_PCD_EP_SetStall+0x82>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e01c      	b.n	8001f1a <HAL_PCD_EP_SetStall+0xbc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fa8e 	bl	8005410 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f003 fc80 	bl	8005810 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	7912      	ldrb	r2, [r2, #4]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e042      	b.n	8001fc6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da0f      	bge.n	8001f68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3310      	adds	r3, #16
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	705a      	strb	r2, [r3, #1]
 8001f66:	e00f      	b.n	8001f88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3304      	adds	r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_ClrStall+0x86>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00e      	b.n	8001fc6 <HAL_PCD_EP_ClrStall+0xa4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fa98 	bl	80054ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da0c      	bge.n	8001ffc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	e00c      	b.n	8002016 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	3304      	adds	r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68f9      	ldr	r1, [r7, #12]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 f8bb 	bl	8005198 <USB_EPStopXfer>
 8002022:	4603      	mov	r3, r0
 8002024:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002026:	7afb      	ldrb	r3, [r7, #11]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3310      	adds	r3, #16
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d901      	bls.n	8002068 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e067      	b.n	8002138 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d902      	bls.n	8002084 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3303      	adds	r3, #3
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208c:	e026      	b.n	80020dc <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d902      	bls.n	80020aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3303      	adds	r3, #3
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f003 f914 	bl	80052ec <USB_WritePacket>

    ep->xfer_buff  += len;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	441a      	add	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	441a      	add	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d809      	bhi.n	8002106 <PCD_WriteEmptyTxFifo+0xd6>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d203      	bcs.n	8002106 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1c3      	bne.n	800208e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	429a      	cmp	r2, r3
 8002110:	d811      	bhi.n	8002136 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	2201      	movs	r2, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	43db      	mvns	r3, r3
 800212c:	6939      	ldr	r1, [r7, #16]
 800212e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002132:	4013      	ands	r3, r2
 8002134:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	333c      	adds	r3, #60	@ 0x3c
 8002158:	3304      	adds	r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a19      	ldr	r2, [pc, #100]	@ (80021d8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d124      	bne.n	80021c0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800218c:	461a      	mov	r2, r3
 800218e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002192:	6093      	str	r3, [r2, #8]
 8002194:	e01a      	b.n	80021cc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ac:	461a      	mov	r2, r3
 80021ae:	2320      	movs	r3, #32
 80021b0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f005 ff53 	bl	8008064 <HAL_PCD_DataOutStageCallback>
 80021be:	e005      	b.n	80021cc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f005 ff4c 	bl	8008064 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	4f54310a 	.word	0x4f54310a

080021dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	333c      	adds	r3, #60	@ 0x3c
 80021f4:	3304      	adds	r3, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <PCD_EP_OutSetupPacket_int+0x64>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d90e      	bls.n	8002230 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002228:	461a      	mov	r2, r3
 800222a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800222e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f005 ff05 	bl	8008040 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	4f54300a 	.word	0x4f54300a

08002244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
 8002250:	4613      	mov	r3, r2
 8002252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002262:	883b      	ldrh	r3, [r7, #0]
 8002264:	0419      	lsls	r1, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	430a      	orrs	r2, r1
 800226e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002270:	e028      	b.n	80022c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e00d      	b.n	80022a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3340      	adds	r3, #64	@ 0x40
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	3301      	adds	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3ec      	bcc.n	8002286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022ac:	883b      	ldrh	r3, [r7, #0]
 80022ae:	0418      	lsls	r0, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	4302      	orrs	r2, r0
 80022bc:	3340      	adds	r3, #64	@ 0x40
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002326:	f043 0303 	orr.w	r3, r3, #3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002340:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234c:	d102      	bne.n	8002354 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800234e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002352:	e00b      	b.n	800236c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002362:	d102      	bne.n	800236a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002368:	e000      	b.n	800236c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800236a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d141      	bne.n	800240e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800238a:	4b4b      	ldr	r3, [pc, #300]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002396:	d131      	bne.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002398:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800239e:	4a46      	ldr	r2, [pc, #280]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a8:	4b43      	ldr	r3, [pc, #268]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023b0:	4a41      	ldr	r2, [pc, #260]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023b8:	4b40      	ldr	r3, [pc, #256]	@ (80024bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2232      	movs	r2, #50	@ 0x32
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	4a3f      	ldr	r2, [pc, #252]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	0c9b      	lsrs	r3, r3, #18
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ce:	e002      	b.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d6:	4b38      	ldr	r3, [pc, #224]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e2:	d102      	bne.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f2      	bne.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ea:	4b33      	ldr	r3, [pc, #204]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f6:	d158      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e057      	b.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023fc:	4b2e      	ldr	r3, [pc, #184]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002402:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800240c:	e04d      	b.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002414:	d141      	bne.n	800249a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002416:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002422:	d131      	bne.n	8002488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002424:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800242a:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002434:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800243c:	4a1e      	ldr	r2, [pc, #120]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002444:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2232      	movs	r2, #50	@ 0x32
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	4a1c      	ldr	r2, [pc, #112]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	0c9b      	lsrs	r3, r3, #18
 8002456:	3301      	adds	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245a:	e002      	b.n	8002462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3b01      	subs	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800246e:	d102      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f2      	bne.n	800245c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002482:	d112      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e011      	b.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002494:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002498:	e007      	b.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800249a:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024a2:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40007000 	.word	0x40007000
 80024bc:	20000000 	.word	0x20000000
 80024c0:	431bde83 	.word	0x431bde83

080024c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a04      	ldr	r2, [pc, #16]	@ (80024e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d2:	6053      	str	r3, [r2, #4]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40007000 	.word	0x40007000

080024e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f000 bc68 	b.w	8002dc8 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f8:	4b97      	ldr	r3, [pc, #604]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002502:	4b95      	ldr	r3, [pc, #596]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80e6 	beq.w	80026e6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_RCC_OscConfig+0x4c>
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	f040 808d 	bne.w	8002642 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b01      	cmp	r3, #1
 800252c:	f040 8089 	bne.w	8002642 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002530:	4b89      	ldr	r3, [pc, #548]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_RCC_OscConfig+0x66>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f000 bc3f 	b.w	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800254e:	4b82      	ldr	r3, [pc, #520]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_RCC_OscConfig+0x80>
 800255a:	4b7f      	ldr	r3, [pc, #508]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002562:	e005      	b.n	8002570 <HAL_RCC_OscConfig+0x8c>
 8002564:	4b7c      	ldr	r3, [pc, #496]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002570:	4293      	cmp	r3, r2
 8002572:	d224      	bcs.n	80025be <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fe01 	bl	8003180 <RCC_SetFlashLatencyFromMSIRange>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	f000 bc1f 	b.w	8002dc8 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258a:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a72      	ldr	r2, [pc, #456]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b70      	ldr	r3, [pc, #448]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	496d      	ldr	r1, [pc, #436]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	4968      	ldr	r1, [pc, #416]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e025      	b.n	800260a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025be:	4b66      	ldr	r3, [pc, #408]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	4960      	ldr	r1, [pc, #384]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	495b      	ldr	r1, [pc, #364]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fdc0 	bl	8003180 <RCC_SetFlashLatencyFromMSIRange>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e3de      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800260a:	f000 fd21 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	4950      	ldr	r1, [pc, #320]	@ (800275c <HAL_RCC_OscConfig+0x278>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	4a4e      	ldr	r2, [pc, #312]	@ (8002760 <HAL_RCC_OscConfig+0x27c>)
 8002628:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800262a:	4b4e      	ldr	r3, [pc, #312]	@ (8002764 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe f9b2 	bl	8000998 <HAL_InitTick>
 8002634:	4603      	mov	r3, r0
 8002636:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d052      	beq.n	80026e4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	e3c2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d032      	beq.n	80026b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800264a:	4b43      	ldr	r3, [pc, #268]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a42      	ldr	r2, [pc, #264]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002656:	f7fe f9ef 	bl	8000a38 <HAL_GetTick>
 800265a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265e:	f7fe f9eb 	bl	8000a38 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e3ab      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002670:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a35      	ldr	r2, [pc, #212]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b33      	ldr	r3, [pc, #204]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	4930      	ldr	r1, [pc, #192]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269a:	4b2f      	ldr	r3, [pc, #188]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	492b      	ldr	r1, [pc, #172]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	e01a      	b.n	80026e6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026b0:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a28      	ldr	r2, [pc, #160]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026bc:	f7fe f9bc 	bl	8000a38 <HAL_GetTick>
 80026c0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c4:	f7fe f9b8 	bl	8000a38 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e378      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1e0>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d073      	beq.n	80027da <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x220>
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d10e      	bne.n	800271c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d10b      	bne.n	800271c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d063      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2f4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d15f      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e355      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002724:	d106      	bne.n	8002734 <HAL_RCC_OscConfig+0x250>
 8002726:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a0b      	ldr	r2, [pc, #44]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e025      	b.n	8002780 <HAL_RCC_OscConfig+0x29c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800273c:	d114      	bne.n	8002768 <HAL_RCC_OscConfig+0x284>
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a02      	ldr	r2, [pc, #8]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e013      	b.n	8002780 <HAL_RCC_OscConfig+0x29c>
 8002758:	40021000 	.word	0x40021000
 800275c:	08009b58 	.word	0x08009b58
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004
 8002768:	4b8f      	ldr	r3, [pc, #572]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a8e      	ldr	r2, [pc, #568]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b8c      	ldr	r3, [pc, #560]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a8b      	ldr	r2, [pc, #556]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe f956 	bl	8000a38 <HAL_GetTick>
 800278c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe f952 	bl	8000a38 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e312      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a2:	4b81      	ldr	r3, [pc, #516]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x2ac>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe f942 	bl	8000a38 <HAL_GetTick>
 80027b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe f93e 	bl	8000a38 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e2fe      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ca:	4b77      	ldr	r3, [pc, #476]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2d4>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d060      	beq.n	80028a8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x314>
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d116      	bne.n	8002826 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	4b6b      	ldr	r3, [pc, #428]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x32c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e2db      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b65      	ldr	r3, [pc, #404]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	4962      	ldr	r1, [pc, #392]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	e040      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282e:	4b5e      	ldr	r3, [pc, #376]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5d      	ldr	r2, [pc, #372]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe f8fd 	bl	8000a38 <HAL_GetTick>
 800283e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe f8f9 	bl	8000a38 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2b9      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b54      	ldr	r3, [pc, #336]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	494e      	ldr	r1, [pc, #312]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e018      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b4c      	ldr	r3, [pc, #304]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4b      	ldr	r2, [pc, #300]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe f8d9 	bl	8000a38 <HAL_GetTick>
 8002886:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe f8d5 	bl	8000a38 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e295      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800289c:	4b42      	ldr	r3, [pc, #264]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8082 	beq.w	80029ba <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d05f      	beq.n	800297e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80028be:	4b3a      	ldr	r3, [pc, #232]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d037      	beq.n	8002944 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e26d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01b      	beq.n	800292e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80028f6:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fc:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002906:	f7fe f897 	bl	8000a38 <HAL_GetTick>
 800290a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe f893 	bl	8000a38 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b11      	cmp	r3, #17
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e253      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002920:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ef      	bne.n	800290e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002934:	f023 0210 	bic.w	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	491a      	ldr	r1, [pc, #104]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294a:	4a17      	ldr	r2, [pc, #92]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe f870 	bl	8000a38 <HAL_GetTick>
 8002958:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe f86c 	bl	8000a38 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b11      	cmp	r3, #17
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e22c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <HAL_RCC_OscConfig+0x478>
 800297c:	e01d      	b.n	80029ba <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002984:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7fe f853 	bl	8000a38 <HAL_GetTick>
 8002992:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe f84f 	bl	8000a38 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b11      	cmp	r3, #17
 80029a2:	d903      	bls.n	80029ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e20f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
 80029a8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ac:	4b83      	ldr	r3, [pc, #524]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ed      	bne.n	8002996 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80bd 	beq.w	8002b42 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10e      	bne.n	80029f8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4b78      	ldr	r3, [pc, #480]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	4a77      	ldr	r2, [pc, #476]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e6:	4b75      	ldr	r3, [pc, #468]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f8:	4b71      	ldr	r3, [pc, #452]	@ (8002bc0 <HAL_RCC_OscConfig+0x6dc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d118      	bne.n	8002a36 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a04:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc0 <HAL_RCC_OscConfig+0x6dc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6d      	ldr	r2, [pc, #436]	@ (8002bc0 <HAL_RCC_OscConfig+0x6dc>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a10:	f7fe f812 	bl	8000a38 <HAL_GetTick>
 8002a14:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a18:	f7fe f80e 	bl	8000a38 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1ce      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2a:	4b65      	ldr	r3, [pc, #404]	@ (8002bc0 <HAL_RCC_OscConfig+0x6dc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d02c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002a42:	4b5e      	ldr	r3, [pc, #376]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a54:	4959      	ldr	r1, [pc, #356]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d010      	beq.n	8002a8a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a68:	4b54      	ldr	r3, [pc, #336]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	4a53      	ldr	r2, [pc, #332]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a78:	4b50      	ldr	r3, [pc, #320]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	4a4f      	ldr	r2, [pc, #316]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a88:	e018      	b.n	8002abc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a90:	4a4a      	ldr	r2, [pc, #296]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a9a:	e00f      	b.n	8002abc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a9c:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa2:	4a46      	ldr	r2, [pc, #280]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aac:	4b43      	ldr	r3, [pc, #268]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	4a42      	ldr	r2, [pc, #264]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d016      	beq.n	8002af2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fd ffb8 	bl	8000a38 <HAL_GetTick>
 8002ac8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fd ffb4 	bl	8000a38 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e172      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae2:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ed      	beq.n	8002acc <HAL_RCC_OscConfig+0x5e8>
 8002af0:	e01d      	b.n	8002b2e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7fd ffa1 	bl	8000a38 <HAL_GetTick>
 8002af6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fd ff9d 	bl	8000a38 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e15b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b10:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ed      	bne.n	8002afa <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b1e:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b24:	4a25      	ldr	r2, [pc, #148]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	4a20      	ldr	r2, [pc, #128]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d041      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b5c:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fd ff67 	bl	8000a38 <HAL_GetTick>
 8002b6a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b6e:	f7fd ff63 	bl	8000a38 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e123      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ef      	beq.n	8002b6e <HAL_RCC_OscConfig+0x68a>
 8002b8e:	e020      	b.n	8002bd2 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b96:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x6d8>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fd ff4a 	bl	8000a38 <HAL_GetTick>
 8002ba4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ba6:	e00d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba8:	f7fd ff46 	bl	8000a38 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d906      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e106      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bc4:	4b82      	ldr	r3, [pc, #520]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ea      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80f5 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	f040 80cb 	bne.w	8002d7c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002be6:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d12c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c04:	3b01      	subs	r3, #1
 8002c06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d123      	bne.n	8002c54 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d11b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d113      	bne.n	8002c54 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d06d      	beq.n	8002d30 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d068      	beq.n	8002d2c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c66:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0a8      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c76:	4b56      	ldr	r3, [pc, #344]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a55      	ldr	r2, [pc, #340]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002c7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c82:	f7fd fed9 	bl	8000a38 <HAL_GetTick>
 8002c86:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fd fed5 	bl	8000a38 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e095      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca8:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b49      	ldr	r3, [pc, #292]	@ (8002dd4 <HAL_RCC_OscConfig+0x8f0>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cb8:	3a01      	subs	r2, #1
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cc2:	0212      	lsls	r2, r2, #8
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cca:	0852      	lsrs	r2, r2, #1
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	0552      	lsls	r2, r2, #21
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cd6:	0852      	lsrs	r2, r2, #1
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0652      	lsls	r2, r2, #25
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ce2:	06d2      	lsls	r2, r2, #27
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	493a      	ldr	r1, [pc, #232]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cec:	4b38      	ldr	r3, [pc, #224]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a37      	ldr	r2, [pc, #220]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf8:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a34      	ldr	r2, [pc, #208]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d04:	f7fd fe98 	bl	8000a38 <HAL_GetTick>
 8002d08:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fd fe94 	bl	8000a38 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e054      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d2a:	e04c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e04b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d144      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a23      	ldr	r2, [pc, #140]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d48:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a20      	ldr	r2, [pc, #128]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d54:	f7fd fe70 	bl	8000a38 <HAL_GetTick>
 8002d58:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fd fe6c 	bl	8000a38 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e02c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	4b18      	ldr	r3, [pc, #96]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x878>
 8002d7a:	e024      	b.n	8002dc6 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d01f      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002d88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fd fe53 	bl	8000a38 <HAL_GetTick>
 8002d92:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fd fe4f 	bl	8000a38 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da8:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002db4:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	4905      	ldr	r1, [pc, #20]	@ (8002dd0 <HAL_RCC_OscConfig+0x8ec>)
 8002dba:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <HAL_RCC_OscConfig+0x8f4>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
 8002dc0:	e001      	b.n	8002dc6 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3728      	adds	r7, #40	@ 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	019d800c 	.word	0x019d800c
 8002dd8:	feeefffc 	.word	0xfeeefffc

08002ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e11d      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b90      	ldr	r3, [pc, #576]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b8d      	ldr	r3, [pc, #564]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	498b      	ldr	r1, [pc, #556]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b89      	ldr	r3, [pc, #548]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e105      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4b81      	ldr	r3, [pc, #516]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d908      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b7e      	ldr	r3, [pc, #504]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	497b      	ldr	r1, [pc, #492]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d079      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d11e      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	4b75      	ldr	r3, [pc, #468]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0dc      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e76:	f000 f9dd 	bl	8003234 <RCC_GetSysClockFreqFromPLLSource>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4a70      	ldr	r2, [pc, #448]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d946      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e82:	4b6e      	ldr	r3, [pc, #440]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d140      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e96:	4a69      	ldr	r2, [pc, #420]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e035      	b.n	8002f10 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eac:	4b63      	ldr	r3, [pc, #396]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d115      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b9      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0ad      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed4:	4b59      	ldr	r3, [pc, #356]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0a5      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ee4:	f000 f8b4 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4a55      	ldr	r2, [pc, #340]	@ (8003040 <HAL_RCC_ClockConfig+0x264>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d90f      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ef0:	4b52      	ldr	r3, [pc, #328]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002efc:	4b4f      	ldr	r3, [pc, #316]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f04:	4a4d      	ldr	r2, [pc, #308]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f0a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f10:	4b4a      	ldr	r3, [pc, #296]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 0203 	bic.w	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4947      	ldr	r1, [pc, #284]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f22:	f7fd fd89 	bl	8000a38 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2a:	f7fd fd85 	bl	8000a38 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e077      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	4b3e      	ldr	r3, [pc, #248]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 020c 	and.w	r2, r3, #12
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d1eb      	bne.n	8002f2a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b80      	cmp	r3, #128	@ 0x80
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f58:	4b38      	ldr	r3, [pc, #224]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f62:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b31      	ldr	r3, [pc, #196]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d208      	bcs.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	492b      	ldr	r1, [pc, #172]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f92:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d210      	bcs.n	8002fc2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 020f 	bic.w	r2, r3, #15
 8002fa8:	4923      	ldr	r1, [pc, #140]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb0:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e036      	b.n	8003030 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fce:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4918      	ldr	r1, [pc, #96]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d009      	beq.n	8003000 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fec:	4b13      	ldr	r3, [pc, #76]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4910      	ldr	r1, [pc, #64]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003000:	f000 f826 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <HAL_RCC_ClockConfig+0x260>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	490c      	ldr	r1, [pc, #48]	@ (8003044 <HAL_RCC_ClockConfig+0x268>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	4a0a      	ldr	r2, [pc, #40]	@ (8003048 <HAL_RCC_ClockConfig+0x26c>)
 800301e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003020:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <HAL_RCC_ClockConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fcb7 	bl	8000998 <HAL_InitTick>
 800302a:	4603      	mov	r3, r0
 800302c:	73fb      	strb	r3, [r7, #15]

  return status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40022000 	.word	0x40022000
 800303c:	40021000 	.word	0x40021000
 8003040:	04c4b400 	.word	0x04c4b400
 8003044:	08009b58 	.word	0x08009b58
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	@ 0x24
 8003054:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305e:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003068:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x34>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b0c      	cmp	r3, #12
 800307c:	d121      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d11e      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003084:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003090:	4b31      	ldr	r3, [pc, #196]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	e005      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030ac:	4a2b      	ldr	r2, [pc, #172]	@ (800315c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10d      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c8:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	e004      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d4:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x114>)
 80030d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d134      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030de:	4b1e      	ldr	r3, [pc, #120]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d003      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d003      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0xac>
 80030f4:	e005      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x110>)
 80030f8:	617b      	str	r3, [r7, #20]
      break;
 80030fa:	e005      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x114>)
 80030fe:	617b      	str	r3, [r7, #20]
      break;
 8003100:	e002      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003108:	4b13      	ldr	r3, [pc, #76]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3301      	adds	r3, #1
 8003114:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003116:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	fb03 f202 	mul.w	r2, r3, r2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800312e:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	0e5b      	lsrs	r3, r3, #25
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	3301      	adds	r3, #1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003148:	69bb      	ldr	r3, [r7, #24]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	@ 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	08009b68 	.word	0x08009b68
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200

08003168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800318c:	4b27      	ldr	r3, [pc, #156]	@ (800322c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003198:	f7ff f8d0 	bl	800233c <HAL_PWREx_GetVoltageRange>
 800319c:	6178      	str	r0, [r7, #20]
 800319e:	e014      	b.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031a0:	4b22      	ldr	r3, [pc, #136]	@ (800322c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	4a21      	ldr	r2, [pc, #132]	@ (800322c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ac:	4b1f      	ldr	r3, [pc, #124]	@ (800322c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031b8:	f7ff f8c0 	bl	800233c <HAL_PWREx_GetVoltageRange>
 80031bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031be:	4b1b      	ldr	r3, [pc, #108]	@ (800322c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d0:	d10b      	bne.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b80      	cmp	r3, #128	@ 0x80
 80031d6:	d913      	bls.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2ba0      	cmp	r3, #160	@ 0xa0
 80031dc:	d902      	bls.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031de:	2302      	movs	r3, #2
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e00d      	b.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e4:	2301      	movs	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e00a      	b.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80031ee:	d902      	bls.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031f0:	2302      	movs	r3, #2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	e004      	b.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b70      	cmp	r3, #112	@ 0x70
 80031fa:	d101      	bne.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031fc:	2301      	movs	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003200:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 020f 	bic.w	r2, r3, #15
 8003208:	4909      	ldr	r1, [pc, #36]	@ (8003230 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003210:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	429a      	cmp	r2, r3
 800321c:	d001      	beq.n	8003222 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	40022000 	.word	0x40022000

08003234 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800323a:	4b2d      	ldr	r3, [pc, #180]	@ (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d00b      	beq.n	8003262 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d825      	bhi.n	800329c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d008      	beq.n	8003268 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d11f      	bne.n	800329c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800325c:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800325e:	613b      	str	r3, [r7, #16]
    break;
 8003260:	e01f      	b.n	80032a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003262:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003264:	613b      	str	r3, [r7, #16]
    break;
 8003266:	e01c      	b.n	80032a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003268:	4b21      	ldr	r3, [pc, #132]	@ (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003274:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e005      	b.n	8003290 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003284:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003290:	4a1a      	ldr	r2, [pc, #104]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003298:	613b      	str	r3, [r7, #16]
    break;
 800329a:	e002      	b.n	80032a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
    break;
 80032a0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032a2:	4b13      	ldr	r3, [pc, #76]	@ (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	3301      	adds	r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	fb03 f202 	mul.w	r2, r3, r2
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c8:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	0e5b      	lsrs	r3, r3, #25
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032e2:	683b      	ldr	r3, [r7, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40021000 	.word	0x40021000
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	08009b68 	.word	0x08009b68

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003308:	2300      	movs	r3, #0
 800330a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330c:	2300      	movs	r3, #0
 800330e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003318:	2b00      	cmp	r3, #0
 800331a:	d040      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003320:	2b80      	cmp	r3, #128	@ 0x80
 8003322:	d02a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d825      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003328:	2b60      	cmp	r3, #96	@ 0x60
 800332a:	d026      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800332c:	2b60      	cmp	r3, #96	@ 0x60
 800332e:	d821      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003330:	2b40      	cmp	r3, #64	@ 0x40
 8003332:	d006      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003334:	2b40      	cmp	r3, #64	@ 0x40
 8003336:	d81d      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800333c:	2b20      	cmp	r3, #32
 800333e:	d010      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003340:	e018      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003342:	4b89      	ldr	r3, [pc, #548]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4a88      	ldr	r2, [pc, #544]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334e:	e015      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fb3e 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003360:	e00c      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3320      	adds	r3, #32
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fc29 	bl	8003bc0 <RCCEx_PLLSAI2_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	74fb      	strb	r3, [r7, #19]
      break;
 8003378:	e000      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800337a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003382:	4b79      	ldr	r3, [pc, #484]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003384:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003388:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003390:	4975      	ldr	r1, [pc, #468]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003398:	e001      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339a:	7cfb      	ldrb	r3, [r7, #19]
 800339c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d047      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b2:	d030      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b8:	d82a      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033be:	d02a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c4:	d824      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d0:	d81e      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033da:	d010      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033dc:	e018      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033de:	4b62      	ldr	r3, [pc, #392]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4a61      	ldr	r2, [pc, #388]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ea:	e015      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 faf0 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033fc:	e00c      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fbdb 	bl	8003bc0 <RCCEx_PLLSAI2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800340e:	e003      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	74fb      	strb	r3, [r7, #19]
      break;
 8003414:	e000      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800341e:	4b52      	ldr	r3, [pc, #328]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003420:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342c:	494e      	ldr	r1, [pc, #312]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003434:	e001      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 809f 	beq.w	8003586 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003448:	2300      	movs	r3, #0
 800344a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800344c:	4b46      	ldr	r3, [pc, #280]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	6593      	str	r3, [r2, #88]	@ 0x58
 800346e:	4b3e      	ldr	r3, [pc, #248]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800347e:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3a      	ldr	r2, [pc, #232]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003488:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800348a:	f7fd fad5 	bl	8000a38 <HAL_GetTick>
 800348e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003490:	e009      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003492:	f7fd fad1 	bl	8000a38 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d902      	bls.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	74fb      	strb	r3, [r7, #19]
        break;
 80034a4:	e005      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034a6:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ef      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d15b      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01f      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d019      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034d6:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034e2:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003502:	4a19      	ldr	r2, [pc, #100]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d016      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fd fa90 	bl	8000a38 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351a:	e00b      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fd fa8c 	bl	8000a38 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d902      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	74fb      	strb	r3, [r7, #19]
            break;
 8003532:	e006      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ec      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10c      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003548:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003558:	4903      	ldr	r1, [pc, #12]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003560:	e008      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	74bb      	strb	r3, [r7, #18]
 8003566:	e005      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003568:	40021000 	.word	0x40021000
 800356c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003574:	7c7b      	ldrb	r3, [r7, #17]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357a:	4ba0      	ldr	r3, [pc, #640]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a9f      	ldr	r2, [pc, #636]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003584:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003592:	4b9a      	ldr	r3, [pc, #616]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f023 0203 	bic.w	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	4996      	ldr	r1, [pc, #600]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b4:	4b91      	ldr	r3, [pc, #580]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f023 020c 	bic.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	498e      	ldr	r1, [pc, #568]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035d6:	4b89      	ldr	r3, [pc, #548]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	4985      	ldr	r1, [pc, #532]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035f8:	4b80      	ldr	r3, [pc, #512]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003606:	497d      	ldr	r1, [pc, #500]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800361a:	4b78      	ldr	r3, [pc, #480]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003628:	4974      	ldr	r1, [pc, #464]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800363c:	4b6f      	ldr	r3, [pc, #444]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364a:	496c      	ldr	r1, [pc, #432]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800365e:	4b67      	ldr	r3, [pc, #412]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003664:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800366c:	4963      	ldr	r1, [pc, #396]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003680:	4b5e      	ldr	r3, [pc, #376]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800368e:	495b      	ldr	r1, [pc, #364]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a2:	4b56      	ldr	r3, [pc, #344]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	4952      	ldr	r1, [pc, #328]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c4:	4b4d      	ldr	r3, [pc, #308]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	494a      	ldr	r1, [pc, #296]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e6:	4b45      	ldr	r3, [pc, #276]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	4941      	ldr	r1, [pc, #260]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003708:	4b3c      	ldr	r3, [pc, #240]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800370a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003716:	4939      	ldr	r1, [pc, #228]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d028      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800372a:	4b34      	ldr	r3, [pc, #208]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003738:	4930      	ldr	r1, [pc, #192]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003748:	d106      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374a:	4b2c      	ldr	r3, [pc, #176]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4a2b      	ldr	r2, [pc, #172]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003750:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003754:	60d3      	str	r3, [r2, #12]
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3304      	adds	r3, #4
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f935 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800378c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003790:	d108      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003792:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003794:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003798:	4a18      	ldr	r2, [pc, #96]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800379e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80037a2:	e012      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037a4:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037aa:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c2:	490e      	ldr	r1, [pc, #56]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037d2:	d106      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d4:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a08      	ldr	r2, [pc, #32]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037de:	60d3      	str	r3, [r2, #12]
 80037e0:	e020      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ea:	d109      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a02      	ldr	r2, [pc, #8]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f6:	60d3      	str	r3, [r2, #12]
 80037f8:	e014      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f8e1 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d028      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003830:	4b68      	ldr	r3, [pc, #416]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800383e:	4965      	ldr	r1, [pc, #404]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800384a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800384e:	d106      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003850:	4b60      	ldr	r3, [pc, #384]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a5f      	ldr	r2, [pc, #380]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800385a:	60d3      	str	r3, [r2, #12]
 800385c:	e011      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003862:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003866:	d10c      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	2101      	movs	r1, #1
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f8b2 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01e      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800388e:	4b51      	ldr	r3, [pc, #324]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389e:	494d      	ldr	r1, [pc, #308]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f88d 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038d8:	4b3e      	ldr	r3, [pc, #248]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038de:	f023 0204 	bic.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e8:	493a      	ldr	r1, [pc, #232]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038fc:	4b35      	ldr	r3, [pc, #212]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003902:	f023 0218 	bic.w	r2, r3, #24
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	4931      	ldr	r1, [pc, #196]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d035      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003920:	4b2c      	ldr	r3, [pc, #176]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2b      	ldr	r2, [pc, #172]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fd f884 	bl	8000a38 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003932:	e009      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003934:	f7fd f880 	bl	8000a38 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	74fb      	strb	r3, [r7, #19]
        break;
 8003946:	e005      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003948:	4b22      	ldr	r3, [pc, #136]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ef      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d113      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800395a:	4b1e      	ldr	r3, [pc, #120]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800395c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003960:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800396a:	491a      	ldr	r1, [pc, #104]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3320      	adds	r3, #32
 8003976:	2102      	movs	r1, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f921 	bl	8003bc0 <RCCEx_PLLSAI2_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d017      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003998:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800399a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800399e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a8:	490a      	ldr	r1, [pc, #40]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039ba:	d105      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e6:	4b72      	ldr	r3, [pc, #456]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039f2:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0203 	and.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d103      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
       ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d142      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e03f      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d018      	beq.n	8003a4a <RCCEx_PLLSAI1_Config+0x72>
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d825      	bhi.n	8003a68 <RCCEx_PLLSAI1_Config+0x90>
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d002      	beq.n	8003a26 <RCCEx_PLLSAI1_Config+0x4e>
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d009      	beq.n	8003a38 <RCCEx_PLLSAI1_Config+0x60>
 8003a24:	e020      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a26:	4b62      	ldr	r3, [pc, #392]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11d      	bne.n	8003a6e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a36:	e01a      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a38:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d116      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a48:	e013      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a4a:	4b59      	ldr	r3, [pc, #356]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a56:	4b56      	ldr	r3, [pc, #344]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a66:	e006      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e004      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e002      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a76:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4949      	ldr	r1, [pc, #292]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8086 	bne.w	8003ba4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a98:	4b45      	ldr	r3, [pc, #276]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a44      	ldr	r2, [pc, #272]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa4:	f7fc ffc8 	bl	8000a38 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aaa:	e009      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aac:	f7fc ffc4 	bl	8000a38 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d902      	bls.n	8003ac0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	73fb      	strb	r3, [r7, #15]
        break;
 8003abe:	e005      	b.n	8003acc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ef      	bne.n	8003aac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d168      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d113      	bne.n	8003b00 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ad8:	4b35      	ldr	r3, [pc, #212]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b35      	ldr	r3, [pc, #212]	@ (8003bb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
 8003ae4:	0211      	lsls	r1, r2, #8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	06d2      	lsls	r2, r2, #27
 8003aec:	4311      	orrs	r1, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6852      	ldr	r2, [r2, #4]
 8003af2:	3a01      	subs	r2, #1
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	430a      	orrs	r2, r1
 8003af8:	492d      	ldr	r1, [pc, #180]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	610b      	str	r3, [r1, #16]
 8003afe:	e02d      	b.n	8003b5c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d115      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b06:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6892      	ldr	r2, [r2, #8]
 8003b12:	0211      	lsls	r1, r2, #8
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6912      	ldr	r2, [r2, #16]
 8003b18:	0852      	lsrs	r2, r2, #1
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	0552      	lsls	r2, r2, #21
 8003b1e:	4311      	orrs	r1, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6852      	ldr	r2, [r2, #4]
 8003b24:	3a01      	subs	r2, #1
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	4921      	ldr	r1, [pc, #132]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
 8003b30:	e014      	b.n	8003b5c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b32:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6892      	ldr	r2, [r2, #8]
 8003b3e:	0211      	lsls	r1, r2, #8
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6952      	ldr	r2, [r2, #20]
 8003b44:	0852      	lsrs	r2, r2, #1
 8003b46:	3a01      	subs	r2, #1
 8003b48:	0652      	lsls	r2, r2, #25
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6852      	ldr	r2, [r2, #4]
 8003b50:	3a01      	subs	r2, #1
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	430a      	orrs	r2, r1
 8003b56:	4916      	ldr	r1, [pc, #88]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b5c:	4b14      	ldr	r3, [pc, #80]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a13      	ldr	r2, [pc, #76]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fc ff66 	bl	8000a38 <HAL_GetTick>
 8003b6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b6e:	e009      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b70:	f7fc ff62 	bl	8000a38 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d902      	bls.n	8003b84 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	73fb      	strb	r3, [r7, #15]
          break;
 8003b82:	e005      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b84:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ef      	beq.n	8003b70 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	4904      	ldr	r1, [pc, #16]	@ (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	07ff800f 	.word	0x07ff800f
 8003bb8:	ff9f800f 	.word	0xff9f800f
 8003bbc:	f9ff800f 	.word	0xf9ff800f

08003bc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bce:	4b72      	ldr	r3, [pc, #456]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bda:	4b6f      	ldr	r3, [pc, #444]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0203 	and.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d103      	bne.n	8003bf2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
       ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d142      	bne.n	8003c78 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	e03f      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d018      	beq.n	8003c32 <RCCEx_PLLSAI2_Config+0x72>
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d825      	bhi.n	8003c50 <RCCEx_PLLSAI2_Config+0x90>
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d002      	beq.n	8003c0e <RCCEx_PLLSAI2_Config+0x4e>
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d009      	beq.n	8003c20 <RCCEx_PLLSAI2_Config+0x60>
 8003c0c:	e020      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c0e:	4b62      	ldr	r3, [pc, #392]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11d      	bne.n	8003c56 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1e:	e01a      	b.n	8003c56 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c20:	4b5d      	ldr	r3, [pc, #372]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d116      	bne.n	8003c5a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c30:	e013      	b.n	8003c5a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c32:	4b59      	ldr	r3, [pc, #356]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10f      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c3e:	4b56      	ldr	r3, [pc, #344]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c4e:	e006      	b.n	8003c5e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e004      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c56:	bf00      	nop
 8003c58:	e002      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d108      	bne.n	8003c78 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c66:	4b4c      	ldr	r3, [pc, #304]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4949      	ldr	r1, [pc, #292]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 8086 	bne.w	8003d8c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c80:	4b45      	ldr	r3, [pc, #276]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a44      	ldr	r2, [pc, #272]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8c:	f7fc fed4 	bl	8000a38 <HAL_GetTick>
 8003c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c92:	e009      	b.n	8003ca8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c94:	f7fc fed0 	bl	8000a38 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d902      	bls.n	8003ca8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca6:	e005      	b.n	8003cb4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ef      	bne.n	8003c94 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d168      	bne.n	8003d8c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d113      	bne.n	8003ce8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cc0:	4b35      	ldr	r3, [pc, #212]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	4b35      	ldr	r3, [pc, #212]	@ (8003d9c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6892      	ldr	r2, [r2, #8]
 8003ccc:	0211      	lsls	r1, r2, #8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	06d2      	lsls	r2, r2, #27
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6852      	ldr	r2, [r2, #4]
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	492d      	ldr	r1, [pc, #180]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	614b      	str	r3, [r1, #20]
 8003ce6:	e02d      	b.n	8003d44 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d115      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cee:	4b2a      	ldr	r3, [pc, #168]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8003da0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6892      	ldr	r2, [r2, #8]
 8003cfa:	0211      	lsls	r1, r2, #8
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6912      	ldr	r2, [r2, #16]
 8003d00:	0852      	lsrs	r2, r2, #1
 8003d02:	3a01      	subs	r2, #1
 8003d04:	0552      	lsls	r2, r2, #21
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6852      	ldr	r2, [r2, #4]
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	430a      	orrs	r2, r1
 8003d12:	4921      	ldr	r1, [pc, #132]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	614b      	str	r3, [r1, #20]
 8003d18:	e014      	b.n	8003d44 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	0211      	lsls	r1, r2, #8
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6952      	ldr	r2, [r2, #20]
 8003d2c:	0852      	lsrs	r2, r2, #1
 8003d2e:	3a01      	subs	r2, #1
 8003d30:	0652      	lsls	r2, r2, #25
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6852      	ldr	r2, [r2, #4]
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	0112      	lsls	r2, r2, #4
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	4916      	ldr	r1, [pc, #88]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a13      	ldr	r2, [pc, #76]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fc fe72 	bl	8000a38 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d56:	e009      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d58:	f7fc fe6e 	bl	8000a38 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d902      	bls.n	8003d6c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	73fb      	strb	r3, [r7, #15]
          break;
 8003d6a:	e005      	b.n	8003d78 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ef      	beq.n	8003d58 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d7e:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	4904      	ldr	r1, [pc, #16]	@ (8003d98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	07ff800f 	.word	0x07ff800f
 8003da0:	ff9f800f 	.word	0xff9f800f
 8003da4:	f9ff800f 	.word	0xf9ff800f

08003da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e049      	b.n	8003e4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fc fc9c 	bl	800070c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f000 f9d6 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d001      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e04f      	b.n	8003f10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	@ (8003f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x76>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9a:	d018      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x76>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x76>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x76>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x76>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x76>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d115      	bne.n	8003efa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	4b17      	ldr	r3, [pc, #92]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d015      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0xb4>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee6:	d011      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	e008      	b.n	8003f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e000      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40013400 	.word	0x40013400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	00010007 	.word	0x00010007

08003f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0202 	mvn.w	r2, #2
 8003f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8e9 	bl	800415a <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8db 	bl	8004146 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8ec 	bl	800416e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0204 	mvn.w	r2, #4
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8c3 	bl	800415a <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8b5 	bl	8004146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8c6 	bl	800416e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d020      	beq.n	8004034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0208 	mvn.w	r2, #8
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f89d 	bl	800415a <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f88f 	bl	8004146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f8a0 	bl	800416e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	d020      	beq.n	8004080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01b      	beq.n	8004080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0210 	mvn.w	r2, #16
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2208      	movs	r2, #8
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f877 	bl	800415a <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f869 	bl	8004146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f87a 	bl	800416e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0201 	mvn.w	r2, #1
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fc fada 	bl	8000658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f99b 	bl	8004408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00c      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f993 	bl	800441c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f834 	bl	8004182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f06f 0220 	mvn.w	r2, #32
 8004136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f95b 	bl	80043f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a46      	ldr	r2, [pc, #280]	@ (80042c4 <TIM_Base_SetConfig+0x12c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d013      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b6:	d00f      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a43      	ldr	r2, [pc, #268]	@ (80042c8 <TIM_Base_SetConfig+0x130>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00b      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <TIM_Base_SetConfig+0x134>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a41      	ldr	r2, [pc, #260]	@ (80042d0 <TIM_Base_SetConfig+0x138>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a40      	ldr	r2, [pc, #256]	@ (80042d4 <TIM_Base_SetConfig+0x13c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d108      	bne.n	80041ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a35      	ldr	r2, [pc, #212]	@ (80042c4 <TIM_Base_SetConfig+0x12c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01f      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f8:	d01b      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a32      	ldr	r2, [pc, #200]	@ (80042c8 <TIM_Base_SetConfig+0x130>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d017      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a31      	ldr	r2, [pc, #196]	@ (80042cc <TIM_Base_SetConfig+0x134>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a30      	ldr	r2, [pc, #192]	@ (80042d0 <TIM_Base_SetConfig+0x138>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00f      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2f      	ldr	r2, [pc, #188]	@ (80042d4 <TIM_Base_SetConfig+0x13c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00b      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2e      	ldr	r2, [pc, #184]	@ (80042d8 <TIM_Base_SetConfig+0x140>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <TIM_Base_SetConfig+0x144>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_Base_SetConfig+0x9a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2c      	ldr	r2, [pc, #176]	@ (80042e0 <TIM_Base_SetConfig+0x148>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d108      	bne.n	8004244 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a16      	ldr	r2, [pc, #88]	@ (80042c4 <TIM_Base_SetConfig+0x12c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0xf8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a18      	ldr	r2, [pc, #96]	@ (80042d4 <TIM_Base_SetConfig+0x13c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0xf8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a17      	ldr	r2, [pc, #92]	@ (80042d8 <TIM_Base_SetConfig+0x140>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0xf8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <TIM_Base_SetConfig+0x144>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0xf8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a15      	ldr	r2, [pc, #84]	@ (80042e0 <TIM_Base_SetConfig+0x148>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d103      	bne.n	8004298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f023 0201 	bic.w	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	611a      	str	r2, [r3, #16]
  }
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40000c00 	.word	0x40000c00
 80042d4:	40013400 	.word	0x40013400
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e068      	b.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2e      	ldr	r2, [pc, #184]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2d      	ldr	r2, [pc, #180]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01d      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436e:	d018      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a14      	ldr	r2, [pc, #80]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10c      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40014000 	.word	0x40014000

080043f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004430:	b084      	sub	sp, #16
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	f107 001c 	add.w	r0, r7, #28
 800443e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f001 fa26 	bl	80058a0 <USB_CoreReset>
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004458:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38
 800446c:	e005      	b.n	800447a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004486:	b004      	add	sp, #16
 8004488:	4770      	bx	lr
	...

0800448c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d165      	bne.n	800456c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a3e      	ldr	r2, [pc, #248]	@ (800459c <USB_SetTurnaroundTime+0x110>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d906      	bls.n	80044b6 <USB_SetTurnaroundTime+0x2a>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a3d      	ldr	r2, [pc, #244]	@ (80045a0 <USB_SetTurnaroundTime+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d202      	bcs.n	80044b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044b0:	230f      	movs	r3, #15
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e05c      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4a39      	ldr	r2, [pc, #228]	@ (80045a0 <USB_SetTurnaroundTime+0x114>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d306      	bcc.n	80044cc <USB_SetTurnaroundTime+0x40>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4a38      	ldr	r2, [pc, #224]	@ (80045a4 <USB_SetTurnaroundTime+0x118>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d202      	bcs.n	80044cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044c6:	230e      	movs	r3, #14
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e051      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a35      	ldr	r2, [pc, #212]	@ (80045a4 <USB_SetTurnaroundTime+0x118>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d306      	bcc.n	80044e2 <USB_SetTurnaroundTime+0x56>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a34      	ldr	r2, [pc, #208]	@ (80045a8 <USB_SetTurnaroundTime+0x11c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d202      	bcs.n	80044e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044dc:	230d      	movs	r3, #13
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e046      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4a30      	ldr	r2, [pc, #192]	@ (80045a8 <USB_SetTurnaroundTime+0x11c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d306      	bcc.n	80044f8 <USB_SetTurnaroundTime+0x6c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4a2f      	ldr	r2, [pc, #188]	@ (80045ac <USB_SetTurnaroundTime+0x120>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d802      	bhi.n	80044f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044f2:	230c      	movs	r3, #12
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e03b      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4a2c      	ldr	r2, [pc, #176]	@ (80045ac <USB_SetTurnaroundTime+0x120>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d906      	bls.n	800450e <USB_SetTurnaroundTime+0x82>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4a2b      	ldr	r2, [pc, #172]	@ (80045b0 <USB_SetTurnaroundTime+0x124>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d802      	bhi.n	800450e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004508:	230b      	movs	r3, #11
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e030      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4a27      	ldr	r2, [pc, #156]	@ (80045b0 <USB_SetTurnaroundTime+0x124>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d906      	bls.n	8004524 <USB_SetTurnaroundTime+0x98>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4a26      	ldr	r2, [pc, #152]	@ (80045b4 <USB_SetTurnaroundTime+0x128>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d802      	bhi.n	8004524 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800451e:	230a      	movs	r3, #10
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e025      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4a23      	ldr	r2, [pc, #140]	@ (80045b4 <USB_SetTurnaroundTime+0x128>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d906      	bls.n	800453a <USB_SetTurnaroundTime+0xae>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4a22      	ldr	r2, [pc, #136]	@ (80045b8 <USB_SetTurnaroundTime+0x12c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d202      	bcs.n	800453a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004534:	2309      	movs	r3, #9
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e01a      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <USB_SetTurnaroundTime+0x12c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d306      	bcc.n	8004550 <USB_SetTurnaroundTime+0xc4>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4a1d      	ldr	r2, [pc, #116]	@ (80045bc <USB_SetTurnaroundTime+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d802      	bhi.n	8004550 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800454a:	2308      	movs	r3, #8
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e00f      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4a1a      	ldr	r2, [pc, #104]	@ (80045bc <USB_SetTurnaroundTime+0x130>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d906      	bls.n	8004566 <USB_SetTurnaroundTime+0xda>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <USB_SetTurnaroundTime+0x134>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d202      	bcs.n	8004566 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004560:	2307      	movs	r3, #7
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	e004      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004566:	2306      	movs	r3, #6
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e001      	b.n	8004570 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800456c:	2309      	movs	r3, #9
 800456e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	00d8acbf 	.word	0x00d8acbf
 80045a0:	00e4e1c0 	.word	0x00e4e1c0
 80045a4:	00f42400 	.word	0x00f42400
 80045a8:	01067380 	.word	0x01067380
 80045ac:	011a499f 	.word	0x011a499f
 80045b0:	01312cff 	.word	0x01312cff
 80045b4:	014ca43f 	.word	0x014ca43f
 80045b8:	016e3600 	.word	0x016e3600
 80045bc:	01a6ab1f 	.word	0x01a6ab1f
 80045c0:	01e84800 	.word	0x01e84800

080045c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 0201 	bic.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d115      	bne.n	8004656 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004636:	200a      	movs	r0, #10
 8004638:	f7fc fa0a 	bl	8000a50 <HAL_Delay>
      ms += 10U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	330a      	adds	r3, #10
 8004640:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 f8b3 	bl	80057ae <USB_GetMode>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d01e      	beq.n	800468c <USB_SetCurrentMode+0x84>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2bc7      	cmp	r3, #199	@ 0xc7
 8004652:	d9f0      	bls.n	8004636 <USB_SetCurrentMode+0x2e>
 8004654:	e01a      	b.n	800468c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d115      	bne.n	8004688 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004668:	200a      	movs	r0, #10
 800466a:	f7fc f9f1 	bl	8000a50 <HAL_Delay>
      ms += 10U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	330a      	adds	r3, #10
 8004672:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 f89a 	bl	80057ae <USB_GetMode>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <USB_SetCurrentMode+0x84>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2bc7      	cmp	r3, #199	@ 0xc7
 8004684:	d9f0      	bls.n	8004668 <USB_SetCurrentMode+0x60>
 8004686:	e001      	b.n	800468c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e005      	b.n	8004698 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004690:	d101      	bne.n	8004696 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046a0:	b084      	sub	sp, #16
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80046ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	e009      	b.n	80046d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	3340      	adds	r3, #64	@ 0x40
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3301      	adds	r3, #1
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0e      	cmp	r3, #14
 80046d8:	d9f2      	bls.n	80046c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11c      	bne.n	800471c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046f0:	f043 0302 	orr.w	r3, r3, #2
 80046f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e005      	b.n	8004728 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800472e:	461a      	mov	r2, r3
 8004730:	2300      	movs	r3, #0
 8004732:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004734:	2103      	movs	r1, #3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f95a 	bl	80049f0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800473c:	2110      	movs	r1, #16
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8f6 	bl	8004930 <USB_FlushTxFifo>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f920 	bl	8004994 <USB_FlushRxFifo>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477c:	461a      	mov	r2, r3
 800477e:	2300      	movs	r3, #0
 8004780:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e043      	b.n	8004810 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800479a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800479e:	d118      	bne.n	80047d2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e013      	b.n	80047e4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e008      	b.n	80047e4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047de:	461a      	mov	r2, r3
 80047e0:	2300      	movs	r3, #0
 80047e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	461a      	mov	r2, r3
 8004804:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004808:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3301      	adds	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004814:	461a      	mov	r2, r3
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4293      	cmp	r3, r2
 800481a:	d3b5      	bcc.n	8004788 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	e043      	b.n	80048aa <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004838:	d118      	bne.n	800486c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484c:	461a      	mov	r2, r3
 800484e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e013      	b.n	800487e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e008      	b.n	800487e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489c:	461a      	mov	r2, r3
 800489e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	3301      	adds	r3, #1
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048ae:	461a      	mov	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d3b5      	bcc.n	8004822 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f043 0210 	orr.w	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	4b10      	ldr	r3, [pc, #64]	@ (800492c <USB_DevInit+0x28c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f043 0208 	orr.w	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004904:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004928:	b004      	add	sp, #16
 800492a:	4770      	bx	lr
 800492c:	803c3800 	.word	0x803c3800

08004930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800494a:	d901      	bls.n	8004950 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e01b      	b.n	8004988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	daf2      	bge.n	800493e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	019b      	lsls	r3, r3, #6
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004974:	d901      	bls.n	800497a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e006      	b.n	8004988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b20      	cmp	r3, #32
 8004984:	d0f0      	beq.n	8004968 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049ac:	d901      	bls.n	80049b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e018      	b.n	80049e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	daf2      	bge.n	80049a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2210      	movs	r2, #16
 80049c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049d0:	d901      	bls.n	80049d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e006      	b.n	80049e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d0f0      	beq.n	80049c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b087      	sub	sp, #28
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0306 	and.w	r3, r3, #6
 8004a3a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d002      	beq.n	8004a48 <USB_GetDevSpeed+0x26>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d102      	bne.n	8004a4e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	75fb      	strb	r3, [r7, #23]
 8004a4c:	e001      	b.n	8004a52 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004a4e:	230f      	movs	r3, #15
 8004a50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d13a      	bne.n	8004af2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d155      	bne.n	8004b60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ad0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	059b      	lsls	r3, r3, #22
 8004ad6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e036      	b.n	8004b60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	2101      	movs	r1, #1
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d11a      	bne.n	8004b60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b46:	430b      	orrs	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d161      	bne.n	8004c50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ba2:	d11f      	bne.n	8004be4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004be2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c04:	4013      	ands	r3, r2
 8004c06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	0159      	lsls	r1, r3, #5
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	440b      	add	r3, r1
 8004c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c46:	4619      	mov	r1, r3
 8004c48:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <USB_DeactivateEndpoint+0x1b0>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
 8004c4e:	e060      	b.n	8004d12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c66:	d11f      	bne.n	8004ca8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ca2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	2101      	movs	r1, #1
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cc8:	4013      	ands	r3, r2
 8004cca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	2101      	movs	r1, #1
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cec:	4013      	ands	r3, r2
 8004cee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	0159      	lsls	r1, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	440b      	add	r3, r1
 8004d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <USB_DeactivateEndpoint+0x1b4>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	ec337800 	.word	0xec337800
 8004d24:	eff37800 	.word	0xeff37800

08004d28 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 812d 	bne.w	8004fa0 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d132      	bne.n	8004db4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d68:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d6c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dac:	0cdb      	lsrs	r3, r3, #19
 8004dae:	04db      	lsls	r3, r3, #19
 8004db0:	6113      	str	r3, [r2, #16]
 8004db2:	e097      	b.n	8004ee4 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dce:	0cdb      	lsrs	r3, r3, #19
 8004dd0:	04db      	lsls	r3, r3, #19
 8004dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004df2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004df6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11a      	bne.n	8004e34 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d903      	bls.n	8004e12 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e30:	6113      	str	r3, [r2, #16]
 8004e32:	e044      	b.n	8004ebe <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	1e5a      	subs	r2, r3, #1
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	89fb      	ldrh	r3, [r7, #14]
 8004e5a:	04d9      	lsls	r1, r3, #19
 8004e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800509c <USB_EPStartXfer+0x374>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	6939      	ldr	r1, [r7, #16]
 8004e62:	0148      	lsls	r0, r1, #5
 8004e64:	6979      	ldr	r1, [r7, #20]
 8004e66:	4401      	add	r1, r0
 8004e68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	791b      	ldrb	r3, [r3, #4]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d122      	bne.n	8004ebe <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004e96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	075b      	lsls	r3, r3, #29
 8004eaa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004eae:	6939      	ldr	r1, [r7, #16]
 8004eb0:	0148      	lsls	r0, r1, #5
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	4401      	add	r1, r0
 8004eb6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed4:	6939      	ldr	r1, [r7, #16]
 8004ed6:	0148      	lsls	r0, r1, #5
 8004ed8:	6979      	ldr	r1, [r7, #20]
 8004eda:	4401      	add	r1, r0
 8004edc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f02:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	791b      	ldrb	r3, [r3, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d015      	beq.n	8004f38 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 813a 	beq.w	800518a <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f32:	4313      	orrs	r3, r2
 8004f34:	634b      	str	r3, [r1, #52]	@ 0x34
 8004f36:	e128      	b.n	800518a <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d110      	bne.n	8004f6a <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e00f      	b.n	8004f8a <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f88:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68d9      	ldr	r1, [r3, #12]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f9a7 	bl	80052ec <USB_WritePacket>
 8004f9e:	e0f4      	b.n	800518a <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fba:	0cdb      	lsrs	r3, r3, #19
 8004fbc:	04db      	lsls	r3, r3, #19
 8004fbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fe2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d12f      	bne.n	800504a <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005018:	6939      	ldr	r1, [r7, #16]
 800501a:	0148      	lsls	r0, r1, #5
 800501c:	6979      	ldr	r1, [r7, #20]
 800501e:	4401      	add	r1, r0
 8005020:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005024:	4313      	orrs	r3, r2
 8005026:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005042:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005046:	6113      	str	r3, [r2, #16]
 8005048:	e062      	b.n	8005110 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d126      	bne.n	80050a0 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005068:	6939      	ldr	r1, [r7, #16]
 800506a:	0148      	lsls	r0, r1, #5
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	4401      	add	r1, r0
 8005070:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005074:	4313      	orrs	r3, r2
 8005076:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005092:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005096:	6113      	str	r3, [r2, #16]
 8005098:	e03a      	b.n	8005110 <USB_EPStartXfer+0x3e8>
 800509a:	bf00      	nop
 800509c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4413      	add	r3, r2
 80050aa:	1e5a      	subs	r2, r3, #1
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	89fa      	ldrh	r2, [r7, #14]
 80050bc:	fb03 f202 	mul.w	r2, r3, r2
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	89fb      	ldrh	r3, [r7, #14]
 80050d4:	04d9      	lsls	r1, r3, #19
 80050d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005194 <USB_EPStartXfer+0x46c>)
 80050d8:	400b      	ands	r3, r1
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	0148      	lsls	r0, r1, #5
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	4401      	add	r1, r0
 80050e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050e6:	4313      	orrs	r3, r2
 80050e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005100:	6939      	ldr	r1, [r7, #16]
 8005102:	0148      	lsls	r0, r1, #5
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	4401      	add	r1, r0
 8005108:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800510c:	4313      	orrs	r3, r2
 800510e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	791b      	ldrb	r3, [r3, #4]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d128      	bne.n	800516a <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d110      	bne.n	800514a <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005142:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	e00f      	b.n	800516a <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005168:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005184:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005188:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	1ff80000 	.word	0x1ff80000

08005198 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d14a      	bne.n	800524c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ce:	f040 8086 	bne.w	80052de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005218:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005226:	4293      	cmp	r3, r2
 8005228:	d902      	bls.n	8005230 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
          break;
 800522e:	e056      	b.n	80052de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005248:	d0e7      	beq.n	800521a <USB_EPStopXfer+0x82>
 800524a:	e048      	b.n	80052de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005264:	d13b      	bne.n	80052de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005284:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005288:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d902      	bls.n	80052c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
          break;
 80052c2:	e00c      	b.n	80052de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052dc:	d0e7      	beq.n	80052ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	@ 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	460b      	mov	r3, r1
 80052fc:	71fb      	strb	r3, [r7, #7]
 80052fe:	4613      	mov	r3, r2
 8005300:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800530a:	88bb      	ldrh	r3, [r7, #4]
 800530c:	3303      	adds	r3, #3
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	e018      	b.n	800534a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	031a      	lsls	r2, r3, #12
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
 8005320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005324:	461a      	mov	r2, r3
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3301      	adds	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3301      	adds	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	3301      	adds	r3, #1
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d3e2      	bcc.n	8005318 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3724      	adds	r7, #36	@ 0x24
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005360:	b480      	push	{r7}
 8005362:	b08b      	sub	sp, #44	@ 0x2c
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	b29b      	uxth	r3, r3
 800537c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	e014      	b.n	80053b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	601a      	str	r2, [r3, #0]
    pDest++;
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	3301      	adds	r3, #1
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	3301      	adds	r3, #1
 80053a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	3301      	adds	r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	3301      	adds	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	3301      	adds	r3, #1
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d3e6      	bcc.n	800538c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053be:	8bfb      	ldrh	r3, [r7, #30]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01e      	beq.n	8005402 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ce:	461a      	mov	r2, r3
 80053d0:	f107 0310 	add.w	r3, r7, #16
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	701a      	strb	r2, [r3, #0]
      i++;
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	3301      	adds	r3, #1
 80053ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	3301      	adds	r3, #1
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053f6:	8bfb      	ldrh	r3, [r7, #30]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053fc:	8bfb      	ldrh	r3, [r7, #30]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1ea      	bne.n	80053d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005404:	4618      	mov	r0, r3
 8005406:	372c      	adds	r7, #44	@ 0x2c
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d12c      	bne.n	8005486 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	db12      	blt.n	8005464 <USB_EPSetStall+0x54>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00f      	beq.n	8005464 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	440a      	add	r2, r1
 800545a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800545e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005462:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	440a      	add	r2, r1
 800547a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800547e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e02b      	b.n	80054de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	db12      	blt.n	80054be <USB_EPSetStall+0xae>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00f      	beq.n	80054be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d128      	bne.n	800555a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005522:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005526:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	791b      	ldrb	r3, [r3, #4]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d003      	beq.n	8005538 <USB_EPClearStall+0x4c>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	791b      	ldrb	r3, [r3, #4]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d138      	bne.n	80055aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e027      	b.n	80055aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005574:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005578:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	791b      	ldrb	r3, [r3, #4]
 800557e:	2b03      	cmp	r3, #3
 8005580:	d003      	beq.n	800558a <USB_EPClearStall+0x9e>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	791b      	ldrb	r3, [r3, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d10f      	bne.n	80055aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005632:	f023 0302 	bic.w	r3, r3, #2
 8005636:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005660:	f023 0303 	bic.w	r3, r3, #3
 8005664:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005674:	f043 0302 	orr.w	r3, r3, #2
 8005678:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056a0:	68fb      	ldr	r3, [r7, #12]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	0c1b      	lsrs	r3, r3, #16
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	4013      	ands	r3, r2
 8005704:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	b29b      	uxth	r3, r3
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005744:	68bb      	ldr	r3, [r7, #8]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005752:	b480      	push	{r7}
 8005754:	b087      	sub	sp, #28
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005774:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	01db      	lsls	r3, r3, #7
 8005784:	b2db      	uxtb	r3, r3
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4013      	ands	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057a0:	68bb      	ldr	r3, [r7, #8]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0301 	and.w	r3, r3, #1
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057e8:	f023 0307 	bic.w	r3, r3, #7
 80057ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005800:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	333c      	adds	r3, #60	@ 0x3c
 8005822:	3304      	adds	r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a1c      	ldr	r2, [pc, #112]	@ (800589c <USB_EP0_OutStart+0x8c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d90a      	bls.n	8005846 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800583c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005840:	d101      	bne.n	8005846 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e024      	b.n	8005890 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005874:	f043 0318 	orr.w	r3, r3, #24
 8005878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005888:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800588c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	4f54300a 	.word	0x4f54300a

080058a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b8:	d901      	bls.n	80058be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e01b      	b.n	80058f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	daf2      	bge.n	80058ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f043 0201 	orr.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e2:	d901      	bls.n	80058e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e006      	b.n	80058f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d0f0      	beq.n	80058d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005910:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005914:	f002 ff28 	bl	8008768 <USBD_static_malloc>
 8005918:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	32b0      	adds	r2, #176	@ 0xb0
 800592a:	2100      	movs	r1, #0
 800592c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005930:	2302      	movs	r3, #2
 8005932:	e0d4      	b.n	8005ade <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005934:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005938:	2100      	movs	r1, #0
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f003 f95c 	bl	8008bf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	32b0      	adds	r2, #176	@ 0xb0
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	32b0      	adds	r2, #176	@ 0xb0
 800595a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7c1b      	ldrb	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d138      	bne.n	80059de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800596c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 800596e:	7819      	ldrb	r1, [r3, #0]
 8005970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005974:	2202      	movs	r2, #2
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f002 fce2 	bl	8008340 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800597c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	3324      	adds	r3, #36	@ 0x24
 8005992:	2201      	movs	r2, #1
 8005994:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005996:	4b55      	ldr	r3, [pc, #340]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005998:	7819      	ldrb	r1, [r3, #0]
 800599a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800599e:	2202      	movs	r2, #2
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f002 fccd 	bl	8008340 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059a6:	4b51      	ldr	r3, [pc, #324]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 020f 	and.w	r2, r3, #15
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059be:	2201      	movs	r2, #1
 80059c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059c2:	4b4b      	ldr	r3, [pc, #300]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	3326      	adds	r3, #38	@ 0x26
 80059d8:	2210      	movs	r2, #16
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e035      	b.n	8005a4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059de:	4b42      	ldr	r3, [pc, #264]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 80059e0:	7819      	ldrb	r1, [r3, #0]
 80059e2:	2340      	movs	r3, #64	@ 0x40
 80059e4:	2202      	movs	r2, #2
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f002 fcaa 	bl	8008340 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059ec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f003 020f 	and.w	r2, r3, #15
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3324      	adds	r3, #36	@ 0x24
 8005a02:	2201      	movs	r2, #1
 8005a04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a06:	4b39      	ldr	r3, [pc, #228]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005a08:	7819      	ldrb	r1, [r3, #0]
 8005a0a:	2340      	movs	r3, #64	@ 0x40
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f002 fc96 	bl	8008340 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a14:	4b35      	ldr	r3, [pc, #212]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a30:	4b2f      	ldr	r3, [pc, #188]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 020f 	and.w	r2, r3, #15
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3326      	adds	r3, #38	@ 0x26
 8005a46:	2210      	movs	r2, #16
 8005a48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a4a:	4b29      	ldr	r3, [pc, #164]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	2308      	movs	r3, #8
 8005a50:	2203      	movs	r2, #3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f002 fc74 	bl	8008340 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a58:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 020f 	and.w	r2, r3, #15
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3324      	adds	r3, #36	@ 0x24
 8005a6e:	2201      	movs	r2, #1
 8005a70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	33b0      	adds	r3, #176	@ 0xb0
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e018      	b.n	8005ade <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7c1b      	ldrb	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005ab6:	7819      	ldrb	r1, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f002 fdb6 	bl	8008634 <USBD_LL_PrepareReceive>
 8005ac8:	e008      	b.n	8005adc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aca:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005acc:	7819      	ldrb	r1, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ad4:	2340      	movs	r3, #64	@ 0x40
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f002 fdac 	bl	8008634 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000093 	.word	0x20000093
 8005aec:	20000094 	.word	0x20000094
 8005af0:	20000095 	.word	0x20000095

08005af4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b00:	4b3a      	ldr	r3, [pc, #232]	@ (8005bec <USBD_CDC_DeInit+0xf8>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f002 fc58 	bl	80083bc <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b0c:	4b37      	ldr	r3, [pc, #220]	@ (8005bec <USBD_CDC_DeInit+0xf8>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f003 020f 	and.w	r2, r3, #15
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	3324      	adds	r3, #36	@ 0x24
 8005b22:	2200      	movs	r2, #0
 8005b24:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b26:	4b32      	ldr	r3, [pc, #200]	@ (8005bf0 <USBD_CDC_DeInit+0xfc>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f002 fc45 	bl	80083bc <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b32:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf0 <USBD_CDC_DeInit+0xfc>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b4e:	4b29      	ldr	r3, [pc, #164]	@ (8005bf4 <USBD_CDC_DeInit+0x100>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 fc31 	bl	80083bc <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b5a:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <USBD_CDC_DeInit+0x100>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3324      	adds	r3, #36	@ 0x24
 8005b70:	2200      	movs	r2, #0
 8005b72:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <USBD_CDC_DeInit+0x100>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3326      	adds	r3, #38	@ 0x26
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	32b0      	adds	r2, #176	@ 0xb0
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01f      	beq.n	8005be0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	33b0      	adds	r3, #176	@ 0xb0
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	32b0      	adds	r2, #176	@ 0xb0
 8005bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 fdde 	bl	8008784 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	32b0      	adds	r2, #176	@ 0xb0
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000093 	.word	0x20000093
 8005bf0:	20000094 	.word	0x20000094
 8005bf4:	20000095 	.word	0x20000095

08005bf8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	32b0      	adds	r2, #176	@ 0xb0
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0bf      	b.n	8005da8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d050      	beq.n	8005cd6 <USBD_CDC_Setup+0xde>
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	f040 80af 	bne.w	8005d98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	88db      	ldrh	r3, [r3, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d03a      	beq.n	8005cb8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da1b      	bge.n	8005c84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	33b0      	adds	r3, #176	@ 0xb0
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	88d2      	ldrh	r2, [r2, #6]
 8005c68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	88db      	ldrh	r3, [r3, #6]
 8005c6e:	2b07      	cmp	r3, #7
 8005c70:	bf28      	it	cs
 8005c72:	2307      	movcs	r3, #7
 8005c74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	89fa      	ldrh	r2, [r7, #14]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fdbd 	bl	80077fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c82:	e090      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	785a      	ldrb	r2, [r3, #1]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	88db      	ldrh	r3, [r3, #6]
 8005c92:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c94:	d803      	bhi.n	8005c9e <USBD_CDC_Setup+0xa6>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	88db      	ldrh	r3, [r3, #6]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	e000      	b.n	8005ca0 <USBD_CDC_Setup+0xa8>
 8005c9e:	2240      	movs	r2, #64	@ 0x40
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 fdcf 	bl	8007854 <USBD_CtlPrepareRx>
      break;
 8005cb6:	e076      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	33b0      	adds	r3, #176	@ 0xb0
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	7850      	ldrb	r0, [r2, #1]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	4798      	blx	r3
      break;
 8005cd4:	e067      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	2b0b      	cmp	r3, #11
 8005cdc:	d851      	bhi.n	8005d82 <USBD_CDC_Setup+0x18a>
 8005cde:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <USBD_CDC_Setup+0xec>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005d15 	.word	0x08005d15
 8005ce8:	08005d91 	.word	0x08005d91
 8005cec:	08005d83 	.word	0x08005d83
 8005cf0:	08005d83 	.word	0x08005d83
 8005cf4:	08005d83 	.word	0x08005d83
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005d83 	.word	0x08005d83
 8005d00:	08005d83 	.word	0x08005d83
 8005d04:	08005d83 	.word	0x08005d83
 8005d08:	08005d83 	.word	0x08005d83
 8005d0c:	08005d3f 	.word	0x08005d3f
 8005d10:	08005d69 	.word	0x08005d69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d107      	bne.n	8005d30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d20:	f107 030a 	add.w	r3, r7, #10
 8005d24:	2202      	movs	r2, #2
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 fd67 	bl	80077fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d2e:	e032      	b.n	8005d96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fce5 	bl	8007702 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3c:	e02b      	b.n	8005d96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d107      	bne.n	8005d5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d4a:	f107 030d 	add.w	r3, r7, #13
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fd52 	bl	80077fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d58:	e01d      	b.n	8005d96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fcd0 	bl	8007702 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
          break;
 8005d66:	e016      	b.n	8005d96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d00f      	beq.n	8005d94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 fcc3 	bl	8007702 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d80:	e008      	b.n	8005d94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fcbc 	bl	8007702 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8e:	e002      	b.n	8005d96 <USBD_CDC_Setup+0x19e>
          break;
 8005d90:	bf00      	nop
 8005d92:	e008      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>
          break;
 8005d94:	bf00      	nop
      }
      break;
 8005d96:	e006      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fcb1 	bl	8007702 <USBD_CtlError>
      ret = USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005dc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	32b0      	adds	r2, #176	@ 0xb0
 8005dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e065      	b.n	8005ea6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	32b0      	adds	r2, #176	@ 0xb0
 8005de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3318      	adds	r3, #24
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02f      	beq.n	8005e64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	3318      	adds	r3, #24
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	f003 010f 	and.w	r1, r3, #15
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	460b      	mov	r3, r1
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4403      	add	r3, r0
 8005e2c:	331c      	adds	r3, #28
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d112      	bne.n	8005e64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	f003 020f 	and.w	r2, r3, #15
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3318      	adds	r3, #24
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e56:	78f9      	ldrb	r1, [r7, #3]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f002 fbb1 	bl	80085c4 <USBD_LL_Transmit>
 8005e62:	e01f      	b.n	8005ea4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	33b0      	adds	r3, #176	@ 0xb0
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d010      	beq.n	8005ea4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	33b0      	adds	r3, #176	@ 0xb0
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	32b0      	adds	r2, #176	@ 0xb0
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	32b0      	adds	r2, #176	@ 0xb0
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e01a      	b.n	8005f16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f002 fbdd 	bl	80086a4 <USBD_LL_GetRxDataSize>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	33b0      	adds	r3, #176	@ 0xb0
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f10:	4611      	mov	r1, r2
 8005f12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	32b0      	adds	r2, #176	@ 0xb0
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e024      	b.n	8005f8a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	33b0      	adds	r3, #176	@ 0xb0
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d019      	beq.n	8005f88 <USBD_CDC_EP0_RxReady+0x6a>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f5a:	2bff      	cmp	r3, #255	@ 0xff
 8005f5c:	d014      	beq.n	8005f88 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	33b0      	adds	r3, #176	@ 0xb0
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	22ff      	movs	r2, #255	@ 0xff
 8005f84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f9c:	2182      	movs	r1, #130	@ 0x82
 8005f9e:	4818      	ldr	r0, [pc, #96]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fa0:	f000 fd4f 	bl	8006a42 <USBD_GetEpDesc>
 8005fa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4815      	ldr	r0, [pc, #84]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005faa:	f000 fd4a 	bl	8006a42 <USBD_GetEpDesc>
 8005fae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fb0:	2181      	movs	r1, #129	@ 0x81
 8005fb2:	4813      	ldr	r0, [pc, #76]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fb4:	f000 fd45 	bl	8006a42 <USBD_GetEpDesc>
 8005fb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d006      	beq.n	8005fda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd4:	711a      	strb	r2, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d006      	beq.n	8005fee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fe8:	711a      	strb	r2, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2243      	movs	r2, #67	@ 0x43
 8005ff2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ff4:	4b02      	ldr	r3, [pc, #8]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000050 	.word	0x20000050

08006004 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800600c:	2182      	movs	r1, #130	@ 0x82
 800600e:	4818      	ldr	r0, [pc, #96]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006010:	f000 fd17 	bl	8006a42 <USBD_GetEpDesc>
 8006014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006016:	2101      	movs	r1, #1
 8006018:	4815      	ldr	r0, [pc, #84]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800601a:	f000 fd12 	bl	8006a42 <USBD_GetEpDesc>
 800601e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006020:	2181      	movs	r1, #129	@ 0x81
 8006022:	4813      	ldr	r0, [pc, #76]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006024:	f000 fd0d 	bl	8006a42 <USBD_GetEpDesc>
 8006028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2210      	movs	r2, #16
 8006034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2200      	movs	r2, #0
 8006040:	711a      	strb	r2, [r3, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f042 0202 	orr.w	r2, r2, #2
 8006048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d006      	beq.n	800605e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	711a      	strb	r2, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f042 0202 	orr.w	r2, r2, #2
 800605c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2243      	movs	r2, #67	@ 0x43
 8006062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006064:	4b02      	ldr	r3, [pc, #8]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000050 	.word	0x20000050

08006074 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800607c:	2182      	movs	r1, #130	@ 0x82
 800607e:	4818      	ldr	r0, [pc, #96]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006080:	f000 fcdf 	bl	8006a42 <USBD_GetEpDesc>
 8006084:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006086:	2101      	movs	r1, #1
 8006088:	4815      	ldr	r0, [pc, #84]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800608a:	f000 fcda 	bl	8006a42 <USBD_GetEpDesc>
 800608e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006090:	2181      	movs	r1, #129	@ 0x81
 8006092:	4813      	ldr	r0, [pc, #76]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006094:	f000 fcd5 	bl	8006a42 <USBD_GetEpDesc>
 8006098:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2210      	movs	r2, #16
 80060a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d006      	beq.n	80060ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060b4:	711a      	strb	r2, [r3, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060c8:	711a      	strb	r2, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2243      	movs	r2, #67	@ 0x43
 80060d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060d4:	4b02      	ldr	r3, [pc, #8]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000050 	.word	0x20000050

080060e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	220a      	movs	r2, #10
 80060f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060f2:	4b03      	ldr	r3, [pc, #12]	@ (8006100 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	2000000c 	.word	0x2000000c

08006104 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006114:	2303      	movs	r3, #3
 8006116:	e009      	b.n	800612c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	33b0      	adds	r3, #176	@ 0xb0
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	32b0      	adds	r2, #176	@ 0xb0
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800615a:	2303      	movs	r3, #3
 800615c:	e008      	b.n	8006170 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	32b0      	adds	r2, #176	@ 0xb0
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e004      	b.n	80061aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32b0      	adds	r2, #176	@ 0xb0
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061da:	2303      	movs	r3, #3
 80061dc:	e025      	b.n	800622a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11f      	bne.n	8006228 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061f0:	4b10      	ldr	r3, [pc, #64]	@ (8006234 <USBD_CDC_TransmitPacket+0x7c>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 020f 	and.w	r2, r3, #15
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4403      	add	r3, r0
 800620a:	3318      	adds	r3, #24
 800620c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800620e:	4b09      	ldr	r3, [pc, #36]	@ (8006234 <USBD_CDC_TransmitPacket+0x7c>)
 8006210:	7819      	ldrb	r1, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f002 f9d0 	bl	80085c4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000093 	.word	0x20000093

08006238 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32b0      	adds	r2, #176	@ 0xb0
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	32b0      	adds	r2, #176	@ 0xb0
 800625a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006262:	2303      	movs	r3, #3
 8006264:	e018      	b.n	8006298 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7c1b      	ldrb	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800626e:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <USBD_CDC_ReceivePacket+0x68>)
 8006270:	7819      	ldrb	r1, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f002 f9d9 	bl	8008634 <USBD_LL_PrepareReceive>
 8006282:	e008      	b.n	8006296 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006284:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <USBD_CDC_ReceivePacket+0x68>)
 8006286:	7819      	ldrb	r1, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800628e:	2340      	movs	r3, #64	@ 0x40
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f002 f9cf 	bl	8008634 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000094 	.word	0x20000094

080062a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e01f      	b.n	80062fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	79fa      	ldrb	r2, [r7, #7]
 80062ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f001 ffa7 	bl	8008244 <USBD_LL_Init>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006318:	2303      	movs	r3, #3
 800631a:	e025      	b.n	8006368 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32ae      	adds	r2, #174	@ 0xae
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	32ae      	adds	r2, #174	@ 0xae
 8006342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006348:	f107 020e 	add.w	r2, r7, #14
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 ffaf 	bl	80082dc <USBD_LL_Start>
 800637e:	4603      	mov	r3, r0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006390:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	78fa      	ldrb	r2, [r7, #3]
 80063c2:	4611      	mov	r1, r2
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	4611      	mov	r1, r2
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f936 	bl	800768e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b02      	cmp	r3, #2
 8006444:	d01a      	beq.n	800647c <USBD_LL_SetupStage+0x72>
 8006446:	2b02      	cmp	r3, #2
 8006448:	d822      	bhi.n	8006490 <USBD_LL_SetupStage+0x86>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <USBD_LL_SetupStage+0x4a>
 800644e:	2b01      	cmp	r3, #1
 8006450:	d00a      	beq.n	8006468 <USBD_LL_SetupStage+0x5e>
 8006452:	e01d      	b.n	8006490 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fb63 	bl	8006b28 <USBD_StdDevReq>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
      break;
 8006466:	e020      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fbcb 	bl	8006c0c <USBD_StdItfReq>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
      break;
 800647a:	e016      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fc2d 	bl	8006ce4 <USBD_StdEPReq>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
      break;
 800648e:	e00c      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006496:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 ffc2 	bl	8008428 <USBD_LL_StallEP>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
      break;
 80064a8:	bf00      	nop
  }

  return ret;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	460b      	mov	r3, r1
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d16e      	bne.n	80065aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80064d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80064da:	2b03      	cmp	r3, #3
 80064dc:	f040 8098 	bne.w	8006610 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d913      	bls.n	8006514 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4293      	cmp	r3, r2
 8006504:	bf28      	it	cs
 8006506:	4613      	movcs	r3, r2
 8006508:	461a      	mov	r2, r3
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 f9be 	bl	800788e <USBD_CtlContinueRx>
 8006512:	e07d      	b.n	8006610 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2b02      	cmp	r3, #2
 8006520:	d014      	beq.n	800654c <USBD_LL_DataOutStage+0x98>
 8006522:	2b02      	cmp	r3, #2
 8006524:	d81d      	bhi.n	8006562 <USBD_LL_DataOutStage+0xae>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <USBD_LL_DataOutStage+0x7c>
 800652a:	2b01      	cmp	r3, #1
 800652c:	d003      	beq.n	8006536 <USBD_LL_DataOutStage+0x82>
 800652e:	e018      	b.n	8006562 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	75bb      	strb	r3, [r7, #22]
            break;
 8006534:	e018      	b.n	8006568 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800653c:	b2db      	uxtb	r3, r3
 800653e:	4619      	mov	r1, r3
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fa64 	bl	8006a0e <USBD_CoreFindIF>
 8006546:	4603      	mov	r3, r0
 8006548:	75bb      	strb	r3, [r7, #22]
            break;
 800654a:	e00d      	b.n	8006568 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4619      	mov	r1, r3
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fa66 	bl	8006a28 <USBD_CoreFindEP>
 800655c:	4603      	mov	r3, r0
 800655e:	75bb      	strb	r3, [r7, #22]
            break;
 8006560:	e002      	b.n	8006568 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	75bb      	strb	r3, [r7, #22]
            break;
 8006566:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006568:	7dbb      	ldrb	r3, [r7, #22]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d119      	bne.n	80065a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d113      	bne.n	80065a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800657a:	7dba      	ldrb	r2, [r7, #22]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	32ae      	adds	r2, #174	@ 0xae
 8006580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800658a:	7dba      	ldrb	r2, [r7, #22]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006592:	7dba      	ldrb	r2, [r7, #22]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	32ae      	adds	r2, #174	@ 0xae
 8006598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f001 f984 	bl	80078b0 <USBD_CtlSendStatus>
 80065a8:	e032      	b.n	8006610 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065aa:	7afb      	ldrb	r3, [r7, #11]
 80065ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	4619      	mov	r1, r3
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fa37 	bl	8006a28 <USBD_CoreFindEP>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065be:	7dbb      	ldrb	r3, [r7, #22]
 80065c0:	2bff      	cmp	r3, #255	@ 0xff
 80065c2:	d025      	beq.n	8006610 <USBD_LL_DataOutStage+0x15c>
 80065c4:	7dbb      	ldrb	r3, [r7, #22]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d122      	bne.n	8006610 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d117      	bne.n	8006606 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065d6:	7dba      	ldrb	r2, [r7, #22]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	32ae      	adds	r2, #174	@ 0xae
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00f      	beq.n	8006606 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065e6:	7dba      	ldrb	r2, [r7, #22]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065ee:	7dba      	ldrb	r2, [r7, #22]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	32ae      	adds	r2, #174	@ 0xae
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	7afa      	ldrb	r2, [r7, #11]
 80065fc:	4611      	mov	r1, r2
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	4798      	blx	r3
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	e000      	b.n	8006612 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	460b      	mov	r3, r1
 8006624:	607a      	str	r2, [r7, #4]
 8006626:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d16f      	bne.n	800670e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3314      	adds	r3, #20
 8006632:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800663a:	2b02      	cmp	r3, #2
 800663c:	d15a      	bne.n	80066f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	429a      	cmp	r2, r3
 8006648:	d914      	bls.n	8006674 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	461a      	mov	r2, r3
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f001 f8e6 	bl	8007832 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006666:	2300      	movs	r3, #0
 8006668:	2200      	movs	r2, #0
 800666a:	2100      	movs	r1, #0
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 ffe1 	bl	8008634 <USBD_LL_PrepareReceive>
 8006672:	e03f      	b.n	80066f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d11c      	bne.n	80066ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006688:	429a      	cmp	r2, r3
 800668a:	d316      	bcc.n	80066ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006696:	429a      	cmp	r2, r3
 8006698:	d20f      	bcs.n	80066ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800669a:	2200      	movs	r2, #0
 800669c:	2100      	movs	r1, #0
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f001 f8c7 	bl	8007832 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ac:	2300      	movs	r3, #0
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f001 ffbe 	bl	8008634 <USBD_LL_PrepareReceive>
 80066b8:	e01c      	b.n	80066f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d10f      	bne.n	80066e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066e6:	2180      	movs	r1, #128	@ 0x80
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f001 fe9d 	bl	8008428 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f001 f8f1 	bl	80078d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d03a      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff fe42 	bl	8006388 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800670c:	e032      	b.n	8006774 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800670e:	7afb      	ldrb	r3, [r7, #11]
 8006710:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006714:	b2db      	uxtb	r3, r3
 8006716:	4619      	mov	r1, r3
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f985 	bl	8006a28 <USBD_CoreFindEP>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	2bff      	cmp	r3, #255	@ 0xff
 8006726:	d025      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d122      	bne.n	8006774 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b03      	cmp	r3, #3
 8006738:	d11c      	bne.n	8006774 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800673a:	7dfa      	ldrb	r2, [r7, #23]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	32ae      	adds	r2, #174	@ 0xae
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d014      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800674a:	7dfa      	ldrb	r2, [r7, #23]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006752:	7dfa      	ldrb	r2, [r7, #23]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	32ae      	adds	r2, #174	@ 0xae
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	7afa      	ldrb	r2, [r7, #11]
 8006760:	4611      	mov	r1, r2
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	4798      	blx	r3
 8006766:	4603      	mov	r3, r0
 8006768:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800676a:	7dbb      	ldrb	r3, [r7, #22]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006770:	7dbb      	ldrb	r3, [r7, #22]
 8006772:	e000      	b.n	8006776 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d014      	beq.n	80067e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00e      	beq.n	80067e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6852      	ldr	r2, [r2, #4]
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	4611      	mov	r1, r2
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e4:	2340      	movs	r3, #64	@ 0x40
 80067e6:	2200      	movs	r2, #0
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fda8 	bl	8008340 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2240      	movs	r2, #64	@ 0x40
 80067fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006800:	2340      	movs	r3, #64	@ 0x40
 8006802:	2200      	movs	r2, #0
 8006804:	2180      	movs	r1, #128	@ 0x80
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fd9a 	bl	8008340 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2240      	movs	r2, #64	@ 0x40
 8006816:	621a      	str	r2, [r3, #32]

  return ret;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b04      	cmp	r3, #4
 8006854:	d006      	beq.n	8006864 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800685c:	b2da      	uxtb	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2204      	movs	r2, #4
 8006868:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b04      	cmp	r3, #4
 800688c:	d106      	bne.n	800689c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006894:	b2da      	uxtb	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d110      	bne.n	80068e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	32ae      	adds	r2, #174	@ 0xae
 8006900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	e01c      	b.n	8006946 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b03      	cmp	r3, #3
 8006916:	d115      	bne.n	8006944 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32ae      	adds	r2, #174	@ 0xae
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	32ae      	adds	r2, #174	@ 0xae
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	4611      	mov	r1, r2
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	32ae      	adds	r2, #174	@ 0xae
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	e01c      	b.n	80069aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b03      	cmp	r3, #3
 800697a:	d115      	bne.n	80069a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32ae      	adds	r2, #174	@ 0xae
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	@ 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	4611      	mov	r1, r2
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6852      	ldr	r2, [r2, #4]
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	4611      	mov	r1, r2
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a00:	2303      	movs	r3, #3
 8006a02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	885b      	ldrh	r3, [r3, #2]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d91f      	bls.n	8006aa8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a6e:	e013      	b.n	8006a98 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a70:	f107 030a 	add.w	r3, r7, #10
 8006a74:	4619      	mov	r1, r3
 8006a76:	6978      	ldr	r0, [r7, #20]
 8006a78:	f000 f81b 	bl	8006ab2 <USBD_GetNextDesc>
 8006a7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	785b      	ldrb	r3, [r3, #1]
 8006a82:	2b05      	cmp	r3, #5
 8006a84:	d108      	bne.n	8006a98 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	789b      	ldrb	r3, [r3, #2]
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d008      	beq.n	8006aa6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	885b      	ldrh	r3, [r3, #2]
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	897b      	ldrh	r3, [r7, #10]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d8e5      	bhi.n	8006a70 <USBD_GetEpDesc+0x2e>
 8006aa4:	e000      	b.n	8006aa8 <USBD_GetEpDesc+0x66>
          break;
 8006aa6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006aa8:	693b      	ldr	r3, [r7, #16]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	4413      	add	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3301      	adds	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b08:	8a3b      	ldrh	r3, [r7, #16]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	b21a      	sxth	r2, r3
 8006b0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	b21b      	sxth	r3, r3
 8006b16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b18:	89fb      	ldrh	r3, [r7, #14]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b3e:	2b40      	cmp	r3, #64	@ 0x40
 8006b40:	d005      	beq.n	8006b4e <USBD_StdDevReq+0x26>
 8006b42:	2b40      	cmp	r3, #64	@ 0x40
 8006b44:	d857      	bhi.n	8006bf6 <USBD_StdDevReq+0xce>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00f      	beq.n	8006b6a <USBD_StdDevReq+0x42>
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d153      	bne.n	8006bf6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	32ae      	adds	r2, #174	@ 0xae
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
      break;
 8006b68:	e04a      	b.n	8006c00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	d83b      	bhi.n	8006bea <USBD_StdDevReq+0xc2>
 8006b72:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <USBD_StdDevReq+0x50>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006bcd 	.word	0x08006bcd
 8006b7c:	08006be1 	.word	0x08006be1
 8006b80:	08006beb 	.word	0x08006beb
 8006b84:	08006bd7 	.word	0x08006bd7
 8006b88:	08006beb 	.word	0x08006beb
 8006b8c:	08006bab 	.word	0x08006bab
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006beb 	.word	0x08006beb
 8006b98:	08006bc3 	.word	0x08006bc3
 8006b9c:	08006bb5 	.word	0x08006bb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa3c 	bl	8007020 <USBD_GetDescriptor>
          break;
 8006ba8:	e024      	b.n	8006bf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fbcb 	bl	8007348 <USBD_SetAddress>
          break;
 8006bb2:	e01f      	b.n	8006bf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fc0a 	bl	80073d0 <USBD_SetConfig>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
          break;
 8006bc0:	e018      	b.n	8006bf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fcad 	bl	8007524 <USBD_GetConfig>
          break;
 8006bca:	e013      	b.n	8006bf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fcde 	bl	8007590 <USBD_GetStatus>
          break;
 8006bd4:	e00e      	b.n	8006bf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fd0d 	bl	80075f8 <USBD_SetFeature>
          break;
 8006bde:	e009      	b.n	8006bf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fd31 	bl	800764a <USBD_ClrFeature>
          break;
 8006be8:	e004      	b.n	8006bf4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fd88 	bl	8007702 <USBD_CtlError>
          break;
 8006bf2:	bf00      	nop
      }
      break;
 8006bf4:	e004      	b.n	8006c00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fd82 	bl	8007702 <USBD_CtlError>
      break;
 8006bfe:	bf00      	nop
  }

  return ret;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop

08006c0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c22:	2b40      	cmp	r3, #64	@ 0x40
 8006c24:	d005      	beq.n	8006c32 <USBD_StdItfReq+0x26>
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d852      	bhi.n	8006cd0 <USBD_StdItfReq+0xc4>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <USBD_StdItfReq+0x26>
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d14e      	bne.n	8006cd0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d840      	bhi.n	8006cc2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	889b      	ldrh	r3, [r3, #4]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d836      	bhi.n	8006cb8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	889b      	ldrh	r3, [r3, #4]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff fedb 	bl	8006a0e <USBD_CoreFindIF>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	2bff      	cmp	r3, #255	@ 0xff
 8006c60:	d01d      	beq.n	8006c9e <USBD_StdItfReq+0x92>
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11a      	bne.n	8006c9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c68:	7bba      	ldrb	r2, [r7, #14]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	32ae      	adds	r2, #174	@ 0xae
 8006c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00f      	beq.n	8006c98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c78:	7bba      	ldrb	r2, [r7, #14]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c80:	7bba      	ldrb	r2, [r7, #14]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	32ae      	adds	r2, #174	@ 0xae
 8006c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c96:	e004      	b.n	8006ca2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c9c:	e001      	b.n	8006ca2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d110      	bne.n	8006ccc <USBD_StdItfReq+0xc0>
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fdfd 	bl	80078b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cb6:	e009      	b.n	8006ccc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fd21 	bl	8007702 <USBD_CtlError>
          break;
 8006cc0:	e004      	b.n	8006ccc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fd1c 	bl	8007702 <USBD_CtlError>
          break;
 8006cca:	e000      	b.n	8006cce <USBD_StdItfReq+0xc2>
          break;
 8006ccc:	bf00      	nop
      }
      break;
 8006cce:	e004      	b.n	8006cda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fd15 	bl	8007702 <USBD_CtlError>
      break;
 8006cd8:	bf00      	nop
  }

  return ret;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	889b      	ldrh	r3, [r3, #4]
 8006cf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d00:	2b40      	cmp	r3, #64	@ 0x40
 8006d02:	d007      	beq.n	8006d14 <USBD_StdEPReq+0x30>
 8006d04:	2b40      	cmp	r3, #64	@ 0x40
 8006d06:	f200 817f 	bhi.w	8007008 <USBD_StdEPReq+0x324>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d02a      	beq.n	8006d64 <USBD_StdEPReq+0x80>
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	f040 817a 	bne.w	8007008 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff fe85 	bl	8006a28 <USBD_CoreFindEP>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d22:	7b7b      	ldrb	r3, [r7, #13]
 8006d24:	2bff      	cmp	r3, #255	@ 0xff
 8006d26:	f000 8174 	beq.w	8007012 <USBD_StdEPReq+0x32e>
 8006d2a:	7b7b      	ldrb	r3, [r7, #13]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f040 8170 	bne.w	8007012 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d32:	7b7a      	ldrb	r2, [r7, #13]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d3a:	7b7a      	ldrb	r2, [r7, #13]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	32ae      	adds	r2, #174	@ 0xae
 8006d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8163 	beq.w	8007012 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d4c:	7b7a      	ldrb	r2, [r7, #13]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	32ae      	adds	r2, #174	@ 0xae
 8006d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d62:	e156      	b.n	8007012 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d008      	beq.n	8006d7e <USBD_StdEPReq+0x9a>
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	f300 8145 	bgt.w	8006ffc <USBD_StdEPReq+0x318>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 809b 	beq.w	8006eae <USBD_StdEPReq+0x1ca>
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d03c      	beq.n	8006df6 <USBD_StdEPReq+0x112>
 8006d7c:	e13e      	b.n	8006ffc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d002      	beq.n	8006d90 <USBD_StdEPReq+0xac>
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d016      	beq.n	8006dbc <USBD_StdEPReq+0xd8>
 8006d8e:	e02c      	b.n	8006dea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00d      	beq.n	8006db2 <USBD_StdEPReq+0xce>
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b80      	cmp	r3, #128	@ 0x80
 8006d9a:	d00a      	beq.n	8006db2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 fb41 	bl	8008428 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006da6:	2180      	movs	r1, #128	@ 0x80
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 fb3d 	bl	8008428 <USBD_LL_StallEP>
 8006dae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006db0:	e020      	b.n	8006df4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fca4 	bl	8007702 <USBD_CtlError>
              break;
 8006dba:	e01b      	b.n	8006df4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	885b      	ldrh	r3, [r3, #2]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10e      	bne.n	8006de2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00b      	beq.n	8006de2 <USBD_StdEPReq+0xfe>
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b80      	cmp	r3, #128	@ 0x80
 8006dce:	d008      	beq.n	8006de2 <USBD_StdEPReq+0xfe>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fb23 	bl	8008428 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fd64 	bl	80078b0 <USBD_CtlSendStatus>

              break;
 8006de8:	e004      	b.n	8006df4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fc88 	bl	8007702 <USBD_CtlError>
              break;
 8006df2:	bf00      	nop
          }
          break;
 8006df4:	e107      	b.n	8007006 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d002      	beq.n	8006e08 <USBD_StdEPReq+0x124>
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d016      	beq.n	8006e34 <USBD_StdEPReq+0x150>
 8006e06:	e04b      	b.n	8006ea0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <USBD_StdEPReq+0x146>
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	2b80      	cmp	r3, #128	@ 0x80
 8006e12:	d00a      	beq.n	8006e2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fb05 	bl	8008428 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e1e:	2180      	movs	r1, #128	@ 0x80
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fb01 	bl	8008428 <USBD_LL_StallEP>
 8006e26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e28:	e040      	b.n	8006eac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fc68 	bl	8007702 <USBD_CtlError>
              break;
 8006e32:	e03b      	b.n	8006eac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	885b      	ldrh	r3, [r3, #2]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d136      	bne.n	8006eaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fb22 	bl	8008494 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fd2d 	bl	80078b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fde4 	bl	8006a28 <USBD_CoreFindEP>
 8006e60:	4603      	mov	r3, r0
 8006e62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e64:	7b7b      	ldrb	r3, [r7, #13]
 8006e66:	2bff      	cmp	r3, #255	@ 0xff
 8006e68:	d01f      	beq.n	8006eaa <USBD_StdEPReq+0x1c6>
 8006e6a:	7b7b      	ldrb	r3, [r7, #13]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d11c      	bne.n	8006eaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e70:	7b7a      	ldrb	r2, [r7, #13]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e78:	7b7a      	ldrb	r2, [r7, #13]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	32ae      	adds	r2, #174	@ 0xae
 8006e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d010      	beq.n	8006eaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e88:	7b7a      	ldrb	r2, [r7, #13]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	32ae      	adds	r2, #174	@ 0xae
 8006e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e9e:	e004      	b.n	8006eaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fc2d 	bl	8007702 <USBD_CtlError>
              break;
 8006ea8:	e000      	b.n	8006eac <USBD_StdEPReq+0x1c8>
              break;
 8006eaa:	bf00      	nop
          }
          break;
 8006eac:	e0ab      	b.n	8007006 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d002      	beq.n	8006ec0 <USBD_StdEPReq+0x1dc>
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d032      	beq.n	8006f24 <USBD_StdEPReq+0x240>
 8006ebe:	e097      	b.n	8006ff0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <USBD_StdEPReq+0x1f2>
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b80      	cmp	r3, #128	@ 0x80
 8006eca:	d004      	beq.n	8006ed6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc17 	bl	8007702 <USBD_CtlError>
                break;
 8006ed4:	e091      	b.n	8006ffa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da0b      	bge.n	8006ef6 <USBD_StdEPReq+0x212>
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	3310      	adds	r3, #16
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	e00b      	b.n	8006f0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fc6d 	bl	80077fc <USBD_CtlSendData>
              break;
 8006f22:	e06a      	b.n	8006ffa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	da11      	bge.n	8006f50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	f003 020f 	and.w	r2, r3, #15
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	3324      	adds	r3, #36	@ 0x24
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d117      	bne.n	8006f76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fbda 	bl	8007702 <USBD_CtlError>
                  break;
 8006f4e:	e054      	b.n	8006ffa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	f003 020f 	and.w	r2, r3, #15
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fbc7 	bl	8007702 <USBD_CtlError>
                  break;
 8006f74:	e041      	b.n	8006ffa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da0b      	bge.n	8006f96 <USBD_StdEPReq+0x2b2>
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	3304      	adds	r3, #4
 8006f94:	e00b      	b.n	8006fae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	3304      	adds	r3, #4
 8006fae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <USBD_StdEPReq+0x2d8>
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	2b80      	cmp	r3, #128	@ 0x80
 8006fba:	d103      	bne.n	8006fc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e00e      	b.n	8006fe2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fa99 	bl	8008500 <USBD_LL_IsStallEP>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fc07 	bl	80077fc <USBD_CtlSendData>
              break;
 8006fee:	e004      	b.n	8006ffa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb85 	bl	8007702 <USBD_CtlError>
              break;
 8006ff8:	bf00      	nop
          }
          break;
 8006ffa:	e004      	b.n	8007006 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fb7f 	bl	8007702 <USBD_CtlError>
          break;
 8007004:	bf00      	nop
      }
      break;
 8007006:	e005      	b.n	8007014 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fb79 	bl	8007702 <USBD_CtlError>
      break;
 8007010:	e000      	b.n	8007014 <USBD_StdEPReq+0x330>
      break;
 8007012:	bf00      	nop
  }

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	0a1b      	lsrs	r3, r3, #8
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	2b0e      	cmp	r3, #14
 8007042:	f200 8152 	bhi.w	80072ea <USBD_GetDescriptor+0x2ca>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <USBD_GetDescriptor+0x2c>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	080070bd 	.word	0x080070bd
 8007050:	080070d5 	.word	0x080070d5
 8007054:	08007115 	.word	0x08007115
 8007058:	080072eb 	.word	0x080072eb
 800705c:	080072eb 	.word	0x080072eb
 8007060:	0800728b 	.word	0x0800728b
 8007064:	080072b7 	.word	0x080072b7
 8007068:	080072eb 	.word	0x080072eb
 800706c:	080072eb 	.word	0x080072eb
 8007070:	080072eb 	.word	0x080072eb
 8007074:	080072eb 	.word	0x080072eb
 8007078:	080072eb 	.word	0x080072eb
 800707c:	080072eb 	.word	0x080072eb
 8007080:	080072eb 	.word	0x080072eb
 8007084:	08007089 	.word	0x08007089
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070aa:	e126      	b.n	80072fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb27 	bl	8007702 <USBD_CtlError>
        err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
      break;
 80070ba:	e11e      	b.n	80072fa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	7c12      	ldrb	r2, [r2, #16]
 80070c8:	f107 0108 	add.w	r1, r7, #8
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
      break;
 80070d2:	e112      	b.n	80072fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7c1b      	ldrb	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10d      	bne.n	80070f8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	f107 0208 	add.w	r2, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	2202      	movs	r2, #2
 80070f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070f6:	e100      	b.n	80072fa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	f107 0208 	add.w	r2, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	2202      	movs	r2, #2
 8007110:	701a      	strb	r2, [r3, #0]
      break;
 8007112:	e0f2      	b.n	80072fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	885b      	ldrh	r3, [r3, #2]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b05      	cmp	r3, #5
 800711c:	f200 80ac 	bhi.w	8007278 <USBD_GetDescriptor+0x258>
 8007120:	a201      	add	r2, pc, #4	@ (adr r2, 8007128 <USBD_GetDescriptor+0x108>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	08007141 	.word	0x08007141
 800712c:	08007175 	.word	0x08007175
 8007130:	080071a9 	.word	0x080071a9
 8007134:	080071dd 	.word	0x080071dd
 8007138:	08007211 	.word	0x08007211
 800713c:	08007245 	.word	0x08007245
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7c12      	ldrb	r2, [r2, #16]
 8007158:	f107 0108 	add.w	r1, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007162:	e091      	b.n	8007288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 facb 	bl	8007702 <USBD_CtlError>
            err++;
 800716c:	7afb      	ldrb	r3, [r7, #11]
 800716e:	3301      	adds	r3, #1
 8007170:	72fb      	strb	r3, [r7, #11]
          break;
 8007172:	e089      	b.n	8007288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	7c12      	ldrb	r2, [r2, #16]
 800718c:	f107 0108 	add.w	r1, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007196:	e077      	b.n	8007288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fab1 	bl	8007702 <USBD_CtlError>
            err++;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	3301      	adds	r3, #1
 80071a4:	72fb      	strb	r3, [r7, #11]
          break;
 80071a6:	e06f      	b.n	8007288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ca:	e05d      	b.n	8007288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa97 	bl	8007702 <USBD_CtlError>
            err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
          break;
 80071da:	e055      	b.n	8007288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7c12      	ldrb	r2, [r2, #16]
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fe:	e043      	b.n	8007288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa7d 	bl	8007702 <USBD_CtlError>
            err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
          break;
 800720e:	e03b      	b.n	8007288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7c12      	ldrb	r2, [r2, #16]
 8007228:	f107 0108 	add.w	r1, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007232:	e029      	b.n	8007288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa63 	bl	8007702 <USBD_CtlError>
            err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
          break;
 8007242:	e021      	b.n	8007288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7c12      	ldrb	r2, [r2, #16]
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007266:	e00f      	b.n	8007288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa49 	bl	8007702 <USBD_CtlError>
            err++;
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	3301      	adds	r3, #1
 8007274:	72fb      	strb	r3, [r7, #11]
          break;
 8007276:	e007      	b.n	8007288 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa41 	bl	8007702 <USBD_CtlError>
          err++;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	3301      	adds	r3, #1
 8007284:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007286:	bf00      	nop
      }
      break;
 8007288:	e037      	b.n	80072fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7c1b      	ldrb	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729a:	f107 0208 	add.w	r2, r7, #8
 800729e:	4610      	mov	r0, r2
 80072a0:	4798      	blx	r3
 80072a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072a4:	e029      	b.n	80072fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa2a 	bl	8007702 <USBD_CtlError>
        err++;
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	3301      	adds	r3, #1
 80072b2:	72fb      	strb	r3, [r7, #11]
      break;
 80072b4:	e021      	b.n	80072fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7c1b      	ldrb	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	f107 0208 	add.w	r2, r7, #8
 80072ca:	4610      	mov	r0, r2
 80072cc:	4798      	blx	r3
 80072ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3301      	adds	r3, #1
 80072d4:	2207      	movs	r2, #7
 80072d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072d8:	e00f      	b.n	80072fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa10 	bl	8007702 <USBD_CtlError>
        err++;
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	3301      	adds	r3, #1
 80072e6:	72fb      	strb	r3, [r7, #11]
      break;
 80072e8:	e007      	b.n	80072fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa08 	bl	8007702 <USBD_CtlError>
      err++;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	3301      	adds	r3, #1
 80072f6:	72fb      	strb	r3, [r7, #11]
      break;
 80072f8:	bf00      	nop
  }

  if (err != 0U)
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11e      	bne.n	800733e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	88db      	ldrh	r3, [r3, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007308:	893b      	ldrh	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	88da      	ldrh	r2, [r3, #6]
 8007312:	893b      	ldrh	r3, [r7, #8]
 8007314:	4293      	cmp	r3, r2
 8007316:	bf28      	it	cs
 8007318:	4613      	movcs	r3, r2
 800731a:	b29b      	uxth	r3, r3
 800731c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800731e:	893b      	ldrh	r3, [r7, #8]
 8007320:	461a      	mov	r2, r3
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa69 	bl	80077fc <USBD_CtlSendData>
 800732a:	e009      	b.n	8007340 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9e7 	bl	8007702 <USBD_CtlError>
 8007334:	e004      	b.n	8007340 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 faba 	bl	80078b0 <USBD_CtlSendStatus>
 800733c:	e000      	b.n	8007340 <USBD_GetDescriptor+0x320>
    return;
 800733e:	bf00      	nop
  }
}
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	889b      	ldrh	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d131      	bne.n	80073be <USBD_SetAddress+0x76>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	88db      	ldrh	r3, [r3, #6]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d12d      	bne.n	80073be <USBD_SetAddress+0x76>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	885b      	ldrh	r3, [r3, #2]
 8007366:	2b7f      	cmp	r3, #127	@ 0x7f
 8007368:	d829      	bhi.n	80073be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007374:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d104      	bne.n	800738c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f9bc 	bl	8007702 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738a:	e01d      	b.n	80073c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 f8dd 	bl	8008558 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa86 	bl	80078b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	e009      	b.n	80073c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073bc:	e004      	b.n	80073c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f99e 	bl	8007702 <USBD_CtlError>
  }
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	4b4e      	ldr	r3, [pc, #312]	@ (8007520 <USBD_SetConfig+0x150>)
 80073e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007520 <USBD_SetConfig+0x150>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d905      	bls.n	80073fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f985 	bl	8007702 <USBD_CtlError>
    return USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e08c      	b.n	8007516 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d002      	beq.n	800740e <USBD_SetConfig+0x3e>
 8007408:	2b03      	cmp	r3, #3
 800740a:	d029      	beq.n	8007460 <USBD_SetConfig+0x90>
 800740c:	e075      	b.n	80074fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800740e:	4b44      	ldr	r3, [pc, #272]	@ (8007520 <USBD_SetConfig+0x150>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d020      	beq.n	8007458 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007416:	4b42      	ldr	r3, [pc, #264]	@ (8007520 <USBD_SetConfig+0x150>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007420:	4b3f      	ldr	r3, [pc, #252]	@ (8007520 <USBD_SetConfig+0x150>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fe ffb9 	bl	800639e <USBD_SetClassConfig>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f962 	bl	8007702 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007446:	e065      	b.n	8007514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fa31 	bl	80078b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2203      	movs	r2, #3
 8007452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007456:	e05d      	b.n	8007514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fa29 	bl	80078b0 <USBD_CtlSendStatus>
      break;
 800745e:	e059      	b.n	8007514 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007460:	4b2f      	ldr	r3, [pc, #188]	@ (8007520 <USBD_SetConfig+0x150>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d112      	bne.n	800748e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007470:	4b2b      	ldr	r3, [pc, #172]	@ (8007520 <USBD_SetConfig+0x150>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800747a:	4b29      	ldr	r3, [pc, #164]	@ (8007520 <USBD_SetConfig+0x150>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fe ffa8 	bl	80063d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa12 	bl	80078b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800748c:	e042      	b.n	8007514 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800748e:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <USBD_SetConfig+0x150>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d02a      	beq.n	80074f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7fe ff96 	bl	80063d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80074aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007520 <USBD_SetConfig+0x150>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007520 <USBD_SetConfig+0x150>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fe ff6f 	bl	800639e <USBD_SetClassConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00f      	beq.n	80074ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f918 	bl	8007702 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fe ff7b 	bl	80063d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074e8:	e014      	b.n	8007514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9e0 	bl	80078b0 <USBD_CtlSendStatus>
      break;
 80074f0:	e010      	b.n	8007514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9dc 	bl	80078b0 <USBD_CtlSendStatus>
      break;
 80074f8:	e00c      	b.n	8007514 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f900 	bl	8007702 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007502:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <USBD_SetConfig+0x150>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fe ff64 	bl	80063d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800750e:	2303      	movs	r3, #3
 8007510:	73fb      	strb	r3, [r7, #15]
      break;
 8007512:	bf00      	nop
  }

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200001e8 	.word	0x200001e8

08007524 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	88db      	ldrh	r3, [r3, #6]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d004      	beq.n	8007540 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8e2 	bl	8007702 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800753e:	e023      	b.n	8007588 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	dc02      	bgt.n	8007552 <USBD_GetConfig+0x2e>
 800754c:	2b00      	cmp	r3, #0
 800754e:	dc03      	bgt.n	8007558 <USBD_GetConfig+0x34>
 8007550:	e015      	b.n	800757e <USBD_GetConfig+0x5a>
 8007552:	2b03      	cmp	r3, #3
 8007554:	d00b      	beq.n	800756e <USBD_GetConfig+0x4a>
 8007556:	e012      	b.n	800757e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3308      	adds	r3, #8
 8007562:	2201      	movs	r2, #1
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f948 	bl	80077fc <USBD_CtlSendData>
        break;
 800756c:	e00c      	b.n	8007588 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	2201      	movs	r2, #1
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f940 	bl	80077fc <USBD_CtlSendData>
        break;
 800757c:	e004      	b.n	8007588 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f8be 	bl	8007702 <USBD_CtlError>
        break;
 8007586:	bf00      	nop
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d81e      	bhi.n	80075e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	88db      	ldrh	r3, [r3, #6]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d004      	beq.n	80075ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f8a5 	bl	8007702 <USBD_CtlError>
        break;
 80075b8:	e01a      	b.n	80075f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	330c      	adds	r3, #12
 80075da:	2202      	movs	r2, #2
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f90c 	bl	80077fc <USBD_CtlSendData>
      break;
 80075e4:	e004      	b.n	80075f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f88a 	bl	8007702 <USBD_CtlError>
      break;
 80075ee:	bf00      	nop
  }
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f94c 	bl	80078b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007618:	e013      	b.n	8007642 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	885b      	ldrh	r3, [r3, #2]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d10b      	bne.n	800763a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	889b      	ldrh	r3, [r3, #4]
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	b29b      	uxth	r3, r3
 800762a:	b2da      	uxtb	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f93c 	bl	80078b0 <USBD_CtlSendStatus>
}
 8007638:	e003      	b.n	8007642 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f860 	bl	8007702 <USBD_CtlError>
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	2b02      	cmp	r3, #2
 8007660:	d80b      	bhi.n	800767a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	885b      	ldrh	r3, [r3, #2]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d10c      	bne.n	8007684 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f91c 	bl	80078b0 <USBD_CtlSendStatus>
      }
      break;
 8007678:	e004      	b.n	8007684 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f840 	bl	8007702 <USBD_CtlError>
      break;
 8007682:	e000      	b.n	8007686 <USBD_ClrFeature+0x3c>
      break;
 8007684:	bf00      	nop
  }
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	781a      	ldrb	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fa16 	bl	8006aea <SWAPBYTE>
 80076be:	4603      	mov	r3, r0
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3301      	adds	r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fa09 	bl	8006aea <SWAPBYTE>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff f9fc 	bl	8006aea <SWAPBYTE>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	80da      	strh	r2, [r3, #6]
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800770c:	2180      	movs	r1, #128	@ 0x80
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fe8a 	bl	8008428 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fe86 	bl	8008428 <USBD_LL_StallEP>
}
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d042      	beq.n	80077c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800773e:	6938      	ldr	r0, [r7, #16]
 8007740:	f000 f842 	bl	80077c8 <USBD_GetLen>
 8007744:	4603      	mov	r3, r0
 8007746:	3301      	adds	r3, #1
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800774e:	d808      	bhi.n	8007762 <USBD_GetString+0x3e>
 8007750:	6938      	ldr	r0, [r7, #16]
 8007752:	f000 f839 	bl	80077c8 <USBD_GetLen>
 8007756:	4603      	mov	r3, r0
 8007758:	3301      	adds	r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	e001      	b.n	8007766 <USBD_GetString+0x42>
 8007762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	4413      	add	r3, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	701a      	strb	r2, [r3, #0]
  idx++;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	3301      	adds	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4413      	add	r3, r2
 8007782:	2203      	movs	r2, #3
 8007784:	701a      	strb	r2, [r3, #0]
  idx++;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	3301      	adds	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800778c:	e013      	b.n	80077b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4413      	add	r3, r2
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	7812      	ldrb	r2, [r2, #0]
 8007798:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3301      	adds	r3, #1
 800779e:	613b      	str	r3, [r7, #16]
    idx++;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	3301      	adds	r3, #1
 80077a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	4413      	add	r3, r2
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	3301      	adds	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e7      	bne.n	800778e <USBD_GetString+0x6a>
 80077be:	e000      	b.n	80077c2 <USBD_GetString+0x9e>
    return;
 80077c0:	bf00      	nop
  }
}
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077d8:	e005      	b.n	80077e6 <USBD_GetLen+0x1e>
  {
    len++;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	3301      	adds	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f5      	bne.n	80077da <USBD_GetLen+0x12>
  }

  return len;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2202      	movs	r2, #2
 800780c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	2100      	movs	r1, #0
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fece 	bl	80085c4 <USBD_LL_Transmit>

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	2100      	movs	r1, #0
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 febd 	bl	80085c4 <USBD_LL_Transmit>

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2203      	movs	r2, #3
 8007864:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	2100      	movs	r1, #0
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fed8 	bl	8008634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	2100      	movs	r1, #0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fec7 	bl	8008634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fe7c 	bl	80085c4 <USBD_LL_Transmit>

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2205      	movs	r2, #5
 80078e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e6:	2300      	movs	r3, #0
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fea1 	bl	8008634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007900:	2200      	movs	r2, #0
 8007902:	4912      	ldr	r1, [pc, #72]	@ (800794c <MX_USB_DEVICE_Init+0x50>)
 8007904:	4812      	ldr	r0, [pc, #72]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 8007906:	f7fe fccd 	bl	80062a4 <USBD_Init>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007910:	f7f8 fed2 	bl	80006b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007914:	490f      	ldr	r1, [pc, #60]	@ (8007954 <MX_USB_DEVICE_Init+0x58>)
 8007916:	480e      	ldr	r0, [pc, #56]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 8007918:	f7fe fcf4 	bl	8006304 <USBD_RegisterClass>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007922:	f7f8 fec9 	bl	80006b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007926:	490c      	ldr	r1, [pc, #48]	@ (8007958 <MX_USB_DEVICE_Init+0x5c>)
 8007928:	4809      	ldr	r0, [pc, #36]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 800792a:	f7fe fbeb 	bl	8006104 <USBD_CDC_RegisterInterface>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007934:	f7f8 fec0 	bl	80006b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007938:	4805      	ldr	r0, [pc, #20]	@ (8007950 <MX_USB_DEVICE_Init+0x54>)
 800793a:	f7fe fd19 	bl	8006370 <USBD_Start>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007944:	f7f8 feb8 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007948:	bf00      	nop
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200000ac 	.word	0x200000ac
 8007950:	200001ec 	.word	0x200001ec
 8007954:	20000018 	.word	0x20000018
 8007958:	20000098 	.word	0x20000098

0800795c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007960:	2200      	movs	r2, #0
 8007962:	4907      	ldr	r1, [pc, #28]	@ (8007980 <CDC_Init_FS+0x24>)
 8007964:	4807      	ldr	r0, [pc, #28]	@ (8007984 <CDC_Init_FS+0x28>)
 8007966:	f7fe fbe7 	bl	8006138 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800796a:	4907      	ldr	r1, [pc, #28]	@ (8007988 <CDC_Init_FS+0x2c>)
 800796c:	4805      	ldr	r0, [pc, #20]	@ (8007984 <CDC_Init_FS+0x28>)
 800796e:	f7fe fc05 	bl	800617c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007972:	4804      	ldr	r0, [pc, #16]	@ (8007984 <CDC_Init_FS+0x28>)
 8007974:	f7fe fc60 	bl	8006238 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007978:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800797a:	4618      	mov	r0, r3
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000d4c 	.word	0x20000d4c
 8007984:	200001ec 	.word	0x200001ec
 8007988:	2000054c 	.word	0x2000054c

0800798c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007990:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007992:	4618      	mov	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
 80079a8:	4613      	mov	r3, r2
 80079aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b23      	cmp	r3, #35	@ 0x23
 80079b0:	d84a      	bhi.n	8007a48 <CDC_Control_FS+0xac>
 80079b2:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <CDC_Control_FS+0x1c>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	08007a49 	.word	0x08007a49
 80079bc:	08007a49 	.word	0x08007a49
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	08007a49 	.word	0x08007a49
 80079c8:	08007a49 	.word	0x08007a49
 80079cc:	08007a49 	.word	0x08007a49
 80079d0:	08007a49 	.word	0x08007a49
 80079d4:	08007a49 	.word	0x08007a49
 80079d8:	08007a49 	.word	0x08007a49
 80079dc:	08007a49 	.word	0x08007a49
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	08007a49 	.word	0x08007a49
 80079e8:	08007a49 	.word	0x08007a49
 80079ec:	08007a49 	.word	0x08007a49
 80079f0:	08007a49 	.word	0x08007a49
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	08007a49 	.word	0x08007a49
 80079fc:	08007a49 	.word	0x08007a49
 8007a00:	08007a49 	.word	0x08007a49
 8007a04:	08007a49 	.word	0x08007a49
 8007a08:	08007a49 	.word	0x08007a49
 8007a0c:	08007a49 	.word	0x08007a49
 8007a10:	08007a49 	.word	0x08007a49
 8007a14:	08007a49 	.word	0x08007a49
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a49 	.word	0x08007a49
 8007a28:	08007a49 	.word	0x08007a49
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007a49 	.word	0x08007a49
 8007a38:	08007a49 	.word	0x08007a49
 8007a3c:	08007a49 	.word	0x08007a49
 8007a40:	08007a49 	.word	0x08007a49
 8007a44:	08007a49 	.word	0x08007a49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a48:	bf00      	nop
  }

  return (USBD_OK);
 8007a4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b0c6      	sub	sp, #280	@ 0x118
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007a66:	6018      	str	r0, [r3, #0]
 8007a68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007a70:	6019      	str	r1, [r3, #0]
  /* USER CODE BEGIN 6 */

    char temp[CMD_BUFFER_SIZE*2];
    uint8_t valid = 0; 
 8007a72:	2300      	movs	r3, #0
 8007a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
      for (uint32_t i = 0; i < *Len; i++) {
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007a7e:	e0ba      	b.n	8007bf6 <CDC_Receive_FS+0x19e>
          char c = (char)Buf[i];
 8007a80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a84:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a8e:	4413      	add	r3, r2
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
          uint8_t u = (uint8_t)c;
 8007a96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a9a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8007a9e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8007aa2:	701a      	strb	r2, [r3, #0]
  
          // Echo every char back
          if (c != '\r' && c != '\n') {
 8007aa4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007aa8:	2b0d      	cmp	r3, #13
 8007aaa:	d01a      	beq.n	8007ae2 <CDC_Receive_FS+0x8a>
 8007aac:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007ab0:	2b0a      	cmp	r3, #10
 8007ab2:	d016      	beq.n	8007ae2 <CDC_Receive_FS+0x8a>
              // block until endpoint is free
              CDC_Transmit_FS(&u, 1);
 8007ab4:	f107 030b 	add.w	r3, r7, #11
 8007ab8:	2101      	movs	r1, #1
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 f8d4 	bl	8007c68 <CDC_Transmit_FS>
              
              if (command_index < CMD_BUFFER_SIZE - 1) {
 8007ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8007c30 <CDC_Receive_FS+0x1d8>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b7e      	cmp	r3, #126	@ 0x7e
 8007ac6:	f200 8090 	bhi.w	8007bea <CDC_Receive_FS+0x192>
                  command_buffer[command_index++] = c;
 8007aca:	4b59      	ldr	r3, [pc, #356]	@ (8007c30 <CDC_Receive_FS+0x1d8>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	b2d1      	uxtb	r1, r2
 8007ad2:	4a57      	ldr	r2, [pc, #348]	@ (8007c30 <CDC_Receive_FS+0x1d8>)
 8007ad4:	7011      	strb	r1, [r2, #0]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4a56      	ldr	r2, [pc, #344]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007ada:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007ade:	5453      	strb	r3, [r2, r1]
 8007ae0:	e084      	b.n	8007bec <CDC_Receive_FS+0x194>
              }
              continue;
          }
          
          // Terminate command
          command_buffer[command_index] = '\0';
 8007ae2:	4b53      	ldr	r3, [pc, #332]	@ (8007c30 <CDC_Receive_FS+0x1d8>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b52      	ldr	r3, [pc, #328]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007aea:	2100      	movs	r1, #0
 8007aec:	5499      	strb	r1, [r3, r2]
  
          if (command_index > 0) {
 8007aee:	4b50      	ldr	r3, [pc, #320]	@ (8007c30 <CDC_Receive_FS+0x1d8>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d07a      	beq.n	8007bec <CDC_Receive_FS+0x194>
              // your command logic
              if (strcmp(command_buffer, "LED2 on") == 0) {
 8007af6:	4950      	ldr	r1, [pc, #320]	@ (8007c38 <CDC_Receive_FS+0x1e0>)
 8007af8:	484e      	ldr	r0, [pc, #312]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007afa:	f7f8 fb81 	bl	8000200 <strcmp>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d106      	bne.n	8007b12 <CDC_Receive_FS+0xba>
                  LED2 = 1;
 8007b04:	4b4d      	ldr	r3, [pc, #308]	@ (8007c3c <CDC_Receive_FS+0x1e4>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8007b10:	e00c      	b.n	8007b2c <CDC_Receive_FS+0xd4>
              }
              else if (strcmp(command_buffer, "LED2 off") == 0) {
 8007b12:	494b      	ldr	r1, [pc, #300]	@ (8007c40 <CDC_Receive_FS+0x1e8>)
 8007b14:	4847      	ldr	r0, [pc, #284]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007b16:	f7f8 fb73 	bl	8000200 <strcmp>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d105      	bne.n	8007b2c <CDC_Receive_FS+0xd4>
                  LED2 = 0;
 8007b20:	4b46      	ldr	r3, [pc, #280]	@ (8007c3c <CDC_Receive_FS+0x1e4>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
              
              // Prompting Pump 3
              if (strcmp(command_buffer, "Pump3 on forward") == 0){
 8007b2c:	4945      	ldr	r1, [pc, #276]	@ (8007c44 <CDC_Receive_FS+0x1ec>)
 8007b2e:	4841      	ldr	r0, [pc, #260]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007b30:	f7f8 fb66 	bl	8000200 <strcmp>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d109      	bne.n	8007b4e <CDC_Receive_FS+0xf6>
                Pump3_flag = 1; 
 8007b3a:	4b43      	ldr	r3, [pc, #268]	@ (8007c48 <CDC_Receive_FS+0x1f0>)
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 1; 
 8007b40:	4b42      	ldr	r3, [pc, #264]	@ (8007c4c <CDC_Receive_FS+0x1f4>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8007b4c:	e00f      	b.n	8007b6e <CDC_Receive_FS+0x116>
              }
              else if (strcmp(command_buffer, "Pump3 on backward") == 0){
 8007b4e:	4940      	ldr	r1, [pc, #256]	@ (8007c50 <CDC_Receive_FS+0x1f8>)
 8007b50:	4838      	ldr	r0, [pc, #224]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007b52:	f7f8 fb55 	bl	8000200 <strcmp>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d108      	bne.n	8007b6e <CDC_Receive_FS+0x116>
                Pump3_flag = 1; 
 8007b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c48 <CDC_Receive_FS+0x1f0>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 0; 
 8007b62:	4b3a      	ldr	r3, [pc, #232]	@ (8007c4c <CDC_Receive_FS+0x1f4>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }

              // timer test 
              if (strcmp(command_buffer, "Timer on") == 0){
 8007b6e:	4939      	ldr	r1, [pc, #228]	@ (8007c54 <CDC_Receive_FS+0x1fc>)
 8007b70:	4830      	ldr	r0, [pc, #192]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007b72:	f7f8 fb45 	bl	8000200 <strcmp>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <CDC_Receive_FS+0x130>
                Timer6_flag = 1; 
 8007b7c:	4b36      	ldr	r3, [pc, #216]	@ (8007c58 <CDC_Receive_FS+0x200>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
  
              if (valid)
 8007b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d014      	beq.n	8007bba <CDC_Receive_FS+0x162>
              {
                sprintf(temp, "\r\nReceieved: %s\r\n> ", command_buffer);
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	4a27      	ldr	r2, [pc, #156]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007b96:	4931      	ldr	r1, [pc, #196]	@ (8007c5c <CDC_Receive_FS+0x204>)
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 ff35 	bl	8008a08 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8007b9e:	f107 030c 	add.w	r3, r7, #12
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7f8 fb36 	bl	8000214 <strlen>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f107 030c 	add.w	r3, r7, #12
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f858 	bl	8007c68 <CDC_Transmit_FS>
 8007bb8:	e013      	b.n	8007be2 <CDC_Receive_FS+0x18a>
              }
              else 
              {
                sprintf(temp, "\r\nError Commaand:%s\r\n> ", command_buffer);
 8007bba:	f107 030c 	add.w	r3, r7, #12
 8007bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8007c34 <CDC_Receive_FS+0x1dc>)
 8007bc0:	4927      	ldr	r1, [pc, #156]	@ (8007c60 <CDC_Receive_FS+0x208>)
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 ff20 	bl	8008a08 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8007bc8:	f107 030c 	add.w	r3, r7, #12
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7f8 fb21 	bl	8000214 <strlen>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	4611      	mov	r1, r2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f843 	bl	8007c68 <CDC_Transmit_FS>
              }
              command_index = 0;
 8007be2:	4b13      	ldr	r3, [pc, #76]	@ (8007c30 <CDC_Receive_FS+0x1d8>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	e000      	b.n	8007bec <CDC_Receive_FS+0x194>
              continue;
 8007bea:	bf00      	nop
      for (uint32_t i = 0; i < *Len; i++) {
 8007bec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007bf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007bfa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8007c06:	429a      	cmp	r2, r3
 8007c08:	f4ff af3a 	bcc.w	8007a80 <CDC_Receive_FS+0x28>
          }
  
      }
  
      // 4) re-arm USB to receive more
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8007c0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007c10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	4813      	ldr	r0, [pc, #76]	@ (8007c64 <CDC_Receive_FS+0x20c>)
 8007c18:	f7fe fab0 	bl	800617c <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c1c:	4811      	ldr	r0, [pc, #68]	@ (8007c64 <CDC_Receive_FS+0x20c>)
 8007c1e:	f7fe fb0b 	bl	8006238 <USBD_CDC_ReceivePacket>
      return USBD_OK;
 8007c22:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000548 	.word	0x20000548
 8007c34:	200004c8 	.word	0x200004c8
 8007c38:	08009a9c 	.word	0x08009a9c
 8007c3c:	200001d1 	.word	0x200001d1
 8007c40:	08009aa4 	.word	0x08009aa4
 8007c44:	08009ab0 	.word	0x08009ab0
 8007c48:	200001d2 	.word	0x200001d2
 8007c4c:	200001d3 	.word	0x200001d3
 8007c50:	08009ac4 	.word	0x08009ac4
 8007c54:	08009ad8 	.word	0x08009ad8
 8007c58:	200001d4 	.word	0x200001d4
 8007c5c:	08009ae4 	.word	0x08009ae4
 8007c60:	08009af8 	.word	0x08009af8
 8007c64:	200001ec 	.word	0x200001ec

08007c68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c78:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb0 <CDC_Transmit_FS+0x48>)
 8007c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e00b      	b.n	8007ca6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c8e:	887b      	ldrh	r3, [r7, #2]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4806      	ldr	r0, [pc, #24]	@ (8007cb0 <CDC_Transmit_FS+0x48>)
 8007c96:	f7fe fa4f 	bl	8006138 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c9a:	4805      	ldr	r0, [pc, #20]	@ (8007cb0 <CDC_Transmit_FS+0x48>)
 8007c9c:	f7fe fa8c 	bl	80061b8 <USBD_CDC_TransmitPacket>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200001ec 	.word	0x200001ec

08007cb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
	...

08007cd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2212      	movs	r2, #18
 8007ce8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cea:	4b03      	ldr	r3, [pc, #12]	@ (8007cf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	200000cc 	.word	0x200000cc

08007cfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d0e:	4b03      	ldr	r3, [pc, #12]	@ (8007d1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	200000ec 	.word	0x200000ec

08007d20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4907      	ldr	r1, [pc, #28]	@ (8007d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d36:	4808      	ldr	r0, [pc, #32]	@ (8007d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d38:	f7ff fcf4 	bl	8007724 <USBD_GetString>
 8007d3c:	e004      	b.n	8007d48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4904      	ldr	r1, [pc, #16]	@ (8007d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d42:	4805      	ldr	r0, [pc, #20]	@ (8007d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d44:	f7ff fcee 	bl	8007724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d48:	4b02      	ldr	r3, [pc, #8]	@ (8007d54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000154c 	.word	0x2000154c
 8007d58:	08009b10 	.word	0x08009b10

08007d5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	4904      	ldr	r1, [pc, #16]	@ (8007d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d6c:	4804      	ldr	r0, [pc, #16]	@ (8007d80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d6e:	f7ff fcd9 	bl	8007724 <USBD_GetString>
  return USBD_StrDesc;
 8007d72:	4b02      	ldr	r3, [pc, #8]	@ (8007d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	2000154c 	.word	0x2000154c
 8007d80:	08009b28 	.word	0x08009b28

08007d84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6039      	str	r1, [r7, #0]
 8007d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	221a      	movs	r2, #26
 8007d94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d96:	f000 f855 	bl	8007e44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d9a:	4b02      	ldr	r3, [pc, #8]	@ (8007da4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	200000f0 	.word	0x200000f0

08007da8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	6039      	str	r1, [r7, #0]
 8007db2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	4907      	ldr	r1, [pc, #28]	@ (8007ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dbe:	4808      	ldr	r0, [pc, #32]	@ (8007de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dc0:	f7ff fcb0 	bl	8007724 <USBD_GetString>
 8007dc4:	e004      	b.n	8007dd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	4904      	ldr	r1, [pc, #16]	@ (8007ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dca:	4805      	ldr	r0, [pc, #20]	@ (8007de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dcc:	f7ff fcaa 	bl	8007724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dd0:	4b02      	ldr	r3, [pc, #8]	@ (8007ddc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	2000154c 	.word	0x2000154c
 8007de0:	08009b3c 	.word	0x08009b3c

08007de4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4907      	ldr	r1, [pc, #28]	@ (8007e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dfa:	4808      	ldr	r0, [pc, #32]	@ (8007e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dfc:	f7ff fc92 	bl	8007724 <USBD_GetString>
 8007e00:	e004      	b.n	8007e0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4904      	ldr	r1, [pc, #16]	@ (8007e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e06:	4805      	ldr	r0, [pc, #20]	@ (8007e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e08:	f7ff fc8c 	bl	8007724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e0c:	4b02      	ldr	r3, [pc, #8]	@ (8007e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	2000154c 	.word	0x2000154c
 8007e1c:	08009b48 	.word	0x08009b48

08007e20 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	220c      	movs	r2, #12
 8007e30:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007e32:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200000e0 	.word	0x200000e0

08007e44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <Get_SerialNum+0x44>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e50:	4b0e      	ldr	r3, [pc, #56]	@ (8007e8c <Get_SerialNum+0x48>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e56:	4b0e      	ldr	r3, [pc, #56]	@ (8007e90 <Get_SerialNum+0x4c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	4909      	ldr	r1, [pc, #36]	@ (8007e94 <Get_SerialNum+0x50>)
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f814 	bl	8007e9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e74:	2204      	movs	r2, #4
 8007e76:	4908      	ldr	r1, [pc, #32]	@ (8007e98 <Get_SerialNum+0x54>)
 8007e78:	68b8      	ldr	r0, [r7, #8]
 8007e7a:	f000 f80f 	bl	8007e9c <IntToUnicode>
  }
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	1fff7590 	.word	0x1fff7590
 8007e8c:	1fff7594 	.word	0x1fff7594
 8007e90:	1fff7598 	.word	0x1fff7598
 8007e94:	200000f2 	.word	0x200000f2
 8007e98:	20000102 	.word	0x20000102

08007e9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]
 8007eb2:	e027      	b.n	8007f04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	0f1b      	lsrs	r3, r3, #28
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d80b      	bhi.n	8007ed4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	0f1b      	lsrs	r3, r3, #28
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	440b      	add	r3, r1
 8007ecc:	3230      	adds	r2, #48	@ 0x30
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	e00a      	b.n	8007eea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	0f1b      	lsrs	r3, r3, #28
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	440b      	add	r3, r1
 8007ee4:	3237      	adds	r2, #55	@ 0x37
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4413      	add	r3, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	3301      	adds	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
 8007f04:	7dfa      	ldrb	r2, [r7, #23]
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d3d3      	bcc.n	8007eb4 <IntToUnicode+0x18>
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
	...

08007f1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b0b0      	sub	sp, #192	@ 0xc0
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	609a      	str	r2, [r3, #8]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f34:	f107 0314 	add.w	r3, r7, #20
 8007f38:	2298      	movs	r2, #152	@ 0x98
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fe5b 	bl	8008bf8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f4a:	d173      	bne.n	8008034 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007f50:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007f52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007f56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8007f62:	230c      	movs	r3, #12
 8007f64:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007f66:	2302      	movs	r3, #2
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007f6e:	2302      	movs	r3, #2
 8007f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007f72:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007f76:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f78:	f107 0314 	add.w	r3, r7, #20
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fb f9bf 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007f88:	f7f8 fb96 	bl	80006b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f90:	4a2a      	ldr	r2, [pc, #168]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f98:	4b28      	ldr	r3, [pc, #160]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007fa4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fac:	2302      	movs	r3, #2
 8007fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fbe:	230a      	movs	r3, #10
 8007fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007fc8:	4619      	mov	r1, r3
 8007fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007fce:	f7f8 fe75 	bl	8000cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd6:	4a19      	ldr	r2, [pc, #100]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fde:	4b17      	ldr	r3, [pc, #92]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fea:	4b14      	ldr	r3, [pc, #80]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d114      	bne.n	8008020 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ff6:	4b11      	ldr	r3, [pc, #68]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ffa:	4a10      	ldr	r2, [pc, #64]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8007ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008000:	6593      	str	r3, [r2, #88]	@ 0x58
 8008002:	4b0e      	ldr	r3, [pc, #56]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8008004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800800e:	f7fa fa59 	bl	80024c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008012:	4b0a      	ldr	r3, [pc, #40]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8008014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008016:	4a09      	ldr	r2, [pc, #36]	@ (800803c <HAL_PCD_MspInit+0x120>)
 8008018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800801c:	6593      	str	r3, [r2, #88]	@ 0x58
 800801e:	e001      	b.n	8008024 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008020:	f7fa fa50 	bl	80024c4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	2043      	movs	r0, #67	@ 0x43
 800802a:	f7f8 fe10 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800802e:	2043      	movs	r0, #67	@ 0x43
 8008030:	f7f8 fe29 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008034:	bf00      	nop
 8008036:	37c0      	adds	r7, #192	@ 0xc0
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	40021000 	.word	0x40021000

08008040 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fe f9d7 	bl	800640a <USBD_LL_SetupStage>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	4619      	mov	r1, r3
 800808e:	f7fe fa11 	bl	80064b4 <USBD_LL_DataOutStage>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4613      	mov	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	3320      	adds	r3, #32
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	4619      	mov	r1, r3
 80080c2:	f7fe faaa 	bl	800661a <USBD_LL_DataInStage>
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe fbe4 	bl	80068aa <USBD_LL_SOF>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080f2:	2301      	movs	r3, #1
 80080f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	79db      	ldrb	r3, [r3, #7]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d001      	beq.n	8008102 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080fe:	f7f8 fadb 	bl	80006b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008108:	7bfa      	ldrb	r2, [r7, #15]
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fb88 	bl	8006822 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fb30 	bl	800677e <USBD_LL_Reset>
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6812      	ldr	r2, [r2, #0]
 800813e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008142:	f043 0301 	orr.w	r3, r3, #1
 8008146:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fb77 	bl	8006842 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7adb      	ldrb	r3, [r3, #11]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800815c:	4b04      	ldr	r3, [pc, #16]	@ (8008170 <HAL_PCD_SuspendCallback+0x48>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	4a03      	ldr	r2, [pc, #12]	@ (8008170 <HAL_PCD_SuspendCallback+0x48>)
 8008162:	f043 0306 	orr.w	r3, r3, #6
 8008166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	e000ed00 	.word	0xe000ed00

08008174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800818e:	f023 0301 	bic.w	r3, r3, #1
 8008192:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	7adb      	ldrb	r3, [r3, #11]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d007      	beq.n	80081ac <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800819c:	4b08      	ldr	r3, [pc, #32]	@ (80081c0 <HAL_PCD_ResumeCallback+0x4c>)
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <HAL_PCD_ResumeCallback+0x4c>)
 80081a2:	f023 0306 	bic.w	r3, r3, #6
 80081a6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80081a8:	f000 faf6 	bl	8008798 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fb61 	bl	800687a <USBD_LL_Resume>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	e000ed00 	.word	0xe000ed00

080081c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fbb7 	bl	800694e <USBD_LL_IsoOUTIncomplete>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	4611      	mov	r1, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fb73 	bl	80068ea <USBD_LL_IsoINIncomplete>
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe fbc9 	bl	80069b2 <USBD_LL_DevConnected>
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fbc6 	bl	80069c8 <USBD_LL_DevDisconnected>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d13c      	bne.n	80082ce <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008254:	4a20      	ldr	r2, [pc, #128]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a1e      	ldr	r2, [pc, #120]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008260:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008264:	4b1c      	ldr	r3, [pc, #112]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008266:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800826a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800826c:	4b1a      	ldr	r3, [pc, #104]	@ (80082d8 <USBD_LL_Init+0x94>)
 800826e:	2206      	movs	r2, #6
 8008270:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008272:	4b19      	ldr	r3, [pc, #100]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008274:	2202      	movs	r2, #2
 8008276:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008278:	4b17      	ldr	r3, [pc, #92]	@ (80082d8 <USBD_LL_Init+0x94>)
 800827a:	2202      	movs	r2, #2
 800827c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800827e:	4b16      	ldr	r3, [pc, #88]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008280:	2200      	movs	r2, #0
 8008282:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008284:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008286:	2200      	movs	r2, #0
 8008288:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800828a:	4b13      	ldr	r3, [pc, #76]	@ (80082d8 <USBD_LL_Init+0x94>)
 800828c:	2200      	movs	r2, #0
 800828e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008290:	4b11      	ldr	r3, [pc, #68]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008292:	2200      	movs	r2, #0
 8008294:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008296:	4b10      	ldr	r3, [pc, #64]	@ (80082d8 <USBD_LL_Init+0x94>)
 8008298:	2200      	movs	r2, #0
 800829a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800829c:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <USBD_LL_Init+0x94>)
 800829e:	2200      	movs	r2, #0
 80082a0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082a2:	480d      	ldr	r0, [pc, #52]	@ (80082d8 <USBD_LL_Init+0x94>)
 80082a4:	f7f8 feb4 	bl	8001010 <HAL_PCD_Init>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082ae:	f7f8 fa03 	bl	80006b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082b2:	2180      	movs	r1, #128	@ 0x80
 80082b4:	4808      	ldr	r0, [pc, #32]	@ (80082d8 <USBD_LL_Init+0x94>)
 80082b6:	f7fa f80c 	bl	80022d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082ba:	2240      	movs	r2, #64	@ 0x40
 80082bc:	2100      	movs	r1, #0
 80082be:	4806      	ldr	r0, [pc, #24]	@ (80082d8 <USBD_LL_Init+0x94>)
 80082c0:	f7f9 ffc0 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082c4:	2280      	movs	r2, #128	@ 0x80
 80082c6:	2101      	movs	r1, #1
 80082c8:	4803      	ldr	r0, [pc, #12]	@ (80082d8 <USBD_LL_Init+0x94>)
 80082ca:	f7f9 ffbb 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	2000174c 	.word	0x2000174c

080082dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7f8 ff9b 	bl	800122e <HAL_PCD_Start>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d816      	bhi.n	8008330 <USBD_LL_Start+0x54>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <USBD_LL_Start+0x2c>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008319 	.word	0x08008319
 800830c:	0800831f 	.word	0x0800831f
 8008310:	08008325 	.word	0x08008325
 8008314:	0800832b 	.word	0x0800832b
    case HAL_OK :
      usb_status = USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
    break;
 800831c:	e00b      	b.n	8008336 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800831e:	2303      	movs	r3, #3
 8008320:	73fb      	strb	r3, [r7, #15]
    break;
 8008322:	e008      	b.n	8008336 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
    break;
 8008328:	e005      	b.n	8008336 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800832a:	2303      	movs	r3, #3
 800832c:	73fb      	strb	r3, [r7, #15]
    break;
 800832e:	e002      	b.n	8008336 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008330:	2303      	movs	r3, #3
 8008332:	73fb      	strb	r3, [r7, #15]
    break;
 8008334:	bf00      	nop
  }
  return usb_status;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	4608      	mov	r0, r1
 800834a:	4611      	mov	r1, r2
 800834c:	461a      	mov	r2, r3
 800834e:	4603      	mov	r3, r0
 8008350:	70fb      	strb	r3, [r7, #3]
 8008352:	460b      	mov	r3, r1
 8008354:	70bb      	strb	r3, [r7, #2]
 8008356:	4613      	mov	r3, r2
 8008358:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008368:	78bb      	ldrb	r3, [r7, #2]
 800836a:	883a      	ldrh	r2, [r7, #0]
 800836c:	78f9      	ldrb	r1, [r7, #3]
 800836e:	f7f9 fc47 	bl	8001c00 <HAL_PCD_EP_Open>
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d817      	bhi.n	80083ac <USBD_LL_OpenEP+0x6c>
 800837c:	a201      	add	r2, pc, #4	@ (adr r2, 8008384 <USBD_LL_OpenEP+0x44>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008395 	.word	0x08008395
 8008388:	0800839b 	.word	0x0800839b
 800838c:	080083a1 	.word	0x080083a1
 8008390:	080083a7 	.word	0x080083a7
    case HAL_OK :
      usb_status = USBD_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	e00b      	b.n	80083b2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	73fb      	strb	r3, [r7, #15]
    break;
 800839e:	e008      	b.n	80083b2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
    break;
 80083a4:	e005      	b.n	80083b2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	73fb      	strb	r3, [r7, #15]
    break;
 80083aa:	e002      	b.n	80083b2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	bf00      	nop
  }
  return usb_status;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7f9 fc7a 	bl	8001cd4 <HAL_PCD_EP_Close>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d816      	bhi.n	8008418 <USBD_LL_CloseEP+0x5c>
 80083ea:	a201      	add	r2, pc, #4	@ (adr r2, 80083f0 <USBD_LL_CloseEP+0x34>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008401 	.word	0x08008401
 80083f4:	08008407 	.word	0x08008407
 80083f8:	0800840d 	.word	0x0800840d
 80083fc:	08008413 	.word	0x08008413
    case HAL_OK :
      usb_status = USBD_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
    break;
 8008404:	e00b      	b.n	800841e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008406:	2303      	movs	r3, #3
 8008408:	73fb      	strb	r3, [r7, #15]
    break;
 800840a:	e008      	b.n	800841e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800840c:	2301      	movs	r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]
    break;
 8008410:	e005      	b.n	800841e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008412:	2303      	movs	r3, #3
 8008414:	73fb      	strb	r3, [r7, #15]
    break;
 8008416:	e002      	b.n	800841e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	73fb      	strb	r3, [r7, #15]
    break;
 800841c:	bf00      	nop
  }
  return usb_status;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7f9 fd09 	bl	8001e5e <HAL_PCD_EP_SetStall>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d816      	bhi.n	8008484 <USBD_LL_StallEP+0x5c>
 8008456:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <USBD_LL_StallEP+0x34>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	0800846d 	.word	0x0800846d
 8008460:	08008473 	.word	0x08008473
 8008464:	08008479 	.word	0x08008479
 8008468:	0800847f 	.word	0x0800847f
    case HAL_OK :
      usb_status = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
    break;
 8008470:	e00b      	b.n	800848a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008472:	2303      	movs	r3, #3
 8008474:	73fb      	strb	r3, [r7, #15]
    break;
 8008476:	e008      	b.n	800848a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
    break;
 800847c:	e005      	b.n	800848a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800847e:	2303      	movs	r3, #3
 8008480:	73fb      	strb	r3, [r7, #15]
    break;
 8008482:	e002      	b.n	800848a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008484:	2303      	movs	r3, #3
 8008486:	73fb      	strb	r3, [r7, #15]
    break;
 8008488:	bf00      	nop
  }
  return usb_status;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7f9 fd35 	bl	8001f22 <HAL_PCD_EP_ClrStall>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d816      	bhi.n	80084f0 <USBD_LL_ClearStallEP+0x5c>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <USBD_LL_ClearStallEP+0x34>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084d9 	.word	0x080084d9
 80084cc:	080084df 	.word	0x080084df
 80084d0:	080084e5 	.word	0x080084e5
 80084d4:	080084eb 	.word	0x080084eb
    case HAL_OK :
      usb_status = USBD_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
    break;
 80084dc:	e00b      	b.n	80084f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084de:	2303      	movs	r3, #3
 80084e0:	73fb      	strb	r3, [r7, #15]
    break;
 80084e2:	e008      	b.n	80084f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
    break;
 80084e8:	e005      	b.n	80084f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084ea:	2303      	movs	r3, #3
 80084ec:	73fb      	strb	r3, [r7, #15]
    break;
 80084ee:	e002      	b.n	80084f6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	73fb      	strb	r3, [r7, #15]
    break;
 80084f4:	bf00      	nop
  }
  return usb_status;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008512:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	da0b      	bge.n	8008534 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	4613      	mov	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	3316      	adds	r3, #22
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	e00b      	b.n	800854c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	4613      	mov	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800854a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008572:	78fa      	ldrb	r2, [r7, #3]
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f7f9 fb1e 	bl	8001bb8 <HAL_PCD_SetAddress>
 800857c:	4603      	mov	r3, r0
 800857e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b03      	cmp	r3, #3
 8008584:	d816      	bhi.n	80085b4 <USBD_LL_SetUSBAddress+0x5c>
 8008586:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <USBD_LL_SetUSBAddress+0x34>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	0800859d 	.word	0x0800859d
 8008590:	080085a3 	.word	0x080085a3
 8008594:	080085a9 	.word	0x080085a9
 8008598:	080085af 	.word	0x080085af
    case HAL_OK :
      usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
    break;
 80085a0:	e00b      	b.n	80085ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085a2:	2303      	movs	r3, #3
 80085a4:	73fb      	strb	r3, [r7, #15]
    break;
 80085a6:	e008      	b.n	80085ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]
    break;
 80085ac:	e005      	b.n	80085ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085ae:	2303      	movs	r3, #3
 80085b0:	73fb      	strb	r3, [r7, #15]
    break;
 80085b2:	e002      	b.n	80085ba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80085b4:	2303      	movs	r3, #3
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	bf00      	nop
  }
  return usb_status;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	460b      	mov	r3, r1
 80085d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085e2:	7af9      	ldrb	r1, [r7, #11]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	f7f9 fc08 	bl	8001dfc <HAL_PCD_EP_Transmit>
 80085ec:	4603      	mov	r3, r0
 80085ee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80085f0:	7dbb      	ldrb	r3, [r7, #22]
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d816      	bhi.n	8008624 <USBD_LL_Transmit+0x60>
 80085f6:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <USBD_LL_Transmit+0x38>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	08008613 	.word	0x08008613
 8008604:	08008619 	.word	0x08008619
 8008608:	0800861f 	.word	0x0800861f
    case HAL_OK :
      usb_status = USBD_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
    break;
 8008610:	e00b      	b.n	800862a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	75fb      	strb	r3, [r7, #23]
    break;
 8008616:	e008      	b.n	800862a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
    break;
 800861c:	e005      	b.n	800862a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	75fb      	strb	r3, [r7, #23]
    break;
 8008622:	e002      	b.n	800862a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008624:	2303      	movs	r3, #3
 8008626:	75fb      	strb	r3, [r7, #23]
    break;
 8008628:	bf00      	nop
  }
  return usb_status;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	460b      	mov	r3, r1
 8008642:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008652:	7af9      	ldrb	r1, [r7, #11]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	f7f9 fb86 	bl	8001d68 <HAL_PCD_EP_Receive>
 800865c:	4603      	mov	r3, r0
 800865e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008660:	7dbb      	ldrb	r3, [r7, #22]
 8008662:	2b03      	cmp	r3, #3
 8008664:	d816      	bhi.n	8008694 <USBD_LL_PrepareReceive+0x60>
 8008666:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <USBD_LL_PrepareReceive+0x38>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	0800867d 	.word	0x0800867d
 8008670:	08008683 	.word	0x08008683
 8008674:	08008689 	.word	0x08008689
 8008678:	0800868f 	.word	0x0800868f
    case HAL_OK :
      usb_status = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	75fb      	strb	r3, [r7, #23]
    break;
 8008680:	e00b      	b.n	800869a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008682:	2303      	movs	r3, #3
 8008684:	75fb      	strb	r3, [r7, #23]
    break;
 8008686:	e008      	b.n	800869a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008688:	2301      	movs	r3, #1
 800868a:	75fb      	strb	r3, [r7, #23]
    break;
 800868c:	e005      	b.n	800869a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800868e:	2303      	movs	r3, #3
 8008690:	75fb      	strb	r3, [r7, #23]
    break;
 8008692:	e002      	b.n	800869a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008694:	2303      	movs	r3, #3
 8008696:	75fb      	strb	r3, [r7, #23]
    break;
 8008698:	bf00      	nop
  }
  return usb_status;
 800869a:	7dfb      	ldrb	r3, [r7, #23]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7f9 fb86 	bl	8001dcc <HAL_PCD_EP_GetRxCount>
 80086c0:	4603      	mov	r3, r0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <HAL_PCDEx_LPM_Callback+0x18>
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d01f      	beq.n	8008722 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80086e2:	e03b      	b.n	800875c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7adb      	ldrb	r3, [r3, #11]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d007      	beq.n	80086fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80086ec:	f000 f854 	bl	8008798 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008764 <HAL_PCDEx_LPM_Callback+0x98>)
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008764 <HAL_PCDEx_LPM_Callback+0x98>)
 80086f6:	f023 0306 	bic.w	r3, r3, #6
 80086fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe f8ad 	bl	800687a <USBD_LL_Resume>
    break;
 8008720:	e01c      	b.n	800875c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6812      	ldr	r2, [r2, #0]
 8008730:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe f87e 	bl	8006842 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	7adb      	ldrb	r3, [r3, #11]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800874e:	4b05      	ldr	r3, [pc, #20]	@ (8008764 <HAL_PCDEx_LPM_Callback+0x98>)
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	4a04      	ldr	r2, [pc, #16]	@ (8008764 <HAL_PCDEx_LPM_Callback+0x98>)
 8008754:	f043 0306 	orr.w	r3, r3, #6
 8008758:	6113      	str	r3, [r2, #16]
    break;
 800875a:	bf00      	nop
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	e000ed00 	.word	0xe000ed00

08008768 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008770:	4b03      	ldr	r3, [pc, #12]	@ (8008780 <USBD_static_malloc+0x18>)
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20001c30 	.word	0x20001c30

08008784 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]

}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800879c:	f7f7 fde2 	bl	8000364 <SystemClock_Config>
}
 80087a0:	bf00      	nop
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <std>:
 80087a4:	2300      	movs	r3, #0
 80087a6:	b510      	push	{r4, lr}
 80087a8:	4604      	mov	r4, r0
 80087aa:	e9c0 3300 	strd	r3, r3, [r0]
 80087ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087b2:	6083      	str	r3, [r0, #8]
 80087b4:	8181      	strh	r1, [r0, #12]
 80087b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80087b8:	81c2      	strh	r2, [r0, #14]
 80087ba:	6183      	str	r3, [r0, #24]
 80087bc:	4619      	mov	r1, r3
 80087be:	2208      	movs	r2, #8
 80087c0:	305c      	adds	r0, #92	@ 0x5c
 80087c2:	f000 fa19 	bl	8008bf8 <memset>
 80087c6:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <std+0x58>)
 80087c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80087ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008800 <std+0x5c>)
 80087cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <std+0x60>)
 80087d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008808 <std+0x64>)
 80087d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80087d6:	4b0d      	ldr	r3, [pc, #52]	@ (800880c <std+0x68>)
 80087d8:	6224      	str	r4, [r4, #32]
 80087da:	429c      	cmp	r4, r3
 80087dc:	d006      	beq.n	80087ec <std+0x48>
 80087de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087e2:	4294      	cmp	r4, r2
 80087e4:	d002      	beq.n	80087ec <std+0x48>
 80087e6:	33d0      	adds	r3, #208	@ 0xd0
 80087e8:	429c      	cmp	r4, r3
 80087ea:	d105      	bne.n	80087f8 <std+0x54>
 80087ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f4:	f000 ba78 	b.w	8008ce8 <__retarget_lock_init_recursive>
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	08008a49 	.word	0x08008a49
 8008800:	08008a6b 	.word	0x08008a6b
 8008804:	08008aa3 	.word	0x08008aa3
 8008808:	08008ac7 	.word	0x08008ac7
 800880c:	20001e50 	.word	0x20001e50

08008810 <stdio_exit_handler>:
 8008810:	4a02      	ldr	r2, [pc, #8]	@ (800881c <stdio_exit_handler+0xc>)
 8008812:	4903      	ldr	r1, [pc, #12]	@ (8008820 <stdio_exit_handler+0x10>)
 8008814:	4803      	ldr	r0, [pc, #12]	@ (8008824 <stdio_exit_handler+0x14>)
 8008816:	f000 b869 	b.w	80088ec <_fwalk_sglue>
 800881a:	bf00      	nop
 800881c:	2000010c 	.word	0x2000010c
 8008820:	08009839 	.word	0x08009839
 8008824:	2000011c 	.word	0x2000011c

08008828 <cleanup_stdio>:
 8008828:	6841      	ldr	r1, [r0, #4]
 800882a:	4b0c      	ldr	r3, [pc, #48]	@ (800885c <cleanup_stdio+0x34>)
 800882c:	4299      	cmp	r1, r3
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	d001      	beq.n	8008838 <cleanup_stdio+0x10>
 8008834:	f001 f800 	bl	8009838 <_fflush_r>
 8008838:	68a1      	ldr	r1, [r4, #8]
 800883a:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <cleanup_stdio+0x38>)
 800883c:	4299      	cmp	r1, r3
 800883e:	d002      	beq.n	8008846 <cleanup_stdio+0x1e>
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fff9 	bl	8009838 <_fflush_r>
 8008846:	68e1      	ldr	r1, [r4, #12]
 8008848:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <cleanup_stdio+0x3c>)
 800884a:	4299      	cmp	r1, r3
 800884c:	d004      	beq.n	8008858 <cleanup_stdio+0x30>
 800884e:	4620      	mov	r0, r4
 8008850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008854:	f000 bff0 	b.w	8009838 <_fflush_r>
 8008858:	bd10      	pop	{r4, pc}
 800885a:	bf00      	nop
 800885c:	20001e50 	.word	0x20001e50
 8008860:	20001eb8 	.word	0x20001eb8
 8008864:	20001f20 	.word	0x20001f20

08008868 <global_stdio_init.part.0>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4b0b      	ldr	r3, [pc, #44]	@ (8008898 <global_stdio_init.part.0+0x30>)
 800886c:	4c0b      	ldr	r4, [pc, #44]	@ (800889c <global_stdio_init.part.0+0x34>)
 800886e:	4a0c      	ldr	r2, [pc, #48]	@ (80088a0 <global_stdio_init.part.0+0x38>)
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	4620      	mov	r0, r4
 8008874:	2200      	movs	r2, #0
 8008876:	2104      	movs	r1, #4
 8008878:	f7ff ff94 	bl	80087a4 <std>
 800887c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008880:	2201      	movs	r2, #1
 8008882:	2109      	movs	r1, #9
 8008884:	f7ff ff8e 	bl	80087a4 <std>
 8008888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800888c:	2202      	movs	r2, #2
 800888e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008892:	2112      	movs	r1, #18
 8008894:	f7ff bf86 	b.w	80087a4 <std>
 8008898:	20001f88 	.word	0x20001f88
 800889c:	20001e50 	.word	0x20001e50
 80088a0:	08008811 	.word	0x08008811

080088a4 <__sfp_lock_acquire>:
 80088a4:	4801      	ldr	r0, [pc, #4]	@ (80088ac <__sfp_lock_acquire+0x8>)
 80088a6:	f000 ba20 	b.w	8008cea <__retarget_lock_acquire_recursive>
 80088aa:	bf00      	nop
 80088ac:	20001f91 	.word	0x20001f91

080088b0 <__sfp_lock_release>:
 80088b0:	4801      	ldr	r0, [pc, #4]	@ (80088b8 <__sfp_lock_release+0x8>)
 80088b2:	f000 ba1b 	b.w	8008cec <__retarget_lock_release_recursive>
 80088b6:	bf00      	nop
 80088b8:	20001f91 	.word	0x20001f91

080088bc <__sinit>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	4604      	mov	r4, r0
 80088c0:	f7ff fff0 	bl	80088a4 <__sfp_lock_acquire>
 80088c4:	6a23      	ldr	r3, [r4, #32]
 80088c6:	b11b      	cbz	r3, 80088d0 <__sinit+0x14>
 80088c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088cc:	f7ff bff0 	b.w	80088b0 <__sfp_lock_release>
 80088d0:	4b04      	ldr	r3, [pc, #16]	@ (80088e4 <__sinit+0x28>)
 80088d2:	6223      	str	r3, [r4, #32]
 80088d4:	4b04      	ldr	r3, [pc, #16]	@ (80088e8 <__sinit+0x2c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1f5      	bne.n	80088c8 <__sinit+0xc>
 80088dc:	f7ff ffc4 	bl	8008868 <global_stdio_init.part.0>
 80088e0:	e7f2      	b.n	80088c8 <__sinit+0xc>
 80088e2:	bf00      	nop
 80088e4:	08008829 	.word	0x08008829
 80088e8:	20001f88 	.word	0x20001f88

080088ec <_fwalk_sglue>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	4607      	mov	r7, r0
 80088f2:	4688      	mov	r8, r1
 80088f4:	4614      	mov	r4, r2
 80088f6:	2600      	movs	r6, #0
 80088f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008900:	d505      	bpl.n	800890e <_fwalk_sglue+0x22>
 8008902:	6824      	ldr	r4, [r4, #0]
 8008904:	2c00      	cmp	r4, #0
 8008906:	d1f7      	bne.n	80088f8 <_fwalk_sglue+0xc>
 8008908:	4630      	mov	r0, r6
 800890a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d907      	bls.n	8008924 <_fwalk_sglue+0x38>
 8008914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008918:	3301      	adds	r3, #1
 800891a:	d003      	beq.n	8008924 <_fwalk_sglue+0x38>
 800891c:	4629      	mov	r1, r5
 800891e:	4638      	mov	r0, r7
 8008920:	47c0      	blx	r8
 8008922:	4306      	orrs	r6, r0
 8008924:	3568      	adds	r5, #104	@ 0x68
 8008926:	e7e9      	b.n	80088fc <_fwalk_sglue+0x10>

08008928 <iprintf>:
 8008928:	b40f      	push	{r0, r1, r2, r3}
 800892a:	b507      	push	{r0, r1, r2, lr}
 800892c:	4906      	ldr	r1, [pc, #24]	@ (8008948 <iprintf+0x20>)
 800892e:	ab04      	add	r3, sp, #16
 8008930:	6808      	ldr	r0, [r1, #0]
 8008932:	f853 2b04 	ldr.w	r2, [r3], #4
 8008936:	6881      	ldr	r1, [r0, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	f000 fc53 	bl	80091e4 <_vfiprintf_r>
 800893e:	b003      	add	sp, #12
 8008940:	f85d eb04 	ldr.w	lr, [sp], #4
 8008944:	b004      	add	sp, #16
 8008946:	4770      	bx	lr
 8008948:	20000118 	.word	0x20000118

0800894c <_puts_r>:
 800894c:	6a03      	ldr	r3, [r0, #32]
 800894e:	b570      	push	{r4, r5, r6, lr}
 8008950:	6884      	ldr	r4, [r0, #8]
 8008952:	4605      	mov	r5, r0
 8008954:	460e      	mov	r6, r1
 8008956:	b90b      	cbnz	r3, 800895c <_puts_r+0x10>
 8008958:	f7ff ffb0 	bl	80088bc <__sinit>
 800895c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800895e:	07db      	lsls	r3, r3, #31
 8008960:	d405      	bmi.n	800896e <_puts_r+0x22>
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	0598      	lsls	r0, r3, #22
 8008966:	d402      	bmi.n	800896e <_puts_r+0x22>
 8008968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800896a:	f000 f9be 	bl	8008cea <__retarget_lock_acquire_recursive>
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	0719      	lsls	r1, r3, #28
 8008972:	d502      	bpl.n	800897a <_puts_r+0x2e>
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d135      	bne.n	80089e6 <_puts_r+0x9a>
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f000 f8e5 	bl	8008b4c <__swsetup_r>
 8008982:	b380      	cbz	r0, 80089e6 <_puts_r+0x9a>
 8008984:	f04f 35ff 	mov.w	r5, #4294967295
 8008988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800898a:	07da      	lsls	r2, r3, #31
 800898c:	d405      	bmi.n	800899a <_puts_r+0x4e>
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	059b      	lsls	r3, r3, #22
 8008992:	d402      	bmi.n	800899a <_puts_r+0x4e>
 8008994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008996:	f000 f9a9 	bl	8008cec <__retarget_lock_release_recursive>
 800899a:	4628      	mov	r0, r5
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	2b00      	cmp	r3, #0
 80089a0:	da04      	bge.n	80089ac <_puts_r+0x60>
 80089a2:	69a2      	ldr	r2, [r4, #24]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	dc17      	bgt.n	80089d8 <_puts_r+0x8c>
 80089a8:	290a      	cmp	r1, #10
 80089aa:	d015      	beq.n	80089d8 <_puts_r+0x8c>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	6022      	str	r2, [r4, #0]
 80089b2:	7019      	strb	r1, [r3, #0]
 80089b4:	68a3      	ldr	r3, [r4, #8]
 80089b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089ba:	3b01      	subs	r3, #1
 80089bc:	60a3      	str	r3, [r4, #8]
 80089be:	2900      	cmp	r1, #0
 80089c0:	d1ed      	bne.n	800899e <_puts_r+0x52>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	da11      	bge.n	80089ea <_puts_r+0x9e>
 80089c6:	4622      	mov	r2, r4
 80089c8:	210a      	movs	r1, #10
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f87f 	bl	8008ace <__swbuf_r>
 80089d0:	3001      	adds	r0, #1
 80089d2:	d0d7      	beq.n	8008984 <_puts_r+0x38>
 80089d4:	250a      	movs	r5, #10
 80089d6:	e7d7      	b.n	8008988 <_puts_r+0x3c>
 80089d8:	4622      	mov	r2, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 f877 	bl	8008ace <__swbuf_r>
 80089e0:	3001      	adds	r0, #1
 80089e2:	d1e7      	bne.n	80089b4 <_puts_r+0x68>
 80089e4:	e7ce      	b.n	8008984 <_puts_r+0x38>
 80089e6:	3e01      	subs	r6, #1
 80089e8:	e7e4      	b.n	80089b4 <_puts_r+0x68>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	6022      	str	r2, [r4, #0]
 80089f0:	220a      	movs	r2, #10
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	e7ee      	b.n	80089d4 <_puts_r+0x88>
	...

080089f8 <puts>:
 80089f8:	4b02      	ldr	r3, [pc, #8]	@ (8008a04 <puts+0xc>)
 80089fa:	4601      	mov	r1, r0
 80089fc:	6818      	ldr	r0, [r3, #0]
 80089fe:	f7ff bfa5 	b.w	800894c <_puts_r>
 8008a02:	bf00      	nop
 8008a04:	20000118 	.word	0x20000118

08008a08 <siprintf>:
 8008a08:	b40e      	push	{r1, r2, r3}
 8008a0a:	b500      	push	{lr}
 8008a0c:	b09c      	sub	sp, #112	@ 0x70
 8008a0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a10:	9002      	str	r0, [sp, #8]
 8008a12:	9006      	str	r0, [sp, #24]
 8008a14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a18:	4809      	ldr	r0, [pc, #36]	@ (8008a40 <siprintf+0x38>)
 8008a1a:	9107      	str	r1, [sp, #28]
 8008a1c:	9104      	str	r1, [sp, #16]
 8008a1e:	4909      	ldr	r1, [pc, #36]	@ (8008a44 <siprintf+0x3c>)
 8008a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a24:	9105      	str	r1, [sp, #20]
 8008a26:	6800      	ldr	r0, [r0, #0]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	a902      	add	r1, sp, #8
 8008a2c:	f000 fab4 	bl	8008f98 <_svfiprintf_r>
 8008a30:	9b02      	ldr	r3, [sp, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	b01c      	add	sp, #112	@ 0x70
 8008a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a3c:	b003      	add	sp, #12
 8008a3e:	4770      	bx	lr
 8008a40:	20000118 	.word	0x20000118
 8008a44:	ffff0208 	.word	0xffff0208

08008a48 <__sread>:
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	f000 f8fc 	bl	8008c4c <_read_r>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	bfab      	itete	ge
 8008a58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a5c:	181b      	addge	r3, r3, r0
 8008a5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a62:	bfac      	ite	ge
 8008a64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a66:	81a3      	strhlt	r3, [r4, #12]
 8008a68:	bd10      	pop	{r4, pc}

08008a6a <__swrite>:
 8008a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	461f      	mov	r7, r3
 8008a70:	898b      	ldrh	r3, [r1, #12]
 8008a72:	05db      	lsls	r3, r3, #23
 8008a74:	4605      	mov	r5, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	4616      	mov	r6, r2
 8008a7a:	d505      	bpl.n	8008a88 <__swrite+0x1e>
 8008a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a80:	2302      	movs	r3, #2
 8008a82:	2200      	movs	r2, #0
 8008a84:	f000 f8d0 	bl	8008c28 <_lseek_r>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	4632      	mov	r2, r6
 8008a96:	463b      	mov	r3, r7
 8008a98:	4628      	mov	r0, r5
 8008a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	f000 b8e7 	b.w	8008c70 <_write_r>

08008aa2 <__sseek>:
 8008aa2:	b510      	push	{r4, lr}
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aaa:	f000 f8bd 	bl	8008c28 <_lseek_r>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	bf15      	itete	ne
 8008ab4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ab6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008aba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008abe:	81a3      	strheq	r3, [r4, #12]
 8008ac0:	bf18      	it	ne
 8008ac2:	81a3      	strhne	r3, [r4, #12]
 8008ac4:	bd10      	pop	{r4, pc}

08008ac6 <__sclose>:
 8008ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aca:	f000 b89d 	b.w	8008c08 <_close_r>

08008ace <__swbuf_r>:
 8008ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad0:	460e      	mov	r6, r1
 8008ad2:	4614      	mov	r4, r2
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	b118      	cbz	r0, 8008ae0 <__swbuf_r+0x12>
 8008ad8:	6a03      	ldr	r3, [r0, #32]
 8008ada:	b90b      	cbnz	r3, 8008ae0 <__swbuf_r+0x12>
 8008adc:	f7ff feee 	bl	80088bc <__sinit>
 8008ae0:	69a3      	ldr	r3, [r4, #24]
 8008ae2:	60a3      	str	r3, [r4, #8]
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	071a      	lsls	r2, r3, #28
 8008ae8:	d501      	bpl.n	8008aee <__swbuf_r+0x20>
 8008aea:	6923      	ldr	r3, [r4, #16]
 8008aec:	b943      	cbnz	r3, 8008b00 <__swbuf_r+0x32>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 f82b 	bl	8008b4c <__swsetup_r>
 8008af6:	b118      	cbz	r0, 8008b00 <__swbuf_r+0x32>
 8008af8:	f04f 37ff 	mov.w	r7, #4294967295
 8008afc:	4638      	mov	r0, r7
 8008afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	1a98      	subs	r0, r3, r2
 8008b06:	6963      	ldr	r3, [r4, #20]
 8008b08:	b2f6      	uxtb	r6, r6
 8008b0a:	4283      	cmp	r3, r0
 8008b0c:	4637      	mov	r7, r6
 8008b0e:	dc05      	bgt.n	8008b1c <__swbuf_r+0x4e>
 8008b10:	4621      	mov	r1, r4
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 fe90 	bl	8009838 <_fflush_r>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1ed      	bne.n	8008af8 <__swbuf_r+0x2a>
 8008b1c:	68a3      	ldr	r3, [r4, #8]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	60a3      	str	r3, [r4, #8]
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	6022      	str	r2, [r4, #0]
 8008b28:	701e      	strb	r6, [r3, #0]
 8008b2a:	6962      	ldr	r2, [r4, #20]
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d004      	beq.n	8008b3c <__swbuf_r+0x6e>
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	07db      	lsls	r3, r3, #31
 8008b36:	d5e1      	bpl.n	8008afc <__swbuf_r+0x2e>
 8008b38:	2e0a      	cmp	r6, #10
 8008b3a:	d1df      	bne.n	8008afc <__swbuf_r+0x2e>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fe7a 	bl	8009838 <_fflush_r>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d0d9      	beq.n	8008afc <__swbuf_r+0x2e>
 8008b48:	e7d6      	b.n	8008af8 <__swbuf_r+0x2a>
	...

08008b4c <__swsetup_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4b29      	ldr	r3, [pc, #164]	@ (8008bf4 <__swsetup_r+0xa8>)
 8008b50:	4605      	mov	r5, r0
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	460c      	mov	r4, r1
 8008b56:	b118      	cbz	r0, 8008b60 <__swsetup_r+0x14>
 8008b58:	6a03      	ldr	r3, [r0, #32]
 8008b5a:	b90b      	cbnz	r3, 8008b60 <__swsetup_r+0x14>
 8008b5c:	f7ff feae 	bl	80088bc <__sinit>
 8008b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b64:	0719      	lsls	r1, r3, #28
 8008b66:	d422      	bmi.n	8008bae <__swsetup_r+0x62>
 8008b68:	06da      	lsls	r2, r3, #27
 8008b6a:	d407      	bmi.n	8008b7c <__swsetup_r+0x30>
 8008b6c:	2209      	movs	r2, #9
 8008b6e:	602a      	str	r2, [r5, #0]
 8008b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7a:	e033      	b.n	8008be4 <__swsetup_r+0x98>
 8008b7c:	0758      	lsls	r0, r3, #29
 8008b7e:	d512      	bpl.n	8008ba6 <__swsetup_r+0x5a>
 8008b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b82:	b141      	cbz	r1, 8008b96 <__swsetup_r+0x4a>
 8008b84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d002      	beq.n	8008b92 <__swsetup_r+0x46>
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f000 f8af 	bl	8008cf0 <_free_r>
 8008b92:	2300      	movs	r3, #0
 8008b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b9c:	81a3      	strh	r3, [r4, #12]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6063      	str	r3, [r4, #4]
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	f043 0308 	orr.w	r3, r3, #8
 8008bac:	81a3      	strh	r3, [r4, #12]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	b94b      	cbnz	r3, 8008bc6 <__swsetup_r+0x7a>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bbc:	d003      	beq.n	8008bc6 <__swsetup_r+0x7a>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fe87 	bl	80098d4 <__smakebuf_r>
 8008bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bca:	f013 0201 	ands.w	r2, r3, #1
 8008bce:	d00a      	beq.n	8008be6 <__swsetup_r+0x9a>
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	60a2      	str	r2, [r4, #8]
 8008bd4:	6962      	ldr	r2, [r4, #20]
 8008bd6:	4252      	negs	r2, r2
 8008bd8:	61a2      	str	r2, [r4, #24]
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	b942      	cbnz	r2, 8008bf0 <__swsetup_r+0xa4>
 8008bde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008be2:	d1c5      	bne.n	8008b70 <__swsetup_r+0x24>
 8008be4:	bd38      	pop	{r3, r4, r5, pc}
 8008be6:	0799      	lsls	r1, r3, #30
 8008be8:	bf58      	it	pl
 8008bea:	6962      	ldrpl	r2, [r4, #20]
 8008bec:	60a2      	str	r2, [r4, #8]
 8008bee:	e7f4      	b.n	8008bda <__swsetup_r+0x8e>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	e7f7      	b.n	8008be4 <__swsetup_r+0x98>
 8008bf4:	20000118 	.word	0x20000118

08008bf8 <memset>:
 8008bf8:	4402      	add	r2, r0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d100      	bne.n	8008c02 <memset+0xa>
 8008c00:	4770      	bx	lr
 8008c02:	f803 1b01 	strb.w	r1, [r3], #1
 8008c06:	e7f9      	b.n	8008bfc <memset+0x4>

08008c08 <_close_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d06      	ldr	r5, [pc, #24]	@ (8008c24 <_close_r+0x1c>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	602b      	str	r3, [r5, #0]
 8008c14:	f7f7 fe01 	bl	800081a <_close>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d102      	bne.n	8008c22 <_close_r+0x1a>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	b103      	cbz	r3, 8008c22 <_close_r+0x1a>
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	20001f8c 	.word	0x20001f8c

08008c28 <_lseek_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d07      	ldr	r5, [pc, #28]	@ (8008c48 <_lseek_r+0x20>)
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	4608      	mov	r0, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	602a      	str	r2, [r5, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f7f7 fe16 	bl	8000868 <_lseek>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_lseek_r+0x1e>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_lseek_r+0x1e>
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	20001f8c 	.word	0x20001f8c

08008c4c <_read_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d07      	ldr	r5, [pc, #28]	@ (8008c6c <_read_r+0x20>)
 8008c50:	4604      	mov	r4, r0
 8008c52:	4608      	mov	r0, r1
 8008c54:	4611      	mov	r1, r2
 8008c56:	2200      	movs	r2, #0
 8008c58:	602a      	str	r2, [r5, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f7f7 fdc0 	bl	80007e0 <_read>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_read_r+0x1e>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_read_r+0x1e>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	20001f8c 	.word	0x20001f8c

08008c70 <_write_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d07      	ldr	r5, [pc, #28]	@ (8008c90 <_write_r+0x20>)
 8008c74:	4604      	mov	r4, r0
 8008c76:	4608      	mov	r0, r1
 8008c78:	4611      	mov	r1, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7f7 fc96 	bl	80005b0 <_write>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_write_r+0x1e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_write_r+0x1e>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	20001f8c 	.word	0x20001f8c

08008c94 <__errno>:
 8008c94:	4b01      	ldr	r3, [pc, #4]	@ (8008c9c <__errno+0x8>)
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	20000118 	.word	0x20000118

08008ca0 <__libc_init_array>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8008cd8 <__libc_init_array+0x38>)
 8008ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8008cdc <__libc_init_array+0x3c>)
 8008ca6:	1b64      	subs	r4, r4, r5
 8008ca8:	10a4      	asrs	r4, r4, #2
 8008caa:	2600      	movs	r6, #0
 8008cac:	42a6      	cmp	r6, r4
 8008cae:	d109      	bne.n	8008cc4 <__libc_init_array+0x24>
 8008cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ce0 <__libc_init_array+0x40>)
 8008cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ce4 <__libc_init_array+0x44>)
 8008cb4:	f000 feda 	bl	8009a6c <_init>
 8008cb8:	1b64      	subs	r4, r4, r5
 8008cba:	10a4      	asrs	r4, r4, #2
 8008cbc:	2600      	movs	r6, #0
 8008cbe:	42a6      	cmp	r6, r4
 8008cc0:	d105      	bne.n	8008cce <__libc_init_array+0x2e>
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc8:	4798      	blx	r3
 8008cca:	3601      	adds	r6, #1
 8008ccc:	e7ee      	b.n	8008cac <__libc_init_array+0xc>
 8008cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd2:	4798      	blx	r3
 8008cd4:	3601      	adds	r6, #1
 8008cd6:	e7f2      	b.n	8008cbe <__libc_init_array+0x1e>
 8008cd8:	08009bd4 	.word	0x08009bd4
 8008cdc:	08009bd4 	.word	0x08009bd4
 8008ce0:	08009bd4 	.word	0x08009bd4
 8008ce4:	08009bd8 	.word	0x08009bd8

08008ce8 <__retarget_lock_init_recursive>:
 8008ce8:	4770      	bx	lr

08008cea <__retarget_lock_acquire_recursive>:
 8008cea:	4770      	bx	lr

08008cec <__retarget_lock_release_recursive>:
 8008cec:	4770      	bx	lr
	...

08008cf0 <_free_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	d041      	beq.n	8008d7c <_free_r+0x8c>
 8008cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cfc:	1f0c      	subs	r4, r1, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfb8      	it	lt
 8008d02:	18e4      	addlt	r4, r4, r3
 8008d04:	f000 f8e0 	bl	8008ec8 <__malloc_lock>
 8008d08:	4a1d      	ldr	r2, [pc, #116]	@ (8008d80 <_free_r+0x90>)
 8008d0a:	6813      	ldr	r3, [r2, #0]
 8008d0c:	b933      	cbnz	r3, 8008d1c <_free_r+0x2c>
 8008d0e:	6063      	str	r3, [r4, #4]
 8008d10:	6014      	str	r4, [r2, #0]
 8008d12:	4628      	mov	r0, r5
 8008d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d18:	f000 b8dc 	b.w	8008ed4 <__malloc_unlock>
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	d908      	bls.n	8008d32 <_free_r+0x42>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	1821      	adds	r1, r4, r0
 8008d24:	428b      	cmp	r3, r1
 8008d26:	bf01      	itttt	eq
 8008d28:	6819      	ldreq	r1, [r3, #0]
 8008d2a:	685b      	ldreq	r3, [r3, #4]
 8008d2c:	1809      	addeq	r1, r1, r0
 8008d2e:	6021      	streq	r1, [r4, #0]
 8008d30:	e7ed      	b.n	8008d0e <_free_r+0x1e>
 8008d32:	461a      	mov	r2, r3
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	b10b      	cbz	r3, 8008d3c <_free_r+0x4c>
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	d9fa      	bls.n	8008d32 <_free_r+0x42>
 8008d3c:	6811      	ldr	r1, [r2, #0]
 8008d3e:	1850      	adds	r0, r2, r1
 8008d40:	42a0      	cmp	r0, r4
 8008d42:	d10b      	bne.n	8008d5c <_free_r+0x6c>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	4401      	add	r1, r0
 8008d48:	1850      	adds	r0, r2, r1
 8008d4a:	4283      	cmp	r3, r0
 8008d4c:	6011      	str	r1, [r2, #0]
 8008d4e:	d1e0      	bne.n	8008d12 <_free_r+0x22>
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	6053      	str	r3, [r2, #4]
 8008d56:	4408      	add	r0, r1
 8008d58:	6010      	str	r0, [r2, #0]
 8008d5a:	e7da      	b.n	8008d12 <_free_r+0x22>
 8008d5c:	d902      	bls.n	8008d64 <_free_r+0x74>
 8008d5e:	230c      	movs	r3, #12
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	e7d6      	b.n	8008d12 <_free_r+0x22>
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	1821      	adds	r1, r4, r0
 8008d68:	428b      	cmp	r3, r1
 8008d6a:	bf04      	itt	eq
 8008d6c:	6819      	ldreq	r1, [r3, #0]
 8008d6e:	685b      	ldreq	r3, [r3, #4]
 8008d70:	6063      	str	r3, [r4, #4]
 8008d72:	bf04      	itt	eq
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	6054      	str	r4, [r2, #4]
 8008d7a:	e7ca      	b.n	8008d12 <_free_r+0x22>
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	bf00      	nop
 8008d80:	20001f98 	.word	0x20001f98

08008d84 <sbrk_aligned>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	4e0f      	ldr	r6, [pc, #60]	@ (8008dc4 <sbrk_aligned+0x40>)
 8008d88:	460c      	mov	r4, r1
 8008d8a:	6831      	ldr	r1, [r6, #0]
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	b911      	cbnz	r1, 8008d96 <sbrk_aligned+0x12>
 8008d90:	f000 fe18 	bl	80099c4 <_sbrk_r>
 8008d94:	6030      	str	r0, [r6, #0]
 8008d96:	4621      	mov	r1, r4
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 fe13 	bl	80099c4 <_sbrk_r>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d103      	bne.n	8008daa <sbrk_aligned+0x26>
 8008da2:	f04f 34ff 	mov.w	r4, #4294967295
 8008da6:	4620      	mov	r0, r4
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
 8008daa:	1cc4      	adds	r4, r0, #3
 8008dac:	f024 0403 	bic.w	r4, r4, #3
 8008db0:	42a0      	cmp	r0, r4
 8008db2:	d0f8      	beq.n	8008da6 <sbrk_aligned+0x22>
 8008db4:	1a21      	subs	r1, r4, r0
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 fe04 	bl	80099c4 <_sbrk_r>
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d1f2      	bne.n	8008da6 <sbrk_aligned+0x22>
 8008dc0:	e7ef      	b.n	8008da2 <sbrk_aligned+0x1e>
 8008dc2:	bf00      	nop
 8008dc4:	20001f94 	.word	0x20001f94

08008dc8 <_malloc_r>:
 8008dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dcc:	1ccd      	adds	r5, r1, #3
 8008dce:	f025 0503 	bic.w	r5, r5, #3
 8008dd2:	3508      	adds	r5, #8
 8008dd4:	2d0c      	cmp	r5, #12
 8008dd6:	bf38      	it	cc
 8008dd8:	250c      	movcc	r5, #12
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	4606      	mov	r6, r0
 8008dde:	db01      	blt.n	8008de4 <_malloc_r+0x1c>
 8008de0:	42a9      	cmp	r1, r5
 8008de2:	d904      	bls.n	8008dee <_malloc_r+0x26>
 8008de4:	230c      	movs	r3, #12
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	2000      	movs	r0, #0
 8008dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ec4 <_malloc_r+0xfc>
 8008df2:	f000 f869 	bl	8008ec8 <__malloc_lock>
 8008df6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dfa:	461c      	mov	r4, r3
 8008dfc:	bb44      	cbnz	r4, 8008e50 <_malloc_r+0x88>
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7ff ffbf 	bl	8008d84 <sbrk_aligned>
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	4604      	mov	r4, r0
 8008e0a:	d158      	bne.n	8008ebe <_malloc_r+0xf6>
 8008e0c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e10:	4627      	mov	r7, r4
 8008e12:	2f00      	cmp	r7, #0
 8008e14:	d143      	bne.n	8008e9e <_malloc_r+0xd6>
 8008e16:	2c00      	cmp	r4, #0
 8008e18:	d04b      	beq.n	8008eb2 <_malloc_r+0xea>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	4630      	mov	r0, r6
 8008e20:	eb04 0903 	add.w	r9, r4, r3
 8008e24:	f000 fdce 	bl	80099c4 <_sbrk_r>
 8008e28:	4581      	cmp	r9, r0
 8008e2a:	d142      	bne.n	8008eb2 <_malloc_r+0xea>
 8008e2c:	6821      	ldr	r1, [r4, #0]
 8008e2e:	1a6d      	subs	r5, r5, r1
 8008e30:	4629      	mov	r1, r5
 8008e32:	4630      	mov	r0, r6
 8008e34:	f7ff ffa6 	bl	8008d84 <sbrk_aligned>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d03a      	beq.n	8008eb2 <_malloc_r+0xea>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	442b      	add	r3, r5
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	f8d8 3000 	ldr.w	r3, [r8]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	bb62      	cbnz	r2, 8008ea4 <_malloc_r+0xdc>
 8008e4a:	f8c8 7000 	str.w	r7, [r8]
 8008e4e:	e00f      	b.n	8008e70 <_malloc_r+0xa8>
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	1b52      	subs	r2, r2, r5
 8008e54:	d420      	bmi.n	8008e98 <_malloc_r+0xd0>
 8008e56:	2a0b      	cmp	r2, #11
 8008e58:	d917      	bls.n	8008e8a <_malloc_r+0xc2>
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	6025      	str	r5, [r4, #0]
 8008e60:	bf18      	it	ne
 8008e62:	6059      	strne	r1, [r3, #4]
 8008e64:	6863      	ldr	r3, [r4, #4]
 8008e66:	bf08      	it	eq
 8008e68:	f8c8 1000 	streq.w	r1, [r8]
 8008e6c:	5162      	str	r2, [r4, r5]
 8008e6e:	604b      	str	r3, [r1, #4]
 8008e70:	4630      	mov	r0, r6
 8008e72:	f000 f82f 	bl	8008ed4 <__malloc_unlock>
 8008e76:	f104 000b 	add.w	r0, r4, #11
 8008e7a:	1d23      	adds	r3, r4, #4
 8008e7c:	f020 0007 	bic.w	r0, r0, #7
 8008e80:	1ac2      	subs	r2, r0, r3
 8008e82:	bf1c      	itt	ne
 8008e84:	1a1b      	subne	r3, r3, r0
 8008e86:	50a3      	strne	r3, [r4, r2]
 8008e88:	e7af      	b.n	8008dea <_malloc_r+0x22>
 8008e8a:	6862      	ldr	r2, [r4, #4]
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	bf0c      	ite	eq
 8008e90:	f8c8 2000 	streq.w	r2, [r8]
 8008e94:	605a      	strne	r2, [r3, #4]
 8008e96:	e7eb      	b.n	8008e70 <_malloc_r+0xa8>
 8008e98:	4623      	mov	r3, r4
 8008e9a:	6864      	ldr	r4, [r4, #4]
 8008e9c:	e7ae      	b.n	8008dfc <_malloc_r+0x34>
 8008e9e:	463c      	mov	r4, r7
 8008ea0:	687f      	ldr	r7, [r7, #4]
 8008ea2:	e7b6      	b.n	8008e12 <_malloc_r+0x4a>
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d1fb      	bne.n	8008ea4 <_malloc_r+0xdc>
 8008eac:	2300      	movs	r3, #0
 8008eae:	6053      	str	r3, [r2, #4]
 8008eb0:	e7de      	b.n	8008e70 <_malloc_r+0xa8>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	6033      	str	r3, [r6, #0]
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f000 f80c 	bl	8008ed4 <__malloc_unlock>
 8008ebc:	e794      	b.n	8008de8 <_malloc_r+0x20>
 8008ebe:	6005      	str	r5, [r0, #0]
 8008ec0:	e7d6      	b.n	8008e70 <_malloc_r+0xa8>
 8008ec2:	bf00      	nop
 8008ec4:	20001f98 	.word	0x20001f98

08008ec8 <__malloc_lock>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	@ (8008ed0 <__malloc_lock+0x8>)
 8008eca:	f7ff bf0e 	b.w	8008cea <__retarget_lock_acquire_recursive>
 8008ece:	bf00      	nop
 8008ed0:	20001f90 	.word	0x20001f90

08008ed4 <__malloc_unlock>:
 8008ed4:	4801      	ldr	r0, [pc, #4]	@ (8008edc <__malloc_unlock+0x8>)
 8008ed6:	f7ff bf09 	b.w	8008cec <__retarget_lock_release_recursive>
 8008eda:	bf00      	nop
 8008edc:	20001f90 	.word	0x20001f90

08008ee0 <__ssputs_r>:
 8008ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee4:	688e      	ldr	r6, [r1, #8]
 8008ee6:	461f      	mov	r7, r3
 8008ee8:	42be      	cmp	r6, r7
 8008eea:	680b      	ldr	r3, [r1, #0]
 8008eec:	4682      	mov	sl, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	4690      	mov	r8, r2
 8008ef2:	d82d      	bhi.n	8008f50 <__ssputs_r+0x70>
 8008ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ef8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008efc:	d026      	beq.n	8008f4c <__ssputs_r+0x6c>
 8008efe:	6965      	ldr	r5, [r4, #20]
 8008f00:	6909      	ldr	r1, [r1, #16]
 8008f02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f06:	eba3 0901 	sub.w	r9, r3, r1
 8008f0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f0e:	1c7b      	adds	r3, r7, #1
 8008f10:	444b      	add	r3, r9
 8008f12:	106d      	asrs	r5, r5, #1
 8008f14:	429d      	cmp	r5, r3
 8008f16:	bf38      	it	cc
 8008f18:	461d      	movcc	r5, r3
 8008f1a:	0553      	lsls	r3, r2, #21
 8008f1c:	d527      	bpl.n	8008f6e <__ssputs_r+0x8e>
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7ff ff52 	bl	8008dc8 <_malloc_r>
 8008f24:	4606      	mov	r6, r0
 8008f26:	b360      	cbz	r0, 8008f82 <__ssputs_r+0xa2>
 8008f28:	6921      	ldr	r1, [r4, #16]
 8008f2a:	464a      	mov	r2, r9
 8008f2c:	f000 fd5a 	bl	80099e4 <memcpy>
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	6126      	str	r6, [r4, #16]
 8008f3e:	6165      	str	r5, [r4, #20]
 8008f40:	444e      	add	r6, r9
 8008f42:	eba5 0509 	sub.w	r5, r5, r9
 8008f46:	6026      	str	r6, [r4, #0]
 8008f48:	60a5      	str	r5, [r4, #8]
 8008f4a:	463e      	mov	r6, r7
 8008f4c:	42be      	cmp	r6, r7
 8008f4e:	d900      	bls.n	8008f52 <__ssputs_r+0x72>
 8008f50:	463e      	mov	r6, r7
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	4632      	mov	r2, r6
 8008f56:	4641      	mov	r1, r8
 8008f58:	f000 fcf8 	bl	800994c <memmove>
 8008f5c:	68a3      	ldr	r3, [r4, #8]
 8008f5e:	1b9b      	subs	r3, r3, r6
 8008f60:	60a3      	str	r3, [r4, #8]
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	4433      	add	r3, r6
 8008f66:	6023      	str	r3, [r4, #0]
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6e:	462a      	mov	r2, r5
 8008f70:	f000 fd46 	bl	8009a00 <_realloc_r>
 8008f74:	4606      	mov	r6, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d1e0      	bne.n	8008f3c <__ssputs_r+0x5c>
 8008f7a:	6921      	ldr	r1, [r4, #16]
 8008f7c:	4650      	mov	r0, sl
 8008f7e:	f7ff feb7 	bl	8008cf0 <_free_r>
 8008f82:	230c      	movs	r3, #12
 8008f84:	f8ca 3000 	str.w	r3, [sl]
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	e7e9      	b.n	8008f6a <__ssputs_r+0x8a>
	...

08008f98 <_svfiprintf_r>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	4698      	mov	r8, r3
 8008f9e:	898b      	ldrh	r3, [r1, #12]
 8008fa0:	061b      	lsls	r3, r3, #24
 8008fa2:	b09d      	sub	sp, #116	@ 0x74
 8008fa4:	4607      	mov	r7, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	4614      	mov	r4, r2
 8008faa:	d510      	bpl.n	8008fce <_svfiprintf_r+0x36>
 8008fac:	690b      	ldr	r3, [r1, #16]
 8008fae:	b973      	cbnz	r3, 8008fce <_svfiprintf_r+0x36>
 8008fb0:	2140      	movs	r1, #64	@ 0x40
 8008fb2:	f7ff ff09 	bl	8008dc8 <_malloc_r>
 8008fb6:	6028      	str	r0, [r5, #0]
 8008fb8:	6128      	str	r0, [r5, #16]
 8008fba:	b930      	cbnz	r0, 8008fca <_svfiprintf_r+0x32>
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	603b      	str	r3, [r7, #0]
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	b01d      	add	sp, #116	@ 0x74
 8008fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fca:	2340      	movs	r3, #64	@ 0x40
 8008fcc:	616b      	str	r3, [r5, #20]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd2:	2320      	movs	r3, #32
 8008fd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fdc:	2330      	movs	r3, #48	@ 0x30
 8008fde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800917c <_svfiprintf_r+0x1e4>
 8008fe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fe6:	f04f 0901 	mov.w	r9, #1
 8008fea:	4623      	mov	r3, r4
 8008fec:	469a      	mov	sl, r3
 8008fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff2:	b10a      	cbz	r2, 8008ff8 <_svfiprintf_r+0x60>
 8008ff4:	2a25      	cmp	r2, #37	@ 0x25
 8008ff6:	d1f9      	bne.n	8008fec <_svfiprintf_r+0x54>
 8008ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ffc:	d00b      	beq.n	8009016 <_svfiprintf_r+0x7e>
 8008ffe:	465b      	mov	r3, fp
 8009000:	4622      	mov	r2, r4
 8009002:	4629      	mov	r1, r5
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ff6b 	bl	8008ee0 <__ssputs_r>
 800900a:	3001      	adds	r0, #1
 800900c:	f000 80a7 	beq.w	800915e <_svfiprintf_r+0x1c6>
 8009010:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009012:	445a      	add	r2, fp
 8009014:	9209      	str	r2, [sp, #36]	@ 0x24
 8009016:	f89a 3000 	ldrb.w	r3, [sl]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 809f 	beq.w	800915e <_svfiprintf_r+0x1c6>
 8009020:	2300      	movs	r3, #0
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800902a:	f10a 0a01 	add.w	sl, sl, #1
 800902e:	9304      	str	r3, [sp, #16]
 8009030:	9307      	str	r3, [sp, #28]
 8009032:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009036:	931a      	str	r3, [sp, #104]	@ 0x68
 8009038:	4654      	mov	r4, sl
 800903a:	2205      	movs	r2, #5
 800903c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009040:	484e      	ldr	r0, [pc, #312]	@ (800917c <_svfiprintf_r+0x1e4>)
 8009042:	f7f7 f8f5 	bl	8000230 <memchr>
 8009046:	9a04      	ldr	r2, [sp, #16]
 8009048:	b9d8      	cbnz	r0, 8009082 <_svfiprintf_r+0xea>
 800904a:	06d0      	lsls	r0, r2, #27
 800904c:	bf44      	itt	mi
 800904e:	2320      	movmi	r3, #32
 8009050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009054:	0711      	lsls	r1, r2, #28
 8009056:	bf44      	itt	mi
 8009058:	232b      	movmi	r3, #43	@ 0x2b
 800905a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905e:	f89a 3000 	ldrb.w	r3, [sl]
 8009062:	2b2a      	cmp	r3, #42	@ 0x2a
 8009064:	d015      	beq.n	8009092 <_svfiprintf_r+0xfa>
 8009066:	9a07      	ldr	r2, [sp, #28]
 8009068:	4654      	mov	r4, sl
 800906a:	2000      	movs	r0, #0
 800906c:	f04f 0c0a 	mov.w	ip, #10
 8009070:	4621      	mov	r1, r4
 8009072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009076:	3b30      	subs	r3, #48	@ 0x30
 8009078:	2b09      	cmp	r3, #9
 800907a:	d94b      	bls.n	8009114 <_svfiprintf_r+0x17c>
 800907c:	b1b0      	cbz	r0, 80090ac <_svfiprintf_r+0x114>
 800907e:	9207      	str	r2, [sp, #28]
 8009080:	e014      	b.n	80090ac <_svfiprintf_r+0x114>
 8009082:	eba0 0308 	sub.w	r3, r0, r8
 8009086:	fa09 f303 	lsl.w	r3, r9, r3
 800908a:	4313      	orrs	r3, r2
 800908c:	9304      	str	r3, [sp, #16]
 800908e:	46a2      	mov	sl, r4
 8009090:	e7d2      	b.n	8009038 <_svfiprintf_r+0xa0>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	1d19      	adds	r1, r3, #4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	9103      	str	r1, [sp, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	bfbb      	ittet	lt
 800909e:	425b      	neglt	r3, r3
 80090a0:	f042 0202 	orrlt.w	r2, r2, #2
 80090a4:	9307      	strge	r3, [sp, #28]
 80090a6:	9307      	strlt	r3, [sp, #28]
 80090a8:	bfb8      	it	lt
 80090aa:	9204      	strlt	r2, [sp, #16]
 80090ac:	7823      	ldrb	r3, [r4, #0]
 80090ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b0:	d10a      	bne.n	80090c8 <_svfiprintf_r+0x130>
 80090b2:	7863      	ldrb	r3, [r4, #1]
 80090b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80090b6:	d132      	bne.n	800911e <_svfiprintf_r+0x186>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	1d1a      	adds	r2, r3, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	9203      	str	r2, [sp, #12]
 80090c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090c4:	3402      	adds	r4, #2
 80090c6:	9305      	str	r3, [sp, #20]
 80090c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800918c <_svfiprintf_r+0x1f4>
 80090cc:	7821      	ldrb	r1, [r4, #0]
 80090ce:	2203      	movs	r2, #3
 80090d0:	4650      	mov	r0, sl
 80090d2:	f7f7 f8ad 	bl	8000230 <memchr>
 80090d6:	b138      	cbz	r0, 80090e8 <_svfiprintf_r+0x150>
 80090d8:	9b04      	ldr	r3, [sp, #16]
 80090da:	eba0 000a 	sub.w	r0, r0, sl
 80090de:	2240      	movs	r2, #64	@ 0x40
 80090e0:	4082      	lsls	r2, r0
 80090e2:	4313      	orrs	r3, r2
 80090e4:	3401      	adds	r4, #1
 80090e6:	9304      	str	r3, [sp, #16]
 80090e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ec:	4824      	ldr	r0, [pc, #144]	@ (8009180 <_svfiprintf_r+0x1e8>)
 80090ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090f2:	2206      	movs	r2, #6
 80090f4:	f7f7 f89c 	bl	8000230 <memchr>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d036      	beq.n	800916a <_svfiprintf_r+0x1d2>
 80090fc:	4b21      	ldr	r3, [pc, #132]	@ (8009184 <_svfiprintf_r+0x1ec>)
 80090fe:	bb1b      	cbnz	r3, 8009148 <_svfiprintf_r+0x1b0>
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	3307      	adds	r3, #7
 8009104:	f023 0307 	bic.w	r3, r3, #7
 8009108:	3308      	adds	r3, #8
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910e:	4433      	add	r3, r6
 8009110:	9309      	str	r3, [sp, #36]	@ 0x24
 8009112:	e76a      	b.n	8008fea <_svfiprintf_r+0x52>
 8009114:	fb0c 3202 	mla	r2, ip, r2, r3
 8009118:	460c      	mov	r4, r1
 800911a:	2001      	movs	r0, #1
 800911c:	e7a8      	b.n	8009070 <_svfiprintf_r+0xd8>
 800911e:	2300      	movs	r3, #0
 8009120:	3401      	adds	r4, #1
 8009122:	9305      	str	r3, [sp, #20]
 8009124:	4619      	mov	r1, r3
 8009126:	f04f 0c0a 	mov.w	ip, #10
 800912a:	4620      	mov	r0, r4
 800912c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009130:	3a30      	subs	r2, #48	@ 0x30
 8009132:	2a09      	cmp	r2, #9
 8009134:	d903      	bls.n	800913e <_svfiprintf_r+0x1a6>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0c6      	beq.n	80090c8 <_svfiprintf_r+0x130>
 800913a:	9105      	str	r1, [sp, #20]
 800913c:	e7c4      	b.n	80090c8 <_svfiprintf_r+0x130>
 800913e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009142:	4604      	mov	r4, r0
 8009144:	2301      	movs	r3, #1
 8009146:	e7f0      	b.n	800912a <_svfiprintf_r+0x192>
 8009148:	ab03      	add	r3, sp, #12
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	462a      	mov	r2, r5
 800914e:	4b0e      	ldr	r3, [pc, #56]	@ (8009188 <_svfiprintf_r+0x1f0>)
 8009150:	a904      	add	r1, sp, #16
 8009152:	4638      	mov	r0, r7
 8009154:	f3af 8000 	nop.w
 8009158:	1c42      	adds	r2, r0, #1
 800915a:	4606      	mov	r6, r0
 800915c:	d1d6      	bne.n	800910c <_svfiprintf_r+0x174>
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	065b      	lsls	r3, r3, #25
 8009162:	f53f af2d 	bmi.w	8008fc0 <_svfiprintf_r+0x28>
 8009166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009168:	e72c      	b.n	8008fc4 <_svfiprintf_r+0x2c>
 800916a:	ab03      	add	r3, sp, #12
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	462a      	mov	r2, r5
 8009170:	4b05      	ldr	r3, [pc, #20]	@ (8009188 <_svfiprintf_r+0x1f0>)
 8009172:	a904      	add	r1, sp, #16
 8009174:	4638      	mov	r0, r7
 8009176:	f000 f9bb 	bl	80094f0 <_printf_i>
 800917a:	e7ed      	b.n	8009158 <_svfiprintf_r+0x1c0>
 800917c:	08009b98 	.word	0x08009b98
 8009180:	08009ba2 	.word	0x08009ba2
 8009184:	00000000 	.word	0x00000000
 8009188:	08008ee1 	.word	0x08008ee1
 800918c:	08009b9e 	.word	0x08009b9e

08009190 <__sfputc_r>:
 8009190:	6893      	ldr	r3, [r2, #8]
 8009192:	3b01      	subs	r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	b410      	push	{r4}
 8009198:	6093      	str	r3, [r2, #8]
 800919a:	da08      	bge.n	80091ae <__sfputc_r+0x1e>
 800919c:	6994      	ldr	r4, [r2, #24]
 800919e:	42a3      	cmp	r3, r4
 80091a0:	db01      	blt.n	80091a6 <__sfputc_r+0x16>
 80091a2:	290a      	cmp	r1, #10
 80091a4:	d103      	bne.n	80091ae <__sfputc_r+0x1e>
 80091a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091aa:	f7ff bc90 	b.w	8008ace <__swbuf_r>
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	1c58      	adds	r0, r3, #1
 80091b2:	6010      	str	r0, [r2, #0]
 80091b4:	7019      	strb	r1, [r3, #0]
 80091b6:	4608      	mov	r0, r1
 80091b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091bc:	4770      	bx	lr

080091be <__sfputs_r>:
 80091be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c0:	4606      	mov	r6, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	4614      	mov	r4, r2
 80091c6:	18d5      	adds	r5, r2, r3
 80091c8:	42ac      	cmp	r4, r5
 80091ca:	d101      	bne.n	80091d0 <__sfputs_r+0x12>
 80091cc:	2000      	movs	r0, #0
 80091ce:	e007      	b.n	80091e0 <__sfputs_r+0x22>
 80091d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d4:	463a      	mov	r2, r7
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7ff ffda 	bl	8009190 <__sfputc_r>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d1f3      	bne.n	80091c8 <__sfputs_r+0xa>
 80091e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091e4 <_vfiprintf_r>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	460d      	mov	r5, r1
 80091ea:	b09d      	sub	sp, #116	@ 0x74
 80091ec:	4614      	mov	r4, r2
 80091ee:	4698      	mov	r8, r3
 80091f0:	4606      	mov	r6, r0
 80091f2:	b118      	cbz	r0, 80091fc <_vfiprintf_r+0x18>
 80091f4:	6a03      	ldr	r3, [r0, #32]
 80091f6:	b90b      	cbnz	r3, 80091fc <_vfiprintf_r+0x18>
 80091f8:	f7ff fb60 	bl	80088bc <__sinit>
 80091fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091fe:	07d9      	lsls	r1, r3, #31
 8009200:	d405      	bmi.n	800920e <_vfiprintf_r+0x2a>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	059a      	lsls	r2, r3, #22
 8009206:	d402      	bmi.n	800920e <_vfiprintf_r+0x2a>
 8009208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800920a:	f7ff fd6e 	bl	8008cea <__retarget_lock_acquire_recursive>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	071b      	lsls	r3, r3, #28
 8009212:	d501      	bpl.n	8009218 <_vfiprintf_r+0x34>
 8009214:	692b      	ldr	r3, [r5, #16]
 8009216:	b99b      	cbnz	r3, 8009240 <_vfiprintf_r+0x5c>
 8009218:	4629      	mov	r1, r5
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff fc96 	bl	8008b4c <__swsetup_r>
 8009220:	b170      	cbz	r0, 8009240 <_vfiprintf_r+0x5c>
 8009222:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009224:	07dc      	lsls	r4, r3, #31
 8009226:	d504      	bpl.n	8009232 <_vfiprintf_r+0x4e>
 8009228:	f04f 30ff 	mov.w	r0, #4294967295
 800922c:	b01d      	add	sp, #116	@ 0x74
 800922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	0598      	lsls	r0, r3, #22
 8009236:	d4f7      	bmi.n	8009228 <_vfiprintf_r+0x44>
 8009238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800923a:	f7ff fd57 	bl	8008cec <__retarget_lock_release_recursive>
 800923e:	e7f3      	b.n	8009228 <_vfiprintf_r+0x44>
 8009240:	2300      	movs	r3, #0
 8009242:	9309      	str	r3, [sp, #36]	@ 0x24
 8009244:	2320      	movs	r3, #32
 8009246:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800924a:	f8cd 800c 	str.w	r8, [sp, #12]
 800924e:	2330      	movs	r3, #48	@ 0x30
 8009250:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009400 <_vfiprintf_r+0x21c>
 8009254:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009258:	f04f 0901 	mov.w	r9, #1
 800925c:	4623      	mov	r3, r4
 800925e:	469a      	mov	sl, r3
 8009260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009264:	b10a      	cbz	r2, 800926a <_vfiprintf_r+0x86>
 8009266:	2a25      	cmp	r2, #37	@ 0x25
 8009268:	d1f9      	bne.n	800925e <_vfiprintf_r+0x7a>
 800926a:	ebba 0b04 	subs.w	fp, sl, r4
 800926e:	d00b      	beq.n	8009288 <_vfiprintf_r+0xa4>
 8009270:	465b      	mov	r3, fp
 8009272:	4622      	mov	r2, r4
 8009274:	4629      	mov	r1, r5
 8009276:	4630      	mov	r0, r6
 8009278:	f7ff ffa1 	bl	80091be <__sfputs_r>
 800927c:	3001      	adds	r0, #1
 800927e:	f000 80a7 	beq.w	80093d0 <_vfiprintf_r+0x1ec>
 8009282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009284:	445a      	add	r2, fp
 8009286:	9209      	str	r2, [sp, #36]	@ 0x24
 8009288:	f89a 3000 	ldrb.w	r3, [sl]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 809f 	beq.w	80093d0 <_vfiprintf_r+0x1ec>
 8009292:	2300      	movs	r3, #0
 8009294:	f04f 32ff 	mov.w	r2, #4294967295
 8009298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800929c:	f10a 0a01 	add.w	sl, sl, #1
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	9307      	str	r3, [sp, #28]
 80092a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80092aa:	4654      	mov	r4, sl
 80092ac:	2205      	movs	r2, #5
 80092ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b2:	4853      	ldr	r0, [pc, #332]	@ (8009400 <_vfiprintf_r+0x21c>)
 80092b4:	f7f6 ffbc 	bl	8000230 <memchr>
 80092b8:	9a04      	ldr	r2, [sp, #16]
 80092ba:	b9d8      	cbnz	r0, 80092f4 <_vfiprintf_r+0x110>
 80092bc:	06d1      	lsls	r1, r2, #27
 80092be:	bf44      	itt	mi
 80092c0:	2320      	movmi	r3, #32
 80092c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092c6:	0713      	lsls	r3, r2, #28
 80092c8:	bf44      	itt	mi
 80092ca:	232b      	movmi	r3, #43	@ 0x2b
 80092cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092d0:	f89a 3000 	ldrb.w	r3, [sl]
 80092d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d6:	d015      	beq.n	8009304 <_vfiprintf_r+0x120>
 80092d8:	9a07      	ldr	r2, [sp, #28]
 80092da:	4654      	mov	r4, sl
 80092dc:	2000      	movs	r0, #0
 80092de:	f04f 0c0a 	mov.w	ip, #10
 80092e2:	4621      	mov	r1, r4
 80092e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e8:	3b30      	subs	r3, #48	@ 0x30
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d94b      	bls.n	8009386 <_vfiprintf_r+0x1a2>
 80092ee:	b1b0      	cbz	r0, 800931e <_vfiprintf_r+0x13a>
 80092f0:	9207      	str	r2, [sp, #28]
 80092f2:	e014      	b.n	800931e <_vfiprintf_r+0x13a>
 80092f4:	eba0 0308 	sub.w	r3, r0, r8
 80092f8:	fa09 f303 	lsl.w	r3, r9, r3
 80092fc:	4313      	orrs	r3, r2
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	46a2      	mov	sl, r4
 8009302:	e7d2      	b.n	80092aa <_vfiprintf_r+0xc6>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	1d19      	adds	r1, r3, #4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	9103      	str	r1, [sp, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	bfbb      	ittet	lt
 8009310:	425b      	neglt	r3, r3
 8009312:	f042 0202 	orrlt.w	r2, r2, #2
 8009316:	9307      	strge	r3, [sp, #28]
 8009318:	9307      	strlt	r3, [sp, #28]
 800931a:	bfb8      	it	lt
 800931c:	9204      	strlt	r2, [sp, #16]
 800931e:	7823      	ldrb	r3, [r4, #0]
 8009320:	2b2e      	cmp	r3, #46	@ 0x2e
 8009322:	d10a      	bne.n	800933a <_vfiprintf_r+0x156>
 8009324:	7863      	ldrb	r3, [r4, #1]
 8009326:	2b2a      	cmp	r3, #42	@ 0x2a
 8009328:	d132      	bne.n	8009390 <_vfiprintf_r+0x1ac>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	1d1a      	adds	r2, r3, #4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	9203      	str	r2, [sp, #12]
 8009332:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009336:	3402      	adds	r4, #2
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009410 <_vfiprintf_r+0x22c>
 800933e:	7821      	ldrb	r1, [r4, #0]
 8009340:	2203      	movs	r2, #3
 8009342:	4650      	mov	r0, sl
 8009344:	f7f6 ff74 	bl	8000230 <memchr>
 8009348:	b138      	cbz	r0, 800935a <_vfiprintf_r+0x176>
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	eba0 000a 	sub.w	r0, r0, sl
 8009350:	2240      	movs	r2, #64	@ 0x40
 8009352:	4082      	lsls	r2, r0
 8009354:	4313      	orrs	r3, r2
 8009356:	3401      	adds	r4, #1
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935e:	4829      	ldr	r0, [pc, #164]	@ (8009404 <_vfiprintf_r+0x220>)
 8009360:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009364:	2206      	movs	r2, #6
 8009366:	f7f6 ff63 	bl	8000230 <memchr>
 800936a:	2800      	cmp	r0, #0
 800936c:	d03f      	beq.n	80093ee <_vfiprintf_r+0x20a>
 800936e:	4b26      	ldr	r3, [pc, #152]	@ (8009408 <_vfiprintf_r+0x224>)
 8009370:	bb1b      	cbnz	r3, 80093ba <_vfiprintf_r+0x1d6>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	3307      	adds	r3, #7
 8009376:	f023 0307 	bic.w	r3, r3, #7
 800937a:	3308      	adds	r3, #8
 800937c:	9303      	str	r3, [sp, #12]
 800937e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009380:	443b      	add	r3, r7
 8009382:	9309      	str	r3, [sp, #36]	@ 0x24
 8009384:	e76a      	b.n	800925c <_vfiprintf_r+0x78>
 8009386:	fb0c 3202 	mla	r2, ip, r2, r3
 800938a:	460c      	mov	r4, r1
 800938c:	2001      	movs	r0, #1
 800938e:	e7a8      	b.n	80092e2 <_vfiprintf_r+0xfe>
 8009390:	2300      	movs	r3, #0
 8009392:	3401      	adds	r4, #1
 8009394:	9305      	str	r3, [sp, #20]
 8009396:	4619      	mov	r1, r3
 8009398:	f04f 0c0a 	mov.w	ip, #10
 800939c:	4620      	mov	r0, r4
 800939e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a2:	3a30      	subs	r2, #48	@ 0x30
 80093a4:	2a09      	cmp	r2, #9
 80093a6:	d903      	bls.n	80093b0 <_vfiprintf_r+0x1cc>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0c6      	beq.n	800933a <_vfiprintf_r+0x156>
 80093ac:	9105      	str	r1, [sp, #20]
 80093ae:	e7c4      	b.n	800933a <_vfiprintf_r+0x156>
 80093b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093b4:	4604      	mov	r4, r0
 80093b6:	2301      	movs	r3, #1
 80093b8:	e7f0      	b.n	800939c <_vfiprintf_r+0x1b8>
 80093ba:	ab03      	add	r3, sp, #12
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	462a      	mov	r2, r5
 80093c0:	4b12      	ldr	r3, [pc, #72]	@ (800940c <_vfiprintf_r+0x228>)
 80093c2:	a904      	add	r1, sp, #16
 80093c4:	4630      	mov	r0, r6
 80093c6:	f3af 8000 	nop.w
 80093ca:	4607      	mov	r7, r0
 80093cc:	1c78      	adds	r0, r7, #1
 80093ce:	d1d6      	bne.n	800937e <_vfiprintf_r+0x19a>
 80093d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_vfiprintf_r+0x1fe>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	059a      	lsls	r2, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_vfiprintf_r+0x1fe>
 80093dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093de:	f7ff fc85 	bl	8008cec <__retarget_lock_release_recursive>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	065b      	lsls	r3, r3, #25
 80093e6:	f53f af1f 	bmi.w	8009228 <_vfiprintf_r+0x44>
 80093ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093ec:	e71e      	b.n	800922c <_vfiprintf_r+0x48>
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	462a      	mov	r2, r5
 80093f4:	4b05      	ldr	r3, [pc, #20]	@ (800940c <_vfiprintf_r+0x228>)
 80093f6:	a904      	add	r1, sp, #16
 80093f8:	4630      	mov	r0, r6
 80093fa:	f000 f879 	bl	80094f0 <_printf_i>
 80093fe:	e7e4      	b.n	80093ca <_vfiprintf_r+0x1e6>
 8009400:	08009b98 	.word	0x08009b98
 8009404:	08009ba2 	.word	0x08009ba2
 8009408:	00000000 	.word	0x00000000
 800940c:	080091bf 	.word	0x080091bf
 8009410:	08009b9e 	.word	0x08009b9e

08009414 <_printf_common>:
 8009414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009418:	4616      	mov	r6, r2
 800941a:	4698      	mov	r8, r3
 800941c:	688a      	ldr	r2, [r1, #8]
 800941e:	690b      	ldr	r3, [r1, #16]
 8009420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009424:	4293      	cmp	r3, r2
 8009426:	bfb8      	it	lt
 8009428:	4613      	movlt	r3, r2
 800942a:	6033      	str	r3, [r6, #0]
 800942c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009430:	4607      	mov	r7, r0
 8009432:	460c      	mov	r4, r1
 8009434:	b10a      	cbz	r2, 800943a <_printf_common+0x26>
 8009436:	3301      	adds	r3, #1
 8009438:	6033      	str	r3, [r6, #0]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	0699      	lsls	r1, r3, #26
 800943e:	bf42      	ittt	mi
 8009440:	6833      	ldrmi	r3, [r6, #0]
 8009442:	3302      	addmi	r3, #2
 8009444:	6033      	strmi	r3, [r6, #0]
 8009446:	6825      	ldr	r5, [r4, #0]
 8009448:	f015 0506 	ands.w	r5, r5, #6
 800944c:	d106      	bne.n	800945c <_printf_common+0x48>
 800944e:	f104 0a19 	add.w	sl, r4, #25
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	6832      	ldr	r2, [r6, #0]
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	42ab      	cmp	r3, r5
 800945a:	dc26      	bgt.n	80094aa <_printf_common+0x96>
 800945c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009460:	6822      	ldr	r2, [r4, #0]
 8009462:	3b00      	subs	r3, #0
 8009464:	bf18      	it	ne
 8009466:	2301      	movne	r3, #1
 8009468:	0692      	lsls	r2, r2, #26
 800946a:	d42b      	bmi.n	80094c4 <_printf_common+0xb0>
 800946c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009470:	4641      	mov	r1, r8
 8009472:	4638      	mov	r0, r7
 8009474:	47c8      	blx	r9
 8009476:	3001      	adds	r0, #1
 8009478:	d01e      	beq.n	80094b8 <_printf_common+0xa4>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	6922      	ldr	r2, [r4, #16]
 800947e:	f003 0306 	and.w	r3, r3, #6
 8009482:	2b04      	cmp	r3, #4
 8009484:	bf02      	ittt	eq
 8009486:	68e5      	ldreq	r5, [r4, #12]
 8009488:	6833      	ldreq	r3, [r6, #0]
 800948a:	1aed      	subeq	r5, r5, r3
 800948c:	68a3      	ldr	r3, [r4, #8]
 800948e:	bf0c      	ite	eq
 8009490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009494:	2500      	movne	r5, #0
 8009496:	4293      	cmp	r3, r2
 8009498:	bfc4      	itt	gt
 800949a:	1a9b      	subgt	r3, r3, r2
 800949c:	18ed      	addgt	r5, r5, r3
 800949e:	2600      	movs	r6, #0
 80094a0:	341a      	adds	r4, #26
 80094a2:	42b5      	cmp	r5, r6
 80094a4:	d11a      	bne.n	80094dc <_printf_common+0xc8>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e008      	b.n	80094bc <_printf_common+0xa8>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4641      	mov	r1, r8
 80094b0:	4638      	mov	r0, r7
 80094b2:	47c8      	blx	r9
 80094b4:	3001      	adds	r0, #1
 80094b6:	d103      	bne.n	80094c0 <_printf_common+0xac>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c0:	3501      	adds	r5, #1
 80094c2:	e7c6      	b.n	8009452 <_printf_common+0x3e>
 80094c4:	18e1      	adds	r1, r4, r3
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	2030      	movs	r0, #48	@ 0x30
 80094ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094ce:	4422      	add	r2, r4
 80094d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094d8:	3302      	adds	r3, #2
 80094da:	e7c7      	b.n	800946c <_printf_common+0x58>
 80094dc:	2301      	movs	r3, #1
 80094de:	4622      	mov	r2, r4
 80094e0:	4641      	mov	r1, r8
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c8      	blx	r9
 80094e6:	3001      	adds	r0, #1
 80094e8:	d0e6      	beq.n	80094b8 <_printf_common+0xa4>
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7d9      	b.n	80094a2 <_printf_common+0x8e>
	...

080094f0 <_printf_i>:
 80094f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	7e0f      	ldrb	r7, [r1, #24]
 80094f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094f8:	2f78      	cmp	r7, #120	@ 0x78
 80094fa:	4691      	mov	r9, r2
 80094fc:	4680      	mov	r8, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	469a      	mov	sl, r3
 8009502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009506:	d807      	bhi.n	8009518 <_printf_i+0x28>
 8009508:	2f62      	cmp	r7, #98	@ 0x62
 800950a:	d80a      	bhi.n	8009522 <_printf_i+0x32>
 800950c:	2f00      	cmp	r7, #0
 800950e:	f000 80d2 	beq.w	80096b6 <_printf_i+0x1c6>
 8009512:	2f58      	cmp	r7, #88	@ 0x58
 8009514:	f000 80b9 	beq.w	800968a <_printf_i+0x19a>
 8009518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800951c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009520:	e03a      	b.n	8009598 <_printf_i+0xa8>
 8009522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009526:	2b15      	cmp	r3, #21
 8009528:	d8f6      	bhi.n	8009518 <_printf_i+0x28>
 800952a:	a101      	add	r1, pc, #4	@ (adr r1, 8009530 <_printf_i+0x40>)
 800952c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009530:	08009589 	.word	0x08009589
 8009534:	0800959d 	.word	0x0800959d
 8009538:	08009519 	.word	0x08009519
 800953c:	08009519 	.word	0x08009519
 8009540:	08009519 	.word	0x08009519
 8009544:	08009519 	.word	0x08009519
 8009548:	0800959d 	.word	0x0800959d
 800954c:	08009519 	.word	0x08009519
 8009550:	08009519 	.word	0x08009519
 8009554:	08009519 	.word	0x08009519
 8009558:	08009519 	.word	0x08009519
 800955c:	0800969d 	.word	0x0800969d
 8009560:	080095c7 	.word	0x080095c7
 8009564:	08009657 	.word	0x08009657
 8009568:	08009519 	.word	0x08009519
 800956c:	08009519 	.word	0x08009519
 8009570:	080096bf 	.word	0x080096bf
 8009574:	08009519 	.word	0x08009519
 8009578:	080095c7 	.word	0x080095c7
 800957c:	08009519 	.word	0x08009519
 8009580:	08009519 	.word	0x08009519
 8009584:	0800965f 	.word	0x0800965f
 8009588:	6833      	ldr	r3, [r6, #0]
 800958a:	1d1a      	adds	r2, r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6032      	str	r2, [r6, #0]
 8009590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009598:	2301      	movs	r3, #1
 800959a:	e09d      	b.n	80096d8 <_printf_i+0x1e8>
 800959c:	6833      	ldr	r3, [r6, #0]
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	1d19      	adds	r1, r3, #4
 80095a2:	6031      	str	r1, [r6, #0]
 80095a4:	0606      	lsls	r6, r0, #24
 80095a6:	d501      	bpl.n	80095ac <_printf_i+0xbc>
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	e003      	b.n	80095b4 <_printf_i+0xc4>
 80095ac:	0645      	lsls	r5, r0, #25
 80095ae:	d5fb      	bpl.n	80095a8 <_printf_i+0xb8>
 80095b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	da03      	bge.n	80095c0 <_printf_i+0xd0>
 80095b8:	232d      	movs	r3, #45	@ 0x2d
 80095ba:	426d      	negs	r5, r5
 80095bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095c0:	4859      	ldr	r0, [pc, #356]	@ (8009728 <_printf_i+0x238>)
 80095c2:	230a      	movs	r3, #10
 80095c4:	e011      	b.n	80095ea <_printf_i+0xfa>
 80095c6:	6821      	ldr	r1, [r4, #0]
 80095c8:	6833      	ldr	r3, [r6, #0]
 80095ca:	0608      	lsls	r0, r1, #24
 80095cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80095d0:	d402      	bmi.n	80095d8 <_printf_i+0xe8>
 80095d2:	0649      	lsls	r1, r1, #25
 80095d4:	bf48      	it	mi
 80095d6:	b2ad      	uxthmi	r5, r5
 80095d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095da:	4853      	ldr	r0, [pc, #332]	@ (8009728 <_printf_i+0x238>)
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	bf14      	ite	ne
 80095e0:	230a      	movne	r3, #10
 80095e2:	2308      	moveq	r3, #8
 80095e4:	2100      	movs	r1, #0
 80095e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ea:	6866      	ldr	r6, [r4, #4]
 80095ec:	60a6      	str	r6, [r4, #8]
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	bfa2      	ittt	ge
 80095f2:	6821      	ldrge	r1, [r4, #0]
 80095f4:	f021 0104 	bicge.w	r1, r1, #4
 80095f8:	6021      	strge	r1, [r4, #0]
 80095fa:	b90d      	cbnz	r5, 8009600 <_printf_i+0x110>
 80095fc:	2e00      	cmp	r6, #0
 80095fe:	d04b      	beq.n	8009698 <_printf_i+0x1a8>
 8009600:	4616      	mov	r6, r2
 8009602:	fbb5 f1f3 	udiv	r1, r5, r3
 8009606:	fb03 5711 	mls	r7, r3, r1, r5
 800960a:	5dc7      	ldrb	r7, [r0, r7]
 800960c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009610:	462f      	mov	r7, r5
 8009612:	42bb      	cmp	r3, r7
 8009614:	460d      	mov	r5, r1
 8009616:	d9f4      	bls.n	8009602 <_printf_i+0x112>
 8009618:	2b08      	cmp	r3, #8
 800961a:	d10b      	bne.n	8009634 <_printf_i+0x144>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	07df      	lsls	r7, r3, #31
 8009620:	d508      	bpl.n	8009634 <_printf_i+0x144>
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	6861      	ldr	r1, [r4, #4]
 8009626:	4299      	cmp	r1, r3
 8009628:	bfde      	ittt	le
 800962a:	2330      	movle	r3, #48	@ 0x30
 800962c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009630:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009634:	1b92      	subs	r2, r2, r6
 8009636:	6122      	str	r2, [r4, #16]
 8009638:	f8cd a000 	str.w	sl, [sp]
 800963c:	464b      	mov	r3, r9
 800963e:	aa03      	add	r2, sp, #12
 8009640:	4621      	mov	r1, r4
 8009642:	4640      	mov	r0, r8
 8009644:	f7ff fee6 	bl	8009414 <_printf_common>
 8009648:	3001      	adds	r0, #1
 800964a:	d14a      	bne.n	80096e2 <_printf_i+0x1f2>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	b004      	add	sp, #16
 8009652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	f043 0320 	orr.w	r3, r3, #32
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	4833      	ldr	r0, [pc, #204]	@ (800972c <_printf_i+0x23c>)
 8009660:	2778      	movs	r7, #120	@ 0x78
 8009662:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6831      	ldr	r1, [r6, #0]
 800966a:	061f      	lsls	r7, r3, #24
 800966c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009670:	d402      	bmi.n	8009678 <_printf_i+0x188>
 8009672:	065f      	lsls	r7, r3, #25
 8009674:	bf48      	it	mi
 8009676:	b2ad      	uxthmi	r5, r5
 8009678:	6031      	str	r1, [r6, #0]
 800967a:	07d9      	lsls	r1, r3, #31
 800967c:	bf44      	itt	mi
 800967e:	f043 0320 	orrmi.w	r3, r3, #32
 8009682:	6023      	strmi	r3, [r4, #0]
 8009684:	b11d      	cbz	r5, 800968e <_printf_i+0x19e>
 8009686:	2310      	movs	r3, #16
 8009688:	e7ac      	b.n	80095e4 <_printf_i+0xf4>
 800968a:	4827      	ldr	r0, [pc, #156]	@ (8009728 <_printf_i+0x238>)
 800968c:	e7e9      	b.n	8009662 <_printf_i+0x172>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f023 0320 	bic.w	r3, r3, #32
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	e7f6      	b.n	8009686 <_printf_i+0x196>
 8009698:	4616      	mov	r6, r2
 800969a:	e7bd      	b.n	8009618 <_printf_i+0x128>
 800969c:	6833      	ldr	r3, [r6, #0]
 800969e:	6825      	ldr	r5, [r4, #0]
 80096a0:	6961      	ldr	r1, [r4, #20]
 80096a2:	1d18      	adds	r0, r3, #4
 80096a4:	6030      	str	r0, [r6, #0]
 80096a6:	062e      	lsls	r6, r5, #24
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0x1c0>
 80096ac:	6019      	str	r1, [r3, #0]
 80096ae:	e002      	b.n	80096b6 <_printf_i+0x1c6>
 80096b0:	0668      	lsls	r0, r5, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0x1bc>
 80096b4:	8019      	strh	r1, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	4616      	mov	r6, r2
 80096bc:	e7bc      	b.n	8009638 <_printf_i+0x148>
 80096be:	6833      	ldr	r3, [r6, #0]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	6032      	str	r2, [r6, #0]
 80096c4:	681e      	ldr	r6, [r3, #0]
 80096c6:	6862      	ldr	r2, [r4, #4]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7f6 fdb0 	bl	8000230 <memchr>
 80096d0:	b108      	cbz	r0, 80096d6 <_printf_i+0x1e6>
 80096d2:	1b80      	subs	r0, r0, r6
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	2300      	movs	r3, #0
 80096dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096e0:	e7aa      	b.n	8009638 <_printf_i+0x148>
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	4632      	mov	r2, r6
 80096e6:	4649      	mov	r1, r9
 80096e8:	4640      	mov	r0, r8
 80096ea:	47d0      	blx	sl
 80096ec:	3001      	adds	r0, #1
 80096ee:	d0ad      	beq.n	800964c <_printf_i+0x15c>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	079b      	lsls	r3, r3, #30
 80096f4:	d413      	bmi.n	800971e <_printf_i+0x22e>
 80096f6:	68e0      	ldr	r0, [r4, #12]
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	4298      	cmp	r0, r3
 80096fc:	bfb8      	it	lt
 80096fe:	4618      	movlt	r0, r3
 8009700:	e7a6      	b.n	8009650 <_printf_i+0x160>
 8009702:	2301      	movs	r3, #1
 8009704:	4632      	mov	r2, r6
 8009706:	4649      	mov	r1, r9
 8009708:	4640      	mov	r0, r8
 800970a:	47d0      	blx	sl
 800970c:	3001      	adds	r0, #1
 800970e:	d09d      	beq.n	800964c <_printf_i+0x15c>
 8009710:	3501      	adds	r5, #1
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	9903      	ldr	r1, [sp, #12]
 8009716:	1a5b      	subs	r3, r3, r1
 8009718:	42ab      	cmp	r3, r5
 800971a:	dcf2      	bgt.n	8009702 <_printf_i+0x212>
 800971c:	e7eb      	b.n	80096f6 <_printf_i+0x206>
 800971e:	2500      	movs	r5, #0
 8009720:	f104 0619 	add.w	r6, r4, #25
 8009724:	e7f5      	b.n	8009712 <_printf_i+0x222>
 8009726:	bf00      	nop
 8009728:	08009ba9 	.word	0x08009ba9
 800972c:	08009bba 	.word	0x08009bba

08009730 <__sflush_r>:
 8009730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	0716      	lsls	r6, r2, #28
 800973a:	4605      	mov	r5, r0
 800973c:	460c      	mov	r4, r1
 800973e:	d454      	bmi.n	80097ea <__sflush_r+0xba>
 8009740:	684b      	ldr	r3, [r1, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	dc02      	bgt.n	800974c <__sflush_r+0x1c>
 8009746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	dd48      	ble.n	80097de <__sflush_r+0xae>
 800974c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800974e:	2e00      	cmp	r6, #0
 8009750:	d045      	beq.n	80097de <__sflush_r+0xae>
 8009752:	2300      	movs	r3, #0
 8009754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009758:	682f      	ldr	r7, [r5, #0]
 800975a:	6a21      	ldr	r1, [r4, #32]
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	d030      	beq.n	80097c2 <__sflush_r+0x92>
 8009760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	0759      	lsls	r1, r3, #29
 8009766:	d505      	bpl.n	8009774 <__sflush_r+0x44>
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800976e:	b10b      	cbz	r3, 8009774 <__sflush_r+0x44>
 8009770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009772:	1ad2      	subs	r2, r2, r3
 8009774:	2300      	movs	r3, #0
 8009776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009778:	6a21      	ldr	r1, [r4, #32]
 800977a:	4628      	mov	r0, r5
 800977c:	47b0      	blx	r6
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	d106      	bne.n	8009792 <__sflush_r+0x62>
 8009784:	6829      	ldr	r1, [r5, #0]
 8009786:	291d      	cmp	r1, #29
 8009788:	d82b      	bhi.n	80097e2 <__sflush_r+0xb2>
 800978a:	4a2a      	ldr	r2, [pc, #168]	@ (8009834 <__sflush_r+0x104>)
 800978c:	410a      	asrs	r2, r1
 800978e:	07d6      	lsls	r6, r2, #31
 8009790:	d427      	bmi.n	80097e2 <__sflush_r+0xb2>
 8009792:	2200      	movs	r2, #0
 8009794:	6062      	str	r2, [r4, #4]
 8009796:	04d9      	lsls	r1, r3, #19
 8009798:	6922      	ldr	r2, [r4, #16]
 800979a:	6022      	str	r2, [r4, #0]
 800979c:	d504      	bpl.n	80097a8 <__sflush_r+0x78>
 800979e:	1c42      	adds	r2, r0, #1
 80097a0:	d101      	bne.n	80097a6 <__sflush_r+0x76>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	b903      	cbnz	r3, 80097a8 <__sflush_r+0x78>
 80097a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80097a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097aa:	602f      	str	r7, [r5, #0]
 80097ac:	b1b9      	cbz	r1, 80097de <__sflush_r+0xae>
 80097ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097b2:	4299      	cmp	r1, r3
 80097b4:	d002      	beq.n	80097bc <__sflush_r+0x8c>
 80097b6:	4628      	mov	r0, r5
 80097b8:	f7ff fa9a 	bl	8008cf0 <_free_r>
 80097bc:	2300      	movs	r3, #0
 80097be:	6363      	str	r3, [r4, #52]	@ 0x34
 80097c0:	e00d      	b.n	80097de <__sflush_r+0xae>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b0      	blx	r6
 80097c8:	4602      	mov	r2, r0
 80097ca:	1c50      	adds	r0, r2, #1
 80097cc:	d1c9      	bne.n	8009762 <__sflush_r+0x32>
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0c6      	beq.n	8009762 <__sflush_r+0x32>
 80097d4:	2b1d      	cmp	r3, #29
 80097d6:	d001      	beq.n	80097dc <__sflush_r+0xac>
 80097d8:	2b16      	cmp	r3, #22
 80097da:	d11e      	bne.n	800981a <__sflush_r+0xea>
 80097dc:	602f      	str	r7, [r5, #0]
 80097de:	2000      	movs	r0, #0
 80097e0:	e022      	b.n	8009828 <__sflush_r+0xf8>
 80097e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e6:	b21b      	sxth	r3, r3
 80097e8:	e01b      	b.n	8009822 <__sflush_r+0xf2>
 80097ea:	690f      	ldr	r7, [r1, #16]
 80097ec:	2f00      	cmp	r7, #0
 80097ee:	d0f6      	beq.n	80097de <__sflush_r+0xae>
 80097f0:	0793      	lsls	r3, r2, #30
 80097f2:	680e      	ldr	r6, [r1, #0]
 80097f4:	bf08      	it	eq
 80097f6:	694b      	ldreq	r3, [r1, #20]
 80097f8:	600f      	str	r7, [r1, #0]
 80097fa:	bf18      	it	ne
 80097fc:	2300      	movne	r3, #0
 80097fe:	eba6 0807 	sub.w	r8, r6, r7
 8009802:	608b      	str	r3, [r1, #8]
 8009804:	f1b8 0f00 	cmp.w	r8, #0
 8009808:	dde9      	ble.n	80097de <__sflush_r+0xae>
 800980a:	6a21      	ldr	r1, [r4, #32]
 800980c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800980e:	4643      	mov	r3, r8
 8009810:	463a      	mov	r2, r7
 8009812:	4628      	mov	r0, r5
 8009814:	47b0      	blx	r6
 8009816:	2800      	cmp	r0, #0
 8009818:	dc08      	bgt.n	800982c <__sflush_r+0xfc>
 800981a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	4407      	add	r7, r0
 800982e:	eba8 0800 	sub.w	r8, r8, r0
 8009832:	e7e7      	b.n	8009804 <__sflush_r+0xd4>
 8009834:	dfbffffe 	.word	0xdfbffffe

08009838 <_fflush_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	690b      	ldr	r3, [r1, #16]
 800983c:	4605      	mov	r5, r0
 800983e:	460c      	mov	r4, r1
 8009840:	b913      	cbnz	r3, 8009848 <_fflush_r+0x10>
 8009842:	2500      	movs	r5, #0
 8009844:	4628      	mov	r0, r5
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	b118      	cbz	r0, 8009852 <_fflush_r+0x1a>
 800984a:	6a03      	ldr	r3, [r0, #32]
 800984c:	b90b      	cbnz	r3, 8009852 <_fflush_r+0x1a>
 800984e:	f7ff f835 	bl	80088bc <__sinit>
 8009852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0f3      	beq.n	8009842 <_fflush_r+0xa>
 800985a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800985c:	07d0      	lsls	r0, r2, #31
 800985e:	d404      	bmi.n	800986a <_fflush_r+0x32>
 8009860:	0599      	lsls	r1, r3, #22
 8009862:	d402      	bmi.n	800986a <_fflush_r+0x32>
 8009864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009866:	f7ff fa40 	bl	8008cea <__retarget_lock_acquire_recursive>
 800986a:	4628      	mov	r0, r5
 800986c:	4621      	mov	r1, r4
 800986e:	f7ff ff5f 	bl	8009730 <__sflush_r>
 8009872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009874:	07da      	lsls	r2, r3, #31
 8009876:	4605      	mov	r5, r0
 8009878:	d4e4      	bmi.n	8009844 <_fflush_r+0xc>
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	059b      	lsls	r3, r3, #22
 800987e:	d4e1      	bmi.n	8009844 <_fflush_r+0xc>
 8009880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009882:	f7ff fa33 	bl	8008cec <__retarget_lock_release_recursive>
 8009886:	e7dd      	b.n	8009844 <_fflush_r+0xc>

08009888 <__swhatbuf_r>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	460c      	mov	r4, r1
 800988c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009890:	2900      	cmp	r1, #0
 8009892:	b096      	sub	sp, #88	@ 0x58
 8009894:	4615      	mov	r5, r2
 8009896:	461e      	mov	r6, r3
 8009898:	da0d      	bge.n	80098b6 <__swhatbuf_r+0x2e>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098a0:	f04f 0100 	mov.w	r1, #0
 80098a4:	bf14      	ite	ne
 80098a6:	2340      	movne	r3, #64	@ 0x40
 80098a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098ac:	2000      	movs	r0, #0
 80098ae:	6031      	str	r1, [r6, #0]
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	b016      	add	sp, #88	@ 0x58
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	466a      	mov	r2, sp
 80098b8:	f000 f862 	bl	8009980 <_fstat_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	dbec      	blt.n	800989a <__swhatbuf_r+0x12>
 80098c0:	9901      	ldr	r1, [sp, #4]
 80098c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098ca:	4259      	negs	r1, r3
 80098cc:	4159      	adcs	r1, r3
 80098ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098d2:	e7eb      	b.n	80098ac <__swhatbuf_r+0x24>

080098d4 <__smakebuf_r>:
 80098d4:	898b      	ldrh	r3, [r1, #12]
 80098d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098d8:	079d      	lsls	r5, r3, #30
 80098da:	4606      	mov	r6, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	d507      	bpl.n	80098f0 <__smakebuf_r+0x1c>
 80098e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	6123      	str	r3, [r4, #16]
 80098e8:	2301      	movs	r3, #1
 80098ea:	6163      	str	r3, [r4, #20]
 80098ec:	b003      	add	sp, #12
 80098ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f0:	ab01      	add	r3, sp, #4
 80098f2:	466a      	mov	r2, sp
 80098f4:	f7ff ffc8 	bl	8009888 <__swhatbuf_r>
 80098f8:	9f00      	ldr	r7, [sp, #0]
 80098fa:	4605      	mov	r5, r0
 80098fc:	4639      	mov	r1, r7
 80098fe:	4630      	mov	r0, r6
 8009900:	f7ff fa62 	bl	8008dc8 <_malloc_r>
 8009904:	b948      	cbnz	r0, 800991a <__smakebuf_r+0x46>
 8009906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990a:	059a      	lsls	r2, r3, #22
 800990c:	d4ee      	bmi.n	80098ec <__smakebuf_r+0x18>
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	f043 0302 	orr.w	r3, r3, #2
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	e7e2      	b.n	80098e0 <__smakebuf_r+0xc>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	6020      	str	r0, [r4, #0]
 800991e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800992a:	b15b      	cbz	r3, 8009944 <__smakebuf_r+0x70>
 800992c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009930:	4630      	mov	r0, r6
 8009932:	f000 f837 	bl	80099a4 <_isatty_r>
 8009936:	b128      	cbz	r0, 8009944 <__smakebuf_r+0x70>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	81a3      	strh	r3, [r4, #12]
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	431d      	orrs	r5, r3
 8009948:	81a5      	strh	r5, [r4, #12]
 800994a:	e7cf      	b.n	80098ec <__smakebuf_r+0x18>

0800994c <memmove>:
 800994c:	4288      	cmp	r0, r1
 800994e:	b510      	push	{r4, lr}
 8009950:	eb01 0402 	add.w	r4, r1, r2
 8009954:	d902      	bls.n	800995c <memmove+0x10>
 8009956:	4284      	cmp	r4, r0
 8009958:	4623      	mov	r3, r4
 800995a:	d807      	bhi.n	800996c <memmove+0x20>
 800995c:	1e43      	subs	r3, r0, #1
 800995e:	42a1      	cmp	r1, r4
 8009960:	d008      	beq.n	8009974 <memmove+0x28>
 8009962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800996a:	e7f8      	b.n	800995e <memmove+0x12>
 800996c:	4402      	add	r2, r0
 800996e:	4601      	mov	r1, r0
 8009970:	428a      	cmp	r2, r1
 8009972:	d100      	bne.n	8009976 <memmove+0x2a>
 8009974:	bd10      	pop	{r4, pc}
 8009976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800997a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800997e:	e7f7      	b.n	8009970 <memmove+0x24>

08009980 <_fstat_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	@ (80099a0 <_fstat_r+0x20>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	4611      	mov	r1, r2
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	f7f6 ff50 	bl	8000832 <_fstat>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	d102      	bne.n	800999c <_fstat_r+0x1c>
 8009996:	682b      	ldr	r3, [r5, #0]
 8009998:	b103      	cbz	r3, 800999c <_fstat_r+0x1c>
 800999a:	6023      	str	r3, [r4, #0]
 800999c:	bd38      	pop	{r3, r4, r5, pc}
 800999e:	bf00      	nop
 80099a0:	20001f8c 	.word	0x20001f8c

080099a4 <_isatty_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d06      	ldr	r5, [pc, #24]	@ (80099c0 <_isatty_r+0x1c>)
 80099a8:	2300      	movs	r3, #0
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	f7f6 ff4f 	bl	8000852 <_isatty>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_isatty_r+0x1a>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	b103      	cbz	r3, 80099be <_isatty_r+0x1a>
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	20001f8c 	.word	0x20001f8c

080099c4 <_sbrk_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d06      	ldr	r5, [pc, #24]	@ (80099e0 <_sbrk_r+0x1c>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	f7f6 ff58 	bl	8000884 <_sbrk>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_sbrk_r+0x1a>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_sbrk_r+0x1a>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	20001f8c 	.word	0x20001f8c

080099e4 <memcpy>:
 80099e4:	440a      	add	r2, r1
 80099e6:	4291      	cmp	r1, r2
 80099e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099ec:	d100      	bne.n	80099f0 <memcpy+0xc>
 80099ee:	4770      	bx	lr
 80099f0:	b510      	push	{r4, lr}
 80099f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099fa:	4291      	cmp	r1, r2
 80099fc:	d1f9      	bne.n	80099f2 <memcpy+0xe>
 80099fe:	bd10      	pop	{r4, pc}

08009a00 <_realloc_r>:
 8009a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a04:	4680      	mov	r8, r0
 8009a06:	4615      	mov	r5, r2
 8009a08:	460c      	mov	r4, r1
 8009a0a:	b921      	cbnz	r1, 8009a16 <_realloc_r+0x16>
 8009a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a10:	4611      	mov	r1, r2
 8009a12:	f7ff b9d9 	b.w	8008dc8 <_malloc_r>
 8009a16:	b92a      	cbnz	r2, 8009a24 <_realloc_r+0x24>
 8009a18:	f7ff f96a 	bl	8008cf0 <_free_r>
 8009a1c:	2400      	movs	r4, #0
 8009a1e:	4620      	mov	r0, r4
 8009a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a24:	f000 f81a 	bl	8009a5c <_malloc_usable_size_r>
 8009a28:	4285      	cmp	r5, r0
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	d802      	bhi.n	8009a34 <_realloc_r+0x34>
 8009a2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a32:	d8f4      	bhi.n	8009a1e <_realloc_r+0x1e>
 8009a34:	4629      	mov	r1, r5
 8009a36:	4640      	mov	r0, r8
 8009a38:	f7ff f9c6 	bl	8008dc8 <_malloc_r>
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d0ec      	beq.n	8009a1c <_realloc_r+0x1c>
 8009a42:	42b5      	cmp	r5, r6
 8009a44:	462a      	mov	r2, r5
 8009a46:	4621      	mov	r1, r4
 8009a48:	bf28      	it	cs
 8009a4a:	4632      	movcs	r2, r6
 8009a4c:	f7ff ffca 	bl	80099e4 <memcpy>
 8009a50:	4621      	mov	r1, r4
 8009a52:	4640      	mov	r0, r8
 8009a54:	f7ff f94c 	bl	8008cf0 <_free_r>
 8009a58:	463c      	mov	r4, r7
 8009a5a:	e7e0      	b.n	8009a1e <_realloc_r+0x1e>

08009a5c <_malloc_usable_size_r>:
 8009a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a60:	1f18      	subs	r0, r3, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bfbc      	itt	lt
 8009a66:	580b      	ldrlt	r3, [r1, r0]
 8009a68:	18c0      	addlt	r0, r0, r3
 8009a6a:	4770      	bx	lr

08009a6c <_init>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr

08009a78 <_fini>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	bf00      	nop
 8009a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7e:	bc08      	pop	{r3}
 8009a80:	469e      	mov	lr, r3
 8009a82:	4770      	bx	lr


Science_Module_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098ac  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009a6c  08009a6c  0000aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb4  08009bb4  0000b168  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb4  08009bb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bbc  08009bbc  0000b168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bbc  08009bbc  0000abbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bc0  08009bc0  0000abc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08009bc4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e30  20000168  08009d2c  0000b168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f98  08009d2c  0000bf98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016884  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391b  00000000  00000000  00021a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00025338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb8  00000000  00000000  000267e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002efd8  00000000  00000000  000277a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018efd  00000000  00000000  00056778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110a78  00000000  00000000  0006f675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001800ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f14  00000000  00000000  00180130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00186044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000168 	.word	0x20000168
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009a54 	.word	0x08009a54

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000016c 	.word	0x2000016c
 80001fc:	08009a54 	.word	0x08009a54

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fb3b 	bl	800094e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f87c 	bl	80003d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f8fe 	bl	80004dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002e0:	f007 fb00 	bl	80078e4 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80002e4:	f000 f8c4 	bl	8000470 <MX_TIM6_Init>

  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 80002e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ec:	f000 fba4 	bl	8000a38 <HAL_Delay>
  printf("> ");
 80002f0:	482e      	ldr	r0, [pc, #184]	@ (80003ac <main+0xdc>)
 80002f2:	f008 fb0d 	bl	8008910 <iprintf>

  // begin timer6 IT 
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 80002f6:	4b2e      	ldr	r3, [pc, #184]	@ (80003b0 <main+0xe0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f06f 0201 	mvn.w	r2, #1
 80002fe:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8000300:	482b      	ldr	r0, [pc, #172]	@ (80003b0 <main+0xe0>)
 8000302:	f003 fd9d 	bl	8003e40 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    if (LED2_flag)
 8000306:	4b2b      	ldr	r3, [pc, #172]	@ (80003b4 <main+0xe4>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d005      	beq.n	800031a <main+0x4a>
    {
      HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2108      	movs	r1, #8
 8000312:	4829      	ldr	r0, [pc, #164]	@ (80003b8 <main+0xe8>)
 8000314:	f000 fe58 	bl	8000fc8 <HAL_GPIO_WritePin>
 8000318:	e004      	b.n	8000324 <main+0x54>
    }
    else 
    {
      HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2108      	movs	r1, #8
 800031e:	4826      	ldr	r0, [pc, #152]	@ (80003b8 <main+0xe8>)
 8000320:	f000 fe52 	bl	8000fc8 <HAL_GPIO_WritePin>
    }
    if (Pump3_flag)
 8000324:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <main+0xec>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d020      	beq.n	800036e <main+0x9e>
    {
      if (Pump3_dir){ //forward
 800032c:	4b24      	ldr	r3, [pc, #144]	@ (80003c0 <main+0xf0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01c      	beq.n	800036e <main+0x9e>
        HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800033a:	481f      	ldr	r0, [pc, #124]	@ (80003b8 <main+0xe8>)
 800033c:	f000 fe44 	bl	8000fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000346:	481c      	ldr	r0, [pc, #112]	@ (80003b8 <main+0xe8>)
 8000348:	f000 fe3e 	bl	8000fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000352:	4819      	ldr	r0, [pc, #100]	@ (80003b8 <main+0xe8>)
 8000354:	f000 fe38 	bl	8000fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800035e:	4816      	ldr	r0, [pc, #88]	@ (80003b8 <main+0xe8>)
 8000360:	f000 fe32 	bl	8000fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2108      	movs	r1, #8
 8000368:	4813      	ldr	r0, [pc, #76]	@ (80003b8 <main+0xe8>)
 800036a:	f000 fe2d 	bl	8000fc8 <HAL_GPIO_WritePin>
      }
    }

    if (Timer6_flag)
 800036e:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <main+0xf4>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0c7      	beq.n	8000306 <main+0x36>
    {
      tim6_val = Get_timer6_us();
 8000376:	f000 f965 	bl	8000644 <Get_timer6_us>
 800037a:	4603      	mov	r3, r0
 800037c:	4a12      	ldr	r2, [pc, #72]	@ (80003c8 <main+0xf8>)
 800037e:	6013      	str	r3, [r2, #0]
      while(Get_timer6_us() - tim6_val < 10e6);
 8000380:	bf00      	nop
 8000382:	f000 f95f 	bl	8000644 <Get_timer6_us>
 8000386:	4602      	mov	r2, r0
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <main+0xf8>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	4a0f      	ldr	r2, [pc, #60]	@ (80003cc <main+0xfc>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d3f6      	bcc.n	8000382 <main+0xb2>
      printf("10 seconds reached\r\n");
 8000394:	480e      	ldr	r0, [pc, #56]	@ (80003d0 <main+0x100>)
 8000396:	f008 fb23 	bl	80089e0 <puts>
      HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	2108      	movs	r1, #8
 800039e:	4806      	ldr	r0, [pc, #24]	@ (80003b8 <main+0xe8>)
 80003a0:	f000 fe12 	bl	8000fc8 <HAL_GPIO_WritePin>
      Timer6_flag = 0; 
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <main+0xf4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
    if (LED2_flag)
 80003aa:	e7ac      	b.n	8000306 <main+0x36>
 80003ac:	08009a6c 	.word	0x08009a6c
 80003b0:	20000184 	.word	0x20000184
 80003b4:	200001d0 	.word	0x200001d0
 80003b8:	48000400 	.word	0x48000400
 80003bc:	200001d1 	.word	0x200001d1
 80003c0:	200001d2 	.word	0x200001d2
 80003c4:	200001d3 	.word	0x200001d3
 80003c8:	200001d4 	.word	0x200001d4
 80003cc:	00989680 	.word	0x00989680
 80003d0:	08009a70 	.word	0x08009a70

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b098      	sub	sp, #96	@ 0x60
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	2248      	movs	r2, #72	@ 0x48
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f008 fbfc 	bl	8008be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80003f6:	2000      	movs	r0, #0
 80003f8:	f001 ffb4 	bl	8002364 <HAL_PWREx_ControlVoltageScaling>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000402:	f000 f94d 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000410:	2302      	movs	r3, #2
 8000412:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000414:	2303      	movs	r3, #3
 8000416:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000418:	2301      	movs	r3, #1
 800041a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 800041c:	231e      	movs	r3, #30
 800041e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000420:	2302      	movs	r3, #2
 8000422:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000424:	2302      	movs	r3, #2
 8000426:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000428:	2302      	movs	r3, #2
 800042a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f002 f84b 	bl	80024cc <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800043c:	f000 f930 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2303      	movs	r3, #3
 8000446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2105      	movs	r1, #5
 8000458:	4618      	mov	r0, r3
 800045a:	f002 fcb3 	bl	8002dc4 <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000464:	f000 f91c 	bl	80006a0 <Error_Handler>
  }
}
 8000468:	bf00      	nop
 800046a:	3760      	adds	r7, #96	@ 0x60
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000480:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_TIM6_Init+0x64>)
 8000482:	4a15      	ldr	r2, [pc, #84]	@ (80004d8 <MX_TIM6_Init+0x68>)
 8000484:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8000486:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <MX_TIM6_Init+0x64>)
 8000488:	2277      	movs	r2, #119	@ 0x77
 800048a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <MX_TIM6_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <MX_TIM6_Init+0x64>)
 8000494:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000498:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <MX_TIM6_Init+0x64>)
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004a0:	480c      	ldr	r0, [pc, #48]	@ (80004d4 <MX_TIM6_Init+0x64>)
 80004a2:	f003 fc75 	bl	8003d90 <HAL_TIM_Base_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80004ac:	f000 f8f8 	bl	80006a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4619      	mov	r1, r3
 80004bc:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <MX_TIM6_Init+0x64>)
 80004be:	f003 ff05 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80004c8:	f000 f8ea 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000184 	.word	0x20000184
 80004d8:	40001000 	.word	0x40001000

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b47      	ldr	r3, [pc, #284]	@ (8000610 <MX_GPIO_Init+0x134>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	4a46      	ldr	r2, [pc, #280]	@ (8000610 <MX_GPIO_Init+0x134>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fe:	4b44      	ldr	r3, [pc, #272]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b41      	ldr	r3, [pc, #260]	@ (8000610 <MX_GPIO_Init+0x134>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a40      	ldr	r2, [pc, #256]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b3e      	ldr	r3, [pc, #248]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b3b      	ldr	r3, [pc, #236]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a3a      	ldr	r2, [pc, #232]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b38      	ldr	r3, [pc, #224]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b35      	ldr	r3, [pc, #212]	@ (8000610 <MX_GPIO_Init+0x134>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a34      	ldr	r2, [pc, #208]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b32      	ldr	r3, [pc, #200]	@ (8000610 <MX_GPIO_Init+0x134>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8000558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055c:	f000 fd34 	bl	8000fc8 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 8000560:	2200      	movs	r2, #0
 8000562:	f64f 31cf 	movw	r1, #64463	@ 0xfbcf
 8000566:	482b      	ldr	r0, [pc, #172]	@ (8000614 <MX_GPIO_Init+0x138>)
 8000568:	f000 fd2e 	bl	8000fc8 <HAL_GPIO_WritePin>
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SM_EN__GPIO_Port, MCU_SM_EN__Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2108      	movs	r1, #8
 8000570:	4829      	ldr	r0, [pc, #164]	@ (8000618 <MX_GPIO_Init+0x13c>)
 8000572:	f000 fd29 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_Flow1_Pin MCU_Flow2_Pin MCU_Flow3_Pin */
  GPIO_InitStruct.Pin = MCU_Flow1_Pin|MCU_Flow2_Pin|MCU_Flow3_Pin;
 8000576:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	4824      	ldr	r0, [pc, #144]	@ (800061c <MX_GPIO_Init+0x140>)
 800058c:	f000 fb8a 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_BANK_EN_Pin MCU_Pump3_HS_LR_Pin MCU_Pump3_LS_LR_Pin MCU_Pump3_HS_RL_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 8000590:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000594:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f000 fb7a 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_Pump3_LS_RL_Pin MCU_Pump2_HS_LR_Pin MCU_Pump2_LS_LR_Pin MCU_Pump2_LS_RL_Pin
                           P3_LS_RL_Pin P3_LS_LR_Pin P3_HS_LR_Pin P3_HS_RL_Pin
                           LED2_Pin MCU_SM_PUL__Pin MCU_SM_DIR__Pin MCU_VM_EN_Pin
                           MCU_AM_EN_Pin */
  GPIO_InitStruct.Pin = MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 80005b0:	f64f 33cf 	movw	r3, #64463	@ 0xfbcf
 80005b4:	617b      	str	r3, [r7, #20]
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4812      	ldr	r0, [pc, #72]	@ (8000614 <MX_GPIO_Init+0x138>)
 80005ca:	f000 fb6b 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_Pump2_HS_RL_Pin */
  GPIO_InitStruct.Pin = MCU_Pump2_HS_RL_Pin;
 80005ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_Pump2_HS_RL_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	480b      	ldr	r0, [pc, #44]	@ (8000614 <MX_GPIO_Init+0x138>)
 80005e6:	f000 fb5d 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SM_EN__Pin */
  GPIO_InitStruct.Pin = MCU_SM_EN__Pin;
 80005ea:	2308      	movs	r3, #8
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_SM_EN__GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_GPIO_Init+0x13c>)
 8000602:	f000 fb4f 	bl	8000ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	@ 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	48000400 	.word	0x48000400
 8000618:	48001c00 	.word	0x48001c00
 800061c:	48000800 	.word	0x48000800

08000620 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) 
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b29b      	uxth	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	68b8      	ldr	r0, [r7, #8]
 8000634:	f007 fb0c 	bl	8007c50 <CDC_Transmit_FS>
  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <Get_timer6_us>:

uint32_t Get_timer6_us(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  int temp = __HAL_TIM_GET_COUNTER(&htim6);
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <Get_timer6_us+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000650:	607b      	str	r3, [r7, #4]
  return tim6_overflow * 65536 + temp;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <Get_timer6_us+0x28>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	041a      	lsls	r2, r3, #16
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000184 	.word	0x20000184
 800066c:	200001d8 	.word	0x200001d8

08000670 <HAL_TIM_PeriodElapsedCallback>:

// INTERRUPT CALLBACKS
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) //check if timer6 IT flag
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a07      	ldr	r2, [pc, #28]	@ (8000698 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d104      	bne.n	800068a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    tim6_overflow++;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000688:	6013      	str	r3, [r2, #0]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000184 	.word	0x20000184
 800069c:	200001d8 	.word	0x200001d8

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <Error_Handler+0x8>

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006b6:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <HAL_MspInit+0x44>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x44>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_MspInit+0x44>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_MspInit+0x44>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <HAL_TIM_Base_MspInit+0x44>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d113      	bne.n	800072e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <HAL_TIM_Base_MspInit+0x48>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070a:	4a0c      	ldr	r2, [pc, #48]	@ (800073c <HAL_TIM_Base_MspInit+0x48>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6593      	str	r3, [r2, #88]	@ 0x58
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_TIM_Base_MspInit+0x48>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2036      	movs	r0, #54	@ 0x36
 8000724:	f000 fa87 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000728:	2036      	movs	r0, #54	@ 0x36
 800072a:	f000 faa0 	bl	8000c6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40001000 	.word	0x40001000
 800073c:	40021000 	.word	0x40021000

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <MemManage_Handler+0x4>

08000758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <UsageFault_Handler+0x4>

08000768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000796:	f000 f92f 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <TIM6_DAC_IRQHandler+0x10>)
 80007a6:	f003 fbbb 	bl	8003f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000184 	.word	0x20000184

080007b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007b8:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <OTG_FS_IRQHandler+0x10>)
 80007ba:	f000 fd5b 	bl	8001274 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20001748 	.word	0x20001748

080007c8 <_read>:
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e00a      	b.n	80007f0 <_read+0x28>
 80007da:	f3af 8000 	nop.w
 80007de:	4601      	mov	r1, r0
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	b2ca      	uxtb	r2, r1
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf0      	blt.n	80007da <_read+0x12>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_close>:
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <_fstat>:
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	2300      	movs	r3, #0
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <_isatty>:
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	2301      	movs	r3, #1
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_lseek>:
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	2300      	movs	r3, #0
 800085e:	4618      	mov	r0, r3
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <_sbrk>:
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
 800089c:	f008 f9ee 	bl	8008c7c <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20050000 	.word	0x20050000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	200001dc 	.word	0x200001dc
 80008d4:	20001f98 	.word	0x20001f98

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopForever+0x2>
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
 800090a:	2300      	movs	r3, #0
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:
 800090e:	58d4      	ldr	r4, [r2, r3]
 8000910:	50c4      	str	r4, [r0, r3]
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:
 8000914:	18c4      	adds	r4, r0, r3
 8000916:	428c      	cmp	r4, r1
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
 800091e:	2300      	movs	r3, #0
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:
 8000926:	42a2      	cmp	r2, r4
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>
 800092a:	f008 f9ad 	bl	8008c88 <__libc_init_array>
 800092e:	f7ff fccf 	bl	80002d0 <main>

08000932 <LoopForever>:
 8000932:	e7fe      	b.n	8000932 <LoopForever>
 8000934:	20050000 	.word	0x20050000
 8000938:	20000000 	.word	0x20000000
 800093c:	20000168 	.word	0x20000168
 8000940:	08009bc4 	.word	0x08009bc4
 8000944:	20000168 	.word	0x20000168
 8000948:	20001f98 	.word	0x20001f98

0800094c <ADC1_2_IRQHandler>:
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>

0800094e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f961 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f80e 	bl	8000980 <HAL_InitTick>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e001      	b.n	8000974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000970:	f7ff fe9c 	bl	80006ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000974:	79fb      	ldrb	r3, [r7, #7]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <HAL_InitTick+0x6c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d023      	beq.n	80009dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_InitTick+0x70>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f96d 	bl	8000c8a <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10f      	bne.n	80009d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d809      	bhi.n	80009d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f937 	bl	8000c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_InitTick+0x74>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e007      	b.n	80009e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e004      	b.n	80009e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e001      	b.n	80009e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	200001e0 	.word	0x200001e0

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	200001e0 	.word	0x200001e0

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	@ (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	@ 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff29 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff3e 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff31 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa2 	bl	8000bdc <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb2:	e166      	b.n	8000f82 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8158 	beq.w	8000f7c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d005      	beq.n	8000ce4 <HAL_GPIO_Init+0x40>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d130      	bne.n	8000d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	f003 0201 	and.w	r2, r3, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d017      	beq.n	8000d82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d123      	bne.n	8000dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	08da      	lsrs	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3208      	adds	r2, #8
 8000dd0:	6939      	ldr	r1, [r7, #16]
 8000dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0203 	and.w	r2, r3, #3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 80b2 	beq.w	8000f7c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	4b61      	ldr	r3, [pc, #388]	@ (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1c:	4a60      	ldr	r2, [pc, #384]	@ (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e24:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e30:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa4 <HAL_GPIO_Init+0x300>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e5a:	d02b      	beq.n	8000eb4 <HAL_GPIO_Init+0x210>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a52      	ldr	r2, [pc, #328]	@ (8000fa8 <HAL_GPIO_Init+0x304>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d025      	beq.n	8000eb0 <HAL_GPIO_Init+0x20c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a51      	ldr	r2, [pc, #324]	@ (8000fac <HAL_GPIO_Init+0x308>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d01f      	beq.n	8000eac <HAL_GPIO_Init+0x208>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a50      	ldr	r2, [pc, #320]	@ (8000fb0 <HAL_GPIO_Init+0x30c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d019      	beq.n	8000ea8 <HAL_GPIO_Init+0x204>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb4 <HAL_GPIO_Init+0x310>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x200>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb8 <HAL_GPIO_Init+0x314>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1fc>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4d      	ldr	r2, [pc, #308]	@ (8000fbc <HAL_GPIO_Init+0x318>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1f8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc0 <HAL_GPIO_Init+0x31c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1f4>
 8000e94:	2307      	movs	r3, #7
 8000e96:	e00e      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000e98:	2308      	movs	r3, #8
 8000e9a:	e00c      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	e00a      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	e008      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e004      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec6:	4937      	ldr	r1, [pc, #220]	@ (8000fa4 <HAL_GPIO_Init+0x300>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef8:	4a32      	ldr	r2, [pc, #200]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000efe:	4b31      	ldr	r3, [pc, #196]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f22:	4a28      	ldr	r2, [pc, #160]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f28:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f76:	4a13      	ldr	r2, [pc, #76]	@ (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f47f ae91 	bne.w	8000cb4 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	48000c00 	.word	0x48000c00
 8000fb4:	48001000 	.word	0x48001000
 8000fb8:	48001400 	.word	0x48001400
 8000fbc:	48001800 	.word	0x48001800
 8000fc0:	48001c00 	.word	0x48001c00
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e101      	b.n	800120e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d106      	bne.n	8001024 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f006 ff70 	bl	8007f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2203      	movs	r2, #3
 8001028:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fac9 	bl	80045ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7c1a      	ldrb	r2, [r3, #16]
 8001044:	f88d 2000 	strb.w	r2, [sp]
 8001048:	3304      	adds	r3, #4
 800104a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104c:	f003 f9e4 	bl	8004418 <USB_CoreInit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2202      	movs	r2, #2
 800105a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0d5      	b.n	800120e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fac1 	bl	80045f0 <USB_SetCurrentMode>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0c6      	b.n	800120e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e04a      	b.n	800111c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3315      	adds	r3, #21
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3314      	adds	r3, #20
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	b298      	uxth	r0, r3
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	332e      	adds	r3, #46	@ 0x2e
 80010c2:	4602      	mov	r2, r0
 80010c4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	3318      	adds	r3, #24
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	331c      	adds	r3, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3320      	adds	r3, #32
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3324      	adds	r3, #36	@ 0x24
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	3301      	adds	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	791b      	ldrb	r3, [r3, #4]
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3af      	bcc.n	8001086 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e044      	b.n	80011b6 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3301      	adds	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	791b      	ldrb	r3, [r3, #4]
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3b5      	bcc.n	800112c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7c1a      	ldrb	r2, [r3, #16]
 80011c8:	f88d 2000 	strb.w	r2, [sp]
 80011cc:	3304      	adds	r3, #4
 80011ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d0:	f003 fa5a 	bl	8004688 <USB_DevInit>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e013      	b.n	800120e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7b1b      	ldrb	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d102      	bne.n	8001202 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f001 f86d 	bl	80022dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fa11 	bl	800562e <USB_DevDisconnect>

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_PCD_Start+0x1c>
 800122e:	2302      	movs	r3, #2
 8001230:	e01c      	b.n	800126c <HAL_PCD_Start+0x56>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7b5b      	ldrb	r3, [r3, #13]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001246:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f9aa 	bl	80045ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f9c5 	bl	80055ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b08d      	sub	sp, #52	@ 0x34
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fa83 	bl	8005796 <USB_GetMode>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 8481 	bne.w	8001b9a <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f004 f9e7 	bl	8005670 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8477 	beq.w	8001b98 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 f9d4 	bl	8005670 <USB_ReadInterrupts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d107      	bne.n	80012e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f002 0202 	and.w	r2, r2, #2
 80012e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 f9c2 	bl	8005670 <USB_ReadInterrupts>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d161      	bne.n	80013ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	699a      	ldr	r2, [r3, #24]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0210 	bic.w	r2, r2, #16
 8001304:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	f003 020f 	and.w	r2, r3, #15
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	3304      	adds	r3, #4
 8001324:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	0c5b      	lsrs	r3, r3, #17
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	2b02      	cmp	r3, #2
 8001330:	d124      	bne.n	800137c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d035      	beq.n	80013aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134c:	b29b      	uxth	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	6a38      	ldr	r0, [r7, #32]
 8001352:	f003 fff9 	bl	8005348 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001362:	441a      	add	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	695a      	ldr	r2, [r3, #20]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001374:	441a      	add	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	e016      	b.n	80013aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	0c5b      	lsrs	r3, r3, #17
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	2b06      	cmp	r3, #6
 8001386:	d110      	bne.n	80013aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800138e:	2208      	movs	r2, #8
 8001390:	4619      	mov	r1, r3
 8001392:	6a38      	ldr	r0, [r7, #32]
 8001394:	f003 ffd8 	bl	8005348 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a4:	441a      	add	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0210 	orr.w	r2, r2, #16
 80013b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 f956 	bl	8005670 <USB_ReadInterrupts>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013ce:	f040 80a7 	bne.w	8001520 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 f95b 	bl	8005696 <USB_ReadDevAllOutEpInterrupt>
 80013e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013e2:	e099      	b.n	8001518 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 808e 	beq.w	800150c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 f97f 	bl	80056fe <USB_ReadDevOutEPInterrupt>
 8001400:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00c      	beq.n	8001426 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	015a      	lsls	r2, r3, #5
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001418:	461a      	mov	r2, r3
 800141a:	2301      	movs	r3, #1
 800141c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800141e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fe81 	bl	8002128 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	4413      	add	r3, r2
 8001438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800143c:	461a      	mov	r2, r3
 800143e:	2308      	movs	r3, #8
 8001440:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 febd 	bl	80021c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	2310      	movs	r3, #16
 8001464:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d030      	beq.n	80014d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001478:	2b80      	cmp	r3, #128	@ 0x80
 800147a:	d109      	bne.n	8001490 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800148a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	78db      	ldrb	r3, [r3, #3]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2200      	movs	r2, #0
 80014b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f006 fe76 	bl	80081ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	015a      	lsls	r2, r3, #5
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014cc:	461a      	mov	r2, r3
 80014ce:	2302      	movs	r3, #2
 80014d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	015a      	lsls	r2, r3, #5
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e8:	461a      	mov	r2, r3
 80014ea:	2320      	movs	r3, #32
 80014ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001504:	461a      	mov	r2, r3
 8001506:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	3301      	adds	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f af62 	bne.w	80013e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f004 f8a3 	bl	8005670 <USB_ReadInterrupts>
 800152a:	4603      	mov	r3, r0
 800152c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001534:	f040 80a4 	bne.w	8001680 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f004 f8c4 	bl	80056ca <USB_ReadDevAllInEpInterrupt>
 8001542:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001548:	e096      	b.n	8001678 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800154a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 808b 	beq.w	800166c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f004 f8ea 	bl	800573a <USB_ReadDevInEPInterrupt>
 8001566:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d020      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	2201      	movs	r2, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	69f9      	ldr	r1, [r7, #28]
 800158e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001592:	4013      	ands	r3, r2
 8001594:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	015a      	lsls	r2, r3, #5
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015a2:	461a      	mov	r2, r3
 80015a4:	2301      	movs	r3, #1
 80015a6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f006 fd67 	bl	8008082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ca:	461a      	mov	r2, r3
 80015cc:	2308      	movs	r3, #8
 80015ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e6:	461a      	mov	r2, r3
 80015e8:	2310      	movs	r3, #16
 80015ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001602:	461a      	mov	r2, r3
 8001604:	2340      	movs	r3, #64	@ 0x40
 8001606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d023      	beq.n	800165a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001612:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001614:	6a38      	ldr	r0, [r7, #32]
 8001616:	f003 f97f 	bl	8004918 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800161a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3310      	adds	r3, #16
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	3304      	adds	r3, #4
 800162c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	78db      	ldrb	r3, [r3, #3]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2200      	movs	r2, #0
 800163a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f006 fdc4 	bl	80081d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001654:	461a      	mov	r2, r3
 8001656:	2302      	movs	r3, #2
 8001658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fcd6 	bl	8002018 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	3301      	adds	r3, #1
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167a:	2b00      	cmp	r3, #0
 800167c:	f47f af65 	bne.w	800154a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fff3 	bl	8005670 <USB_ReadInterrupts>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001694:	d122      	bne.n	80016dc <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016bc:	2100      	movs	r1, #0
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f006 fff8 	bl	80086b4 <HAL_PCDEx_LPM_Callback>
 80016c4:	e002      	b.n	80016cc <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f006 fd48 	bl	800815c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 ffc5 	bl	8005670 <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016f0:	d112      	bne.n	8001718 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d102      	bne.n	8001708 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f006 fd04 	bl	8008110 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001716:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f003 ffa7 	bl	8005670 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800172c:	d121      	bne.n	8001772 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800173c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001744:	2b00      	cmp	r3, #0
 8001746:	d111      	bne.n	800176c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	f003 020f 	and.w	r2, r3, #15
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001762:	2101      	movs	r1, #1
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f006 ffa5 	bl	80086b4 <HAL_PCDEx_LPM_Callback>
 800176a:	e002      	b.n	8001772 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f006 fccf 	bl	8008110 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 ff7a 	bl	8005670 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001786:	f040 80b6 	bne.w	80018f6 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2110      	movs	r1, #16
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 f8b7 	bl	8004918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ae:	e046      	b.n	800183e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017bc:	461a      	mov	r2, r3
 80017be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017d4:	0151      	lsls	r1, r2, #5
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	440a      	add	r2, r1
 80017da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017f0:	461a      	mov	r2, r3
 80017f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001808:	0151      	lsls	r1, r2, #5
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	440a      	add	r2, r1
 800180e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001812:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001816:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001828:	0151      	lsls	r1, r2, #5
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	440a      	add	r2, r1
 800182e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001832:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001836:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183a:	3301      	adds	r3, #1
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	461a      	mov	r2, r3
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	4293      	cmp	r3, r2
 8001848:	d3b2      	bcc.n	80017b0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001858:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800185c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7bdb      	ldrb	r3, [r3, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d016      	beq.n	8001894 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001876:	f043 030b 	orr.w	r3, r3, #11
 800187a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800188c:	f043 030b 	orr.w	r3, r3, #11
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	e015      	b.n	80018c0 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018a6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ba:	f043 030b 	orr.w	r3, r3, #11
 80018be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f003 ff89 	bl	80057f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 feb8 	bl	8005670 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800190a:	d123      	bne.n	8001954 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f003 ff4e 	bl	80057b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f875 	bl	8004a0a <USB_GetDevSpeed>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	f001 fc10 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8001930:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001936:	461a      	mov	r2, r3
 8001938:	4620      	mov	r0, r4
 800193a:	f002 fd9b 	bl	8004474 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f006 fbc7 	bl	80080d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fe89 	bl	8005670 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b08      	cmp	r3, #8
 8001966:	d10a      	bne.n	800197e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f006 fba4 	bl	80080b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f002 0208 	and.w	r2, r2, #8
 800197c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f003 fe74 	bl	8005670 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198e:	2b80      	cmp	r3, #128	@ 0x80
 8001990:	d123      	bne.n	80019da <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199e:	2301      	movs	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a2:	e014      	b.n	80019ce <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 faf7 	bl	8001fb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ca:	3301      	adds	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	791b      	ldrb	r3, [r3, #4]
 80019d2:	461a      	mov	r2, r3
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d3e4      	bcc.n	80019a4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fe46 	bl	8005670 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019ee:	d13c      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f0:	2301      	movs	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f4:	e02b      	b.n	8001a4e <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3318      	adds	r3, #24
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d115      	bne.n	8001a48 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da12      	bge.n	8001a48 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3317      	adds	r3, #23
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fab7 	bl	8001fb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	791b      	ldrb	r3, [r3, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d3cd      	bcc.n	80019f6 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fdfe 	bl	8005670 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a7e:	d156      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a80:	2301      	movs	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	e045      	b.n	8001b12 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d12e      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da2b      	bge.n	8001b0c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ac0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d121      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b08:	6053      	str	r3, [r2, #4]
            break;
 8001b0a:	e008      	b.n	8001b1e <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	3301      	adds	r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	461a      	mov	r2, r3
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d3b3      	bcc.n	8001a86 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fd9c 	bl	8005670 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b42:	d10a      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f006 fb55 	bl	80081f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fd86 	bl	8005670 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d115      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f006 fb45 	bl	8008210 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e000      	b.n	8001b9a <HAL_PCD_IRQHandler+0x926>
      return;
 8001b98:	bf00      	nop
    }
  }
}
 8001b9a:	3734      	adds	r7, #52	@ 0x34
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}

08001ba0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_PCD_SetAddress+0x1a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e012      	b.n	8001be0 <HAL_PCD_SetAddress+0x40>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fce5 	bl	80055a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	70fb      	strb	r3, [r7, #3]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	803b      	strh	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da0f      	bge.n	8001c2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3310      	adds	r3, #16
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	705a      	strb	r2, [r3, #1]
 8001c2c:	e00f      	b.n	8001c4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c5a:	883b      	ldrh	r3, [r7, #0]
 8001c5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	78ba      	ldrb	r2, [r7, #2]
 8001c68:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c7c:	78bb      	ldrb	r3, [r7, #2]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d102      	bne.n	8001c88 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_EP_Open+0xae>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e00e      	b.n	8001cb4 <HAL_PCD_EP_Open+0xcc>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fecf 	bl	8004a48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da0f      	bge.n	8001cf0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	3310      	adds	r3, #16
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	705a      	strb	r2, [r3, #1]
 8001cee:	e00f      	b.n	8001d10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_PCD_EP_Close+0x6e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e00e      	b.n	8001d48 <HAL_PCD_EP_Close+0x8c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 ff0d 	bl	8004b58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6979      	ldr	r1, [r7, #20]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 ffb3 	bl	8004d10 <USB_EPStartXfer>

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 020f 	and.w	r2, r3, #15
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	460b      	mov	r3, r1
 8001df2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	3310      	adds	r3, #16
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2201      	movs	r2, #1
 8001e22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6979      	ldr	r1, [r7, #20]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 ff6a 	bl	8004d10 <USB_EPStartXfer>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	7912      	ldrb	r2, [r2, #4]
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e04e      	b.n	8001f02 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da0f      	bge.n	8001e8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	3310      	adds	r3, #16
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	705a      	strb	r2, [r3, #1]
 8001e8a:	e00d      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_PCD_EP_SetStall+0x82>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e01c      	b.n	8001f02 <HAL_PCD_EP_SetStall+0xbc>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fa8e 	bl	80053f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f003 fc80 	bl	80057f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	7912      	ldrb	r2, [r2, #4]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e042      	b.n	8001fae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da0f      	bge.n	8001f50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 020f 	and.w	r2, r3, #15
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3310      	adds	r3, #16
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	705a      	strb	r2, [r3, #1]
 8001f4e:	e00f      	b.n	8001f70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	f003 020f 	and.w	r2, r3, #15
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_PCD_EP_ClrStall+0x86>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e00e      	b.n	8001fae <HAL_PCD_EP_ClrStall+0xa4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68f9      	ldr	r1, [r7, #12]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fa98 	bl	80054d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da0c      	bge.n	8001fe4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3310      	adds	r3, #16
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e00c      	b.n	8001ffe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 f8bb 	bl	8005180 <USB_EPStopXfer>
 800200a:	4603      	mov	r3, r0
 800200c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800200e:	7afb      	ldrb	r3, [r7, #11]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3310      	adds	r3, #16
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d901      	bls.n	8002050 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e067      	b.n	8002120 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	429a      	cmp	r2, r3
 8002064:	d902      	bls.n	800206c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3303      	adds	r3, #3
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002074:	e026      	b.n	80020c4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	d902      	bls.n	8002092 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3303      	adds	r3, #3
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	68d9      	ldr	r1, [r3, #12]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f003 f914 	bl	80052d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	441a      	add	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	441a      	add	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d809      	bhi.n	80020ee <PCD_WriteEmptyTxFifo+0xd6>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d203      	bcs.n	80020ee <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1c3      	bne.n	8002076 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d811      	bhi.n	800211e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	2201      	movs	r2, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800210e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	43db      	mvns	r3, r3
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800211a:	4013      	ands	r3, r2
 800211c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	333c      	adds	r3, #60	@ 0x3c
 8002140:	3304      	adds	r3, #4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <PCD_EP_OutXfrComplete_int+0x98>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d124      	bne.n	80021a8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002174:	461a      	mov	r2, r3
 8002176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	e01a      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	2320      	movs	r3, #32
 8002198:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f005 ff53 	bl	800804c <HAL_PCD_DataOutStageCallback>
 80021a6:	e005      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f005 ff4c 	bl	800804c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	4f54310a 	.word	0x4f54310a

080021c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	333c      	adds	r3, #60	@ 0x3c
 80021dc:	3304      	adds	r3, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002228 <PCD_EP_OutSetupPacket_int+0x64>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d90e      	bls.n	8002218 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002210:	461a      	mov	r2, r3
 8002212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002216:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f005 ff05 	bl	8008028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	4f54300a 	.word	0x4f54300a

0800222c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	4613      	mov	r3, r2
 800223a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800224a:	883b      	ldrh	r3, [r7, #0]
 800224c:	0419      	lsls	r1, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	430a      	orrs	r2, r1
 8002256:	629a      	str	r2, [r3, #40]	@ 0x28
 8002258:	e028      	b.n	80022ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4413      	add	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e00d      	b.n	800228a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3340      	adds	r3, #64	@ 0x40
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4413      	add	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	3b01      	subs	r3, #1
 8002290:	429a      	cmp	r2, r3
 8002292:	d3ec      	bcc.n	800226e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002294:	883b      	ldrh	r3, [r7, #0]
 8002296:	0418      	lsls	r0, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	3b01      	subs	r3, #1
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4302      	orrs	r2, r0
 80022a4:	3340      	adds	r3, #64	@ 0x40
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230e:	f043 0303 	orr.w	r3, r3, #3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_PWREx_GetVoltageRange+0x3c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002334:	d102      	bne.n	800233c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800233a:	e00b      	b.n	8002354 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_PWREx_GetVoltageRange+0x3c>)
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800234a:	d102      	bne.n	8002352 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800234c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002350:	e000      	b.n	8002354 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002352:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40007000 	.word	0x40007000

08002364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d141      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002372:	4b4b      	ldr	r3, [pc, #300]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237e:	d131      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002380:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002386:	4a46      	ldr	r2, [pc, #280]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800238c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002390:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002398:	4a41      	ldr	r2, [pc, #260]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800239e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023a0:	4b40      	ldr	r3, [pc, #256]	@ (80024a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2232      	movs	r2, #50	@ 0x32
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	4a3f      	ldr	r2, [pc, #252]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9b      	lsrs	r3, r3, #18
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b6:	e002      	b.n	80023be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ca:	d102      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f2      	bne.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d2:	4b33      	ldr	r3, [pc, #204]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023de:	d158      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e057      	b.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e4:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ea:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023f4:	e04d      	b.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023fc:	d141      	bne.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023fe:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240a:	d131      	bne.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800240c:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002412:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002424:	4a1e      	ldr	r2, [pc, #120]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800242a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800242c:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2232      	movs	r2, #50	@ 0x32
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	4a1c      	ldr	r2, [pc, #112]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	3301      	adds	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002442:	e002      	b.n	800244a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3b01      	subs	r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002456:	d102      	bne.n	800245e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f2      	bne.n	8002444 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800246a:	d112      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e011      	b.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002476:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002480:	e007      	b.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800248a:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002490:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40007000 	.word	0x40007000
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ba:	6053      	str	r3, [r2, #4]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 bc68 	b.w	8002db0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e0:	4b97      	ldr	r3, [pc, #604]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ea:	4b95      	ldr	r3, [pc, #596]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80e6 	beq.w	80026ce <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_RCC_OscConfig+0x4c>
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	f040 808d 	bne.w	800262a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 8089 	bne.w	800262a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002518:	4b89      	ldr	r3, [pc, #548]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_RCC_OscConfig+0x66>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	f000 bc3f 	b.w	8002db0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002536:	4b82      	ldr	r3, [pc, #520]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d004      	beq.n	800254c <HAL_RCC_OscConfig+0x80>
 8002542:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800254a:	e005      	b.n	8002558 <HAL_RCC_OscConfig+0x8c>
 800254c:	4b7c      	ldr	r3, [pc, #496]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800254e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002558:	4293      	cmp	r3, r2
 800255a:	d224      	bcs.n	80025a6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fe01 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f000 bc1f 	b.w	8002db0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002572:	4b73      	ldr	r3, [pc, #460]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a72      	ldr	r2, [pc, #456]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b70      	ldr	r3, [pc, #448]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	496d      	ldr	r1, [pc, #436]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002590:	4b6b      	ldr	r3, [pc, #428]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	4968      	ldr	r1, [pc, #416]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
 80025a4:	e025      	b.n	80025f2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a6:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	4960      	ldr	r1, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	495b      	ldr	r1, [pc, #364]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fdc0 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e3de      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f2:	f000 fd21 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b51      	ldr	r3, [pc, #324]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	4950      	ldr	r1, [pc, #320]	@ (8002744 <HAL_RCC_OscConfig+0x278>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a4e      	ldr	r2, [pc, #312]	@ (8002748 <HAL_RCC_OscConfig+0x27c>)
 8002610:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002612:	4b4e      	ldr	r3, [pc, #312]	@ (800274c <HAL_RCC_OscConfig+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe f9b2 	bl	8000980 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d052      	beq.n	80026cc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	e3c2      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d032      	beq.n	8002698 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002632:	4b43      	ldr	r3, [pc, #268]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800263e:	f7fe f9ef 	bl	8000a20 <HAL_GetTick>
 8002642:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002646:	f7fe f9eb 	bl	8000a20 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e3ab      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002658:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a35      	ldr	r2, [pc, #212]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b33      	ldr	r3, [pc, #204]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	4930      	ldr	r1, [pc, #192]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002682:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	492b      	ldr	r1, [pc, #172]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
 8002696:	e01a      	b.n	80026ce <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a28      	ldr	r2, [pc, #160]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a4:	f7fe f9bc 	bl	8000a20 <HAL_GetTick>
 80026a8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ac:	f7fe f9b8 	bl	8000a20 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e378      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1e0>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d073      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d005      	beq.n	80026ec <HAL_RCC_OscConfig+0x220>
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d10e      	bne.n	8002704 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d063      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d15f      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e355      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x250>
 800270e:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a0b      	ldr	r2, [pc, #44]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e025      	b.n	8002768 <HAL_RCC_OscConfig+0x29c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002724:	d114      	bne.n	8002750 <HAL_RCC_OscConfig+0x284>
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a02      	ldr	r2, [pc, #8]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e013      	b.n	8002768 <HAL_RCC_OscConfig+0x29c>
 8002740:	40021000 	.word	0x40021000
 8002744:	08009b40 	.word	0x08009b40
 8002748:	20000000 	.word	0x20000000
 800274c:	20000004 	.word	0x20000004
 8002750:	4b8f      	ldr	r3, [pc, #572]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a8e      	ldr	r2, [pc, #568]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b8c      	ldr	r3, [pc, #560]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a8b      	ldr	r2, [pc, #556]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe f956 	bl	8000a20 <HAL_GetTick>
 8002774:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe f952 	bl	8000a20 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	@ 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e312      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278a:	4b81      	ldr	r3, [pc, #516]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x2ac>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe f942 	bl	8000a20 <HAL_GetTick>
 800279c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe f93e 	bl	8000a20 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e2fe      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b2:	4b77      	ldr	r3, [pc, #476]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x2d4>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d060      	beq.n	8002890 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_OscConfig+0x314>
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d119      	bne.n	800280e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d116      	bne.n	800280e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x32c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e2db      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b65      	ldr	r3, [pc, #404]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	4962      	ldr	r1, [pc, #392]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280c:	e040      	b.n	8002890 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d023      	beq.n	800285e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002816:	4b5e      	ldr	r3, [pc, #376]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5d      	ldr	r2, [pc, #372]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe f8fd 	bl	8000a20 <HAL_GetTick>
 8002826:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282a:	f7fe f8f9 	bl	8000a20 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e2b9      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283c:	4b54      	ldr	r3, [pc, #336]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b51      	ldr	r3, [pc, #324]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	494e      	ldr	r1, [pc, #312]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	e018      	b.n	8002890 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	4b4c      	ldr	r3, [pc, #304]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4b      	ldr	r2, [pc, #300]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe f8d9 	bl	8000a20 <HAL_GetTick>
 800286e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe f8d5 	bl	8000a20 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e295      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002884:	4b42      	ldr	r3, [pc, #264]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8082 	beq.w	80029a2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d05f      	beq.n	8002966 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80028a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ac:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d037      	beq.n	800292c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e26d      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01b      	beq.n	8002916 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80028de:	4b2c      	ldr	r3, [pc, #176]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ee:	f7fe f897 	bl	8000a20 <HAL_GetTick>
 80028f2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f6:	f7fe f893 	bl	8000a20 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b11      	cmp	r3, #17
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e253      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002908:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ef      	bne.n	80028f6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002916:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291c:	f023 0210 	bic.w	r2, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	491a      	ldr	r1, [pc, #104]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292c:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002932:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe f870 	bl	8000a20 <HAL_GetTick>
 8002940:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe f86c 	bl	8000a20 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b11      	cmp	r3, #17
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e22c      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002956:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ef      	beq.n	8002944 <HAL_RCC_OscConfig+0x478>
 8002964:	e01d      	b.n	80029a2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800296c:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe f853 	bl	8000a20 <HAL_GetTick>
 800297a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe f84f 	bl	8000a20 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b11      	cmp	r3, #17
 800298a:	d903      	bls.n	8002994 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e20f      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
 8002990:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002994:	4b83      	ldr	r3, [pc, #524]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ed      	bne.n	800297e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80bd 	beq.w	8002b2a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029b6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10e      	bne.n	80029e0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b78      	ldr	r3, [pc, #480]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	4a77      	ldr	r2, [pc, #476]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ce:	4b75      	ldr	r3, [pc, #468]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e0:	4b71      	ldr	r3, [pc, #452]	@ (8002ba8 <HAL_RCC_OscConfig+0x6dc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d118      	bne.n	8002a1e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ec:	4b6e      	ldr	r3, [pc, #440]	@ (8002ba8 <HAL_RCC_OscConfig+0x6dc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6d      	ldr	r2, [pc, #436]	@ (8002ba8 <HAL_RCC_OscConfig+0x6dc>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f8:	f7fe f812 	bl	8000a20 <HAL_GetTick>
 80029fc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7fe f80e 	bl	8000a20 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1ce      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a12:	4b65      	ldr	r3, [pc, #404]	@ (8002ba8 <HAL_RCC_OscConfig+0x6dc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d02c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002a2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3c:	4959      	ldr	r1, [pc, #356]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a50:	4b54      	ldr	r3, [pc, #336]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	4a53      	ldr	r2, [pc, #332]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a60:	4b50      	ldr	r3, [pc, #320]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a66:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a70:	e018      	b.n	8002aa4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a82:	e00f      	b.n	8002aa4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a84:	4b47      	ldr	r3, [pc, #284]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	4a46      	ldr	r2, [pc, #280]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a94:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a42      	ldr	r2, [pc, #264]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d016      	beq.n	8002ada <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fd ffb8 	bl	8000a20 <HAL_GetTick>
 8002ab0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fd ffb4 	bl	8000a20 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e172      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aca:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ed      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x5e8>
 8002ad8:	e01d      	b.n	8002b16 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fd ffa1 	bl	8000a20 <HAL_GetTick>
 8002ade:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fd ff9d 	bl	8000a20 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e15b      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ed      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b06:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	4a25      	ldr	r2, [pc, #148]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b22:	4a20      	ldr	r2, [pc, #128]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d041      	beq.n	8002bba <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b44:	4a17      	ldr	r2, [pc, #92]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fd ff67 	bl	8000a20 <HAL_GetTick>
 8002b52:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b56:	f7fd ff63 	bl	8000a20 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e123      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ef      	beq.n	8002b56 <HAL_RCC_OscConfig+0x68a>
 8002b76:	e020      	b.n	8002bba <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_RCC_OscConfig+0x6d8>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fd ff4a 	bl	8000a20 <HAL_GetTick>
 8002b8c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b8e:	e00d      	b.n	8002bac <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b90:	f7fd ff46 	bl	8000a20 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d906      	bls.n	8002bac <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e106      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bac:	4b82      	ldr	r3, [pc, #520]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ea      	bne.n	8002b90 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80f5 	beq.w	8002dae <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	f040 80cb 	bne.w	8002d64 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bce:	4b7a      	ldr	r3, [pc, #488]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0203 	and.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d12c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bec:	3b01      	subs	r3, #1
 8002bee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d123      	bne.n	8002c3c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d11b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d113      	bne.n	8002c3c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	3b01      	subs	r3, #1
 8002c22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d06d      	beq.n	8002d18 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d068      	beq.n	8002d14 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c42:	4b5d      	ldr	r3, [pc, #372]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0a8      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b56      	ldr	r3, [pc, #344]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a55      	ldr	r2, [pc, #340]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c6a:	f7fd fed9 	bl	8000a20 <HAL_GetTick>
 8002c6e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fd fed5 	bl	8000a20 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e095      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c84:	4b4c      	ldr	r3, [pc, #304]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c90:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	4b49      	ldr	r3, [pc, #292]	@ (8002dbc <HAL_RCC_OscConfig+0x8f0>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ca0:	3a01      	subs	r2, #1
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	4311      	orrs	r1, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002caa:	0212      	lsls	r2, r2, #8
 8002cac:	4311      	orrs	r1, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cb2:	0852      	lsrs	r2, r2, #1
 8002cb4:	3a01      	subs	r2, #1
 8002cb6:	0552      	lsls	r2, r2, #21
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cbe:	0852      	lsrs	r2, r2, #1
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0652      	lsls	r2, r2, #25
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cca:	06d2      	lsls	r2, r2, #27
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	493a      	ldr	r1, [pc, #232]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b38      	ldr	r3, [pc, #224]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a37      	ldr	r2, [pc, #220]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce0:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cec:	f7fd fe98 	bl	8000a20 <HAL_GetTick>
 8002cf0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fd fe94 	bl	8000a20 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e054      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	4b2c      	ldr	r3, [pc, #176]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d12:	e04c      	b.n	8002dae <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e04b      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d18:	4b27      	ldr	r3, [pc, #156]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d144      	bne.n	8002dae <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d24:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d30:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a20      	ldr	r2, [pc, #128]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d3c:	f7fd fe70 	bl	8000a20 <HAL_GetTick>
 8002d40:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fd fe6c 	bl	8000a20 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e02c      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d56:	4b18      	ldr	r3, [pc, #96]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x878>
 8002d62:	e024      	b.n	8002dae <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d01f      	beq.n	8002daa <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fd fe53 	bl	8000a20 <HAL_GetTick>
 8002d7a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fd fe4f 	bl	8000a20 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	4905      	ldr	r1, [pc, #20]	@ (8002db8 <HAL_RCC_OscConfig+0x8ec>)
 8002da2:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <HAL_RCC_OscConfig+0x8f4>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
 8002da8:	e001      	b.n	8002dae <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	@ 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	019d800c 	.word	0x019d800c
 8002dc0:	feeefffc 	.word	0xfeeefffc

08002dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e11d      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b90      	ldr	r3, [pc, #576]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b8d      	ldr	r3, [pc, #564]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	498b      	ldr	r1, [pc, #556]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b89      	ldr	r3, [pc, #548]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e105      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4b81      	ldr	r3, [pc, #516]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b7e      	ldr	r3, [pc, #504]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	497b      	ldr	r1, [pc, #492]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d079      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d11e      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0dc      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e5e:	f000 f9dd 	bl	800321c <RCC_GetSysClockFreqFromPLLSource>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4a70      	ldr	r2, [pc, #448]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d946      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d140      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e76:	4b6b      	ldr	r3, [pc, #428]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e7e:	4a69      	ldr	r2, [pc, #420]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e035      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e94:	4b63      	ldr	r3, [pc, #396]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d115      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b9      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eac:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0ad      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ebc:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0a5      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ecc:	f000 f8b4 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a55      	ldr	r2, [pc, #340]	@ (8003028 <HAL_RCC_ClockConfig+0x264>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d90f      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ed8:	4b52      	ldr	r3, [pc, #328]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 0203 	bic.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4947      	ldr	r1, [pc, #284]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fd fd89 	bl	8000a20 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f12:	f7fd fd85 	bl	8000a20 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e077      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f28:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 020c 	and.w	r2, r3, #12
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d1eb      	bne.n	8002f12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b80      	cmp	r3, #128	@ 0x80
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f40:	4b38      	ldr	r3, [pc, #224]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a37      	ldr	r2, [pc, #220]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d208      	bcs.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	492b      	ldr	r1, [pc, #172]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7a:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d210      	bcs.n	8002faa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f88:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 020f 	bic.w	r2, r3, #15
 8002f90:	4923      	ldr	r1, [pc, #140]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f98:	4b21      	ldr	r3, [pc, #132]	@ (8003020 <HAL_RCC_ClockConfig+0x25c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e036      	b.n	8003018 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4918      	ldr	r1, [pc, #96]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d009      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4910      	ldr	r1, [pc, #64]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe8:	f000 f826 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	490c      	ldr	r1, [pc, #48]	@ (800302c <HAL_RCC_ClockConfig+0x268>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <HAL_RCC_ClockConfig+0x26c>)
 8003006:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003008:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_RCC_ClockConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fcb7 	bl	8000980 <HAL_InitTick>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]

  return status;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40022000 	.word	0x40022000
 8003024:	40021000 	.word	0x40021000
 8003028:	04c4b400 	.word	0x04c4b400
 800302c:	08009b40 	.word	0x08009b40
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003046:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003050:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x34>
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d121      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d11e      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800306c:	4b34      	ldr	r3, [pc, #208]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003078:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e005      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003088:	4b2d      	ldr	r3, [pc, #180]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d102      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b0:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x110>)
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e004      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030bc:	4b23      	ldr	r3, [pc, #140]	@ (800314c <HAL_RCC_GetSysClockFreq+0x114>)
 80030be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	d134      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d003      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0xa6>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0xac>
 80030dc:	e005      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030de:	4b1a      	ldr	r3, [pc, #104]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x110>)
 80030e0:	617b      	str	r3, [r7, #20]
      break;
 80030e2:	e005      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_RCC_GetSysClockFreq+0x114>)
 80030e6:	617b      	str	r3, [r7, #20]
      break;
 80030e8:	e002      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	617b      	str	r3, [r7, #20]
      break;
 80030ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f0:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	3301      	adds	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	fb03 f202 	mul.w	r2, r3, r2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003116:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	0e5b      	lsrs	r3, r3, #25
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	3301      	adds	r3, #1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003130:	69bb      	ldr	r3, [r7, #24]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	08009b50 	.word	0x08009b50
 8003148:	00f42400 	.word	0x00f42400
 800314c:	007a1200 	.word	0x007a1200

08003150 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	@ (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000000 	.word	0x20000000

08003168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003174:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003180:	f7ff f8d0 	bl	8002324 <HAL_PWREx_GetVoltageRange>
 8003184:	6178      	str	r0, [r7, #20]
 8003186:	e014      	b.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	@ 0x58
 8003194:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031a0:	f7ff f8c0 	bl	8002324 <HAL_PWREx_GetVoltageRange>
 80031a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b8:	d10b      	bne.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b80      	cmp	r3, #128	@ 0x80
 80031be:	d913      	bls.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80031c4:	d902      	bls.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c6:	2302      	movs	r3, #2
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e00d      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e00a      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80031d6:	d902      	bls.n	80031de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031d8:	2302      	movs	r3, #2
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e004      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b70      	cmp	r3, #112	@ 0x70
 80031e2:	d101      	bne.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e4:	2301      	movs	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 020f 	bic.w	r2, r3, #15
 80031f0:	4909      	ldr	r1, [pc, #36]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031f8:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	40022000 	.word	0x40022000

0800321c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003222:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d00b      	beq.n	800324a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d825      	bhi.n	8003284 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d008      	beq.n	8003250 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11f      	bne.n	8003284 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003244:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003246:	613b      	str	r3, [r7, #16]
    break;
 8003248:	e01f      	b.n	800328a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800324a:	4b25      	ldr	r3, [pc, #148]	@ (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800324c:	613b      	str	r3, [r7, #16]
    break;
 800324e:	e01c      	b.n	800328a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003250:	4b21      	ldr	r3, [pc, #132]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d107      	bne.n	800326c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800325c:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e005      	b.n	8003278 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800326c:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003278:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003280:	613b      	str	r3, [r7, #16]
    break;
 8003282:	e002      	b.n	800328a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
    break;
 8003288:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	3301      	adds	r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	fb03 f202 	mul.w	r2, r3, r2
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032b0:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0e5b      	lsrs	r3, r3, #25
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	3301      	adds	r3, #1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032ca:	683b      	ldr	r3, [r7, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40021000 	.word	0x40021000
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	007a1200 	.word	0x007a1200
 80032e4:	08009b50 	.word	0x08009b50

080032e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f0:	2300      	movs	r3, #0
 80032f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032f4:	2300      	movs	r3, #0
 80032f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003300:	2b00      	cmp	r3, #0
 8003302:	d040      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003308:	2b80      	cmp	r3, #128	@ 0x80
 800330a:	d02a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800330c:	2b80      	cmp	r3, #128	@ 0x80
 800330e:	d825      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003310:	2b60      	cmp	r3, #96	@ 0x60
 8003312:	d026      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003314:	2b60      	cmp	r3, #96	@ 0x60
 8003316:	d821      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d006      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800331c:	2b40      	cmp	r3, #64	@ 0x40
 800331e:	d81d      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003324:	2b20      	cmp	r3, #32
 8003326:	d010      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003328:	e018      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800332a:	4b89      	ldr	r3, [pc, #548]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4a88      	ldr	r2, [pc, #544]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003336:	e015      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fb3e 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003348:	e00c      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3320      	adds	r3, #32
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fc29 	bl	8003ba8 <RCCEx_PLLSAI2_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800335a:	e003      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	74fb      	strb	r3, [r7, #19]
      break;
 8003360:	e000      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800336a:	4b79      	ldr	r3, [pc, #484]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003370:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003378:	4975      	ldr	r1, [pc, #468]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003380:	e001      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d047      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339a:	d030      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a0:	d82a      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033a6:	d02a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ac:	d824      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b8:	d81e      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c2:	d010      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033c4:	e018      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c6:	4b62      	ldr	r3, [pc, #392]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4a61      	ldr	r2, [pc, #388]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d2:	e015      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 faf0 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e4:	e00c      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3320      	adds	r3, #32
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fbdb 	bl	8003ba8 <RCCEx_PLLSAI2_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f6:	e003      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	74fb      	strb	r3, [r7, #19]
      break;
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003406:	4b52      	ldr	r3, [pc, #328]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003408:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800340c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003414:	494e      	ldr	r1, [pc, #312]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800341c:	e001      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 809f 	beq.w	800356e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003434:	4b46      	ldr	r3, [pc, #280]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344e:	4a40      	ldr	r2, [pc, #256]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003454:	6593      	str	r3, [r2, #88]	@ 0x58
 8003456:	4b3e      	ldr	r3, [pc, #248]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003466:	4b3b      	ldr	r3, [pc, #236]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a3a      	ldr	r2, [pc, #232]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003470:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003472:	f7fd fad5 	bl	8000a20 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003478:	e009      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fd fad1 	bl	8000a20 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d902      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	74fb      	strb	r3, [r7, #19]
        break;
 800348c:	e005      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800348e:	4b31      	ldr	r3, [pc, #196]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ef      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d15b      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01f      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d019      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034be:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ca:	4b21      	ldr	r3, [pc, #132]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034da:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034ea:	4a19      	ldr	r2, [pc, #100]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd fa90 	bl	8000a20 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	e00b      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fd fa8c 	bl	8000a20 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d902      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	74fb      	strb	r3, [r7, #19]
            break;
 800351a:	e006      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ec      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10c      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003530:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003548:	e008      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	74bb      	strb	r3, [r7, #18]
 800354e:	e005      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003550:	40021000 	.word	0x40021000
 8003554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355c:	7c7b      	ldrb	r3, [r7, #17]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4ba0      	ldr	r3, [pc, #640]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	4a9f      	ldr	r2, [pc, #636]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800356c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800357a:	4b9a      	ldr	r3, [pc, #616]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003580:	f023 0203 	bic.w	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	4996      	ldr	r1, [pc, #600]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800359c:	4b91      	ldr	r3, [pc, #580]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a2:	f023 020c 	bic.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	498e      	ldr	r1, [pc, #568]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035be:	4b89      	ldr	r3, [pc, #548]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	4985      	ldr	r1, [pc, #532]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035e0:	4b80      	ldr	r3, [pc, #512]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ee:	497d      	ldr	r1, [pc, #500]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003602:	4b78      	ldr	r3, [pc, #480]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003610:	4974      	ldr	r1, [pc, #464]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003624:	4b6f      	ldr	r3, [pc, #444]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003632:	496c      	ldr	r1, [pc, #432]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003646:	4b67      	ldr	r3, [pc, #412]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003654:	4963      	ldr	r1, [pc, #396]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003668:	4b5e      	ldr	r3, [pc, #376]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003676:	495b      	ldr	r1, [pc, #364]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800368a:	4b56      	ldr	r3, [pc, #344]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003690:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003698:	4952      	ldr	r1, [pc, #328]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ac:	4b4d      	ldr	r3, [pc, #308]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ba:	494a      	ldr	r1, [pc, #296]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ce:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	4941      	ldr	r1, [pc, #260]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036f0:	4b3c      	ldr	r3, [pc, #240]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	4939      	ldr	r1, [pc, #228]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d028      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003712:	4b34      	ldr	r3, [pc, #208]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003720:	4930      	ldr	r1, [pc, #192]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003730:	d106      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003732:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4a2b      	ldr	r2, [pc, #172]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003738:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373c:	60d3      	str	r3, [r2, #12]
 800373e:	e011      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f935 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d04d      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003778:	d108      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800377a:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003780:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003786:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800378a:	e012      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800378c:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003792:	4a14      	ldr	r2, [pc, #80]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003798:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800379c:	4b11      	ldr	r3, [pc, #68]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037aa:	490e      	ldr	r1, [pc, #56]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ba:	d106      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a08      	ldr	r2, [pc, #32]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037c6:	60d3      	str	r3, [r2, #12]
 80037c8:	e020      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037d2:	d109      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037d4:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a02      	ldr	r2, [pc, #8]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037de:	60d3      	str	r3, [r2, #12]
 80037e0:	e014      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f8e1 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d028      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003818:	4b68      	ldr	r3, [pc, #416]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003826:	4965      	ldr	r1, [pc, #404]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003836:	d106      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003838:	4b60      	ldr	r3, [pc, #384]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a5f      	ldr	r2, [pc, #380]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003842:	60d3      	str	r3, [r2, #12]
 8003844:	e011      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800384a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800384e:	d10c      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f8b2 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01e      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003876:	4b51      	ldr	r3, [pc, #324]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003886:	494d      	ldr	r1, [pc, #308]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f88d 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038c0:	4b3e      	ldr	r3, [pc, #248]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038c6:	f023 0204 	bic.w	r2, r3, #4
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d0:	493a      	ldr	r1, [pc, #232]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038e4:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038ea:	f023 0218 	bic.w	r2, r3, #24
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f4:	4931      	ldr	r1, [pc, #196]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d035      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003908:	4b2c      	ldr	r3, [pc, #176]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a2b      	ldr	r2, [pc, #172]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003914:	f7fd f884 	bl	8000a20 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800391a:	e009      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800391c:	f7fd f880 	bl	8000a20 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d902      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	74fb      	strb	r3, [r7, #19]
        break;
 800392e:	e005      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003930:	4b22      	ldr	r3, [pc, #136]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ef      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d113      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003942:	4b1e      	ldr	r3, [pc, #120]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003944:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003948:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003952:	491a      	ldr	r1, [pc, #104]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3320      	adds	r3, #32
 800395e:	2102      	movs	r1, #2
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f921 	bl	8003ba8 <RCCEx_PLLSAI2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d017      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003980:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003982:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003986:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003990:	490a      	ldr	r1, [pc, #40]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a2:	d105      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000

080039c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ce:	4b72      	ldr	r3, [pc, #456]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039da:	4b6f      	ldr	r3, [pc, #444]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0203 	and.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d103      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
       ||
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d142      	bne.n	8003a78 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	e03f      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d018      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x72>
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d825      	bhi.n	8003a50 <RCCEx_PLLSAI1_Config+0x90>
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d002      	beq.n	8003a0e <RCCEx_PLLSAI1_Config+0x4e>
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d009      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x60>
 8003a0c:	e020      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a0e:	4b62      	ldr	r3, [pc, #392]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11d      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1e:	e01a      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a20:	4b5d      	ldr	r3, [pc, #372]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e013      	b.n	8003a5a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a32:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a3e:	4b56      	ldr	r3, [pc, #344]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a4e:	e006      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e004      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a56:	bf00      	nop
 8003a58:	e002      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a66:	4b4c      	ldr	r3, [pc, #304]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4949      	ldr	r1, [pc, #292]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8086 	bne.w	8003b8c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a80:	4b45      	ldr	r3, [pc, #276]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a44      	ldr	r2, [pc, #272]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8c:	f7fc ffc8 	bl	8000a20 <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a92:	e009      	b.n	8003aa8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a94:	f7fc ffc4 	bl	8000a20 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d902      	bls.n	8003aa8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa6:	e005      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ef      	bne.n	8003a94 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d168      	bne.n	8003b8c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d113      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac0:	4b35      	ldr	r3, [pc, #212]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6892      	ldr	r2, [r2, #8]
 8003acc:	0211      	lsls	r1, r2, #8
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	06d2      	lsls	r2, r2, #27
 8003ad4:	4311      	orrs	r1, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6852      	ldr	r2, [r2, #4]
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0112      	lsls	r2, r2, #4
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	492d      	ldr	r1, [pc, #180]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	610b      	str	r3, [r1, #16]
 8003ae6:	e02d      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d115      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aee:	4b2a      	ldr	r3, [pc, #168]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	0211      	lsls	r1, r2, #8
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6912      	ldr	r2, [r2, #16]
 8003b00:	0852      	lsrs	r2, r2, #1
 8003b02:	3a01      	subs	r2, #1
 8003b04:	0552      	lsls	r2, r2, #21
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6852      	ldr	r2, [r2, #4]
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	430a      	orrs	r2, r1
 8003b12:	4921      	ldr	r1, [pc, #132]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	610b      	str	r3, [r1, #16]
 8003b18:	e014      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	4b21      	ldr	r3, [pc, #132]	@ (8003ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6892      	ldr	r2, [r2, #8]
 8003b26:	0211      	lsls	r1, r2, #8
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6952      	ldr	r2, [r2, #20]
 8003b2c:	0852      	lsrs	r2, r2, #1
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	0652      	lsls	r2, r2, #25
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6852      	ldr	r2, [r2, #4]
 8003b38:	3a01      	subs	r2, #1
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	4916      	ldr	r1, [pc, #88]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b44:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a13      	ldr	r2, [pc, #76]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fc ff66 	bl	8000a20 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b56:	e009      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b58:	f7fc ff62 	bl	8000a20 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d902      	bls.n	8003b6c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	73fb      	strb	r3, [r7, #15]
          break;
 8003b6a:	e005      	b.n	8003b78 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ef      	beq.n	8003b58 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	4904      	ldr	r1, [pc, #16]	@ (8003b98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	07ff800f 	.word	0x07ff800f
 8003ba0:	ff9f800f 	.word	0xff9f800f
 8003ba4:	f9ff800f 	.word	0xf9ff800f

08003ba8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bb6:	4b72      	ldr	r3, [pc, #456]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00e      	beq.n	8003be0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0203 	and.w	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d103      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d142      	bne.n	8003c60 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	e03f      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d018      	beq.n	8003c1a <RCCEx_PLLSAI2_Config+0x72>
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d825      	bhi.n	8003c38 <RCCEx_PLLSAI2_Config+0x90>
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d002      	beq.n	8003bf6 <RCCEx_PLLSAI2_Config+0x4e>
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d009      	beq.n	8003c08 <RCCEx_PLLSAI2_Config+0x60>
 8003bf4:	e020      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bf6:	4b62      	ldr	r3, [pc, #392]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11d      	bne.n	8003c3e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c06:	e01a      	b.n	8003c3e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c08:	4b5d      	ldr	r3, [pc, #372]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d116      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c18:	e013      	b.n	8003c42 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c1a:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c26:	4b56      	ldr	r3, [pc, #344]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c36:	e006      	b.n	8003c46 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e004      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4949      	ldr	r1, [pc, #292]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 8086 	bne.w	8003d74 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c68:	4b45      	ldr	r3, [pc, #276]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a44      	ldr	r2, [pc, #272]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c74:	f7fc fed4 	bl	8000a20 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c7a:	e009      	b.n	8003c90 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c7c:	f7fc fed0 	bl	8000a20 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d902      	bls.n	8003c90 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c8e:	e005      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c90:	4b3b      	ldr	r3, [pc, #236]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ef      	bne.n	8003c7c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d168      	bne.n	8003d74 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d113      	bne.n	8003cd0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca8:	4b35      	ldr	r3, [pc, #212]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	4b35      	ldr	r3, [pc, #212]	@ (8003d84 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0211      	lsls	r1, r2, #8
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	06d2      	lsls	r2, r2, #27
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6852      	ldr	r2, [r2, #4]
 8003cc2:	3a01      	subs	r2, #1
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	492d      	ldr	r1, [pc, #180]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	614b      	str	r3, [r1, #20]
 8003cce:	e02d      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d115      	bne.n	8003d02 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	4b2b      	ldr	r3, [pc, #172]	@ (8003d88 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6892      	ldr	r2, [r2, #8]
 8003ce2:	0211      	lsls	r1, r2, #8
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6912      	ldr	r2, [r2, #16]
 8003ce8:	0852      	lsrs	r2, r2, #1
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0552      	lsls	r2, r2, #21
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6852      	ldr	r2, [r2, #4]
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	4921      	ldr	r1, [pc, #132]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	614b      	str	r3, [r1, #20]
 8003d00:	e014      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d02:	4b1f      	ldr	r3, [pc, #124]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	4b21      	ldr	r3, [pc, #132]	@ (8003d8c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6892      	ldr	r2, [r2, #8]
 8003d0e:	0211      	lsls	r1, r2, #8
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6952      	ldr	r2, [r2, #20]
 8003d14:	0852      	lsrs	r2, r2, #1
 8003d16:	3a01      	subs	r2, #1
 8003d18:	0652      	lsls	r2, r2, #25
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6852      	ldr	r2, [r2, #4]
 8003d20:	3a01      	subs	r2, #1
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	430a      	orrs	r2, r1
 8003d26:	4916      	ldr	r1, [pc, #88]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d2c:	4b14      	ldr	r3, [pc, #80]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fc fe72 	bl	8000a20 <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d3e:	e009      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d40:	f7fc fe6e 	bl	8000a20 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d902      	bls.n	8003d54 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	73fb      	strb	r3, [r7, #15]
          break;
 8003d52:	e005      	b.n	8003d60 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d54:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ef      	beq.n	8003d40 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	4904      	ldr	r1, [pc, #16]	@ (8003d80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	07ff800f 	.word	0x07ff800f
 8003d88:	ff9f800f 	.word	0xff9f800f
 8003d8c:	f9ff800f 	.word	0xf9ff800f

08003d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e049      	b.n	8003e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fc fc9c 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f000 f9d6 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d001      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e04f      	b.n	8003ef8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a23      	ldr	r2, [pc, #140]	@ (8003f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <HAL_TIM_Base_Start_IT+0x76>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e82:	d018      	beq.n	8003eb6 <HAL_TIM_Base_Start_IT+0x76>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	@ (8003f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_TIM_Base_Start_IT+0x76>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1e      	ldr	r2, [pc, #120]	@ (8003f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_TIM_Base_Start_IT+0x76>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_TIM_Base_Start_IT+0x76>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_TIM_Base_Start_IT+0x76>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d115      	bne.n	8003ee2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	4b17      	ldr	r3, [pc, #92]	@ (8003f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d015      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0xb4>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ece:	d011      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee0:	e008      	b.n	8003ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e000      	b.n	8003ef6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40000800 	.word	0x40000800
 8003f10:	40000c00 	.word	0x40000c00
 8003f14:	40013400 	.word	0x40013400
 8003f18:	40014000 	.word	0x40014000
 8003f1c:	00010007 	.word	0x00010007

08003f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d020      	beq.n	8003f84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01b      	beq.n	8003f84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0202 	mvn.w	r2, #2
 8003f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8e9 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8db 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8ec 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0204 	mvn.w	r2, #4
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8c3 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8b5 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8c6 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d020      	beq.n	800401c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0208 	mvn.w	r2, #8
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f89d 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f88f 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8a0 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	d020      	beq.n	8004068 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01b      	beq.n	8004068 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0210 	mvn.w	r2, #16
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2208      	movs	r2, #8
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f877 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f869 	bl	800412e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f87a 	bl	8004156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0201 	mvn.w	r2, #1
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fc faf2 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00c      	beq.n	80040ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f99b 	bl	80043f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00c      	beq.n	80040de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f993 	bl	8004404 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00c      	beq.n	8004102 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f834 	bl	800416a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f06f 0220 	mvn.w	r2, #32
 800411e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f95b 	bl	80043dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a46      	ldr	r2, [pc, #280]	@ (80042ac <TIM_Base_SetConfig+0x12c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	d00f      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a43      	ldr	r2, [pc, #268]	@ (80042b0 <TIM_Base_SetConfig+0x130>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a42      	ldr	r2, [pc, #264]	@ (80042b4 <TIM_Base_SetConfig+0x134>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a41      	ldr	r2, [pc, #260]	@ (80042b8 <TIM_Base_SetConfig+0x138>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a40      	ldr	r2, [pc, #256]	@ (80042bc <TIM_Base_SetConfig+0x13c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d108      	bne.n	80041d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a35      	ldr	r2, [pc, #212]	@ (80042ac <TIM_Base_SetConfig+0x12c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e0:	d01b      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a32      	ldr	r2, [pc, #200]	@ (80042b0 <TIM_Base_SetConfig+0x130>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d017      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a31      	ldr	r2, [pc, #196]	@ (80042b4 <TIM_Base_SetConfig+0x134>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a30      	ldr	r2, [pc, #192]	@ (80042b8 <TIM_Base_SetConfig+0x138>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2f      	ldr	r2, [pc, #188]	@ (80042bc <TIM_Base_SetConfig+0x13c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2e      	ldr	r2, [pc, #184]	@ (80042c0 <TIM_Base_SetConfig+0x140>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2d      	ldr	r2, [pc, #180]	@ (80042c4 <TIM_Base_SetConfig+0x144>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2c      	ldr	r2, [pc, #176]	@ (80042c8 <TIM_Base_SetConfig+0x148>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <TIM_Base_SetConfig+0x12c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00f      	beq.n	8004278 <TIM_Base_SetConfig+0xf8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a18      	ldr	r2, [pc, #96]	@ (80042bc <TIM_Base_SetConfig+0x13c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_Base_SetConfig+0xf8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a17      	ldr	r2, [pc, #92]	@ (80042c0 <TIM_Base_SetConfig+0x140>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_Base_SetConfig+0xf8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a16      	ldr	r2, [pc, #88]	@ (80042c4 <TIM_Base_SetConfig+0x144>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_Base_SetConfig+0xf8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a15      	ldr	r2, [pc, #84]	@ (80042c8 <TIM_Base_SetConfig+0x148>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d103      	bne.n	8004280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d105      	bne.n	800429e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f023 0201 	bic.w	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	611a      	str	r2, [r3, #16]
  }
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800

080042cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e068      	b.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2e      	ldr	r2, [pc, #184]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800431e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004330:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01d      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004356:	d018      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1a      	ldr	r2, [pc, #104]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a18      	ldr	r2, [pc, #96]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a13      	ldr	r2, [pc, #76]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a14      	ldr	r2, [pc, #80]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10c      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40013400 	.word	0x40013400
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	40014000 	.word	0x40014000

080043dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004418:	b084      	sub	sp, #16
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	f107 001c 	add.w	r0, r7, #28
 8004426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 fa26 	bl	8005888 <USB_CoreReset>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004440:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	@ 0x38
 8004454:	e005      	b.n	8004462 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800446e:	b004      	add	sp, #16
 8004470:	4770      	bx	lr
	...

08004474 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d165      	bne.n	8004554 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a3e      	ldr	r2, [pc, #248]	@ (8004584 <USB_SetTurnaroundTime+0x110>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d906      	bls.n	800449e <USB_SetTurnaroundTime+0x2a>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a3d      	ldr	r2, [pc, #244]	@ (8004588 <USB_SetTurnaroundTime+0x114>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d202      	bcs.n	800449e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004498:	230f      	movs	r3, #15
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e05c      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a39      	ldr	r2, [pc, #228]	@ (8004588 <USB_SetTurnaroundTime+0x114>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d306      	bcc.n	80044b4 <USB_SetTurnaroundTime+0x40>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a38      	ldr	r2, [pc, #224]	@ (800458c <USB_SetTurnaroundTime+0x118>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d202      	bcs.n	80044b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044ae:	230e      	movs	r3, #14
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e051      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a35      	ldr	r2, [pc, #212]	@ (800458c <USB_SetTurnaroundTime+0x118>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d306      	bcc.n	80044ca <USB_SetTurnaroundTime+0x56>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4a34      	ldr	r2, [pc, #208]	@ (8004590 <USB_SetTurnaroundTime+0x11c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d202      	bcs.n	80044ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044c4:	230d      	movs	r3, #13
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e046      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4a30      	ldr	r2, [pc, #192]	@ (8004590 <USB_SetTurnaroundTime+0x11c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d306      	bcc.n	80044e0 <USB_SetTurnaroundTime+0x6c>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004594 <USB_SetTurnaroundTime+0x120>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d802      	bhi.n	80044e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044da:	230c      	movs	r3, #12
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e03b      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004594 <USB_SetTurnaroundTime+0x120>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d906      	bls.n	80044f6 <USB_SetTurnaroundTime+0x82>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004598 <USB_SetTurnaroundTime+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d802      	bhi.n	80044f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044f0:	230b      	movs	r3, #11
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e030      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <USB_SetTurnaroundTime+0x124>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d906      	bls.n	800450c <USB_SetTurnaroundTime+0x98>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a26      	ldr	r2, [pc, #152]	@ (800459c <USB_SetTurnaroundTime+0x128>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d802      	bhi.n	800450c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004506:	230a      	movs	r3, #10
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e025      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a23      	ldr	r2, [pc, #140]	@ (800459c <USB_SetTurnaroundTime+0x128>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d906      	bls.n	8004522 <USB_SetTurnaroundTime+0xae>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4a22      	ldr	r2, [pc, #136]	@ (80045a0 <USB_SetTurnaroundTime+0x12c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d202      	bcs.n	8004522 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800451c:	2309      	movs	r3, #9
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e01a      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4a1e      	ldr	r2, [pc, #120]	@ (80045a0 <USB_SetTurnaroundTime+0x12c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d306      	bcc.n	8004538 <USB_SetTurnaroundTime+0xc4>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4a1d      	ldr	r2, [pc, #116]	@ (80045a4 <USB_SetTurnaroundTime+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d802      	bhi.n	8004538 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004532:	2308      	movs	r3, #8
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e00f      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4a1a      	ldr	r2, [pc, #104]	@ (80045a4 <USB_SetTurnaroundTime+0x130>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d906      	bls.n	800454e <USB_SetTurnaroundTime+0xda>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4a19      	ldr	r2, [pc, #100]	@ (80045a8 <USB_SetTurnaroundTime+0x134>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d202      	bcs.n	800454e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004548:	2307      	movs	r3, #7
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e004      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800454e:	2306      	movs	r3, #6
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e001      	b.n	8004558 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004554:	2309      	movs	r3, #9
 8004556:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	029b      	lsls	r3, r3, #10
 800456c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	00d8acbf 	.word	0x00d8acbf
 8004588:	00e4e1c0 	.word	0x00e4e1c0
 800458c:	00f42400 	.word	0x00f42400
 8004590:	01067380 	.word	0x01067380
 8004594:	011a499f 	.word	0x011a499f
 8004598:	01312cff 	.word	0x01312cff
 800459c:	014ca43f 	.word	0x014ca43f
 80045a0:	016e3600 	.word	0x016e3600
 80045a4:	01a6ab1f 	.word	0x01a6ab1f
 80045a8:	01e84800 	.word	0x01e84800

080045ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f023 0201 	bic.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d115      	bne.n	800463e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800461e:	200a      	movs	r0, #10
 8004620:	f7fc fa0a 	bl	8000a38 <HAL_Delay>
      ms += 10U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	330a      	adds	r3, #10
 8004628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f001 f8b3 	bl	8005796 <USB_GetMode>
 8004630:	4603      	mov	r3, r0
 8004632:	2b01      	cmp	r3, #1
 8004634:	d01e      	beq.n	8004674 <USB_SetCurrentMode+0x84>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2bc7      	cmp	r3, #199	@ 0xc7
 800463a:	d9f0      	bls.n	800461e <USB_SetCurrentMode+0x2e>
 800463c:	e01a      	b.n	8004674 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d115      	bne.n	8004670 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004650:	200a      	movs	r0, #10
 8004652:	f7fc f9f1 	bl	8000a38 <HAL_Delay>
      ms += 10U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	330a      	adds	r3, #10
 800465a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f001 f89a 	bl	8005796 <USB_GetMode>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <USB_SetCurrentMode+0x84>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2bc7      	cmp	r3, #199	@ 0xc7
 800466c:	d9f0      	bls.n	8004650 <USB_SetCurrentMode+0x60>
 800466e:	e001      	b.n	8004674 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e005      	b.n	8004680 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2bc8      	cmp	r3, #200	@ 0xc8
 8004678:	d101      	bne.n	800467e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004688:	b084      	sub	sp, #16
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e009      	b.n	80046bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3340      	adds	r3, #64	@ 0x40
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3301      	adds	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b0e      	cmp	r3, #14
 80046c0:	d9f2      	bls.n	80046a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11c      	bne.n	8004704 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046d8:	f043 0302 	orr.w	r3, r3, #2
 80046dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e005      	b.n	8004710 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004716:	461a      	mov	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800471c:	2103      	movs	r1, #3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f95a 	bl	80049d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004724:	2110      	movs	r1, #16
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8f6 	bl	8004918 <USB_FlushTxFifo>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f920 	bl	800497c <USB_FlushRxFifo>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474c:	461a      	mov	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e043      	b.n	80047f8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004786:	d118      	bne.n	80047ba <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e013      	b.n	80047cc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e008      	b.n	80047cc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c6:	461a      	mov	r2, r3
 80047c8:	2300      	movs	r3, #0
 80047ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047fc:	461a      	mov	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4293      	cmp	r3, r2
 8004802:	d3b5      	bcc.n	8004770 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	e043      	b.n	8004892 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004820:	d118      	bne.n	8004854 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e013      	b.n	8004866 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e008      	b.n	8004866 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004860:	461a      	mov	r2, r3
 8004862:	2300      	movs	r3, #0
 8004864:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004872:	461a      	mov	r2, r3
 8004874:	2300      	movs	r3, #0
 8004876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800488a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3301      	adds	r3, #1
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004896:	461a      	mov	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4293      	cmp	r3, r2
 800489c:	d3b5      	bcc.n	800480a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f043 0210 	orr.w	r2, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <USB_DevInit+0x28c>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f043 0208 	orr.w	r2, r3, #8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d107      	bne.n	8004904 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048fc:	f043 0304 	orr.w	r3, r3, #4
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004910:	b004      	add	sp, #16
 8004912:	4770      	bx	lr
 8004914:	803c3800 	.word	0x803c3800

08004918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3301      	adds	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004932:	d901      	bls.n	8004938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e01b      	b.n	8004970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	daf2      	bge.n	8004926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	019b      	lsls	r3, r3, #6
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800495c:	d901      	bls.n	8004962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e006      	b.n	8004970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d0f0      	beq.n	8004950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e018      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	daf2      	bge.n	8004988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2210      	movs	r2, #16
 80049aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049b8:	d901      	bls.n	80049be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e006      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d0f0      	beq.n	80049ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0306 	and.w	r3, r3, #6
 8004a22:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d002      	beq.n	8004a30 <USB_GetDevSpeed+0x26>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b06      	cmp	r3, #6
 8004a2e:	d102      	bne.n	8004a36 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a30:	2302      	movs	r3, #2
 8004a32:	75fb      	strb	r3, [r7, #23]
 8004a34:	e001      	b.n	8004a3a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004a36:	230f      	movs	r3, #15
 8004a38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d13a      	bne.n	8004ada <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d155      	bne.n	8004b48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	791b      	ldrb	r3, [r3, #4]
 8004ab6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ab8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	059b      	lsls	r3, r3, #22
 8004abe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e036      	b.n	8004b48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d11a      	bne.n	8004b48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	791b      	ldrb	r3, [r3, #4]
 8004b2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d161      	bne.n	8004c38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b8a:	d11f      	bne.n	8004bcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ba6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004baa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bec:	4013      	ands	r3, r2
 8004bee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c10:	4013      	ands	r3, r2
 8004c12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	0159      	lsls	r1, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	440b      	add	r3, r1
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4b35      	ldr	r3, [pc, #212]	@ (8004d08 <USB_DeactivateEndpoint+0x1b0>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
 8004c36:	e060      	b.n	8004cfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c4e:	d11f      	bne.n	8004c90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	0159      	lsls	r1, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	440b      	add	r3, r1
 8004cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <USB_DeactivateEndpoint+0x1b4>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	ec337800 	.word	0xec337800
 8004d0c:	eff37800 	.word	0xeff37800

08004d10 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	f040 812d 	bne.w	8004f88 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d132      	bne.n	8004d9c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d50:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d54:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d94:	0cdb      	lsrs	r3, r3, #19
 8004d96:	04db      	lsls	r3, r3, #19
 8004d98:	6113      	str	r3, [r2, #16]
 8004d9a:	e097      	b.n	8004ecc <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004db6:	0cdb      	lsrs	r3, r3, #19
 8004db8:	04db      	lsls	r3, r3, #19
 8004dba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dd6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004dda:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004dde:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d11a      	bne.n	8004e1c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d903      	bls.n	8004dfa <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e18:	6113      	str	r3, [r2, #16]
 8004e1a:	e044      	b.n	8004ea6 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4413      	add	r3, r2
 8004e26:	1e5a      	subs	r2, r3, #1
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	89fb      	ldrh	r3, [r7, #14]
 8004e42:	04d9      	lsls	r1, r3, #19
 8004e44:	4b8f      	ldr	r3, [pc, #572]	@ (8005084 <USB_EPStartXfer+0x374>)
 8004e46:	400b      	ands	r3, r1
 8004e48:	6939      	ldr	r1, [r7, #16]
 8004e4a:	0148      	lsls	r0, r1, #5
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	4401      	add	r1, r0
 8004e50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e54:	4313      	orrs	r3, r2
 8004e56:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	791b      	ldrb	r3, [r3, #4]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d122      	bne.n	8004ea6 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e7a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004e7e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	89fb      	ldrh	r3, [r7, #14]
 8004e90:	075b      	lsls	r3, r3, #29
 8004e92:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004e96:	6939      	ldr	r1, [r7, #16]
 8004e98:	0148      	lsls	r0, r1, #5
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	4401      	add	r1, r0
 8004e9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebc:	6939      	ldr	r1, [r7, #16]
 8004ebe:	0148      	lsls	r0, r1, #5
 8004ec0:	6979      	ldr	r1, [r7, #20]
 8004ec2:	4401      	add	r1, r0
 8004ec4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ee6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004eea:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	791b      	ldrb	r3, [r3, #4]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d015      	beq.n	8004f20 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 813a 	beq.w	8005172 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	6979      	ldr	r1, [r7, #20]
 8004f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	634b      	str	r3, [r1, #52]	@ 0x34
 8004f1e:	e128      	b.n	8005172 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d110      	bne.n	8004f52 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	e00f      	b.n	8004f72 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f70:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68d9      	ldr	r1, [r3, #12]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f9a7 	bl	80052d4 <USB_WritePacket>
 8004f86:	e0f4      	b.n	8005172 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fa2:	0cdb      	lsrs	r3, r3, #19
 8004fa4:	04db      	lsls	r3, r3, #19
 8004fa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fc2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fc6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fca:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d12f      	bne.n	8005032 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005000:	6939      	ldr	r1, [r7, #16]
 8005002:	0148      	lsls	r0, r1, #5
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	4401      	add	r1, r0
 8005008:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800500c:	4313      	orrs	r3, r2
 800500e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800502a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800502e:	6113      	str	r3, [r2, #16]
 8005030:	e062      	b.n	80050f8 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d126      	bne.n	8005088 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005050:	6939      	ldr	r1, [r7, #16]
 8005052:	0148      	lsls	r0, r1, #5
 8005054:	6979      	ldr	r1, [r7, #20]
 8005056:	4401      	add	r1, r0
 8005058:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800505c:	4313      	orrs	r3, r2
 800505e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800507a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800507e:	6113      	str	r3, [r2, #16]
 8005080:	e03a      	b.n	80050f8 <USB_EPStartXfer+0x3e8>
 8005082:	bf00      	nop
 8005084:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4413      	add	r3, r2
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	89fa      	ldrh	r2, [r7, #14]
 80050a4:	fb03 f202 	mul.w	r2, r3, r2
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	89fb      	ldrh	r3, [r7, #14]
 80050bc:	04d9      	lsls	r1, r3, #19
 80050be:	4b2f      	ldr	r3, [pc, #188]	@ (800517c <USB_EPStartXfer+0x46c>)
 80050c0:	400b      	ands	r3, r1
 80050c2:	6939      	ldr	r1, [r7, #16]
 80050c4:	0148      	lsls	r0, r1, #5
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	4401      	add	r1, r0
 80050ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050ce:	4313      	orrs	r3, r2
 80050d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	0148      	lsls	r0, r1, #5
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	4401      	add	r1, r0
 80050f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050f4:	4313      	orrs	r3, r2
 80050f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	791b      	ldrb	r3, [r3, #4]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d128      	bne.n	8005152 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800512a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e00f      	b.n	8005152 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800516c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	1ff80000 	.word	0x1ff80000

08005180 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d14a      	bne.n	8005234 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051b6:	f040 8086 	bne.w	80052c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005200:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800520e:	4293      	cmp	r3, r2
 8005210:	d902      	bls.n	8005218 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
          break;
 8005216:	e056      	b.n	80052c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800522c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005230:	d0e7      	beq.n	8005202 <USB_EPStopXfer+0x82>
 8005232:	e048      	b.n	80052c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800524c:	d13b      	bne.n	80052c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800526c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005270:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005290:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005294:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d902      	bls.n	80052ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
          break;
 80052aa:	e00c      	b.n	80052c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052c4:	d0e7      	beq.n	8005296 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	@ 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	460b      	mov	r3, r1
 80052e4:	71fb      	strb	r3, [r7, #7]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80052f2:	88bb      	ldrh	r3, [r7, #4]
 80052f4:	3303      	adds	r3, #3
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e018      	b.n	8005332 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	031a      	lsls	r2, r3, #12
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530c:	461a      	mov	r2, r3
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3301      	adds	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	3301      	adds	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	d3e2      	bcc.n	8005300 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3724      	adds	r7, #36	@ 0x24
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005348:	b480      	push	{r7}
 800534a:	b08b      	sub	sp, #44	@ 0x2c
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	b29b      	uxth	r3, r3
 8005364:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e014      	b.n	800539e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	3301      	adds	r3, #1
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	3301      	adds	r3, #1
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	3301      	adds	r3, #1
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	3301      	adds	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	3301      	adds	r3, #1
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	6a3a      	ldr	r2, [r7, #32]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d3e6      	bcc.n	8005374 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053a6:	8bfb      	ldrh	r3, [r7, #30]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01e      	beq.n	80053ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053b6:	461a      	mov	r2, r3
 80053b8:	f107 0310 	add.w	r3, r7, #16
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	701a      	strb	r2, [r3, #0]
      i++;
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	3301      	adds	r3, #1
 80053d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	3301      	adds	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053e4:	8bfb      	ldrh	r3, [r7, #30]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ea      	bne.n	80053c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	372c      	adds	r7, #44	@ 0x2c
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d12c      	bne.n	800546e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db12      	blt.n	800544c <USB_EPSetStall+0x54>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00f      	beq.n	800544c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005446:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800544a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005466:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e02b      	b.n	80054c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	db12      	blt.n	80054a6 <USB_EPSetStall+0xae>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d128      	bne.n	8005542 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800550a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800550e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d003      	beq.n	8005520 <USB_EPClearStall+0x4c>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	791b      	ldrb	r3, [r3, #4]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d138      	bne.n	8005592 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	e027      	b.n	8005592 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800555c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005560:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d003      	beq.n	8005572 <USB_EPClearStall+0x9e>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d10f      	bne.n	8005592 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005590:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800561a:	f023 0302 	bic.w	r3, r3, #2
 800561e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	0c1b      	lsrs	r3, r3, #16
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	b29b      	uxth	r3, r3
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4013      	ands	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800572c:	68bb      	ldr	r3, [r7, #8]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800573a:	b480      	push	{r7}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	01db      	lsls	r3, r3, #7
 800576c:	b2db      	uxtb	r3, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005788:	68bb      	ldr	r3, [r7, #8]
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f003 0301 	and.w	r3, r3, #1
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	333c      	adds	r3, #60	@ 0x3c
 800580a:	3304      	adds	r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4a1c      	ldr	r2, [pc, #112]	@ (8005884 <USB_EP0_OutStart+0x8c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d90a      	bls.n	800582e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005828:	d101      	bne.n	800582e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e024      	b.n	8005878 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800584c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800585c:	f043 0318 	orr.w	r3, r3, #24
 8005860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005870:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005874:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	4f54300a 	.word	0x4f54300a

08005888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058a0:	d901      	bls.n	80058a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e01b      	b.n	80058de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	daf2      	bge.n	8005894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f043 0201 	orr.w	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058ca:	d901      	bls.n	80058d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e006      	b.n	80058de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d0f0      	beq.n	80058be <USB_CoreReset+0x36>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80058fc:	f002 ff28 	bl	8008750 <USBD_static_malloc>
 8005900:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	32b0      	adds	r2, #176	@ 0xb0
 8005912:	2100      	movs	r1, #0
 8005914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005918:	2302      	movs	r3, #2
 800591a:	e0d4      	b.n	8005ac6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800591c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005920:	2100      	movs	r1, #0
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f003 f95c 	bl	8008be0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	32b0      	adds	r2, #176	@ 0xb0
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32b0      	adds	r2, #176	@ 0xb0
 8005942:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7c1b      	ldrb	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d138      	bne.n	80059c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005954:	4b5e      	ldr	r3, [pc, #376]	@ (8005ad0 <USBD_CDC_Init+0x1e4>)
 8005956:	7819      	ldrb	r1, [r3, #0]
 8005958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800595c:	2202      	movs	r2, #2
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f002 fce2 	bl	8008328 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005964:	4b5a      	ldr	r3, [pc, #360]	@ (8005ad0 <USBD_CDC_Init+0x1e4>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 020f 	and.w	r2, r3, #15
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3324      	adds	r3, #36	@ 0x24
 800597a:	2201      	movs	r2, #1
 800597c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800597e:	4b55      	ldr	r3, [pc, #340]	@ (8005ad4 <USBD_CDC_Init+0x1e8>)
 8005980:	7819      	ldrb	r1, [r3, #0]
 8005982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005986:	2202      	movs	r2, #2
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f002 fccd 	bl	8008328 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800598e:	4b51      	ldr	r3, [pc, #324]	@ (8005ad4 <USBD_CDC_Init+0x1e8>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 020f 	and.w	r2, r3, #15
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059a6:	2201      	movs	r2, #1
 80059a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059aa:	4b4b      	ldr	r3, [pc, #300]	@ (8005ad8 <USBD_CDC_Init+0x1ec>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f003 020f 	and.w	r2, r3, #15
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	3326      	adds	r3, #38	@ 0x26
 80059c0:	2210      	movs	r2, #16
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e035      	b.n	8005a32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059c6:	4b42      	ldr	r3, [pc, #264]	@ (8005ad0 <USBD_CDC_Init+0x1e4>)
 80059c8:	7819      	ldrb	r1, [r3, #0]
 80059ca:	2340      	movs	r3, #64	@ 0x40
 80059cc:	2202      	movs	r2, #2
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f002 fcaa 	bl	8008328 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059d4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad0 <USBD_CDC_Init+0x1e4>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	3324      	adds	r3, #36	@ 0x24
 80059ea:	2201      	movs	r2, #1
 80059ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059ee:	4b39      	ldr	r3, [pc, #228]	@ (8005ad4 <USBD_CDC_Init+0x1e8>)
 80059f0:	7819      	ldrb	r1, [r3, #0]
 80059f2:	2340      	movs	r3, #64	@ 0x40
 80059f4:	2202      	movs	r2, #2
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f002 fc96 	bl	8008328 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059fc:	4b35      	ldr	r3, [pc, #212]	@ (8005ad4 <USBD_CDC_Init+0x1e8>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a14:	2201      	movs	r2, #1
 8005a16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a18:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad8 <USBD_CDC_Init+0x1ec>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 020f 	and.w	r2, r3, #15
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3326      	adds	r3, #38	@ 0x26
 8005a2e:	2210      	movs	r2, #16
 8005a30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a32:	4b29      	ldr	r3, [pc, #164]	@ (8005ad8 <USBD_CDC_Init+0x1ec>)
 8005a34:	7819      	ldrb	r1, [r3, #0]
 8005a36:	2308      	movs	r3, #8
 8005a38:	2203      	movs	r2, #3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f002 fc74 	bl	8008328 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a40:	4b25      	ldr	r3, [pc, #148]	@ (8005ad8 <USBD_CDC_Init+0x1ec>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3324      	adds	r3, #36	@ 0x24
 8005a56:	2201      	movs	r2, #1
 8005a58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	33b0      	adds	r3, #176	@ 0xb0
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a90:	2302      	movs	r3, #2
 8005a92:	e018      	b.n	8005ac6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	7c1b      	ldrb	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <USBD_CDC_Init+0x1e8>)
 8005a9e:	7819      	ldrb	r1, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005aa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f002 fdb6 	bl	800861c <USBD_LL_PrepareReceive>
 8005ab0:	e008      	b.n	8005ac4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ab2:	4b08      	ldr	r3, [pc, #32]	@ (8005ad4 <USBD_CDC_Init+0x1e8>)
 8005ab4:	7819      	ldrb	r1, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005abc:	2340      	movs	r3, #64	@ 0x40
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f002 fdac 	bl	800861c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000093 	.word	0x20000093
 8005ad4:	20000094 	.word	0x20000094
 8005ad8:	20000095 	.word	0x20000095

08005adc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd4 <USBD_CDC_DeInit+0xf8>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f002 fc58 	bl	80083a4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005af4:	4b37      	ldr	r3, [pc, #220]	@ (8005bd4 <USBD_CDC_DeInit+0xf8>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f003 020f 	and.w	r2, r3, #15
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	3324      	adds	r3, #36	@ 0x24
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b0e:	4b32      	ldr	r3, [pc, #200]	@ (8005bd8 <USBD_CDC_DeInit+0xfc>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f002 fc45 	bl	80083a4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd8 <USBD_CDC_DeInit+0xfc>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b32:	2200      	movs	r2, #0
 8005b34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b36:	4b29      	ldr	r3, [pc, #164]	@ (8005bdc <USBD_CDC_DeInit+0x100>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f002 fc31 	bl	80083a4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b42:	4b26      	ldr	r3, [pc, #152]	@ (8005bdc <USBD_CDC_DeInit+0x100>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3324      	adds	r3, #36	@ 0x24
 8005b58:	2200      	movs	r2, #0
 8005b5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bdc <USBD_CDC_DeInit+0x100>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	3326      	adds	r3, #38	@ 0x26
 8005b72:	2200      	movs	r2, #0
 8005b74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	32b0      	adds	r2, #176	@ 0xb0
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01f      	beq.n	8005bc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	33b0      	adds	r3, #176	@ 0xb0
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	32b0      	adds	r2, #176	@ 0xb0
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 fdde 	bl	800876c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	32b0      	adds	r2, #176	@ 0xb0
 8005bba:	2100      	movs	r1, #0
 8005bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000093 	.word	0x20000093
 8005bd8:	20000094 	.word	0x20000094
 8005bdc:	20000095 	.word	0x20000095

08005be0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	32b0      	adds	r2, #176	@ 0xb0
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0bf      	b.n	8005d90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d050      	beq.n	8005cbe <USBD_CDC_Setup+0xde>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	f040 80af 	bne.w	8005d80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88db      	ldrh	r3, [r3, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d03a      	beq.n	8005ca0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	da1b      	bge.n	8005c6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	33b0      	adds	r3, #176	@ 0xb0
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	88d2      	ldrh	r2, [r2, #6]
 8005c50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	88db      	ldrh	r3, [r3, #6]
 8005c56:	2b07      	cmp	r3, #7
 8005c58:	bf28      	it	cs
 8005c5a:	2307      	movcs	r3, #7
 8005c5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	89fa      	ldrh	r2, [r7, #14]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fdbd 	bl	80077e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c6a:	e090      	b.n	8005d8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	785a      	ldrb	r2, [r3, #1]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	88db      	ldrh	r3, [r3, #6]
 8005c7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c7c:	d803      	bhi.n	8005c86 <USBD_CDC_Setup+0xa6>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	88db      	ldrh	r3, [r3, #6]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	e000      	b.n	8005c88 <USBD_CDC_Setup+0xa8>
 8005c86:	2240      	movs	r2, #64	@ 0x40
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c8e:	6939      	ldr	r1, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005c96:	461a      	mov	r2, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fdcf 	bl	800783c <USBD_CtlPrepareRx>
      break;
 8005c9e:	e076      	b.n	8005d8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	33b0      	adds	r3, #176	@ 0xb0
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	7850      	ldrb	r0, [r2, #1]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	4798      	blx	r3
      break;
 8005cbc:	e067      	b.n	8005d8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b0b      	cmp	r3, #11
 8005cc4:	d851      	bhi.n	8005d6a <USBD_CDC_Setup+0x18a>
 8005cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <USBD_CDC_Setup+0xec>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005cfd 	.word	0x08005cfd
 8005cd0:	08005d79 	.word	0x08005d79
 8005cd4:	08005d6b 	.word	0x08005d6b
 8005cd8:	08005d6b 	.word	0x08005d6b
 8005cdc:	08005d6b 	.word	0x08005d6b
 8005ce0:	08005d6b 	.word	0x08005d6b
 8005ce4:	08005d6b 	.word	0x08005d6b
 8005ce8:	08005d6b 	.word	0x08005d6b
 8005cec:	08005d6b 	.word	0x08005d6b
 8005cf0:	08005d6b 	.word	0x08005d6b
 8005cf4:	08005d27 	.word	0x08005d27
 8005cf8:	08005d51 	.word	0x08005d51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d107      	bne.n	8005d18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d08:	f107 030a 	add.w	r3, r7, #10
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 fd67 	bl	80077e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d16:	e032      	b.n	8005d7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 fce5 	bl	80076ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	75fb      	strb	r3, [r7, #23]
          break;
 8005d24:	e02b      	b.n	8005d7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d107      	bne.n	8005d42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d32:	f107 030d 	add.w	r3, r7, #13
 8005d36:	2201      	movs	r2, #1
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f001 fd52 	bl	80077e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d40:	e01d      	b.n	8005d7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 fcd0 	bl	80076ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d4e:	e016      	b.n	8005d7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d00f      	beq.n	8005d7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fcc3 	bl	80076ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d68:	e008      	b.n	8005d7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 fcbc 	bl	80076ea <USBD_CtlError>
          ret = USBD_FAIL;
 8005d72:	2303      	movs	r3, #3
 8005d74:	75fb      	strb	r3, [r7, #23]
          break;
 8005d76:	e002      	b.n	8005d7e <USBD_CDC_Setup+0x19e>
          break;
 8005d78:	bf00      	nop
 8005d7a:	e008      	b.n	8005d8e <USBD_CDC_Setup+0x1ae>
          break;
 8005d7c:	bf00      	nop
      }
      break;
 8005d7e:	e006      	b.n	8005d8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 fcb1 	bl	80076ea <USBD_CtlError>
      ret = USBD_FAIL;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005daa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	32b0      	adds	r2, #176	@ 0xb0
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e065      	b.n	8005e8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	32b0      	adds	r2, #176	@ 0xb0
 8005dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	f003 020f 	and.w	r2, r3, #15
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3318      	adds	r3, #24
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02f      	beq.n	8005e4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	f003 020f 	and.w	r2, r3, #15
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3318      	adds	r3, #24
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	f003 010f 	and.w	r1, r3, #15
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	440b      	add	r3, r1
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4403      	add	r3, r0
 8005e14:	331c      	adds	r3, #28
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d112      	bne.n	8005e4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	3318      	adds	r3, #24
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e3e:	78f9      	ldrb	r1, [r7, #3]
 8005e40:	2300      	movs	r3, #0
 8005e42:	2200      	movs	r2, #0
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f002 fbb1 	bl	80085ac <USBD_LL_Transmit>
 8005e4a:	e01f      	b.n	8005e8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	33b0      	adds	r3, #176	@ 0xb0
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d010      	beq.n	8005e8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	33b0      	adds	r3, #176	@ 0xb0
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	32b0      	adds	r2, #176	@ 0xb0
 8005eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	32b0      	adds	r2, #176	@ 0xb0
 8005ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e01a      	b.n	8005efe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f002 fbdd 	bl	800868c <USBD_LL_GetRxDataSize>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	33b0      	adds	r3, #176	@ 0xb0
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	32b0      	adds	r2, #176	@ 0xb0
 8005f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e024      	b.n	8005f72 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	33b0      	adds	r3, #176	@ 0xb0
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d019      	beq.n	8005f70 <USBD_CDC_EP0_RxReady+0x6a>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f42:	2bff      	cmp	r3, #255	@ 0xff
 8005f44:	d014      	beq.n	8005f70 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	33b0      	adds	r3, #176	@ 0xb0
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	22ff      	movs	r2, #255	@ 0xff
 8005f6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f84:	2182      	movs	r1, #130	@ 0x82
 8005f86:	4818      	ldr	r0, [pc, #96]	@ (8005fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f88:	f000 fd4f 	bl	8006a2a <USBD_GetEpDesc>
 8005f8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f8e:	2101      	movs	r1, #1
 8005f90:	4815      	ldr	r0, [pc, #84]	@ (8005fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f92:	f000 fd4a 	bl	8006a2a <USBD_GetEpDesc>
 8005f96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f98:	2181      	movs	r1, #129	@ 0x81
 8005f9a:	4813      	ldr	r0, [pc, #76]	@ (8005fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f9c:	f000 fd45 	bl	8006a2a <USBD_GetEpDesc>
 8005fa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2210      	movs	r2, #16
 8005fac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d006      	beq.n	8005fc2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fbc:	711a      	strb	r2, [r3, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd0:	711a      	strb	r2, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2243      	movs	r2, #67	@ 0x43
 8005fda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fdc:	4b02      	ldr	r3, [pc, #8]	@ (8005fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000050 	.word	0x20000050

08005fec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ff4:	2182      	movs	r1, #130	@ 0x82
 8005ff6:	4818      	ldr	r0, [pc, #96]	@ (8006058 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ff8:	f000 fd17 	bl	8006a2a <USBD_GetEpDesc>
 8005ffc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ffe:	2101      	movs	r1, #1
 8006000:	4815      	ldr	r0, [pc, #84]	@ (8006058 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006002:	f000 fd12 	bl	8006a2a <USBD_GetEpDesc>
 8006006:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006008:	2181      	movs	r1, #129	@ 0x81
 800600a:	4813      	ldr	r0, [pc, #76]	@ (8006058 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800600c:	f000 fd0d 	bl	8006a2a <USBD_GetEpDesc>
 8006010:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2210      	movs	r2, #16
 800601c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d006      	beq.n	8006032 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2200      	movs	r2, #0
 8006028:	711a      	strb	r2, [r3, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f042 0202 	orr.w	r2, r2, #2
 8006030:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	711a      	strb	r2, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f042 0202 	orr.w	r2, r2, #2
 8006044:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2243      	movs	r2, #67	@ 0x43
 800604a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800604c:	4b02      	ldr	r3, [pc, #8]	@ (8006058 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000050 	.word	0x20000050

0800605c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006064:	2182      	movs	r1, #130	@ 0x82
 8006066:	4818      	ldr	r0, [pc, #96]	@ (80060c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006068:	f000 fcdf 	bl	8006a2a <USBD_GetEpDesc>
 800606c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800606e:	2101      	movs	r1, #1
 8006070:	4815      	ldr	r0, [pc, #84]	@ (80060c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006072:	f000 fcda 	bl	8006a2a <USBD_GetEpDesc>
 8006076:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006078:	2181      	movs	r1, #129	@ 0x81
 800607a:	4813      	ldr	r0, [pc, #76]	@ (80060c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800607c:	f000 fcd5 	bl	8006a2a <USBD_GetEpDesc>
 8006080:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2210      	movs	r2, #16
 800608c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2200      	movs	r2, #0
 8006098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800609c:	711a      	strb	r2, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060b0:	711a      	strb	r2, [r3, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2243      	movs	r2, #67	@ 0x43
 80060ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060bc:	4b02      	ldr	r3, [pc, #8]	@ (80060c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000050 	.word	0x20000050

080060cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	220a      	movs	r2, #10
 80060d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060da:	4b03      	ldr	r3, [pc, #12]	@ (80060e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	2000000c 	.word	0x2000000c

080060ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e009      	b.n	8006114 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	33b0      	adds	r3, #176	@ 0xb0
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	32b0      	adds	r2, #176	@ 0xb0
 8006136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006142:	2303      	movs	r3, #3
 8006144:	e008      	b.n	8006158 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	32b0      	adds	r2, #176	@ 0xb0
 8006178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	e004      	b.n	8006192 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32b0      	adds	r2, #176	@ 0xb0
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e025      	b.n	8006212 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d11f      	bne.n	8006210 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061d8:	4b10      	ldr	r3, [pc, #64]	@ (800621c <USBD_CDC_TransmitPacket+0x7c>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 020f 	and.w	r2, r3, #15
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4403      	add	r3, r0
 80061f2:	3318      	adds	r3, #24
 80061f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80061f6:	4b09      	ldr	r3, [pc, #36]	@ (800621c <USBD_CDC_TransmitPacket+0x7c>)
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f002 f9d0 	bl	80085ac <USBD_LL_Transmit>

    ret = USBD_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000093 	.word	0x20000093

08006220 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	32b0      	adds	r2, #176	@ 0xb0
 8006232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006236:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	32b0      	adds	r2, #176	@ 0xb0
 8006242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800624a:	2303      	movs	r3, #3
 800624c:	e018      	b.n	8006280 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	7c1b      	ldrb	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006256:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <USBD_CDC_ReceivePacket+0x68>)
 8006258:	7819      	ldrb	r1, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f002 f9d9 	bl	800861c <USBD_LL_PrepareReceive>
 800626a:	e008      	b.n	800627e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800626c:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <USBD_CDC_ReceivePacket+0x68>)
 800626e:	7819      	ldrb	r1, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006276:	2340      	movs	r3, #64	@ 0x40
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f002 f9cf 	bl	800861c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000094 	.word	0x20000094

0800628c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e01f      	b.n	80062e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	79fa      	ldrb	r2, [r7, #7]
 80062d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f001 ffa7 	bl	800822c <USBD_LL_Init>
 80062de:	4603      	mov	r3, r0
 80062e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	e025      	b.n	8006350 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	32ae      	adds	r2, #174	@ 0xae
 8006316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00f      	beq.n	8006340 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32ae      	adds	r2, #174	@ 0xae
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	f107 020e 	add.w	r2, r7, #14
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	4602      	mov	r2, r0
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 ffaf 	bl	80082c4 <USBD_LL_Start>
 8006366:	4603      	mov	r3, r0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006378:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	4611      	mov	r1, r2
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	4611      	mov	r1, r2
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063e4:	2303      	movs	r3, #3
 80063e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f001 f936 	bl	8007676 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2b02      	cmp	r3, #2
 800642c:	d01a      	beq.n	8006464 <USBD_LL_SetupStage+0x72>
 800642e:	2b02      	cmp	r3, #2
 8006430:	d822      	bhi.n	8006478 <USBD_LL_SetupStage+0x86>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <USBD_LL_SetupStage+0x4a>
 8006436:	2b01      	cmp	r3, #1
 8006438:	d00a      	beq.n	8006450 <USBD_LL_SetupStage+0x5e>
 800643a:	e01d      	b.n	8006478 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fb63 	bl	8006b10 <USBD_StdDevReq>
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]
      break;
 800644e:	e020      	b.n	8006492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fbcb 	bl	8006bf4 <USBD_StdItfReq>
 800645e:	4603      	mov	r3, r0
 8006460:	73fb      	strb	r3, [r7, #15]
      break;
 8006462:	e016      	b.n	8006492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fc2d 	bl	8006ccc <USBD_StdEPReq>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
      break;
 8006476:	e00c      	b.n	8006492 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800647e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006482:	b2db      	uxtb	r3, r3
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 ffc2 	bl	8008410 <USBD_LL_StallEP>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
      break;
 8006490:	bf00      	nop
  }

  return ret;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	460b      	mov	r3, r1
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d16e      	bne.n	8006592 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80064ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	f040 8098 	bne.w	80065f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d913      	bls.n	80064fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	1ad2      	subs	r2, r2, r3
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	4293      	cmp	r3, r2
 80064ec:	bf28      	it	cs
 80064ee:	4613      	movcs	r3, r2
 80064f0:	461a      	mov	r2, r3
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f001 f9be 	bl	8007876 <USBD_CtlContinueRx>
 80064fa:	e07d      	b.n	80065f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2b02      	cmp	r3, #2
 8006508:	d014      	beq.n	8006534 <USBD_LL_DataOutStage+0x98>
 800650a:	2b02      	cmp	r3, #2
 800650c:	d81d      	bhi.n	800654a <USBD_LL_DataOutStage+0xae>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <USBD_LL_DataOutStage+0x7c>
 8006512:	2b01      	cmp	r3, #1
 8006514:	d003      	beq.n	800651e <USBD_LL_DataOutStage+0x82>
 8006516:	e018      	b.n	800654a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	75bb      	strb	r3, [r7, #22]
            break;
 800651c:	e018      	b.n	8006550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006524:	b2db      	uxtb	r3, r3
 8006526:	4619      	mov	r1, r3
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 fa64 	bl	80069f6 <USBD_CoreFindIF>
 800652e:	4603      	mov	r3, r0
 8006530:	75bb      	strb	r3, [r7, #22]
            break;
 8006532:	e00d      	b.n	8006550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4619      	mov	r1, r3
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fa66 	bl	8006a10 <USBD_CoreFindEP>
 8006544:	4603      	mov	r3, r0
 8006546:	75bb      	strb	r3, [r7, #22]
            break;
 8006548:	e002      	b.n	8006550 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	75bb      	strb	r3, [r7, #22]
            break;
 800654e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006550:	7dbb      	ldrb	r3, [r7, #22]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d119      	bne.n	800658a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b03      	cmp	r3, #3
 8006560:	d113      	bne.n	800658a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006562:	7dba      	ldrb	r2, [r7, #22]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	32ae      	adds	r2, #174	@ 0xae
 8006568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006572:	7dba      	ldrb	r2, [r7, #22]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800657a:	7dba      	ldrb	r2, [r7, #22]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	32ae      	adds	r2, #174	@ 0xae
 8006580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f001 f984 	bl	8007898 <USBD_CtlSendStatus>
 8006590:	e032      	b.n	80065f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fa37 	bl	8006a10 <USBD_CoreFindEP>
 80065a2:	4603      	mov	r3, r0
 80065a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065a6:	7dbb      	ldrb	r3, [r7, #22]
 80065a8:	2bff      	cmp	r3, #255	@ 0xff
 80065aa:	d025      	beq.n	80065f8 <USBD_LL_DataOutStage+0x15c>
 80065ac:	7dbb      	ldrb	r3, [r7, #22]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d122      	bne.n	80065f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d117      	bne.n	80065ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065be:	7dba      	ldrb	r2, [r7, #22]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	32ae      	adds	r2, #174	@ 0xae
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00f      	beq.n	80065ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065ce:	7dba      	ldrb	r2, [r7, #22]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065d6:	7dba      	ldrb	r2, [r7, #22]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	32ae      	adds	r2, #174	@ 0xae
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	7afa      	ldrb	r2, [r7, #11]
 80065e4:	4611      	mov	r1, r2
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	4798      	blx	r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	e000      	b.n	80065fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	460b      	mov	r3, r1
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d16f      	bne.n	80066f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3314      	adds	r3, #20
 800661a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006622:	2b02      	cmp	r3, #2
 8006624:	d15a      	bne.n	80066dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	429a      	cmp	r2, r3
 8006630:	d914      	bls.n	800665c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	461a      	mov	r2, r3
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f001 f8e6 	bl	800781a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800664e:	2300      	movs	r3, #0
 8006650:	2200      	movs	r2, #0
 8006652:	2100      	movs	r1, #0
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f001 ffe1 	bl	800861c <USBD_LL_PrepareReceive>
 800665a:	e03f      	b.n	80066dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d11c      	bne.n	80066a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006670:	429a      	cmp	r2, r3
 8006672:	d316      	bcc.n	80066a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800667e:	429a      	cmp	r2, r3
 8006680:	d20f      	bcs.n	80066a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006682:	2200      	movs	r2, #0
 8006684:	2100      	movs	r1, #0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f001 f8c7 	bl	800781a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006694:	2300      	movs	r3, #0
 8006696:	2200      	movs	r2, #0
 8006698:	2100      	movs	r1, #0
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f001 ffbe 	bl	800861c <USBD_LL_PrepareReceive>
 80066a0:	e01c      	b.n	80066dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d10f      	bne.n	80066ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ce:	2180      	movs	r1, #128	@ 0x80
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f001 fe9d 	bl	8008410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f001 f8f1 	bl	80078be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d03a      	beq.n	800675c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fe42 	bl	8006370 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80066f4:	e032      	b.n	800675c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	4619      	mov	r1, r3
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f985 	bl	8006a10 <USBD_CoreFindEP>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	2bff      	cmp	r3, #255	@ 0xff
 800670e:	d025      	beq.n	800675c <USBD_LL_DataInStage+0x15a>
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d122      	bne.n	800675c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b03      	cmp	r3, #3
 8006720:	d11c      	bne.n	800675c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006722:	7dfa      	ldrb	r2, [r7, #23]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	32ae      	adds	r2, #174	@ 0xae
 8006728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d014      	beq.n	800675c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006732:	7dfa      	ldrb	r2, [r7, #23]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800673a:	7dfa      	ldrb	r2, [r7, #23]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	32ae      	adds	r2, #174	@ 0xae
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	7afa      	ldrb	r2, [r7, #11]
 8006748:	4611      	mov	r1, r2
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	4798      	blx	r3
 800674e:	4603      	mov	r3, r0
 8006750:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006752:	7dbb      	ldrb	r3, [r7, #22]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006758:	7dbb      	ldrb	r3, [r7, #22]
 800675a:	e000      	b.n	800675e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d014      	beq.n	80067cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6852      	ldr	r2, [r2, #4]
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	4611      	mov	r1, r2
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067c8:	2303      	movs	r3, #3
 80067ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067cc:	2340      	movs	r3, #64	@ 0x40
 80067ce:	2200      	movs	r2, #0
 80067d0:	2100      	movs	r1, #0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fda8 	bl	8008328 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2240      	movs	r2, #64	@ 0x40
 80067e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e8:	2340      	movs	r3, #64	@ 0x40
 80067ea:	2200      	movs	r2, #0
 80067ec:	2180      	movs	r1, #128	@ 0x80
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fd9a 	bl	8008328 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2240      	movs	r2, #64	@ 0x40
 80067fe:	621a      	str	r2, [r3, #32]

  return ret;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b04      	cmp	r3, #4
 800683c:	d006      	beq.n	800684c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006844:	b2da      	uxtb	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2204      	movs	r2, #4
 8006850:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b04      	cmp	r3, #4
 8006874:	d106      	bne.n	8006884 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800687c:	b2da      	uxtb	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d110      	bne.n	80068c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32ae      	adds	r2, #174	@ 0xae
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e01c      	b.n	800692e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d115      	bne.n	800692c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	@ 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32ae      	adds	r2, #174	@ 0xae
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	78fa      	ldrb	r2, [r7, #3]
 8006926:	4611      	mov	r1, r2
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	32ae      	adds	r2, #174	@ 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006954:	2303      	movs	r3, #3
 8006956:	e01c      	b.n	8006992 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b03      	cmp	r3, #3
 8006962:	d115      	bne.n	8006990 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	32ae      	adds	r2, #174	@ 0xae
 800696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	32ae      	adds	r2, #174	@ 0xae
 8006982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	4611      	mov	r1, r2
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6852      	ldr	r2, [r2, #4]
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	4611      	mov	r1, r2
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	885b      	ldrh	r3, [r3, #2]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d91f      	bls.n	8006a90 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a56:	e013      	b.n	8006a80 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a58:	f107 030a 	add.w	r3, r7, #10
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6978      	ldr	r0, [r7, #20]
 8006a60:	f000 f81b 	bl	8006a9a <USBD_GetNextDesc>
 8006a64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d108      	bne.n	8006a80 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	789b      	ldrb	r3, [r3, #2]
 8006a76:	78fa      	ldrb	r2, [r7, #3]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d008      	beq.n	8006a8e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	885b      	ldrh	r3, [r3, #2]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	897b      	ldrh	r3, [r7, #10]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d8e5      	bhi.n	8006a58 <USBD_GetEpDesc+0x2e>
 8006a8c:	e000      	b.n	8006a90 <USBD_GetEpDesc+0x66>
          break;
 8006a8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a90:	693b      	ldr	r3, [r7, #16]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	7812      	ldrb	r2, [r2, #0]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b087      	sub	sp, #28
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006af0:	8a3b      	ldrh	r3, [r7, #16]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	b21a      	sxth	r2, r3
 8006af6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	b21b      	sxth	r3, r3
 8006afe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b00:	89fb      	ldrh	r3, [r7, #14]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b26:	2b40      	cmp	r3, #64	@ 0x40
 8006b28:	d005      	beq.n	8006b36 <USBD_StdDevReq+0x26>
 8006b2a:	2b40      	cmp	r3, #64	@ 0x40
 8006b2c:	d857      	bhi.n	8006bde <USBD_StdDevReq+0xce>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00f      	beq.n	8006b52 <USBD_StdDevReq+0x42>
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d153      	bne.n	8006bde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	32ae      	adds	r2, #174	@ 0xae
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4798      	blx	r3
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b50:	e04a      	b.n	8006be8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	2b09      	cmp	r3, #9
 8006b58:	d83b      	bhi.n	8006bd2 <USBD_StdDevReq+0xc2>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <USBD_StdDevReq+0x50>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006bc9 	.word	0x08006bc9
 8006b68:	08006bd3 	.word	0x08006bd3
 8006b6c:	08006bbf 	.word	0x08006bbf
 8006b70:	08006bd3 	.word	0x08006bd3
 8006b74:	08006b93 	.word	0x08006b93
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006bd3 	.word	0x08006bd3
 8006b80:	08006bab 	.word	0x08006bab
 8006b84:	08006b9d 	.word	0x08006b9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa3c 	bl	8007008 <USBD_GetDescriptor>
          break;
 8006b90:	e024      	b.n	8006bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fbcb 	bl	8007330 <USBD_SetAddress>
          break;
 8006b9a:	e01f      	b.n	8006bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fc0a 	bl	80073b8 <USBD_SetConfig>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8006ba8:	e018      	b.n	8006bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fcad 	bl	800750c <USBD_GetConfig>
          break;
 8006bb2:	e013      	b.n	8006bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fcde 	bl	8007578 <USBD_GetStatus>
          break;
 8006bbc:	e00e      	b.n	8006bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fd0d 	bl	80075e0 <USBD_SetFeature>
          break;
 8006bc6:	e009      	b.n	8006bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fd31 	bl	8007632 <USBD_ClrFeature>
          break;
 8006bd0:	e004      	b.n	8006bdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fd88 	bl	80076ea <USBD_CtlError>
          break;
 8006bda:	bf00      	nop
      }
      break;
 8006bdc:	e004      	b.n	8006be8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fd82 	bl	80076ea <USBD_CtlError>
      break;
 8006be6:	bf00      	nop
  }

  return ret;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop

08006bf4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c0a:	2b40      	cmp	r3, #64	@ 0x40
 8006c0c:	d005      	beq.n	8006c1a <USBD_StdItfReq+0x26>
 8006c0e:	2b40      	cmp	r3, #64	@ 0x40
 8006c10:	d852      	bhi.n	8006cb8 <USBD_StdItfReq+0xc4>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <USBD_StdItfReq+0x26>
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d14e      	bne.n	8006cb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d840      	bhi.n	8006caa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	889b      	ldrh	r3, [r3, #4]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d836      	bhi.n	8006ca0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	889b      	ldrh	r3, [r3, #4]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fedb 	bl	80069f6 <USBD_CoreFindIF>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2bff      	cmp	r3, #255	@ 0xff
 8006c48:	d01d      	beq.n	8006c86 <USBD_StdItfReq+0x92>
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d11a      	bne.n	8006c86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c50:	7bba      	ldrb	r2, [r7, #14]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	32ae      	adds	r2, #174	@ 0xae
 8006c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c60:	7bba      	ldrb	r2, [r7, #14]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c68:	7bba      	ldrb	r2, [r7, #14]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	32ae      	adds	r2, #174	@ 0xae
 8006c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c7e:	e004      	b.n	8006c8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c80:	2303      	movs	r3, #3
 8006c82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c84:	e001      	b.n	8006c8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d110      	bne.n	8006cb4 <USBD_StdItfReq+0xc0>
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fdfd 	bl	8007898 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c9e:	e009      	b.n	8006cb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fd21 	bl	80076ea <USBD_CtlError>
          break;
 8006ca8:	e004      	b.n	8006cb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fd1c 	bl	80076ea <USBD_CtlError>
          break;
 8006cb2:	e000      	b.n	8006cb6 <USBD_StdItfReq+0xc2>
          break;
 8006cb4:	bf00      	nop
      }
      break;
 8006cb6:	e004      	b.n	8006cc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fd15 	bl	80076ea <USBD_CtlError>
      break;
 8006cc0:	bf00      	nop
  }

  return ret;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	889b      	ldrh	r3, [r3, #4]
 8006cde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d007      	beq.n	8006cfc <USBD_StdEPReq+0x30>
 8006cec:	2b40      	cmp	r3, #64	@ 0x40
 8006cee:	f200 817f 	bhi.w	8006ff0 <USBD_StdEPReq+0x324>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d02a      	beq.n	8006d4c <USBD_StdEPReq+0x80>
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	f040 817a 	bne.w	8006ff0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fe85 	bl	8006a10 <USBD_CoreFindEP>
 8006d06:	4603      	mov	r3, r0
 8006d08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d0a:	7b7b      	ldrb	r3, [r7, #13]
 8006d0c:	2bff      	cmp	r3, #255	@ 0xff
 8006d0e:	f000 8174 	beq.w	8006ffa <USBD_StdEPReq+0x32e>
 8006d12:	7b7b      	ldrb	r3, [r7, #13]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 8170 	bne.w	8006ffa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d1a:	7b7a      	ldrb	r2, [r7, #13]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d22:	7b7a      	ldrb	r2, [r7, #13]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	32ae      	adds	r2, #174	@ 0xae
 8006d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8163 	beq.w	8006ffa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d34:	7b7a      	ldrb	r2, [r7, #13]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32ae      	adds	r2, #174	@ 0xae
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d4a:	e156      	b.n	8006ffa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d008      	beq.n	8006d66 <USBD_StdEPReq+0x9a>
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	f300 8145 	bgt.w	8006fe4 <USBD_StdEPReq+0x318>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 809b 	beq.w	8006e96 <USBD_StdEPReq+0x1ca>
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d03c      	beq.n	8006dde <USBD_StdEPReq+0x112>
 8006d64:	e13e      	b.n	8006fe4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d002      	beq.n	8006d78 <USBD_StdEPReq+0xac>
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d016      	beq.n	8006da4 <USBD_StdEPReq+0xd8>
 8006d76:	e02c      	b.n	8006dd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00d      	beq.n	8006d9a <USBD_StdEPReq+0xce>
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b80      	cmp	r3, #128	@ 0x80
 8006d82:	d00a      	beq.n	8006d9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fb41 	bl	8008410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d8e:	2180      	movs	r1, #128	@ 0x80
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fb3d 	bl	8008410 <USBD_LL_StallEP>
 8006d96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d98:	e020      	b.n	8006ddc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fca4 	bl	80076ea <USBD_CtlError>
              break;
 8006da2:	e01b      	b.n	8006ddc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	885b      	ldrh	r3, [r3, #2]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10e      	bne.n	8006dca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <USBD_StdEPReq+0xfe>
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b80      	cmp	r3, #128	@ 0x80
 8006db6:	d008      	beq.n	8006dca <USBD_StdEPReq+0xfe>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	88db      	ldrh	r3, [r3, #6]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fb23 	bl	8008410 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fd64 	bl	8007898 <USBD_CtlSendStatus>

              break;
 8006dd0:	e004      	b.n	8006ddc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc88 	bl	80076ea <USBD_CtlError>
              break;
 8006dda:	bf00      	nop
          }
          break;
 8006ddc:	e107      	b.n	8006fee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d002      	beq.n	8006df0 <USBD_StdEPReq+0x124>
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d016      	beq.n	8006e1c <USBD_StdEPReq+0x150>
 8006dee:	e04b      	b.n	8006e88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00d      	beq.n	8006e12 <USBD_StdEPReq+0x146>
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b80      	cmp	r3, #128	@ 0x80
 8006dfa:	d00a      	beq.n	8006e12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 fb05 	bl	8008410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e06:	2180      	movs	r1, #128	@ 0x80
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 fb01 	bl	8008410 <USBD_LL_StallEP>
 8006e0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e10:	e040      	b.n	8006e94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fc68 	bl	80076ea <USBD_CtlError>
              break;
 8006e1a:	e03b      	b.n	8006e94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	885b      	ldrh	r3, [r3, #2]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d136      	bne.n	8006e92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fb22 	bl	800847c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fd2d 	bl	8007898 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fde4 	bl	8006a10 <USBD_CoreFindEP>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e4c:	7b7b      	ldrb	r3, [r7, #13]
 8006e4e:	2bff      	cmp	r3, #255	@ 0xff
 8006e50:	d01f      	beq.n	8006e92 <USBD_StdEPReq+0x1c6>
 8006e52:	7b7b      	ldrb	r3, [r7, #13]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d11c      	bne.n	8006e92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e58:	7b7a      	ldrb	r2, [r7, #13]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e60:	7b7a      	ldrb	r2, [r7, #13]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32ae      	adds	r2, #174	@ 0xae
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d010      	beq.n	8006e92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e70:	7b7a      	ldrb	r2, [r7, #13]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	32ae      	adds	r2, #174	@ 0xae
 8006e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e86:	e004      	b.n	8006e92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fc2d 	bl	80076ea <USBD_CtlError>
              break;
 8006e90:	e000      	b.n	8006e94 <USBD_StdEPReq+0x1c8>
              break;
 8006e92:	bf00      	nop
          }
          break;
 8006e94:	e0ab      	b.n	8006fee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d002      	beq.n	8006ea8 <USBD_StdEPReq+0x1dc>
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d032      	beq.n	8006f0c <USBD_StdEPReq+0x240>
 8006ea6:	e097      	b.n	8006fd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <USBD_StdEPReq+0x1f2>
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b80      	cmp	r3, #128	@ 0x80
 8006eb2:	d004      	beq.n	8006ebe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc17 	bl	80076ea <USBD_CtlError>
                break;
 8006ebc:	e091      	b.n	8006fe2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da0b      	bge.n	8006ede <USBD_StdEPReq+0x212>
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	3310      	adds	r3, #16
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	3304      	adds	r3, #4
 8006edc:	e00b      	b.n	8006ef6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2202      	movs	r2, #2
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fc6d 	bl	80077e4 <USBD_CtlSendData>
              break;
 8006f0a:	e06a      	b.n	8006fe2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da11      	bge.n	8006f38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	3324      	adds	r3, #36	@ 0x24
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d117      	bne.n	8006f5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fbda 	bl	80076ea <USBD_CtlError>
                  break;
 8006f36:	e054      	b.n	8006fe2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	f003 020f 	and.w	r2, r3, #15
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fbc7 	bl	80076ea <USBD_CtlError>
                  break;
 8006f5c:	e041      	b.n	8006fe2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da0b      	bge.n	8006f7e <USBD_StdEPReq+0x2b2>
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	3310      	adds	r3, #16
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	e00b      	b.n	8006f96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	3304      	adds	r3, #4
 8006f96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <USBD_StdEPReq+0x2d8>
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b80      	cmp	r3, #128	@ 0x80
 8006fa2:	d103      	bne.n	8006fac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e00e      	b.n	8006fca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 fa99 	bl	80084e8 <USBD_LL_IsStallEP>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e002      	b.n	8006fca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fc07 	bl	80077e4 <USBD_CtlSendData>
              break;
 8006fd6:	e004      	b.n	8006fe2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fb85 	bl	80076ea <USBD_CtlError>
              break;
 8006fe0:	bf00      	nop
          }
          break;
 8006fe2:	e004      	b.n	8006fee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fb7f 	bl	80076ea <USBD_CtlError>
          break;
 8006fec:	bf00      	nop
      }
      break;
 8006fee:	e005      	b.n	8006ffc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb79 	bl	80076ea <USBD_CtlError>
      break;
 8006ff8:	e000      	b.n	8006ffc <USBD_StdEPReq+0x330>
      break;
 8006ffa:	bf00      	nop
  }

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	2b0e      	cmp	r3, #14
 800702a:	f200 8152 	bhi.w	80072d2 <USBD_GetDescriptor+0x2ca>
 800702e:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <USBD_GetDescriptor+0x2c>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	080070a5 	.word	0x080070a5
 8007038:	080070bd 	.word	0x080070bd
 800703c:	080070fd 	.word	0x080070fd
 8007040:	080072d3 	.word	0x080072d3
 8007044:	080072d3 	.word	0x080072d3
 8007048:	08007273 	.word	0x08007273
 800704c:	0800729f 	.word	0x0800729f
 8007050:	080072d3 	.word	0x080072d3
 8007054:	080072d3 	.word	0x080072d3
 8007058:	080072d3 	.word	0x080072d3
 800705c:	080072d3 	.word	0x080072d3
 8007060:	080072d3 	.word	0x080072d3
 8007064:	080072d3 	.word	0x080072d3
 8007068:	080072d3 	.word	0x080072d3
 800706c:	08007071 	.word	0x08007071
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 0108 	add.w	r1, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007092:	e126      	b.n	80072e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fb27 	bl	80076ea <USBD_CtlError>
        err++;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	3301      	adds	r3, #1
 80070a0:	72fb      	strb	r3, [r7, #11]
      break;
 80070a2:	e11e      	b.n	80072e2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7c12      	ldrb	r2, [r2, #16]
 80070b0:	f107 0108 	add.w	r1, r7, #8
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
 80070b8:	60f8      	str	r0, [r7, #12]
      break;
 80070ba:	e112      	b.n	80072e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	7c1b      	ldrb	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	f107 0208 	add.w	r2, r7, #8
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3
 80070d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	2202      	movs	r2, #2
 80070dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070de:	e100      	b.n	80072e2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	f107 0208 	add.w	r2, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
 80070f6:	2202      	movs	r2, #2
 80070f8:	701a      	strb	r2, [r3, #0]
      break;
 80070fa:	e0f2      	b.n	80072e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	885b      	ldrh	r3, [r3, #2]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b05      	cmp	r3, #5
 8007104:	f200 80ac 	bhi.w	8007260 <USBD_GetDescriptor+0x258>
 8007108:	a201      	add	r2, pc, #4	@ (adr r2, 8007110 <USBD_GetDescriptor+0x108>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007129 	.word	0x08007129
 8007114:	0800715d 	.word	0x0800715d
 8007118:	08007191 	.word	0x08007191
 800711c:	080071c5 	.word	0x080071c5
 8007120:	080071f9 	.word	0x080071f9
 8007124:	0800722d 	.word	0x0800722d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	7c12      	ldrb	r2, [r2, #16]
 8007140:	f107 0108 	add.w	r1, r7, #8
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
 8007148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800714a:	e091      	b.n	8007270 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 facb 	bl	80076ea <USBD_CtlError>
            err++;
 8007154:	7afb      	ldrb	r3, [r7, #11]
 8007156:	3301      	adds	r3, #1
 8007158:	72fb      	strb	r3, [r7, #11]
          break;
 800715a:	e089      	b.n	8007270 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7c12      	ldrb	r2, [r2, #16]
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800717e:	e077      	b.n	8007270 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fab1 	bl	80076ea <USBD_CtlError>
            err++;
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	3301      	adds	r3, #1
 800718c:	72fb      	strb	r3, [r7, #11]
          break;
 800718e:	e06f      	b.n	8007270 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	7c12      	ldrb	r2, [r2, #16]
 80071a8:	f107 0108 	add.w	r1, r7, #8
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071b2:	e05d      	b.n	8007270 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa97 	bl	80076ea <USBD_CtlError>
            err++;
 80071bc:	7afb      	ldrb	r3, [r7, #11]
 80071be:	3301      	adds	r3, #1
 80071c0:	72fb      	strb	r3, [r7, #11]
          break;
 80071c2:	e055      	b.n	8007270 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	7c12      	ldrb	r2, [r2, #16]
 80071dc:	f107 0108 	add.w	r1, r7, #8
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
 80071e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071e6:	e043      	b.n	8007270 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa7d 	bl	80076ea <USBD_CtlError>
            err++;
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	3301      	adds	r3, #1
 80071f4:	72fb      	strb	r3, [r7, #11]
          break;
 80071f6:	e03b      	b.n	8007270 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	7c12      	ldrb	r2, [r2, #16]
 8007210:	f107 0108 	add.w	r1, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721a:	e029      	b.n	8007270 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa63 	bl	80076ea <USBD_CtlError>
            err++;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	3301      	adds	r3, #1
 8007228:	72fb      	strb	r3, [r7, #11]
          break;
 800722a:	e021      	b.n	8007270 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7c12      	ldrb	r2, [r2, #16]
 8007244:	f107 0108 	add.w	r1, r7, #8
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
 800724c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800724e:	e00f      	b.n	8007270 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa49 	bl	80076ea <USBD_CtlError>
            err++;
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	3301      	adds	r3, #1
 800725c:	72fb      	strb	r3, [r7, #11]
          break;
 800725e:	e007      	b.n	8007270 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa41 	bl	80076ea <USBD_CtlError>
          err++;
 8007268:	7afb      	ldrb	r3, [r7, #11]
 800726a:	3301      	adds	r3, #1
 800726c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800726e:	bf00      	nop
      }
      break;
 8007270:	e037      	b.n	80072e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7c1b      	ldrb	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007282:	f107 0208 	add.w	r2, r7, #8
 8007286:	4610      	mov	r0, r2
 8007288:	4798      	blx	r3
 800728a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800728c:	e029      	b.n	80072e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa2a 	bl	80076ea <USBD_CtlError>
        err++;
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	3301      	adds	r3, #1
 800729a:	72fb      	strb	r3, [r7, #11]
      break;
 800729c:	e021      	b.n	80072e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	7c1b      	ldrb	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10d      	bne.n	80072c2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	f107 0208 	add.w	r2, r7, #8
 80072b2:	4610      	mov	r0, r2
 80072b4:	4798      	blx	r3
 80072b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	2207      	movs	r2, #7
 80072be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072c0:	e00f      	b.n	80072e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa10 	bl	80076ea <USBD_CtlError>
        err++;
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	3301      	adds	r3, #1
 80072ce:	72fb      	strb	r3, [r7, #11]
      break;
 80072d0:	e007      	b.n	80072e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa08 	bl	80076ea <USBD_CtlError>
      err++;
 80072da:	7afb      	ldrb	r3, [r7, #11]
 80072dc:	3301      	adds	r3, #1
 80072de:	72fb      	strb	r3, [r7, #11]
      break;
 80072e0:	bf00      	nop
  }

  if (err != 0U)
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d11e      	bne.n	8007326 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d016      	beq.n	800731e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80072f0:	893b      	ldrh	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00e      	beq.n	8007314 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	88da      	ldrh	r2, [r3, #6]
 80072fa:	893b      	ldrh	r3, [r7, #8]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	bf28      	it	cs
 8007300:	4613      	movcs	r3, r2
 8007302:	b29b      	uxth	r3, r3
 8007304:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007306:	893b      	ldrh	r3, [r7, #8]
 8007308:	461a      	mov	r2, r3
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fa69 	bl	80077e4 <USBD_CtlSendData>
 8007312:	e009      	b.n	8007328 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9e7 	bl	80076ea <USBD_CtlError>
 800731c:	e004      	b.n	8007328 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 faba 	bl	8007898 <USBD_CtlSendStatus>
 8007324:	e000      	b.n	8007328 <USBD_GetDescriptor+0x320>
    return;
 8007326:	bf00      	nop
  }
}
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	889b      	ldrh	r3, [r3, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d131      	bne.n	80073a6 <USBD_SetAddress+0x76>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	88db      	ldrh	r3, [r3, #6]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d12d      	bne.n	80073a6 <USBD_SetAddress+0x76>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	885b      	ldrh	r3, [r3, #2]
 800734e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007350:	d829      	bhi.n	80073a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	885b      	ldrh	r3, [r3, #2]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d104      	bne.n	8007374 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9bc 	bl	80076ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007372:	e01d      	b.n	80073b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	7bfa      	ldrb	r2, [r7, #15]
 8007378:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 f8dd 	bl	8008540 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa86 	bl	8007898 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739a:	e009      	b.n	80073b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a4:	e004      	b.n	80073b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f99e 	bl	80076ea <USBD_CtlError>
  }
}
 80073ae:	bf00      	nop
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	885b      	ldrh	r3, [r3, #2]
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	4b4e      	ldr	r3, [pc, #312]	@ (8007508 <USBD_SetConfig+0x150>)
 80073ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007508 <USBD_SetConfig+0x150>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d905      	bls.n	80073e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f985 	bl	80076ea <USBD_CtlError>
    return USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e08c      	b.n	80074fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d002      	beq.n	80073f6 <USBD_SetConfig+0x3e>
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d029      	beq.n	8007448 <USBD_SetConfig+0x90>
 80073f4:	e075      	b.n	80074e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073f6:	4b44      	ldr	r3, [pc, #272]	@ (8007508 <USBD_SetConfig+0x150>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d020      	beq.n	8007440 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073fe:	4b42      	ldr	r3, [pc, #264]	@ (8007508 <USBD_SetConfig+0x150>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007408:	4b3f      	ldr	r3, [pc, #252]	@ (8007508 <USBD_SetConfig+0x150>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fe ffb9 	bl	8006386 <USBD_SetClassConfig>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f962 	bl	80076ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800742e:	e065      	b.n	80074fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa31 	bl	8007898 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2203      	movs	r2, #3
 800743a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800743e:	e05d      	b.n	80074fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa29 	bl	8007898 <USBD_CtlSendStatus>
      break;
 8007446:	e059      	b.n	80074fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007448:	4b2f      	ldr	r3, [pc, #188]	@ (8007508 <USBD_SetConfig+0x150>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d112      	bne.n	8007476 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007458:	4b2b      	ldr	r3, [pc, #172]	@ (8007508 <USBD_SetConfig+0x150>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007462:	4b29      	ldr	r3, [pc, #164]	@ (8007508 <USBD_SetConfig+0x150>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fe ffa8 	bl	80063be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fa12 	bl	8007898 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007474:	e042      	b.n	80074fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007476:	4b24      	ldr	r3, [pc, #144]	@ (8007508 <USBD_SetConfig+0x150>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d02a      	beq.n	80074da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7fe ff96 	bl	80063be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007492:	4b1d      	ldr	r3, [pc, #116]	@ (8007508 <USBD_SetConfig+0x150>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800749c:	4b1a      	ldr	r3, [pc, #104]	@ (8007508 <USBD_SetConfig+0x150>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fe ff6f 	bl	8006386 <USBD_SetClassConfig>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00f      	beq.n	80074d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f918 	bl	80076ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fe ff7b 	bl	80063be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074d0:	e014      	b.n	80074fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9e0 	bl	8007898 <USBD_CtlSendStatus>
      break;
 80074d8:	e010      	b.n	80074fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f9dc 	bl	8007898 <USBD_CtlSendStatus>
      break;
 80074e0:	e00c      	b.n	80074fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f900 	bl	80076ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <USBD_SetConfig+0x150>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7fe ff64 	bl	80063be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074f6:	2303      	movs	r3, #3
 80074f8:	73fb      	strb	r3, [r7, #15]
      break;
 80074fa:	bf00      	nop
  }

  return ret;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	200001e4 	.word	0x200001e4

0800750c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	88db      	ldrh	r3, [r3, #6]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d004      	beq.n	8007528 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8e2 	bl	80076ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007526:	e023      	b.n	8007570 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	dc02      	bgt.n	800753a <USBD_GetConfig+0x2e>
 8007534:	2b00      	cmp	r3, #0
 8007536:	dc03      	bgt.n	8007540 <USBD_GetConfig+0x34>
 8007538:	e015      	b.n	8007566 <USBD_GetConfig+0x5a>
 800753a:	2b03      	cmp	r3, #3
 800753c:	d00b      	beq.n	8007556 <USBD_GetConfig+0x4a>
 800753e:	e012      	b.n	8007566 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3308      	adds	r3, #8
 800754a:	2201      	movs	r2, #1
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f948 	bl	80077e4 <USBD_CtlSendData>
        break;
 8007554:	e00c      	b.n	8007570 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	2201      	movs	r2, #1
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f940 	bl	80077e4 <USBD_CtlSendData>
        break;
 8007564:	e004      	b.n	8007570 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8be 	bl	80076ea <USBD_CtlError>
        break;
 800756e:	bf00      	nop
}
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	2b02      	cmp	r3, #2
 800758e:	d81e      	bhi.n	80075ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	88db      	ldrh	r3, [r3, #6]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d004      	beq.n	80075a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f8a5 	bl	80076ea <USBD_CtlError>
        break;
 80075a0:	e01a      	b.n	80075d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f043 0202 	orr.w	r2, r3, #2
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	330c      	adds	r3, #12
 80075c2:	2202      	movs	r2, #2
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f90c 	bl	80077e4 <USBD_CtlSendData>
      break;
 80075cc:	e004      	b.n	80075d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f88a 	bl	80076ea <USBD_CtlError>
      break;
 80075d6:	bf00      	nop
  }
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	885b      	ldrh	r3, [r3, #2]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d107      	bne.n	8007602 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f94c 	bl	8007898 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007600:	e013      	b.n	800762a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d10b      	bne.n	8007622 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	889b      	ldrh	r3, [r3, #4]
 800760e:	0a1b      	lsrs	r3, r3, #8
 8007610:	b29b      	uxth	r3, r3
 8007612:	b2da      	uxtb	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f93c 	bl	8007898 <USBD_CtlSendStatus>
}
 8007620:	e003      	b.n	800762a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f860 	bl	80076ea <USBD_CtlError>
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007642:	b2db      	uxtb	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	2b02      	cmp	r3, #2
 8007648:	d80b      	bhi.n	8007662 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10c      	bne.n	800766c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f91c 	bl	8007898 <USBD_CtlSendStatus>
      }
      break;
 8007660:	e004      	b.n	800766c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f840 	bl	80076ea <USBD_CtlError>
      break;
 800766a:	e000      	b.n	800766e <USBD_ClrFeature+0x3c>
      break;
 800766c:	bf00      	nop
  }
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	781a      	ldrb	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff fa16 	bl	8006ad2 <SWAPBYTE>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3301      	adds	r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff fa09 	bl	8006ad2 <SWAPBYTE>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff f9fc 	bl	8006ad2 <SWAPBYTE>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	80da      	strh	r2, [r3, #6]
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f4:	2180      	movs	r1, #128	@ 0x80
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fe8a 	bl	8008410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076fc:	2100      	movs	r1, #0
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fe86 	bl	8008410 <USBD_LL_StallEP>
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d042      	beq.n	80077a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007726:	6938      	ldr	r0, [r7, #16]
 8007728:	f000 f842 	bl	80077b0 <USBD_GetLen>
 800772c:	4603      	mov	r3, r0
 800772e:	3301      	adds	r3, #1
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007736:	d808      	bhi.n	800774a <USBD_GetString+0x3e>
 8007738:	6938      	ldr	r0, [r7, #16]
 800773a:	f000 f839 	bl	80077b0 <USBD_GetLen>
 800773e:	4603      	mov	r3, r0
 8007740:	3301      	adds	r3, #1
 8007742:	b29b      	uxth	r3, r3
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	e001      	b.n	800774e <USBD_GetString+0x42>
 800774a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	4413      	add	r3, r2
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7812      	ldrb	r2, [r2, #0]
 800775c:	701a      	strb	r2, [r3, #0]
  idx++;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	3301      	adds	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	4413      	add	r3, r2
 800776a:	2203      	movs	r2, #3
 800776c:	701a      	strb	r2, [r3, #0]
  idx++;
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	3301      	adds	r3, #1
 8007772:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007774:	e013      	b.n	800779e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	4413      	add	r3, r2
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	7812      	ldrb	r2, [r2, #0]
 8007780:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3301      	adds	r3, #1
 8007786:	613b      	str	r3, [r7, #16]
    idx++;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	3301      	adds	r3, #1
 800778c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4413      	add	r3, r2
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
    idx++;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	3301      	adds	r3, #1
 800779c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e7      	bne.n	8007776 <USBD_GetString+0x6a>
 80077a6:	e000      	b.n	80077aa <USBD_GetString+0x9e>
    return;
 80077a8:	bf00      	nop
  }
}
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077c0:	e005      	b.n	80077ce <USBD_GetLen+0x1e>
  {
    len++;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	3301      	adds	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1f5      	bne.n	80077c2 <USBD_GetLen+0x12>
  }

  return len;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	2100      	movs	r1, #0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fece 	bl	80085ac <USBD_LL_Transmit>

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	2100      	movs	r1, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 febd 	bl	80085ac <USBD_LL_Transmit>

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2203      	movs	r2, #3
 800784c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	2100      	movs	r1, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fed8 	bl	800861c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	2100      	movs	r1, #0
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fec7 	bl	800861c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2204      	movs	r2, #4
 80078a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078a8:	2300      	movs	r3, #0
 80078aa:	2200      	movs	r2, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fe7c 	bl	80085ac <USBD_LL_Transmit>

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2205      	movs	r2, #5
 80078ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ce:	2300      	movs	r3, #0
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fea1 	bl	800861c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078e8:	2200      	movs	r2, #0
 80078ea:	4912      	ldr	r1, [pc, #72]	@ (8007934 <MX_USB_DEVICE_Init+0x50>)
 80078ec:	4812      	ldr	r0, [pc, #72]	@ (8007938 <MX_USB_DEVICE_Init+0x54>)
 80078ee:	f7fe fccd 	bl	800628c <USBD_Init>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078f8:	f7f8 fed2 	bl	80006a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078fc:	490f      	ldr	r1, [pc, #60]	@ (800793c <MX_USB_DEVICE_Init+0x58>)
 80078fe:	480e      	ldr	r0, [pc, #56]	@ (8007938 <MX_USB_DEVICE_Init+0x54>)
 8007900:	f7fe fcf4 	bl	80062ec <USBD_RegisterClass>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800790a:	f7f8 fec9 	bl	80006a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800790e:	490c      	ldr	r1, [pc, #48]	@ (8007940 <MX_USB_DEVICE_Init+0x5c>)
 8007910:	4809      	ldr	r0, [pc, #36]	@ (8007938 <MX_USB_DEVICE_Init+0x54>)
 8007912:	f7fe fbeb 	bl	80060ec <USBD_CDC_RegisterInterface>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800791c:	f7f8 fec0 	bl	80006a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007920:	4805      	ldr	r0, [pc, #20]	@ (8007938 <MX_USB_DEVICE_Init+0x54>)
 8007922:	f7fe fd19 	bl	8006358 <USBD_Start>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800792c:	f7f8 feb8 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007930:	bf00      	nop
 8007932:	bd80      	pop	{r7, pc}
 8007934:	200000ac 	.word	0x200000ac
 8007938:	200001e8 	.word	0x200001e8
 800793c:	20000018 	.word	0x20000018
 8007940:	20000098 	.word	0x20000098

08007944 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007948:	2200      	movs	r2, #0
 800794a:	4907      	ldr	r1, [pc, #28]	@ (8007968 <CDC_Init_FS+0x24>)
 800794c:	4807      	ldr	r0, [pc, #28]	@ (800796c <CDC_Init_FS+0x28>)
 800794e:	f7fe fbe7 	bl	8006120 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007952:	4907      	ldr	r1, [pc, #28]	@ (8007970 <CDC_Init_FS+0x2c>)
 8007954:	4805      	ldr	r0, [pc, #20]	@ (800796c <CDC_Init_FS+0x28>)
 8007956:	f7fe fc05 	bl	8006164 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800795a:	4804      	ldr	r0, [pc, #16]	@ (800796c <CDC_Init_FS+0x28>)
 800795c:	f7fe fc60 	bl	8006220 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007960:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007962:	4618      	mov	r0, r3
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000d48 	.word	0x20000d48
 800796c:	200001e8 	.word	0x200001e8
 8007970:	20000548 	.word	0x20000548

08007974 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007978:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800797a:	4618      	mov	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	6039      	str	r1, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
 8007990:	4613      	mov	r3, r2
 8007992:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b23      	cmp	r3, #35	@ 0x23
 8007998:	d84a      	bhi.n	8007a30 <CDC_Control_FS+0xac>
 800799a:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <CDC_Control_FS+0x1c>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	08007a31 	.word	0x08007a31
 80079a4:	08007a31 	.word	0x08007a31
 80079a8:	08007a31 	.word	0x08007a31
 80079ac:	08007a31 	.word	0x08007a31
 80079b0:	08007a31 	.word	0x08007a31
 80079b4:	08007a31 	.word	0x08007a31
 80079b8:	08007a31 	.word	0x08007a31
 80079bc:	08007a31 	.word	0x08007a31
 80079c0:	08007a31 	.word	0x08007a31
 80079c4:	08007a31 	.word	0x08007a31
 80079c8:	08007a31 	.word	0x08007a31
 80079cc:	08007a31 	.word	0x08007a31
 80079d0:	08007a31 	.word	0x08007a31
 80079d4:	08007a31 	.word	0x08007a31
 80079d8:	08007a31 	.word	0x08007a31
 80079dc:	08007a31 	.word	0x08007a31
 80079e0:	08007a31 	.word	0x08007a31
 80079e4:	08007a31 	.word	0x08007a31
 80079e8:	08007a31 	.word	0x08007a31
 80079ec:	08007a31 	.word	0x08007a31
 80079f0:	08007a31 	.word	0x08007a31
 80079f4:	08007a31 	.word	0x08007a31
 80079f8:	08007a31 	.word	0x08007a31
 80079fc:	08007a31 	.word	0x08007a31
 8007a00:	08007a31 	.word	0x08007a31
 8007a04:	08007a31 	.word	0x08007a31
 8007a08:	08007a31 	.word	0x08007a31
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a31 	.word	0x08007a31
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	08007a31 	.word	0x08007a31
 8007a1c:	08007a31 	.word	0x08007a31
 8007a20:	08007a31 	.word	0x08007a31
 8007a24:	08007a31 	.word	0x08007a31
 8007a28:	08007a31 	.word	0x08007a31
 8007a2c:	08007a31 	.word	0x08007a31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a30:	bf00      	nop
  }

  return (USBD_OK);
 8007a32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b0c6      	sub	sp, #280	@ 0x118
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007a4e:	6018      	str	r0, [r3, #0]
 8007a50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007a58:	6019      	str	r1, [r3, #0]
  /* USER CODE BEGIN 6 */

    char temp[CMD_BUFFER_SIZE*2];
    uint8_t valid = 0; 
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
      for (uint32_t i = 0; i < *Len; i++) {
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007a66:	e0ba      	b.n	8007bde <CDC_Receive_FS+0x19e>
          char c = (char)Buf[i];
 8007a68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a76:	4413      	add	r3, r2
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
          uint8_t u = (uint8_t)c;
 8007a7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007a82:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8007a86:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8007a8a:	701a      	strb	r2, [r3, #0]
  
          // Echo every char back
          if (c != '\r' && c != '\n') {
 8007a8c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007a90:	2b0d      	cmp	r3, #13
 8007a92:	d01a      	beq.n	8007aca <CDC_Receive_FS+0x8a>
 8007a94:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007a98:	2b0a      	cmp	r3, #10
 8007a9a:	d016      	beq.n	8007aca <CDC_Receive_FS+0x8a>
              // block until endpoint is free
              CDC_Transmit_FS(&u, 1);
 8007a9c:	f107 030b 	add.w	r3, r7, #11
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f8d4 	bl	8007c50 <CDC_Transmit_FS>
              
              if (command_index < CMD_BUFFER_SIZE - 1) {
 8007aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8007c18 <CDC_Receive_FS+0x1d8>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b7e      	cmp	r3, #126	@ 0x7e
 8007aae:	f200 8090 	bhi.w	8007bd2 <CDC_Receive_FS+0x192>
                  command_buffer[command_index++] = c;
 8007ab2:	4b59      	ldr	r3, [pc, #356]	@ (8007c18 <CDC_Receive_FS+0x1d8>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	b2d1      	uxtb	r1, r2
 8007aba:	4a57      	ldr	r2, [pc, #348]	@ (8007c18 <CDC_Receive_FS+0x1d8>)
 8007abc:	7011      	strb	r1, [r2, #0]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4a56      	ldr	r2, [pc, #344]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007ac2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007ac6:	5453      	strb	r3, [r2, r1]
 8007ac8:	e084      	b.n	8007bd4 <CDC_Receive_FS+0x194>
              }
              continue;
          }
          
          // Terminate command
          command_buffer[command_index] = '\0';
 8007aca:	4b53      	ldr	r3, [pc, #332]	@ (8007c18 <CDC_Receive_FS+0x1d8>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4b52      	ldr	r3, [pc, #328]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	5499      	strb	r1, [r3, r2]
  
          if (command_index > 0) {
 8007ad6:	4b50      	ldr	r3, [pc, #320]	@ (8007c18 <CDC_Receive_FS+0x1d8>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d07a      	beq.n	8007bd4 <CDC_Receive_FS+0x194>
              // your command logic
              if (strcmp(command_buffer, "LED2 on") == 0) {
 8007ade:	4950      	ldr	r1, [pc, #320]	@ (8007c20 <CDC_Receive_FS+0x1e0>)
 8007ae0:	484e      	ldr	r0, [pc, #312]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007ae2:	f7f8 fb8d 	bl	8000200 <strcmp>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <CDC_Receive_FS+0xba>
                  LED2_flag = 1;
 8007aec:	4b4d      	ldr	r3, [pc, #308]	@ (8007c24 <CDC_Receive_FS+0x1e4>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8007af8:	e00c      	b.n	8007b14 <CDC_Receive_FS+0xd4>
              }
              else if (strcmp(command_buffer, "LED2 off") == 0) {
 8007afa:	494b      	ldr	r1, [pc, #300]	@ (8007c28 <CDC_Receive_FS+0x1e8>)
 8007afc:	4847      	ldr	r0, [pc, #284]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007afe:	f7f8 fb7f 	bl	8000200 <strcmp>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <CDC_Receive_FS+0xd4>
                  LED2_flag = 0;
 8007b08:	4b46      	ldr	r3, [pc, #280]	@ (8007c24 <CDC_Receive_FS+0x1e4>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
              
              // Prompting Pump 3
              if (strcmp(command_buffer, "Pump3 on forward") == 0){
 8007b14:	4945      	ldr	r1, [pc, #276]	@ (8007c2c <CDC_Receive_FS+0x1ec>)
 8007b16:	4841      	ldr	r0, [pc, #260]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007b18:	f7f8 fb72 	bl	8000200 <strcmp>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <CDC_Receive_FS+0xf6>
                Pump3_flag = 1; 
 8007b22:	4b43      	ldr	r3, [pc, #268]	@ (8007c30 <CDC_Receive_FS+0x1f0>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 1; 
 8007b28:	4b42      	ldr	r3, [pc, #264]	@ (8007c34 <CDC_Receive_FS+0x1f4>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8007b34:	e00f      	b.n	8007b56 <CDC_Receive_FS+0x116>
              }
              else if (strcmp(command_buffer, "Pump3 on backward") == 0){
 8007b36:	4940      	ldr	r1, [pc, #256]	@ (8007c38 <CDC_Receive_FS+0x1f8>)
 8007b38:	4838      	ldr	r0, [pc, #224]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007b3a:	f7f8 fb61 	bl	8000200 <strcmp>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d108      	bne.n	8007b56 <CDC_Receive_FS+0x116>
                Pump3_flag = 1; 
 8007b44:	4b3a      	ldr	r3, [pc, #232]	@ (8007c30 <CDC_Receive_FS+0x1f0>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 0; 
 8007b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8007c34 <CDC_Receive_FS+0x1f4>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }

              // timer test 
              if (strcmp(command_buffer, "Timer on") == 0){
 8007b56:	4939      	ldr	r1, [pc, #228]	@ (8007c3c <CDC_Receive_FS+0x1fc>)
 8007b58:	4830      	ldr	r0, [pc, #192]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007b5a:	f7f8 fb51 	bl	8000200 <strcmp>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <CDC_Receive_FS+0x130>
                Timer6_flag = 1; 
 8007b64:	4b36      	ldr	r3, [pc, #216]	@ (8007c40 <CDC_Receive_FS+0x200>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
  
              if (valid)
 8007b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d014      	beq.n	8007ba2 <CDC_Receive_FS+0x162>
              {
                sprintf(temp, "\r\nReceieved: %s\r\n> ", command_buffer);
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	4a27      	ldr	r2, [pc, #156]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007b7e:	4931      	ldr	r1, [pc, #196]	@ (8007c44 <CDC_Receive_FS+0x204>)
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 ff35 	bl	80089f0 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8007b86:	f107 030c 	add.w	r3, r7, #12
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7f8 fb42 	bl	8000214 <strlen>
 8007b90:	4603      	mov	r3, r0
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f107 030c 	add.w	r3, r7, #12
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f858 	bl	8007c50 <CDC_Transmit_FS>
 8007ba0:	e013      	b.n	8007bca <CDC_Receive_FS+0x18a>
              }
              else 
              {
                sprintf(temp, "\r\nError Commaand:%s\r\n> ", command_buffer);
 8007ba2:	f107 030c 	add.w	r3, r7, #12
 8007ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8007c1c <CDC_Receive_FS+0x1dc>)
 8007ba8:	4927      	ldr	r1, [pc, #156]	@ (8007c48 <CDC_Receive_FS+0x208>)
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 ff20 	bl	80089f0 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8007bb0:	f107 030c 	add.w	r3, r7, #12
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7f8 fb2d 	bl	8000214 <strlen>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f107 030c 	add.w	r3, r7, #12
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 f843 	bl	8007c50 <CDC_Transmit_FS>
              }
              command_index = 0;
 8007bca:	4b13      	ldr	r3, [pc, #76]	@ (8007c18 <CDC_Receive_FS+0x1d8>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e000      	b.n	8007bd4 <CDC_Receive_FS+0x194>
              continue;
 8007bd2:	bf00      	nop
      for (uint32_t i = 0; i < *Len; i++) {
 8007bd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007bd8:	3301      	adds	r3, #1
 8007bda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007bde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007be2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	f4ff af3a 	bcc.w	8007a68 <CDC_Receive_FS+0x28>
          }
  
      }
  
      // 4) re-arm USB to receive more
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8007bf4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007bf8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007bfc:	6819      	ldr	r1, [r3, #0]
 8007bfe:	4813      	ldr	r0, [pc, #76]	@ (8007c4c <CDC_Receive_FS+0x20c>)
 8007c00:	f7fe fab0 	bl	8006164 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c04:	4811      	ldr	r0, [pc, #68]	@ (8007c4c <CDC_Receive_FS+0x20c>)
 8007c06:	f7fe fb0b 	bl	8006220 <USBD_CDC_ReceivePacket>
      return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000544 	.word	0x20000544
 8007c1c:	200004c4 	.word	0x200004c4
 8007c20:	08009a84 	.word	0x08009a84
 8007c24:	200001d0 	.word	0x200001d0
 8007c28:	08009a8c 	.word	0x08009a8c
 8007c2c:	08009a98 	.word	0x08009a98
 8007c30:	200001d1 	.word	0x200001d1
 8007c34:	200001d2 	.word	0x200001d2
 8007c38:	08009aac 	.word	0x08009aac
 8007c3c:	08009ac0 	.word	0x08009ac0
 8007c40:	200001d3 	.word	0x200001d3
 8007c44:	08009acc 	.word	0x08009acc
 8007c48:	08009ae0 	.word	0x08009ae0
 8007c4c:	200001e8 	.word	0x200001e8

08007c50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c60:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <CDC_Transmit_FS+0x48>)
 8007c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e00b      	b.n	8007c8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c76:	887b      	ldrh	r3, [r7, #2]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4806      	ldr	r0, [pc, #24]	@ (8007c98 <CDC_Transmit_FS+0x48>)
 8007c7e:	f7fe fa4f 	bl	8006120 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c82:	4805      	ldr	r0, [pc, #20]	@ (8007c98 <CDC_Transmit_FS+0x48>)
 8007c84:	f7fe fa8c 	bl	80061a0 <USBD_CDC_TransmitPacket>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	200001e8 	.word	0x200001e8

08007c9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2212      	movs	r2, #18
 8007cd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cd2:	4b03      	ldr	r3, [pc, #12]	@ (8007ce0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	200000cc 	.word	0x200000cc

08007ce4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cf6:	4b03      	ldr	r3, [pc, #12]	@ (8007d04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	200000ec 	.word	0x200000ec

08007d08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	6039      	str	r1, [r7, #0]
 8007d12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	4907      	ldr	r1, [pc, #28]	@ (8007d3c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d1e:	4808      	ldr	r0, [pc, #32]	@ (8007d40 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d20:	f7ff fcf4 	bl	800770c <USBD_GetString>
 8007d24:	e004      	b.n	8007d30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	4904      	ldr	r1, [pc, #16]	@ (8007d3c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d2a:	4805      	ldr	r0, [pc, #20]	@ (8007d40 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d2c:	f7ff fcee 	bl	800770c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d30:	4b02      	ldr	r3, [pc, #8]	@ (8007d3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20001548 	.word	0x20001548
 8007d40:	08009af8 	.word	0x08009af8

08007d44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	4904      	ldr	r1, [pc, #16]	@ (8007d64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d54:	4804      	ldr	r0, [pc, #16]	@ (8007d68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d56:	f7ff fcd9 	bl	800770c <USBD_GetString>
  return USBD_StrDesc;
 8007d5a:	4b02      	ldr	r3, [pc, #8]	@ (8007d64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20001548 	.word	0x20001548
 8007d68:	08009b10 	.word	0x08009b10

08007d6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	6039      	str	r1, [r7, #0]
 8007d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	221a      	movs	r2, #26
 8007d7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d7e:	f000 f855 	bl	8007e2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d82:	4b02      	ldr	r3, [pc, #8]	@ (8007d8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	200000f0 	.word	0x200000f0

08007d90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	6039      	str	r1, [r7, #0]
 8007d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	4907      	ldr	r1, [pc, #28]	@ (8007dc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007da6:	4808      	ldr	r0, [pc, #32]	@ (8007dc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007da8:	f7ff fcb0 	bl	800770c <USBD_GetString>
 8007dac:	e004      	b.n	8007db8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	4904      	ldr	r1, [pc, #16]	@ (8007dc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007db2:	4805      	ldr	r0, [pc, #20]	@ (8007dc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007db4:	f7ff fcaa 	bl	800770c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007db8:	4b02      	ldr	r3, [pc, #8]	@ (8007dc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20001548 	.word	0x20001548
 8007dc8:	08009b24 	.word	0x08009b24

08007dcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	6039      	str	r1, [r7, #0]
 8007dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d105      	bne.n	8007dea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	4907      	ldr	r1, [pc, #28]	@ (8007e00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007de2:	4808      	ldr	r0, [pc, #32]	@ (8007e04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007de4:	f7ff fc92 	bl	800770c <USBD_GetString>
 8007de8:	e004      	b.n	8007df4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	4904      	ldr	r1, [pc, #16]	@ (8007e00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dee:	4805      	ldr	r0, [pc, #20]	@ (8007e04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007df0:	f7ff fc8c 	bl	800770c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007df4:	4b02      	ldr	r3, [pc, #8]	@ (8007e00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20001548 	.word	0x20001548
 8007e04:	08009b30 	.word	0x08009b30

08007e08 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	220c      	movs	r2, #12
 8007e18:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007e1a:	4b03      	ldr	r3, [pc, #12]	@ (8007e28 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	200000e0 	.word	0x200000e0

08007e2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e32:	4b0f      	ldr	r3, [pc, #60]	@ (8007e70 <Get_SerialNum+0x44>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e38:	4b0e      	ldr	r3, [pc, #56]	@ (8007e74 <Get_SerialNum+0x48>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e78 <Get_SerialNum+0x4c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4413      	add	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e52:	2208      	movs	r2, #8
 8007e54:	4909      	ldr	r1, [pc, #36]	@ (8007e7c <Get_SerialNum+0x50>)
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f814 	bl	8007e84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	4908      	ldr	r1, [pc, #32]	@ (8007e80 <Get_SerialNum+0x54>)
 8007e60:	68b8      	ldr	r0, [r7, #8]
 8007e62:	f000 f80f 	bl	8007e84 <IntToUnicode>
  }
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	1fff7590 	.word	0x1fff7590
 8007e74:	1fff7594 	.word	0x1fff7594
 8007e78:	1fff7598 	.word	0x1fff7598
 8007e7c:	200000f2 	.word	0x200000f2
 8007e80:	20000102 	.word	0x20000102

08007e84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
 8007e9a:	e027      	b.n	8007eec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	0f1b      	lsrs	r3, r3, #28
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	d80b      	bhi.n	8007ebc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	0f1b      	lsrs	r3, r3, #28
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4619      	mov	r1, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	440b      	add	r3, r1
 8007eb4:	3230      	adds	r2, #48	@ 0x30
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	701a      	strb	r2, [r3, #0]
 8007eba:	e00a      	b.n	8007ed2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	0f1b      	lsrs	r3, r3, #28
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	440b      	add	r3, r1
 8007ecc:	3237      	adds	r2, #55	@ 0x37
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	3301      	adds	r3, #1
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	75fb      	strb	r3, [r7, #23]
 8007eec:	7dfa      	ldrb	r2, [r7, #23]
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d3d3      	bcc.n	8007e9c <IntToUnicode+0x18>
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b0b0      	sub	sp, #192	@ 0xc0
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	605a      	str	r2, [r3, #4]
 8007f16:	609a      	str	r2, [r3, #8]
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f1c:	f107 0314 	add.w	r3, r7, #20
 8007f20:	2298      	movs	r2, #152	@ 0x98
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fe5b 	bl	8008be0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f32:	d173      	bne.n	800801c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007f38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007f3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007f3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007f42:	2303      	movs	r3, #3
 8007f44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007f46:	2301      	movs	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8007f4a:	230c      	movs	r3, #12
 8007f4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007f52:	2302      	movs	r3, #2
 8007f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007f56:	2302      	movs	r3, #2
 8007f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007f5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fb f9bf 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007f70:	f7f8 fb96 	bl	80006a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f74:	4b2b      	ldr	r3, [pc, #172]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f78:	4a2a      	ldr	r2, [pc, #168]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f80:	4b28      	ldr	r3, [pc, #160]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f94:	2302      	movs	r3, #2
 8007f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fa6:	230a      	movs	r3, #10
 8007fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007fb6:	f7f8 fe75 	bl	8000ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fba:	4b1a      	ldr	r3, [pc, #104]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fbe:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007fc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fc6:	4b17      	ldr	r3, [pc, #92]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fd2:	4b14      	ldr	r3, [pc, #80]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d114      	bne.n	8008008 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fde:	4b11      	ldr	r3, [pc, #68]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe2:	4a10      	ldr	r2, [pc, #64]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fea:	4b0e      	ldr	r3, [pc, #56]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007ff6:	f7fa fa59 	bl	80024ac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ffe:	4a09      	ldr	r2, [pc, #36]	@ (8008024 <HAL_PCD_MspInit+0x120>)
 8008000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008004:	6593      	str	r3, [r2, #88]	@ 0x58
 8008006:	e001      	b.n	800800c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008008:	f7fa fa50 	bl	80024ac <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	2043      	movs	r0, #67	@ 0x43
 8008012:	f7f8 fe10 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008016:	2043      	movs	r0, #67	@ 0x43
 8008018:	f7f8 fe29 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800801c:	bf00      	nop
 800801e:	37c0      	adds	r7, #192	@ 0xc0
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40021000 	.word	0x40021000

08008028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f7fe f9d7 	bl	80063f2 <USBD_LL_SetupStage>
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800805e:	78fa      	ldrb	r2, [r7, #3]
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	78fb      	ldrb	r3, [r7, #3]
 8008074:	4619      	mov	r1, r3
 8008076:	f7fe fa11 	bl	800649c <USBD_LL_DataOutStage>
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008094:	78fa      	ldrb	r2, [r7, #3]
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	4613      	mov	r3, r2
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	3320      	adds	r3, #32
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7fe faaa 	bl	8006602 <USBD_LL_DataInStage>
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fbe4 	bl	8006892 <USBD_LL_SOF>
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080da:	2301      	movs	r3, #1
 80080dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	79db      	ldrb	r3, [r3, #7]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d001      	beq.n	80080ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080e6:	f7f8 fadb 	bl	80006a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080f0:	7bfa      	ldrb	r2, [r7, #15]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fb88 	bl	800680a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fb30 	bl	8006766 <USBD_LL_Reset>
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fb77 	bl	800682a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7adb      	ldrb	r3, [r3, #11]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d005      	beq.n	8008150 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008144:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <HAL_PCD_SuspendCallback+0x48>)
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	4a03      	ldr	r2, [pc, #12]	@ (8008158 <HAL_PCD_SuspendCallback+0x48>)
 800814a:	f043 0306 	orr.w	r3, r3, #6
 800814e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed00 	.word	0xe000ed00

0800815c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7adb      	ldrb	r3, [r3, #11]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008184:	4b08      	ldr	r3, [pc, #32]	@ (80081a8 <HAL_PCD_ResumeCallback+0x4c>)
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	4a07      	ldr	r2, [pc, #28]	@ (80081a8 <HAL_PCD_ResumeCallback+0x4c>)
 800818a:	f023 0306 	bic.w	r3, r3, #6
 800818e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008190:	f000 faf6 	bl	8008780 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fb61 	bl	8006862 <USBD_LL_Resume>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	e000ed00 	.word	0xe000ed00

080081ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fbb7 	bl	8006936 <USBD_LL_IsoOUTIncomplete>
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081e2:	78fa      	ldrb	r2, [r7, #3]
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fb73 	bl	80068d2 <USBD_LL_IsoINIncomplete>
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe fbc9 	bl	800699a <USBD_LL_DevConnected>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fbc6 	bl	80069b0 <USBD_LL_DevDisconnected>
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d13c      	bne.n	80082b6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800823c:	4a20      	ldr	r2, [pc, #128]	@ (80082c0 <USBD_LL_Init+0x94>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a1e      	ldr	r2, [pc, #120]	@ (80082c0 <USBD_LL_Init+0x94>)
 8008248:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800824c:	4b1c      	ldr	r3, [pc, #112]	@ (80082c0 <USBD_LL_Init+0x94>)
 800824e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008252:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008254:	4b1a      	ldr	r3, [pc, #104]	@ (80082c0 <USBD_LL_Init+0x94>)
 8008256:	2206      	movs	r2, #6
 8008258:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800825a:	4b19      	ldr	r3, [pc, #100]	@ (80082c0 <USBD_LL_Init+0x94>)
 800825c:	2202      	movs	r2, #2
 800825e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008260:	4b17      	ldr	r3, [pc, #92]	@ (80082c0 <USBD_LL_Init+0x94>)
 8008262:	2202      	movs	r2, #2
 8008264:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008266:	4b16      	ldr	r3, [pc, #88]	@ (80082c0 <USBD_LL_Init+0x94>)
 8008268:	2200      	movs	r2, #0
 800826a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800826c:	4b14      	ldr	r3, [pc, #80]	@ (80082c0 <USBD_LL_Init+0x94>)
 800826e:	2200      	movs	r2, #0
 8008270:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008272:	4b13      	ldr	r3, [pc, #76]	@ (80082c0 <USBD_LL_Init+0x94>)
 8008274:	2200      	movs	r2, #0
 8008276:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008278:	4b11      	ldr	r3, [pc, #68]	@ (80082c0 <USBD_LL_Init+0x94>)
 800827a:	2200      	movs	r2, #0
 800827c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800827e:	4b10      	ldr	r3, [pc, #64]	@ (80082c0 <USBD_LL_Init+0x94>)
 8008280:	2200      	movs	r2, #0
 8008282:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008284:	4b0e      	ldr	r3, [pc, #56]	@ (80082c0 <USBD_LL_Init+0x94>)
 8008286:	2200      	movs	r2, #0
 8008288:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800828a:	480d      	ldr	r0, [pc, #52]	@ (80082c0 <USBD_LL_Init+0x94>)
 800828c:	f7f8 feb4 	bl	8000ff8 <HAL_PCD_Init>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008296:	f7f8 fa03 	bl	80006a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800829a:	2180      	movs	r1, #128	@ 0x80
 800829c:	4808      	ldr	r0, [pc, #32]	@ (80082c0 <USBD_LL_Init+0x94>)
 800829e:	f7fa f80c 	bl	80022ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082a2:	2240      	movs	r2, #64	@ 0x40
 80082a4:	2100      	movs	r1, #0
 80082a6:	4806      	ldr	r0, [pc, #24]	@ (80082c0 <USBD_LL_Init+0x94>)
 80082a8:	f7f9 ffc0 	bl	800222c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082ac:	2280      	movs	r2, #128	@ 0x80
 80082ae:	2101      	movs	r1, #1
 80082b0:	4803      	ldr	r0, [pc, #12]	@ (80082c0 <USBD_LL_Init+0x94>)
 80082b2:	f7f9 ffbb 	bl	800222c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20001748 	.word	0x20001748

080082c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f8 ff9b 	bl	8001216 <HAL_PCD_Start>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d816      	bhi.n	8008318 <USBD_LL_Start+0x54>
 80082ea:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <USBD_LL_Start+0x2c>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008301 	.word	0x08008301
 80082f4:	08008307 	.word	0x08008307
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	08008313 	.word	0x08008313
    case HAL_OK :
      usb_status = USBD_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	e00b      	b.n	800831e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008306:	2303      	movs	r3, #3
 8008308:	73fb      	strb	r3, [r7, #15]
    break;
 800830a:	e008      	b.n	800831e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
    break;
 8008310:	e005      	b.n	800831e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008312:	2303      	movs	r3, #3
 8008314:	73fb      	strb	r3, [r7, #15]
    break;
 8008316:	e002      	b.n	800831e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008318:	2303      	movs	r3, #3
 800831a:	73fb      	strb	r3, [r7, #15]
    break;
 800831c:	bf00      	nop
  }
  return usb_status;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	461a      	mov	r2, r3
 8008336:	4603      	mov	r3, r0
 8008338:	70fb      	strb	r3, [r7, #3]
 800833a:	460b      	mov	r3, r1
 800833c:	70bb      	strb	r3, [r7, #2]
 800833e:	4613      	mov	r3, r2
 8008340:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008350:	78bb      	ldrb	r3, [r7, #2]
 8008352:	883a      	ldrh	r2, [r7, #0]
 8008354:	78f9      	ldrb	r1, [r7, #3]
 8008356:	f7f9 fc47 	bl	8001be8 <HAL_PCD_EP_Open>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d817      	bhi.n	8008394 <USBD_LL_OpenEP+0x6c>
 8008364:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <USBD_LL_OpenEP+0x44>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	0800837d 	.word	0x0800837d
 8008370:	08008383 	.word	0x08008383
 8008374:	08008389 	.word	0x08008389
 8008378:	0800838f 	.word	0x0800838f
    case HAL_OK :
      usb_status = USBD_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
    break;
 8008380:	e00b      	b.n	800839a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008382:	2303      	movs	r3, #3
 8008384:	73fb      	strb	r3, [r7, #15]
    break;
 8008386:	e008      	b.n	800839a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
    break;
 800838c:	e005      	b.n	800839a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800838e:	2303      	movs	r3, #3
 8008390:	73fb      	strb	r3, [r7, #15]
    break;
 8008392:	e002      	b.n	800839a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008394:	2303      	movs	r3, #3
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	bf00      	nop
  }
  return usb_status;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	4611      	mov	r1, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f9 fc7a 	bl	8001cbc <HAL_PCD_EP_Close>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d816      	bhi.n	8008400 <USBD_LL_CloseEP+0x5c>
 80083d2:	a201      	add	r2, pc, #4	@ (adr r2, 80083d8 <USBD_LL_CloseEP+0x34>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	080083ef 	.word	0x080083ef
 80083e0:	080083f5 	.word	0x080083f5
 80083e4:	080083fb 	.word	0x080083fb
    case HAL_OK :
      usb_status = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
    break;
 80083ec:	e00b      	b.n	8008406 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083ee:	2303      	movs	r3, #3
 80083f0:	73fb      	strb	r3, [r7, #15]
    break;
 80083f2:	e008      	b.n	8008406 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	e005      	b.n	8008406 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083fa:	2303      	movs	r3, #3
 80083fc:	73fb      	strb	r3, [r7, #15]
    break;
 80083fe:	e002      	b.n	8008406 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008400:	2303      	movs	r3, #3
 8008402:	73fb      	strb	r3, [r7, #15]
    break;
 8008404:	bf00      	nop
  }
  return usb_status;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7f9 fd09 	bl	8001e46 <HAL_PCD_EP_SetStall>
 8008434:	4603      	mov	r3, r0
 8008436:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d816      	bhi.n	800846c <USBD_LL_StallEP+0x5c>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <USBD_LL_StallEP+0x34>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008455 	.word	0x08008455
 8008448:	0800845b 	.word	0x0800845b
 800844c:	08008461 	.word	0x08008461
 8008450:	08008467 	.word	0x08008467
    case HAL_OK :
      usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
    break;
 8008458:	e00b      	b.n	8008472 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800845a:	2303      	movs	r3, #3
 800845c:	73fb      	strb	r3, [r7, #15]
    break;
 800845e:	e008      	b.n	8008472 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
    break;
 8008464:	e005      	b.n	8008472 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008466:	2303      	movs	r3, #3
 8008468:	73fb      	strb	r3, [r7, #15]
    break;
 800846a:	e002      	b.n	8008472 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800846c:	2303      	movs	r3, #3
 800846e:	73fb      	strb	r3, [r7, #15]
    break;
 8008470:	bf00      	nop
  }
  return usb_status;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	4611      	mov	r1, r2
 800849a:	4618      	mov	r0, r3
 800849c:	f7f9 fd35 	bl	8001f0a <HAL_PCD_EP_ClrStall>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d816      	bhi.n	80084d8 <USBD_LL_ClearStallEP+0x5c>
 80084aa:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <USBD_LL_ClearStallEP+0x34>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084c7 	.word	0x080084c7
 80084b8:	080084cd 	.word	0x080084cd
 80084bc:	080084d3 	.word	0x080084d3
    case HAL_OK :
      usb_status = USBD_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
    break;
 80084c4:	e00b      	b.n	80084de <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084c6:	2303      	movs	r3, #3
 80084c8:	73fb      	strb	r3, [r7, #15]
    break;
 80084ca:	e008      	b.n	80084de <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
    break;
 80084d0:	e005      	b.n	80084de <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	73fb      	strb	r3, [r7, #15]
    break;
 80084d6:	e002      	b.n	80084de <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80084d8:	2303      	movs	r3, #3
 80084da:	73fb      	strb	r3, [r7, #15]
    break;
 80084dc:	bf00      	nop
  }
  return usb_status;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008500:	2b00      	cmp	r3, #0
 8008502:	da0b      	bge.n	800851c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	4613      	mov	r3, r2
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	3316      	adds	r3, #22
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	e00b      	b.n	8008534 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	4613      	mov	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008532:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7f9 fb1e 	bl	8001ba0 <HAL_PCD_SetAddress>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d816      	bhi.n	800859c <USBD_LL_SetUSBAddress+0x5c>
 800856e:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <USBD_LL_SetUSBAddress+0x34>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	08008585 	.word	0x08008585
 8008578:	0800858b 	.word	0x0800858b
 800857c:	08008591 	.word	0x08008591
 8008580:	08008597 	.word	0x08008597
    case HAL_OK :
      usb_status = USBD_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	e00b      	b.n	80085a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800858a:	2303      	movs	r3, #3
 800858c:	73fb      	strb	r3, [r7, #15]
    break;
 800858e:	e008      	b.n	80085a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
    break;
 8008594:	e005      	b.n	80085a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	73fb      	strb	r3, [r7, #15]
    break;
 800859a:	e002      	b.n	80085a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	73fb      	strb	r3, [r7, #15]
    break;
 80085a0:	bf00      	nop
  }
  return usb_status;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	460b      	mov	r3, r1
 80085ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085ca:	7af9      	ldrb	r1, [r7, #11]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	f7f9 fc08 	bl	8001de4 <HAL_PCD_EP_Transmit>
 80085d4:	4603      	mov	r3, r0
 80085d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80085d8:	7dbb      	ldrb	r3, [r7, #22]
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d816      	bhi.n	800860c <USBD_LL_Transmit+0x60>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <USBD_LL_Transmit+0x38>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	080085f5 	.word	0x080085f5
 80085e8:	080085fb 	.word	0x080085fb
 80085ec:	08008601 	.word	0x08008601
 80085f0:	08008607 	.word	0x08008607
    case HAL_OK :
      usb_status = USBD_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	75fb      	strb	r3, [r7, #23]
    break;
 80085f8:	e00b      	b.n	8008612 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085fa:	2303      	movs	r3, #3
 80085fc:	75fb      	strb	r3, [r7, #23]
    break;
 80085fe:	e008      	b.n	8008612 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008600:	2301      	movs	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
    break;
 8008604:	e005      	b.n	8008612 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008606:	2303      	movs	r3, #3
 8008608:	75fb      	strb	r3, [r7, #23]
    break;
 800860a:	e002      	b.n	8008612 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800860c:	2303      	movs	r3, #3
 800860e:	75fb      	strb	r3, [r7, #23]
    break;
 8008610:	bf00      	nop
  }
  return usb_status;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	460b      	mov	r3, r1
 800862a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800863a:	7af9      	ldrb	r1, [r7, #11]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	f7f9 fb86 	bl	8001d50 <HAL_PCD_EP_Receive>
 8008644:	4603      	mov	r3, r0
 8008646:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008648:	7dbb      	ldrb	r3, [r7, #22]
 800864a:	2b03      	cmp	r3, #3
 800864c:	d816      	bhi.n	800867c <USBD_LL_PrepareReceive+0x60>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <USBD_LL_PrepareReceive+0x38>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	08008665 	.word	0x08008665
 8008658:	0800866b 	.word	0x0800866b
 800865c:	08008671 	.word	0x08008671
 8008660:	08008677 	.word	0x08008677
    case HAL_OK :
      usb_status = USBD_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	75fb      	strb	r3, [r7, #23]
    break;
 8008668:	e00b      	b.n	8008682 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800866a:	2303      	movs	r3, #3
 800866c:	75fb      	strb	r3, [r7, #23]
    break;
 800866e:	e008      	b.n	8008682 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]
    break;
 8008674:	e005      	b.n	8008682 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008676:	2303      	movs	r3, #3
 8008678:	75fb      	strb	r3, [r7, #23]
    break;
 800867a:	e002      	b.n	8008682 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800867c:	2303      	movs	r3, #3
 800867e:	75fb      	strb	r3, [r7, #23]
    break;
 8008680:	bf00      	nop
  }
  return usb_status;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f9 fb86 	bl	8001db4 <HAL_PCD_EP_GetRxCount>
 80086a8:	4603      	mov	r3, r0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <HAL_PCDEx_LPM_Callback+0x18>
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d01f      	beq.n	800870a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80086ca:	e03b      	b.n	8008744 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	7adb      	ldrb	r3, [r3, #11]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80086d4:	f000 f854 	bl	8008780 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086d8:	4b1c      	ldr	r3, [pc, #112]	@ (800874c <HAL_PCDEx_LPM_Callback+0x98>)
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	4a1b      	ldr	r2, [pc, #108]	@ (800874c <HAL_PCDEx_LPM_Callback+0x98>)
 80086de:	f023 0306 	bic.w	r3, r3, #6
 80086e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086f6:	f023 0301 	bic.w	r3, r3, #1
 80086fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe f8ad 	bl	8006862 <USBD_LL_Resume>
    break;
 8008708:	e01c      	b.n	8008744 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe f87e 	bl	800682a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7adb      	ldrb	r3, [r3, #11]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008736:	4b05      	ldr	r3, [pc, #20]	@ (800874c <HAL_PCDEx_LPM_Callback+0x98>)
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	4a04      	ldr	r2, [pc, #16]	@ (800874c <HAL_PCDEx_LPM_Callback+0x98>)
 800873c:	f043 0306 	orr.w	r3, r3, #6
 8008740:	6113      	str	r3, [r2, #16]
    break;
 8008742:	bf00      	nop
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	e000ed00 	.word	0xe000ed00

08008750 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008758:	4b03      	ldr	r3, [pc, #12]	@ (8008768 <USBD_static_malloc+0x18>)
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20001c2c 	.word	0x20001c2c

0800876c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]

}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008784:	f7f7 fe26 	bl	80003d4 <SystemClock_Config>
}
 8008788:	bf00      	nop
 800878a:	bd80      	pop	{r7, pc}

0800878c <std>:
 800878c:	2300      	movs	r3, #0
 800878e:	b510      	push	{r4, lr}
 8008790:	4604      	mov	r4, r0
 8008792:	e9c0 3300 	strd	r3, r3, [r0]
 8008796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800879a:	6083      	str	r3, [r0, #8]
 800879c:	8181      	strh	r1, [r0, #12]
 800879e:	6643      	str	r3, [r0, #100]	@ 0x64
 80087a0:	81c2      	strh	r2, [r0, #14]
 80087a2:	6183      	str	r3, [r0, #24]
 80087a4:	4619      	mov	r1, r3
 80087a6:	2208      	movs	r2, #8
 80087a8:	305c      	adds	r0, #92	@ 0x5c
 80087aa:	f000 fa19 	bl	8008be0 <memset>
 80087ae:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <std+0x58>)
 80087b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <std+0x5c>)
 80087b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087b6:	4b0d      	ldr	r3, [pc, #52]	@ (80087ec <std+0x60>)
 80087b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087ba:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <std+0x64>)
 80087bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80087be:	4b0d      	ldr	r3, [pc, #52]	@ (80087f4 <std+0x68>)
 80087c0:	6224      	str	r4, [r4, #32]
 80087c2:	429c      	cmp	r4, r3
 80087c4:	d006      	beq.n	80087d4 <std+0x48>
 80087c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087ca:	4294      	cmp	r4, r2
 80087cc:	d002      	beq.n	80087d4 <std+0x48>
 80087ce:	33d0      	adds	r3, #208	@ 0xd0
 80087d0:	429c      	cmp	r4, r3
 80087d2:	d105      	bne.n	80087e0 <std+0x54>
 80087d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087dc:	f000 ba78 	b.w	8008cd0 <__retarget_lock_init_recursive>
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	bf00      	nop
 80087e4:	08008a31 	.word	0x08008a31
 80087e8:	08008a53 	.word	0x08008a53
 80087ec:	08008a8b 	.word	0x08008a8b
 80087f0:	08008aaf 	.word	0x08008aaf
 80087f4:	20001e4c 	.word	0x20001e4c

080087f8 <stdio_exit_handler>:
 80087f8:	4a02      	ldr	r2, [pc, #8]	@ (8008804 <stdio_exit_handler+0xc>)
 80087fa:	4903      	ldr	r1, [pc, #12]	@ (8008808 <stdio_exit_handler+0x10>)
 80087fc:	4803      	ldr	r0, [pc, #12]	@ (800880c <stdio_exit_handler+0x14>)
 80087fe:	f000 b869 	b.w	80088d4 <_fwalk_sglue>
 8008802:	bf00      	nop
 8008804:	2000010c 	.word	0x2000010c
 8008808:	08009821 	.word	0x08009821
 800880c:	2000011c 	.word	0x2000011c

08008810 <cleanup_stdio>:
 8008810:	6841      	ldr	r1, [r0, #4]
 8008812:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <cleanup_stdio+0x34>)
 8008814:	4299      	cmp	r1, r3
 8008816:	b510      	push	{r4, lr}
 8008818:	4604      	mov	r4, r0
 800881a:	d001      	beq.n	8008820 <cleanup_stdio+0x10>
 800881c:	f001 f800 	bl	8009820 <_fflush_r>
 8008820:	68a1      	ldr	r1, [r4, #8]
 8008822:	4b09      	ldr	r3, [pc, #36]	@ (8008848 <cleanup_stdio+0x38>)
 8008824:	4299      	cmp	r1, r3
 8008826:	d002      	beq.n	800882e <cleanup_stdio+0x1e>
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fff9 	bl	8009820 <_fflush_r>
 800882e:	68e1      	ldr	r1, [r4, #12]
 8008830:	4b06      	ldr	r3, [pc, #24]	@ (800884c <cleanup_stdio+0x3c>)
 8008832:	4299      	cmp	r1, r3
 8008834:	d004      	beq.n	8008840 <cleanup_stdio+0x30>
 8008836:	4620      	mov	r0, r4
 8008838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800883c:	f000 bff0 	b.w	8009820 <_fflush_r>
 8008840:	bd10      	pop	{r4, pc}
 8008842:	bf00      	nop
 8008844:	20001e4c 	.word	0x20001e4c
 8008848:	20001eb4 	.word	0x20001eb4
 800884c:	20001f1c 	.word	0x20001f1c

08008850 <global_stdio_init.part.0>:
 8008850:	b510      	push	{r4, lr}
 8008852:	4b0b      	ldr	r3, [pc, #44]	@ (8008880 <global_stdio_init.part.0+0x30>)
 8008854:	4c0b      	ldr	r4, [pc, #44]	@ (8008884 <global_stdio_init.part.0+0x34>)
 8008856:	4a0c      	ldr	r2, [pc, #48]	@ (8008888 <global_stdio_init.part.0+0x38>)
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	4620      	mov	r0, r4
 800885c:	2200      	movs	r2, #0
 800885e:	2104      	movs	r1, #4
 8008860:	f7ff ff94 	bl	800878c <std>
 8008864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008868:	2201      	movs	r2, #1
 800886a:	2109      	movs	r1, #9
 800886c:	f7ff ff8e 	bl	800878c <std>
 8008870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008874:	2202      	movs	r2, #2
 8008876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800887a:	2112      	movs	r1, #18
 800887c:	f7ff bf86 	b.w	800878c <std>
 8008880:	20001f84 	.word	0x20001f84
 8008884:	20001e4c 	.word	0x20001e4c
 8008888:	080087f9 	.word	0x080087f9

0800888c <__sfp_lock_acquire>:
 800888c:	4801      	ldr	r0, [pc, #4]	@ (8008894 <__sfp_lock_acquire+0x8>)
 800888e:	f000 ba20 	b.w	8008cd2 <__retarget_lock_acquire_recursive>
 8008892:	bf00      	nop
 8008894:	20001f8d 	.word	0x20001f8d

08008898 <__sfp_lock_release>:
 8008898:	4801      	ldr	r0, [pc, #4]	@ (80088a0 <__sfp_lock_release+0x8>)
 800889a:	f000 ba1b 	b.w	8008cd4 <__retarget_lock_release_recursive>
 800889e:	bf00      	nop
 80088a0:	20001f8d 	.word	0x20001f8d

080088a4 <__sinit>:
 80088a4:	b510      	push	{r4, lr}
 80088a6:	4604      	mov	r4, r0
 80088a8:	f7ff fff0 	bl	800888c <__sfp_lock_acquire>
 80088ac:	6a23      	ldr	r3, [r4, #32]
 80088ae:	b11b      	cbz	r3, 80088b8 <__sinit+0x14>
 80088b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b4:	f7ff bff0 	b.w	8008898 <__sfp_lock_release>
 80088b8:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <__sinit+0x28>)
 80088ba:	6223      	str	r3, [r4, #32]
 80088bc:	4b04      	ldr	r3, [pc, #16]	@ (80088d0 <__sinit+0x2c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1f5      	bne.n	80088b0 <__sinit+0xc>
 80088c4:	f7ff ffc4 	bl	8008850 <global_stdio_init.part.0>
 80088c8:	e7f2      	b.n	80088b0 <__sinit+0xc>
 80088ca:	bf00      	nop
 80088cc:	08008811 	.word	0x08008811
 80088d0:	20001f84 	.word	0x20001f84

080088d4 <_fwalk_sglue>:
 80088d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d8:	4607      	mov	r7, r0
 80088da:	4688      	mov	r8, r1
 80088dc:	4614      	mov	r4, r2
 80088de:	2600      	movs	r6, #0
 80088e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088e4:	f1b9 0901 	subs.w	r9, r9, #1
 80088e8:	d505      	bpl.n	80088f6 <_fwalk_sglue+0x22>
 80088ea:	6824      	ldr	r4, [r4, #0]
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	d1f7      	bne.n	80088e0 <_fwalk_sglue+0xc>
 80088f0:	4630      	mov	r0, r6
 80088f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d907      	bls.n	800890c <_fwalk_sglue+0x38>
 80088fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008900:	3301      	adds	r3, #1
 8008902:	d003      	beq.n	800890c <_fwalk_sglue+0x38>
 8008904:	4629      	mov	r1, r5
 8008906:	4638      	mov	r0, r7
 8008908:	47c0      	blx	r8
 800890a:	4306      	orrs	r6, r0
 800890c:	3568      	adds	r5, #104	@ 0x68
 800890e:	e7e9      	b.n	80088e4 <_fwalk_sglue+0x10>

08008910 <iprintf>:
 8008910:	b40f      	push	{r0, r1, r2, r3}
 8008912:	b507      	push	{r0, r1, r2, lr}
 8008914:	4906      	ldr	r1, [pc, #24]	@ (8008930 <iprintf+0x20>)
 8008916:	ab04      	add	r3, sp, #16
 8008918:	6808      	ldr	r0, [r1, #0]
 800891a:	f853 2b04 	ldr.w	r2, [r3], #4
 800891e:	6881      	ldr	r1, [r0, #8]
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	f000 fc53 	bl	80091cc <_vfiprintf_r>
 8008926:	b003      	add	sp, #12
 8008928:	f85d eb04 	ldr.w	lr, [sp], #4
 800892c:	b004      	add	sp, #16
 800892e:	4770      	bx	lr
 8008930:	20000118 	.word	0x20000118

08008934 <_puts_r>:
 8008934:	6a03      	ldr	r3, [r0, #32]
 8008936:	b570      	push	{r4, r5, r6, lr}
 8008938:	6884      	ldr	r4, [r0, #8]
 800893a:	4605      	mov	r5, r0
 800893c:	460e      	mov	r6, r1
 800893e:	b90b      	cbnz	r3, 8008944 <_puts_r+0x10>
 8008940:	f7ff ffb0 	bl	80088a4 <__sinit>
 8008944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008946:	07db      	lsls	r3, r3, #31
 8008948:	d405      	bmi.n	8008956 <_puts_r+0x22>
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	0598      	lsls	r0, r3, #22
 800894e:	d402      	bmi.n	8008956 <_puts_r+0x22>
 8008950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008952:	f000 f9be 	bl	8008cd2 <__retarget_lock_acquire_recursive>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	0719      	lsls	r1, r3, #28
 800895a:	d502      	bpl.n	8008962 <_puts_r+0x2e>
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d135      	bne.n	80089ce <_puts_r+0x9a>
 8008962:	4621      	mov	r1, r4
 8008964:	4628      	mov	r0, r5
 8008966:	f000 f8e5 	bl	8008b34 <__swsetup_r>
 800896a:	b380      	cbz	r0, 80089ce <_puts_r+0x9a>
 800896c:	f04f 35ff 	mov.w	r5, #4294967295
 8008970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008972:	07da      	lsls	r2, r3, #31
 8008974:	d405      	bmi.n	8008982 <_puts_r+0x4e>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	059b      	lsls	r3, r3, #22
 800897a:	d402      	bmi.n	8008982 <_puts_r+0x4e>
 800897c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800897e:	f000 f9a9 	bl	8008cd4 <__retarget_lock_release_recursive>
 8008982:	4628      	mov	r0, r5
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	2b00      	cmp	r3, #0
 8008988:	da04      	bge.n	8008994 <_puts_r+0x60>
 800898a:	69a2      	ldr	r2, [r4, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	dc17      	bgt.n	80089c0 <_puts_r+0x8c>
 8008990:	290a      	cmp	r1, #10
 8008992:	d015      	beq.n	80089c0 <_puts_r+0x8c>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	6022      	str	r2, [r4, #0]
 800899a:	7019      	strb	r1, [r3, #0]
 800899c:	68a3      	ldr	r3, [r4, #8]
 800899e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089a2:	3b01      	subs	r3, #1
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	2900      	cmp	r1, #0
 80089a8:	d1ed      	bne.n	8008986 <_puts_r+0x52>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da11      	bge.n	80089d2 <_puts_r+0x9e>
 80089ae:	4622      	mov	r2, r4
 80089b0:	210a      	movs	r1, #10
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 f87f 	bl	8008ab6 <__swbuf_r>
 80089b8:	3001      	adds	r0, #1
 80089ba:	d0d7      	beq.n	800896c <_puts_r+0x38>
 80089bc:	250a      	movs	r5, #10
 80089be:	e7d7      	b.n	8008970 <_puts_r+0x3c>
 80089c0:	4622      	mov	r2, r4
 80089c2:	4628      	mov	r0, r5
 80089c4:	f000 f877 	bl	8008ab6 <__swbuf_r>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d1e7      	bne.n	800899c <_puts_r+0x68>
 80089cc:	e7ce      	b.n	800896c <_puts_r+0x38>
 80089ce:	3e01      	subs	r6, #1
 80089d0:	e7e4      	b.n	800899c <_puts_r+0x68>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	6022      	str	r2, [r4, #0]
 80089d8:	220a      	movs	r2, #10
 80089da:	701a      	strb	r2, [r3, #0]
 80089dc:	e7ee      	b.n	80089bc <_puts_r+0x88>
	...

080089e0 <puts>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	@ (80089ec <puts+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f7ff bfa5 	b.w	8008934 <_puts_r>
 80089ea:	bf00      	nop
 80089ec:	20000118 	.word	0x20000118

080089f0 <siprintf>:
 80089f0:	b40e      	push	{r1, r2, r3}
 80089f2:	b500      	push	{lr}
 80089f4:	b09c      	sub	sp, #112	@ 0x70
 80089f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80089f8:	9002      	str	r0, [sp, #8]
 80089fa:	9006      	str	r0, [sp, #24]
 80089fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a00:	4809      	ldr	r0, [pc, #36]	@ (8008a28 <siprintf+0x38>)
 8008a02:	9107      	str	r1, [sp, #28]
 8008a04:	9104      	str	r1, [sp, #16]
 8008a06:	4909      	ldr	r1, [pc, #36]	@ (8008a2c <siprintf+0x3c>)
 8008a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	6800      	ldr	r0, [r0, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	a902      	add	r1, sp, #8
 8008a14:	f000 fab4 	bl	8008f80 <_svfiprintf_r>
 8008a18:	9b02      	ldr	r3, [sp, #8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	b01c      	add	sp, #112	@ 0x70
 8008a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a24:	b003      	add	sp, #12
 8008a26:	4770      	bx	lr
 8008a28:	20000118 	.word	0x20000118
 8008a2c:	ffff0208 	.word	0xffff0208

08008a30 <__sread>:
 8008a30:	b510      	push	{r4, lr}
 8008a32:	460c      	mov	r4, r1
 8008a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a38:	f000 f8fc 	bl	8008c34 <_read_r>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	bfab      	itete	ge
 8008a40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a42:	89a3      	ldrhlt	r3, [r4, #12]
 8008a44:	181b      	addge	r3, r3, r0
 8008a46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a4a:	bfac      	ite	ge
 8008a4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a4e:	81a3      	strhlt	r3, [r4, #12]
 8008a50:	bd10      	pop	{r4, pc}

08008a52 <__swrite>:
 8008a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a56:	461f      	mov	r7, r3
 8008a58:	898b      	ldrh	r3, [r1, #12]
 8008a5a:	05db      	lsls	r3, r3, #23
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	4616      	mov	r6, r2
 8008a62:	d505      	bpl.n	8008a70 <__swrite+0x1e>
 8008a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a68:	2302      	movs	r3, #2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f000 f8d0 	bl	8008c10 <_lseek_r>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	463b      	mov	r3, r7
 8008a80:	4628      	mov	r0, r5
 8008a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a86:	f000 b8e7 	b.w	8008c58 <_write_r>

08008a8a <__sseek>:
 8008a8a:	b510      	push	{r4, lr}
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a92:	f000 f8bd 	bl	8008c10 <_lseek_r>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	bf15      	itete	ne
 8008a9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008aa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008aa6:	81a3      	strheq	r3, [r4, #12]
 8008aa8:	bf18      	it	ne
 8008aaa:	81a3      	strhne	r3, [r4, #12]
 8008aac:	bd10      	pop	{r4, pc}

08008aae <__sclose>:
 8008aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab2:	f000 b89d 	b.w	8008bf0 <_close_r>

08008ab6 <__swbuf_r>:
 8008ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab8:	460e      	mov	r6, r1
 8008aba:	4614      	mov	r4, r2
 8008abc:	4605      	mov	r5, r0
 8008abe:	b118      	cbz	r0, 8008ac8 <__swbuf_r+0x12>
 8008ac0:	6a03      	ldr	r3, [r0, #32]
 8008ac2:	b90b      	cbnz	r3, 8008ac8 <__swbuf_r+0x12>
 8008ac4:	f7ff feee 	bl	80088a4 <__sinit>
 8008ac8:	69a3      	ldr	r3, [r4, #24]
 8008aca:	60a3      	str	r3, [r4, #8]
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	071a      	lsls	r2, r3, #28
 8008ad0:	d501      	bpl.n	8008ad6 <__swbuf_r+0x20>
 8008ad2:	6923      	ldr	r3, [r4, #16]
 8008ad4:	b943      	cbnz	r3, 8008ae8 <__swbuf_r+0x32>
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f000 f82b 	bl	8008b34 <__swsetup_r>
 8008ade:	b118      	cbz	r0, 8008ae8 <__swbuf_r+0x32>
 8008ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	6922      	ldr	r2, [r4, #16]
 8008aec:	1a98      	subs	r0, r3, r2
 8008aee:	6963      	ldr	r3, [r4, #20]
 8008af0:	b2f6      	uxtb	r6, r6
 8008af2:	4283      	cmp	r3, r0
 8008af4:	4637      	mov	r7, r6
 8008af6:	dc05      	bgt.n	8008b04 <__swbuf_r+0x4e>
 8008af8:	4621      	mov	r1, r4
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 fe90 	bl	8009820 <_fflush_r>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d1ed      	bne.n	8008ae0 <__swbuf_r+0x2a>
 8008b04:	68a3      	ldr	r3, [r4, #8]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	60a3      	str	r3, [r4, #8]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	6022      	str	r2, [r4, #0]
 8008b10:	701e      	strb	r6, [r3, #0]
 8008b12:	6962      	ldr	r2, [r4, #20]
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d004      	beq.n	8008b24 <__swbuf_r+0x6e>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	07db      	lsls	r3, r3, #31
 8008b1e:	d5e1      	bpl.n	8008ae4 <__swbuf_r+0x2e>
 8008b20:	2e0a      	cmp	r6, #10
 8008b22:	d1df      	bne.n	8008ae4 <__swbuf_r+0x2e>
 8008b24:	4621      	mov	r1, r4
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 fe7a 	bl	8009820 <_fflush_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d0d9      	beq.n	8008ae4 <__swbuf_r+0x2e>
 8008b30:	e7d6      	b.n	8008ae0 <__swbuf_r+0x2a>
	...

08008b34 <__swsetup_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4b29      	ldr	r3, [pc, #164]	@ (8008bdc <__swsetup_r+0xa8>)
 8008b38:	4605      	mov	r5, r0
 8008b3a:	6818      	ldr	r0, [r3, #0]
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	b118      	cbz	r0, 8008b48 <__swsetup_r+0x14>
 8008b40:	6a03      	ldr	r3, [r0, #32]
 8008b42:	b90b      	cbnz	r3, 8008b48 <__swsetup_r+0x14>
 8008b44:	f7ff feae 	bl	80088a4 <__sinit>
 8008b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4c:	0719      	lsls	r1, r3, #28
 8008b4e:	d422      	bmi.n	8008b96 <__swsetup_r+0x62>
 8008b50:	06da      	lsls	r2, r3, #27
 8008b52:	d407      	bmi.n	8008b64 <__swsetup_r+0x30>
 8008b54:	2209      	movs	r2, #9
 8008b56:	602a      	str	r2, [r5, #0]
 8008b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	e033      	b.n	8008bcc <__swsetup_r+0x98>
 8008b64:	0758      	lsls	r0, r3, #29
 8008b66:	d512      	bpl.n	8008b8e <__swsetup_r+0x5a>
 8008b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b6a:	b141      	cbz	r1, 8008b7e <__swsetup_r+0x4a>
 8008b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d002      	beq.n	8008b7a <__swsetup_r+0x46>
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f8af 	bl	8008cd8 <_free_r>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b84:	81a3      	strh	r3, [r4, #12]
 8008b86:	2300      	movs	r3, #0
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f043 0308 	orr.w	r3, r3, #8
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	6923      	ldr	r3, [r4, #16]
 8008b98:	b94b      	cbnz	r3, 8008bae <__swsetup_r+0x7a>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ba4:	d003      	beq.n	8008bae <__swsetup_r+0x7a>
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fe87 	bl	80098bc <__smakebuf_r>
 8008bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb2:	f013 0201 	ands.w	r2, r3, #1
 8008bb6:	d00a      	beq.n	8008bce <__swsetup_r+0x9a>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	60a2      	str	r2, [r4, #8]
 8008bbc:	6962      	ldr	r2, [r4, #20]
 8008bbe:	4252      	negs	r2, r2
 8008bc0:	61a2      	str	r2, [r4, #24]
 8008bc2:	6922      	ldr	r2, [r4, #16]
 8008bc4:	b942      	cbnz	r2, 8008bd8 <__swsetup_r+0xa4>
 8008bc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bca:	d1c5      	bne.n	8008b58 <__swsetup_r+0x24>
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	0799      	lsls	r1, r3, #30
 8008bd0:	bf58      	it	pl
 8008bd2:	6962      	ldrpl	r2, [r4, #20]
 8008bd4:	60a2      	str	r2, [r4, #8]
 8008bd6:	e7f4      	b.n	8008bc2 <__swsetup_r+0x8e>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	e7f7      	b.n	8008bcc <__swsetup_r+0x98>
 8008bdc:	20000118 	.word	0x20000118

08008be0 <memset>:
 8008be0:	4402      	add	r2, r0
 8008be2:	4603      	mov	r3, r0
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d100      	bne.n	8008bea <memset+0xa>
 8008be8:	4770      	bx	lr
 8008bea:	f803 1b01 	strb.w	r1, [r3], #1
 8008bee:	e7f9      	b.n	8008be4 <memset+0x4>

08008bf0 <_close_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d06      	ldr	r5, [pc, #24]	@ (8008c0c <_close_r+0x1c>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7f7 fe01 	bl	8000802 <_close>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_close_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_close_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	20001f88 	.word	0x20001f88

08008c10 <_lseek_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d07      	ldr	r5, [pc, #28]	@ (8008c30 <_lseek_r+0x20>)
 8008c14:	4604      	mov	r4, r0
 8008c16:	4608      	mov	r0, r1
 8008c18:	4611      	mov	r1, r2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	602a      	str	r2, [r5, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f7f7 fe16 	bl	8000850 <_lseek>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_lseek_r+0x1e>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_lseek_r+0x1e>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	20001f88 	.word	0x20001f88

08008c34 <_read_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	@ (8008c54 <_read_r+0x20>)
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7f7 fdc0 	bl	80007c8 <_read>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_read_r+0x1e>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_read_r+0x1e>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	20001f88 	.word	0x20001f88

08008c58 <_write_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4d07      	ldr	r5, [pc, #28]	@ (8008c78 <_write_r+0x20>)
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	602a      	str	r2, [r5, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7f7 fcda 	bl	8000620 <_write>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_write_r+0x1e>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_write_r+0x1e>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	20001f88 	.word	0x20001f88

08008c7c <__errno>:
 8008c7c:	4b01      	ldr	r3, [pc, #4]	@ (8008c84 <__errno+0x8>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000118 	.word	0x20000118

08008c88 <__libc_init_array>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8008cc0 <__libc_init_array+0x38>)
 8008c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8008cc4 <__libc_init_array+0x3c>)
 8008c8e:	1b64      	subs	r4, r4, r5
 8008c90:	10a4      	asrs	r4, r4, #2
 8008c92:	2600      	movs	r6, #0
 8008c94:	42a6      	cmp	r6, r4
 8008c96:	d109      	bne.n	8008cac <__libc_init_array+0x24>
 8008c98:	4d0b      	ldr	r5, [pc, #44]	@ (8008cc8 <__libc_init_array+0x40>)
 8008c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8008ccc <__libc_init_array+0x44>)
 8008c9c:	f000 feda 	bl	8009a54 <_init>
 8008ca0:	1b64      	subs	r4, r4, r5
 8008ca2:	10a4      	asrs	r4, r4, #2
 8008ca4:	2600      	movs	r6, #0
 8008ca6:	42a6      	cmp	r6, r4
 8008ca8:	d105      	bne.n	8008cb6 <__libc_init_array+0x2e>
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cb0:	4798      	blx	r3
 8008cb2:	3601      	adds	r6, #1
 8008cb4:	e7ee      	b.n	8008c94 <__libc_init_array+0xc>
 8008cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cba:	4798      	blx	r3
 8008cbc:	3601      	adds	r6, #1
 8008cbe:	e7f2      	b.n	8008ca6 <__libc_init_array+0x1e>
 8008cc0:	08009bbc 	.word	0x08009bbc
 8008cc4:	08009bbc 	.word	0x08009bbc
 8008cc8:	08009bbc 	.word	0x08009bbc
 8008ccc:	08009bc0 	.word	0x08009bc0

08008cd0 <__retarget_lock_init_recursive>:
 8008cd0:	4770      	bx	lr

08008cd2 <__retarget_lock_acquire_recursive>:
 8008cd2:	4770      	bx	lr

08008cd4 <__retarget_lock_release_recursive>:
 8008cd4:	4770      	bx	lr
	...

08008cd8 <_free_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4605      	mov	r5, r0
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	d041      	beq.n	8008d64 <_free_r+0x8c>
 8008ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce4:	1f0c      	subs	r4, r1, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bfb8      	it	lt
 8008cea:	18e4      	addlt	r4, r4, r3
 8008cec:	f000 f8e0 	bl	8008eb0 <__malloc_lock>
 8008cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d68 <_free_r+0x90>)
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	b933      	cbnz	r3, 8008d04 <_free_r+0x2c>
 8008cf6:	6063      	str	r3, [r4, #4]
 8008cf8:	6014      	str	r4, [r2, #0]
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d00:	f000 b8dc 	b.w	8008ebc <__malloc_unlock>
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	d908      	bls.n	8008d1a <_free_r+0x42>
 8008d08:	6820      	ldr	r0, [r4, #0]
 8008d0a:	1821      	adds	r1, r4, r0
 8008d0c:	428b      	cmp	r3, r1
 8008d0e:	bf01      	itttt	eq
 8008d10:	6819      	ldreq	r1, [r3, #0]
 8008d12:	685b      	ldreq	r3, [r3, #4]
 8008d14:	1809      	addeq	r1, r1, r0
 8008d16:	6021      	streq	r1, [r4, #0]
 8008d18:	e7ed      	b.n	8008cf6 <_free_r+0x1e>
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	b10b      	cbz	r3, 8008d24 <_free_r+0x4c>
 8008d20:	42a3      	cmp	r3, r4
 8008d22:	d9fa      	bls.n	8008d1a <_free_r+0x42>
 8008d24:	6811      	ldr	r1, [r2, #0]
 8008d26:	1850      	adds	r0, r2, r1
 8008d28:	42a0      	cmp	r0, r4
 8008d2a:	d10b      	bne.n	8008d44 <_free_r+0x6c>
 8008d2c:	6820      	ldr	r0, [r4, #0]
 8008d2e:	4401      	add	r1, r0
 8008d30:	1850      	adds	r0, r2, r1
 8008d32:	4283      	cmp	r3, r0
 8008d34:	6011      	str	r1, [r2, #0]
 8008d36:	d1e0      	bne.n	8008cfa <_free_r+0x22>
 8008d38:	6818      	ldr	r0, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	6053      	str	r3, [r2, #4]
 8008d3e:	4408      	add	r0, r1
 8008d40:	6010      	str	r0, [r2, #0]
 8008d42:	e7da      	b.n	8008cfa <_free_r+0x22>
 8008d44:	d902      	bls.n	8008d4c <_free_r+0x74>
 8008d46:	230c      	movs	r3, #12
 8008d48:	602b      	str	r3, [r5, #0]
 8008d4a:	e7d6      	b.n	8008cfa <_free_r+0x22>
 8008d4c:	6820      	ldr	r0, [r4, #0]
 8008d4e:	1821      	adds	r1, r4, r0
 8008d50:	428b      	cmp	r3, r1
 8008d52:	bf04      	itt	eq
 8008d54:	6819      	ldreq	r1, [r3, #0]
 8008d56:	685b      	ldreq	r3, [r3, #4]
 8008d58:	6063      	str	r3, [r4, #4]
 8008d5a:	bf04      	itt	eq
 8008d5c:	1809      	addeq	r1, r1, r0
 8008d5e:	6021      	streq	r1, [r4, #0]
 8008d60:	6054      	str	r4, [r2, #4]
 8008d62:	e7ca      	b.n	8008cfa <_free_r+0x22>
 8008d64:	bd38      	pop	{r3, r4, r5, pc}
 8008d66:	bf00      	nop
 8008d68:	20001f94 	.word	0x20001f94

08008d6c <sbrk_aligned>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008dac <sbrk_aligned+0x40>)
 8008d70:	460c      	mov	r4, r1
 8008d72:	6831      	ldr	r1, [r6, #0]
 8008d74:	4605      	mov	r5, r0
 8008d76:	b911      	cbnz	r1, 8008d7e <sbrk_aligned+0x12>
 8008d78:	f000 fe18 	bl	80099ac <_sbrk_r>
 8008d7c:	6030      	str	r0, [r6, #0]
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4628      	mov	r0, r5
 8008d82:	f000 fe13 	bl	80099ac <_sbrk_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	d103      	bne.n	8008d92 <sbrk_aligned+0x26>
 8008d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d8e:	4620      	mov	r0, r4
 8008d90:	bd70      	pop	{r4, r5, r6, pc}
 8008d92:	1cc4      	adds	r4, r0, #3
 8008d94:	f024 0403 	bic.w	r4, r4, #3
 8008d98:	42a0      	cmp	r0, r4
 8008d9a:	d0f8      	beq.n	8008d8e <sbrk_aligned+0x22>
 8008d9c:	1a21      	subs	r1, r4, r0
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 fe04 	bl	80099ac <_sbrk_r>
 8008da4:	3001      	adds	r0, #1
 8008da6:	d1f2      	bne.n	8008d8e <sbrk_aligned+0x22>
 8008da8:	e7ef      	b.n	8008d8a <sbrk_aligned+0x1e>
 8008daa:	bf00      	nop
 8008dac:	20001f90 	.word	0x20001f90

08008db0 <_malloc_r>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	1ccd      	adds	r5, r1, #3
 8008db6:	f025 0503 	bic.w	r5, r5, #3
 8008dba:	3508      	adds	r5, #8
 8008dbc:	2d0c      	cmp	r5, #12
 8008dbe:	bf38      	it	cc
 8008dc0:	250c      	movcc	r5, #12
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	db01      	blt.n	8008dcc <_malloc_r+0x1c>
 8008dc8:	42a9      	cmp	r1, r5
 8008dca:	d904      	bls.n	8008dd6 <_malloc_r+0x26>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	6033      	str	r3, [r6, #0]
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008eac <_malloc_r+0xfc>
 8008dda:	f000 f869 	bl	8008eb0 <__malloc_lock>
 8008dde:	f8d8 3000 	ldr.w	r3, [r8]
 8008de2:	461c      	mov	r4, r3
 8008de4:	bb44      	cbnz	r4, 8008e38 <_malloc_r+0x88>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff ffbf 	bl	8008d6c <sbrk_aligned>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	4604      	mov	r4, r0
 8008df2:	d158      	bne.n	8008ea6 <_malloc_r+0xf6>
 8008df4:	f8d8 4000 	ldr.w	r4, [r8]
 8008df8:	4627      	mov	r7, r4
 8008dfa:	2f00      	cmp	r7, #0
 8008dfc:	d143      	bne.n	8008e86 <_malloc_r+0xd6>
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	d04b      	beq.n	8008e9a <_malloc_r+0xea>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	4639      	mov	r1, r7
 8008e06:	4630      	mov	r0, r6
 8008e08:	eb04 0903 	add.w	r9, r4, r3
 8008e0c:	f000 fdce 	bl	80099ac <_sbrk_r>
 8008e10:	4581      	cmp	r9, r0
 8008e12:	d142      	bne.n	8008e9a <_malloc_r+0xea>
 8008e14:	6821      	ldr	r1, [r4, #0]
 8008e16:	1a6d      	subs	r5, r5, r1
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7ff ffa6 	bl	8008d6c <sbrk_aligned>
 8008e20:	3001      	adds	r0, #1
 8008e22:	d03a      	beq.n	8008e9a <_malloc_r+0xea>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	442b      	add	r3, r5
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	bb62      	cbnz	r2, 8008e8c <_malloc_r+0xdc>
 8008e32:	f8c8 7000 	str.w	r7, [r8]
 8008e36:	e00f      	b.n	8008e58 <_malloc_r+0xa8>
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	1b52      	subs	r2, r2, r5
 8008e3c:	d420      	bmi.n	8008e80 <_malloc_r+0xd0>
 8008e3e:	2a0b      	cmp	r2, #11
 8008e40:	d917      	bls.n	8008e72 <_malloc_r+0xc2>
 8008e42:	1961      	adds	r1, r4, r5
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	6025      	str	r5, [r4, #0]
 8008e48:	bf18      	it	ne
 8008e4a:	6059      	strne	r1, [r3, #4]
 8008e4c:	6863      	ldr	r3, [r4, #4]
 8008e4e:	bf08      	it	eq
 8008e50:	f8c8 1000 	streq.w	r1, [r8]
 8008e54:	5162      	str	r2, [r4, r5]
 8008e56:	604b      	str	r3, [r1, #4]
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 f82f 	bl	8008ebc <__malloc_unlock>
 8008e5e:	f104 000b 	add.w	r0, r4, #11
 8008e62:	1d23      	adds	r3, r4, #4
 8008e64:	f020 0007 	bic.w	r0, r0, #7
 8008e68:	1ac2      	subs	r2, r0, r3
 8008e6a:	bf1c      	itt	ne
 8008e6c:	1a1b      	subne	r3, r3, r0
 8008e6e:	50a3      	strne	r3, [r4, r2]
 8008e70:	e7af      	b.n	8008dd2 <_malloc_r+0x22>
 8008e72:	6862      	ldr	r2, [r4, #4]
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	bf0c      	ite	eq
 8008e78:	f8c8 2000 	streq.w	r2, [r8]
 8008e7c:	605a      	strne	r2, [r3, #4]
 8008e7e:	e7eb      	b.n	8008e58 <_malloc_r+0xa8>
 8008e80:	4623      	mov	r3, r4
 8008e82:	6864      	ldr	r4, [r4, #4]
 8008e84:	e7ae      	b.n	8008de4 <_malloc_r+0x34>
 8008e86:	463c      	mov	r4, r7
 8008e88:	687f      	ldr	r7, [r7, #4]
 8008e8a:	e7b6      	b.n	8008dfa <_malloc_r+0x4a>
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	d1fb      	bne.n	8008e8c <_malloc_r+0xdc>
 8008e94:	2300      	movs	r3, #0
 8008e96:	6053      	str	r3, [r2, #4]
 8008e98:	e7de      	b.n	8008e58 <_malloc_r+0xa8>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	6033      	str	r3, [r6, #0]
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 f80c 	bl	8008ebc <__malloc_unlock>
 8008ea4:	e794      	b.n	8008dd0 <_malloc_r+0x20>
 8008ea6:	6005      	str	r5, [r0, #0]
 8008ea8:	e7d6      	b.n	8008e58 <_malloc_r+0xa8>
 8008eaa:	bf00      	nop
 8008eac:	20001f94 	.word	0x20001f94

08008eb0 <__malloc_lock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	@ (8008eb8 <__malloc_lock+0x8>)
 8008eb2:	f7ff bf0e 	b.w	8008cd2 <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	20001f8c 	.word	0x20001f8c

08008ebc <__malloc_unlock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	@ (8008ec4 <__malloc_unlock+0x8>)
 8008ebe:	f7ff bf09 	b.w	8008cd4 <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20001f8c 	.word	0x20001f8c

08008ec8 <__ssputs_r>:
 8008ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ecc:	688e      	ldr	r6, [r1, #8]
 8008ece:	461f      	mov	r7, r3
 8008ed0:	42be      	cmp	r6, r7
 8008ed2:	680b      	ldr	r3, [r1, #0]
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	4690      	mov	r8, r2
 8008eda:	d82d      	bhi.n	8008f38 <__ssputs_r+0x70>
 8008edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ee0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ee4:	d026      	beq.n	8008f34 <__ssputs_r+0x6c>
 8008ee6:	6965      	ldr	r5, [r4, #20]
 8008ee8:	6909      	ldr	r1, [r1, #16]
 8008eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eee:	eba3 0901 	sub.w	r9, r3, r1
 8008ef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ef6:	1c7b      	adds	r3, r7, #1
 8008ef8:	444b      	add	r3, r9
 8008efa:	106d      	asrs	r5, r5, #1
 8008efc:	429d      	cmp	r5, r3
 8008efe:	bf38      	it	cc
 8008f00:	461d      	movcc	r5, r3
 8008f02:	0553      	lsls	r3, r2, #21
 8008f04:	d527      	bpl.n	8008f56 <__ssputs_r+0x8e>
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7ff ff52 	bl	8008db0 <_malloc_r>
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	b360      	cbz	r0, 8008f6a <__ssputs_r+0xa2>
 8008f10:	6921      	ldr	r1, [r4, #16]
 8008f12:	464a      	mov	r2, r9
 8008f14:	f000 fd5a 	bl	80099cc <memcpy>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	6126      	str	r6, [r4, #16]
 8008f26:	6165      	str	r5, [r4, #20]
 8008f28:	444e      	add	r6, r9
 8008f2a:	eba5 0509 	sub.w	r5, r5, r9
 8008f2e:	6026      	str	r6, [r4, #0]
 8008f30:	60a5      	str	r5, [r4, #8]
 8008f32:	463e      	mov	r6, r7
 8008f34:	42be      	cmp	r6, r7
 8008f36:	d900      	bls.n	8008f3a <__ssputs_r+0x72>
 8008f38:	463e      	mov	r6, r7
 8008f3a:	6820      	ldr	r0, [r4, #0]
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	4641      	mov	r1, r8
 8008f40:	f000 fcf8 	bl	8009934 <memmove>
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	1b9b      	subs	r3, r3, r6
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	4433      	add	r3, r6
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	2000      	movs	r0, #0
 8008f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f56:	462a      	mov	r2, r5
 8008f58:	f000 fd46 	bl	80099e8 <_realloc_r>
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d1e0      	bne.n	8008f24 <__ssputs_r+0x5c>
 8008f62:	6921      	ldr	r1, [r4, #16]
 8008f64:	4650      	mov	r0, sl
 8008f66:	f7ff feb7 	bl	8008cd8 <_free_r>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	f8ca 3000 	str.w	r3, [sl]
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	e7e9      	b.n	8008f52 <__ssputs_r+0x8a>
	...

08008f80 <_svfiprintf_r>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	4698      	mov	r8, r3
 8008f86:	898b      	ldrh	r3, [r1, #12]
 8008f88:	061b      	lsls	r3, r3, #24
 8008f8a:	b09d      	sub	sp, #116	@ 0x74
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	460d      	mov	r5, r1
 8008f90:	4614      	mov	r4, r2
 8008f92:	d510      	bpl.n	8008fb6 <_svfiprintf_r+0x36>
 8008f94:	690b      	ldr	r3, [r1, #16]
 8008f96:	b973      	cbnz	r3, 8008fb6 <_svfiprintf_r+0x36>
 8008f98:	2140      	movs	r1, #64	@ 0x40
 8008f9a:	f7ff ff09 	bl	8008db0 <_malloc_r>
 8008f9e:	6028      	str	r0, [r5, #0]
 8008fa0:	6128      	str	r0, [r5, #16]
 8008fa2:	b930      	cbnz	r0, 8008fb2 <_svfiprintf_r+0x32>
 8008fa4:	230c      	movs	r3, #12
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	b01d      	add	sp, #116	@ 0x74
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	2340      	movs	r3, #64	@ 0x40
 8008fb4:	616b      	str	r3, [r5, #20]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fba:	2320      	movs	r3, #32
 8008fbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fc4:	2330      	movs	r3, #48	@ 0x30
 8008fc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009164 <_svfiprintf_r+0x1e4>
 8008fca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fce:	f04f 0901 	mov.w	r9, #1
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	469a      	mov	sl, r3
 8008fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fda:	b10a      	cbz	r2, 8008fe0 <_svfiprintf_r+0x60>
 8008fdc:	2a25      	cmp	r2, #37	@ 0x25
 8008fde:	d1f9      	bne.n	8008fd4 <_svfiprintf_r+0x54>
 8008fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8008fe4:	d00b      	beq.n	8008ffe <_svfiprintf_r+0x7e>
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4629      	mov	r1, r5
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff ff6b 	bl	8008ec8 <__ssputs_r>
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	f000 80a7 	beq.w	8009146 <_svfiprintf_r+0x1c6>
 8008ff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ffa:	445a      	add	r2, fp
 8008ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 809f 	beq.w	8009146 <_svfiprintf_r+0x1c6>
 8009008:	2300      	movs	r3, #0
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009012:	f10a 0a01 	add.w	sl, sl, #1
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	9307      	str	r3, [sp, #28]
 800901a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800901e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009020:	4654      	mov	r4, sl
 8009022:	2205      	movs	r2, #5
 8009024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009028:	484e      	ldr	r0, [pc, #312]	@ (8009164 <_svfiprintf_r+0x1e4>)
 800902a:	f7f7 f901 	bl	8000230 <memchr>
 800902e:	9a04      	ldr	r2, [sp, #16]
 8009030:	b9d8      	cbnz	r0, 800906a <_svfiprintf_r+0xea>
 8009032:	06d0      	lsls	r0, r2, #27
 8009034:	bf44      	itt	mi
 8009036:	2320      	movmi	r3, #32
 8009038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800903c:	0711      	lsls	r1, r2, #28
 800903e:	bf44      	itt	mi
 8009040:	232b      	movmi	r3, #43	@ 0x2b
 8009042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009046:	f89a 3000 	ldrb.w	r3, [sl]
 800904a:	2b2a      	cmp	r3, #42	@ 0x2a
 800904c:	d015      	beq.n	800907a <_svfiprintf_r+0xfa>
 800904e:	9a07      	ldr	r2, [sp, #28]
 8009050:	4654      	mov	r4, sl
 8009052:	2000      	movs	r0, #0
 8009054:	f04f 0c0a 	mov.w	ip, #10
 8009058:	4621      	mov	r1, r4
 800905a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800905e:	3b30      	subs	r3, #48	@ 0x30
 8009060:	2b09      	cmp	r3, #9
 8009062:	d94b      	bls.n	80090fc <_svfiprintf_r+0x17c>
 8009064:	b1b0      	cbz	r0, 8009094 <_svfiprintf_r+0x114>
 8009066:	9207      	str	r2, [sp, #28]
 8009068:	e014      	b.n	8009094 <_svfiprintf_r+0x114>
 800906a:	eba0 0308 	sub.w	r3, r0, r8
 800906e:	fa09 f303 	lsl.w	r3, r9, r3
 8009072:	4313      	orrs	r3, r2
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	46a2      	mov	sl, r4
 8009078:	e7d2      	b.n	8009020 <_svfiprintf_r+0xa0>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	1d19      	adds	r1, r3, #4
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	9103      	str	r1, [sp, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	bfbb      	ittet	lt
 8009086:	425b      	neglt	r3, r3
 8009088:	f042 0202 	orrlt.w	r2, r2, #2
 800908c:	9307      	strge	r3, [sp, #28]
 800908e:	9307      	strlt	r3, [sp, #28]
 8009090:	bfb8      	it	lt
 8009092:	9204      	strlt	r2, [sp, #16]
 8009094:	7823      	ldrb	r3, [r4, #0]
 8009096:	2b2e      	cmp	r3, #46	@ 0x2e
 8009098:	d10a      	bne.n	80090b0 <_svfiprintf_r+0x130>
 800909a:	7863      	ldrb	r3, [r4, #1]
 800909c:	2b2a      	cmp	r3, #42	@ 0x2a
 800909e:	d132      	bne.n	8009106 <_svfiprintf_r+0x186>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	1d1a      	adds	r2, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	9203      	str	r2, [sp, #12]
 80090a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ac:	3402      	adds	r4, #2
 80090ae:	9305      	str	r3, [sp, #20]
 80090b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009174 <_svfiprintf_r+0x1f4>
 80090b4:	7821      	ldrb	r1, [r4, #0]
 80090b6:	2203      	movs	r2, #3
 80090b8:	4650      	mov	r0, sl
 80090ba:	f7f7 f8b9 	bl	8000230 <memchr>
 80090be:	b138      	cbz	r0, 80090d0 <_svfiprintf_r+0x150>
 80090c0:	9b04      	ldr	r3, [sp, #16]
 80090c2:	eba0 000a 	sub.w	r0, r0, sl
 80090c6:	2240      	movs	r2, #64	@ 0x40
 80090c8:	4082      	lsls	r2, r0
 80090ca:	4313      	orrs	r3, r2
 80090cc:	3401      	adds	r4, #1
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d4:	4824      	ldr	r0, [pc, #144]	@ (8009168 <_svfiprintf_r+0x1e8>)
 80090d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090da:	2206      	movs	r2, #6
 80090dc:	f7f7 f8a8 	bl	8000230 <memchr>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d036      	beq.n	8009152 <_svfiprintf_r+0x1d2>
 80090e4:	4b21      	ldr	r3, [pc, #132]	@ (800916c <_svfiprintf_r+0x1ec>)
 80090e6:	bb1b      	cbnz	r3, 8009130 <_svfiprintf_r+0x1b0>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	3307      	adds	r3, #7
 80090ec:	f023 0307 	bic.w	r3, r3, #7
 80090f0:	3308      	adds	r3, #8
 80090f2:	9303      	str	r3, [sp, #12]
 80090f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f6:	4433      	add	r3, r6
 80090f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80090fa:	e76a      	b.n	8008fd2 <_svfiprintf_r+0x52>
 80090fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009100:	460c      	mov	r4, r1
 8009102:	2001      	movs	r0, #1
 8009104:	e7a8      	b.n	8009058 <_svfiprintf_r+0xd8>
 8009106:	2300      	movs	r3, #0
 8009108:	3401      	adds	r4, #1
 800910a:	9305      	str	r3, [sp, #20]
 800910c:	4619      	mov	r1, r3
 800910e:	f04f 0c0a 	mov.w	ip, #10
 8009112:	4620      	mov	r0, r4
 8009114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009118:	3a30      	subs	r2, #48	@ 0x30
 800911a:	2a09      	cmp	r2, #9
 800911c:	d903      	bls.n	8009126 <_svfiprintf_r+0x1a6>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0c6      	beq.n	80090b0 <_svfiprintf_r+0x130>
 8009122:	9105      	str	r1, [sp, #20]
 8009124:	e7c4      	b.n	80090b0 <_svfiprintf_r+0x130>
 8009126:	fb0c 2101 	mla	r1, ip, r1, r2
 800912a:	4604      	mov	r4, r0
 800912c:	2301      	movs	r3, #1
 800912e:	e7f0      	b.n	8009112 <_svfiprintf_r+0x192>
 8009130:	ab03      	add	r3, sp, #12
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	462a      	mov	r2, r5
 8009136:	4b0e      	ldr	r3, [pc, #56]	@ (8009170 <_svfiprintf_r+0x1f0>)
 8009138:	a904      	add	r1, sp, #16
 800913a:	4638      	mov	r0, r7
 800913c:	f3af 8000 	nop.w
 8009140:	1c42      	adds	r2, r0, #1
 8009142:	4606      	mov	r6, r0
 8009144:	d1d6      	bne.n	80090f4 <_svfiprintf_r+0x174>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	065b      	lsls	r3, r3, #25
 800914a:	f53f af2d 	bmi.w	8008fa8 <_svfiprintf_r+0x28>
 800914e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009150:	e72c      	b.n	8008fac <_svfiprintf_r+0x2c>
 8009152:	ab03      	add	r3, sp, #12
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	462a      	mov	r2, r5
 8009158:	4b05      	ldr	r3, [pc, #20]	@ (8009170 <_svfiprintf_r+0x1f0>)
 800915a:	a904      	add	r1, sp, #16
 800915c:	4638      	mov	r0, r7
 800915e:	f000 f9bb 	bl	80094d8 <_printf_i>
 8009162:	e7ed      	b.n	8009140 <_svfiprintf_r+0x1c0>
 8009164:	08009b80 	.word	0x08009b80
 8009168:	08009b8a 	.word	0x08009b8a
 800916c:	00000000 	.word	0x00000000
 8009170:	08008ec9 	.word	0x08008ec9
 8009174:	08009b86 	.word	0x08009b86

08009178 <__sfputc_r>:
 8009178:	6893      	ldr	r3, [r2, #8]
 800917a:	3b01      	subs	r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	b410      	push	{r4}
 8009180:	6093      	str	r3, [r2, #8]
 8009182:	da08      	bge.n	8009196 <__sfputc_r+0x1e>
 8009184:	6994      	ldr	r4, [r2, #24]
 8009186:	42a3      	cmp	r3, r4
 8009188:	db01      	blt.n	800918e <__sfputc_r+0x16>
 800918a:	290a      	cmp	r1, #10
 800918c:	d103      	bne.n	8009196 <__sfputc_r+0x1e>
 800918e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009192:	f7ff bc90 	b.w	8008ab6 <__swbuf_r>
 8009196:	6813      	ldr	r3, [r2, #0]
 8009198:	1c58      	adds	r0, r3, #1
 800919a:	6010      	str	r0, [r2, #0]
 800919c:	7019      	strb	r1, [r3, #0]
 800919e:	4608      	mov	r0, r1
 80091a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <__sfputs_r>:
 80091a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a8:	4606      	mov	r6, r0
 80091aa:	460f      	mov	r7, r1
 80091ac:	4614      	mov	r4, r2
 80091ae:	18d5      	adds	r5, r2, r3
 80091b0:	42ac      	cmp	r4, r5
 80091b2:	d101      	bne.n	80091b8 <__sfputs_r+0x12>
 80091b4:	2000      	movs	r0, #0
 80091b6:	e007      	b.n	80091c8 <__sfputs_r+0x22>
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	463a      	mov	r2, r7
 80091be:	4630      	mov	r0, r6
 80091c0:	f7ff ffda 	bl	8009178 <__sfputc_r>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d1f3      	bne.n	80091b0 <__sfputs_r+0xa>
 80091c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091cc <_vfiprintf_r>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	460d      	mov	r5, r1
 80091d2:	b09d      	sub	sp, #116	@ 0x74
 80091d4:	4614      	mov	r4, r2
 80091d6:	4698      	mov	r8, r3
 80091d8:	4606      	mov	r6, r0
 80091da:	b118      	cbz	r0, 80091e4 <_vfiprintf_r+0x18>
 80091dc:	6a03      	ldr	r3, [r0, #32]
 80091de:	b90b      	cbnz	r3, 80091e4 <_vfiprintf_r+0x18>
 80091e0:	f7ff fb60 	bl	80088a4 <__sinit>
 80091e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091e6:	07d9      	lsls	r1, r3, #31
 80091e8:	d405      	bmi.n	80091f6 <_vfiprintf_r+0x2a>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	059a      	lsls	r2, r3, #22
 80091ee:	d402      	bmi.n	80091f6 <_vfiprintf_r+0x2a>
 80091f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091f2:	f7ff fd6e 	bl	8008cd2 <__retarget_lock_acquire_recursive>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	071b      	lsls	r3, r3, #28
 80091fa:	d501      	bpl.n	8009200 <_vfiprintf_r+0x34>
 80091fc:	692b      	ldr	r3, [r5, #16]
 80091fe:	b99b      	cbnz	r3, 8009228 <_vfiprintf_r+0x5c>
 8009200:	4629      	mov	r1, r5
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff fc96 	bl	8008b34 <__swsetup_r>
 8009208:	b170      	cbz	r0, 8009228 <_vfiprintf_r+0x5c>
 800920a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800920c:	07dc      	lsls	r4, r3, #31
 800920e:	d504      	bpl.n	800921a <_vfiprintf_r+0x4e>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	b01d      	add	sp, #116	@ 0x74
 8009216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	0598      	lsls	r0, r3, #22
 800921e:	d4f7      	bmi.n	8009210 <_vfiprintf_r+0x44>
 8009220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009222:	f7ff fd57 	bl	8008cd4 <__retarget_lock_release_recursive>
 8009226:	e7f3      	b.n	8009210 <_vfiprintf_r+0x44>
 8009228:	2300      	movs	r3, #0
 800922a:	9309      	str	r3, [sp, #36]	@ 0x24
 800922c:	2320      	movs	r3, #32
 800922e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009232:	f8cd 800c 	str.w	r8, [sp, #12]
 8009236:	2330      	movs	r3, #48	@ 0x30
 8009238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093e8 <_vfiprintf_r+0x21c>
 800923c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009240:	f04f 0901 	mov.w	r9, #1
 8009244:	4623      	mov	r3, r4
 8009246:	469a      	mov	sl, r3
 8009248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800924c:	b10a      	cbz	r2, 8009252 <_vfiprintf_r+0x86>
 800924e:	2a25      	cmp	r2, #37	@ 0x25
 8009250:	d1f9      	bne.n	8009246 <_vfiprintf_r+0x7a>
 8009252:	ebba 0b04 	subs.w	fp, sl, r4
 8009256:	d00b      	beq.n	8009270 <_vfiprintf_r+0xa4>
 8009258:	465b      	mov	r3, fp
 800925a:	4622      	mov	r2, r4
 800925c:	4629      	mov	r1, r5
 800925e:	4630      	mov	r0, r6
 8009260:	f7ff ffa1 	bl	80091a6 <__sfputs_r>
 8009264:	3001      	adds	r0, #1
 8009266:	f000 80a7 	beq.w	80093b8 <_vfiprintf_r+0x1ec>
 800926a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800926c:	445a      	add	r2, fp
 800926e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009270:	f89a 3000 	ldrb.w	r3, [sl]
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 809f 	beq.w	80093b8 <_vfiprintf_r+0x1ec>
 800927a:	2300      	movs	r3, #0
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009284:	f10a 0a01 	add.w	sl, sl, #1
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	9307      	str	r3, [sp, #28]
 800928c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009290:	931a      	str	r3, [sp, #104]	@ 0x68
 8009292:	4654      	mov	r4, sl
 8009294:	2205      	movs	r2, #5
 8009296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929a:	4853      	ldr	r0, [pc, #332]	@ (80093e8 <_vfiprintf_r+0x21c>)
 800929c:	f7f6 ffc8 	bl	8000230 <memchr>
 80092a0:	9a04      	ldr	r2, [sp, #16]
 80092a2:	b9d8      	cbnz	r0, 80092dc <_vfiprintf_r+0x110>
 80092a4:	06d1      	lsls	r1, r2, #27
 80092a6:	bf44      	itt	mi
 80092a8:	2320      	movmi	r3, #32
 80092aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092ae:	0713      	lsls	r3, r2, #28
 80092b0:	bf44      	itt	mi
 80092b2:	232b      	movmi	r3, #43	@ 0x2b
 80092b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092b8:	f89a 3000 	ldrb.w	r3, [sl]
 80092bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80092be:	d015      	beq.n	80092ec <_vfiprintf_r+0x120>
 80092c0:	9a07      	ldr	r2, [sp, #28]
 80092c2:	4654      	mov	r4, sl
 80092c4:	2000      	movs	r0, #0
 80092c6:	f04f 0c0a 	mov.w	ip, #10
 80092ca:	4621      	mov	r1, r4
 80092cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d0:	3b30      	subs	r3, #48	@ 0x30
 80092d2:	2b09      	cmp	r3, #9
 80092d4:	d94b      	bls.n	800936e <_vfiprintf_r+0x1a2>
 80092d6:	b1b0      	cbz	r0, 8009306 <_vfiprintf_r+0x13a>
 80092d8:	9207      	str	r2, [sp, #28]
 80092da:	e014      	b.n	8009306 <_vfiprintf_r+0x13a>
 80092dc:	eba0 0308 	sub.w	r3, r0, r8
 80092e0:	fa09 f303 	lsl.w	r3, r9, r3
 80092e4:	4313      	orrs	r3, r2
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	46a2      	mov	sl, r4
 80092ea:	e7d2      	b.n	8009292 <_vfiprintf_r+0xc6>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	1d19      	adds	r1, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	9103      	str	r1, [sp, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfbb      	ittet	lt
 80092f8:	425b      	neglt	r3, r3
 80092fa:	f042 0202 	orrlt.w	r2, r2, #2
 80092fe:	9307      	strge	r3, [sp, #28]
 8009300:	9307      	strlt	r3, [sp, #28]
 8009302:	bfb8      	it	lt
 8009304:	9204      	strlt	r2, [sp, #16]
 8009306:	7823      	ldrb	r3, [r4, #0]
 8009308:	2b2e      	cmp	r3, #46	@ 0x2e
 800930a:	d10a      	bne.n	8009322 <_vfiprintf_r+0x156>
 800930c:	7863      	ldrb	r3, [r4, #1]
 800930e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009310:	d132      	bne.n	8009378 <_vfiprintf_r+0x1ac>
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	1d1a      	adds	r2, r3, #4
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	9203      	str	r2, [sp, #12]
 800931a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800931e:	3402      	adds	r4, #2
 8009320:	9305      	str	r3, [sp, #20]
 8009322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093f8 <_vfiprintf_r+0x22c>
 8009326:	7821      	ldrb	r1, [r4, #0]
 8009328:	2203      	movs	r2, #3
 800932a:	4650      	mov	r0, sl
 800932c:	f7f6 ff80 	bl	8000230 <memchr>
 8009330:	b138      	cbz	r0, 8009342 <_vfiprintf_r+0x176>
 8009332:	9b04      	ldr	r3, [sp, #16]
 8009334:	eba0 000a 	sub.w	r0, r0, sl
 8009338:	2240      	movs	r2, #64	@ 0x40
 800933a:	4082      	lsls	r2, r0
 800933c:	4313      	orrs	r3, r2
 800933e:	3401      	adds	r4, #1
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009346:	4829      	ldr	r0, [pc, #164]	@ (80093ec <_vfiprintf_r+0x220>)
 8009348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800934c:	2206      	movs	r2, #6
 800934e:	f7f6 ff6f 	bl	8000230 <memchr>
 8009352:	2800      	cmp	r0, #0
 8009354:	d03f      	beq.n	80093d6 <_vfiprintf_r+0x20a>
 8009356:	4b26      	ldr	r3, [pc, #152]	@ (80093f0 <_vfiprintf_r+0x224>)
 8009358:	bb1b      	cbnz	r3, 80093a2 <_vfiprintf_r+0x1d6>
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	3307      	adds	r3, #7
 800935e:	f023 0307 	bic.w	r3, r3, #7
 8009362:	3308      	adds	r3, #8
 8009364:	9303      	str	r3, [sp, #12]
 8009366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009368:	443b      	add	r3, r7
 800936a:	9309      	str	r3, [sp, #36]	@ 0x24
 800936c:	e76a      	b.n	8009244 <_vfiprintf_r+0x78>
 800936e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009372:	460c      	mov	r4, r1
 8009374:	2001      	movs	r0, #1
 8009376:	e7a8      	b.n	80092ca <_vfiprintf_r+0xfe>
 8009378:	2300      	movs	r3, #0
 800937a:	3401      	adds	r4, #1
 800937c:	9305      	str	r3, [sp, #20]
 800937e:	4619      	mov	r1, r3
 8009380:	f04f 0c0a 	mov.w	ip, #10
 8009384:	4620      	mov	r0, r4
 8009386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800938a:	3a30      	subs	r2, #48	@ 0x30
 800938c:	2a09      	cmp	r2, #9
 800938e:	d903      	bls.n	8009398 <_vfiprintf_r+0x1cc>
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0c6      	beq.n	8009322 <_vfiprintf_r+0x156>
 8009394:	9105      	str	r1, [sp, #20]
 8009396:	e7c4      	b.n	8009322 <_vfiprintf_r+0x156>
 8009398:	fb0c 2101 	mla	r1, ip, r1, r2
 800939c:	4604      	mov	r4, r0
 800939e:	2301      	movs	r3, #1
 80093a0:	e7f0      	b.n	8009384 <_vfiprintf_r+0x1b8>
 80093a2:	ab03      	add	r3, sp, #12
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	462a      	mov	r2, r5
 80093a8:	4b12      	ldr	r3, [pc, #72]	@ (80093f4 <_vfiprintf_r+0x228>)
 80093aa:	a904      	add	r1, sp, #16
 80093ac:	4630      	mov	r0, r6
 80093ae:	f3af 8000 	nop.w
 80093b2:	4607      	mov	r7, r0
 80093b4:	1c78      	adds	r0, r7, #1
 80093b6:	d1d6      	bne.n	8009366 <_vfiprintf_r+0x19a>
 80093b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093ba:	07d9      	lsls	r1, r3, #31
 80093bc:	d405      	bmi.n	80093ca <_vfiprintf_r+0x1fe>
 80093be:	89ab      	ldrh	r3, [r5, #12]
 80093c0:	059a      	lsls	r2, r3, #22
 80093c2:	d402      	bmi.n	80093ca <_vfiprintf_r+0x1fe>
 80093c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093c6:	f7ff fc85 	bl	8008cd4 <__retarget_lock_release_recursive>
 80093ca:	89ab      	ldrh	r3, [r5, #12]
 80093cc:	065b      	lsls	r3, r3, #25
 80093ce:	f53f af1f 	bmi.w	8009210 <_vfiprintf_r+0x44>
 80093d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093d4:	e71e      	b.n	8009214 <_vfiprintf_r+0x48>
 80093d6:	ab03      	add	r3, sp, #12
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	462a      	mov	r2, r5
 80093dc:	4b05      	ldr	r3, [pc, #20]	@ (80093f4 <_vfiprintf_r+0x228>)
 80093de:	a904      	add	r1, sp, #16
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 f879 	bl	80094d8 <_printf_i>
 80093e6:	e7e4      	b.n	80093b2 <_vfiprintf_r+0x1e6>
 80093e8:	08009b80 	.word	0x08009b80
 80093ec:	08009b8a 	.word	0x08009b8a
 80093f0:	00000000 	.word	0x00000000
 80093f4:	080091a7 	.word	0x080091a7
 80093f8:	08009b86 	.word	0x08009b86

080093fc <_printf_common>:
 80093fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009400:	4616      	mov	r6, r2
 8009402:	4698      	mov	r8, r3
 8009404:	688a      	ldr	r2, [r1, #8]
 8009406:	690b      	ldr	r3, [r1, #16]
 8009408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800940c:	4293      	cmp	r3, r2
 800940e:	bfb8      	it	lt
 8009410:	4613      	movlt	r3, r2
 8009412:	6033      	str	r3, [r6, #0]
 8009414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009418:	4607      	mov	r7, r0
 800941a:	460c      	mov	r4, r1
 800941c:	b10a      	cbz	r2, 8009422 <_printf_common+0x26>
 800941e:	3301      	adds	r3, #1
 8009420:	6033      	str	r3, [r6, #0]
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	0699      	lsls	r1, r3, #26
 8009426:	bf42      	ittt	mi
 8009428:	6833      	ldrmi	r3, [r6, #0]
 800942a:	3302      	addmi	r3, #2
 800942c:	6033      	strmi	r3, [r6, #0]
 800942e:	6825      	ldr	r5, [r4, #0]
 8009430:	f015 0506 	ands.w	r5, r5, #6
 8009434:	d106      	bne.n	8009444 <_printf_common+0x48>
 8009436:	f104 0a19 	add.w	sl, r4, #25
 800943a:	68e3      	ldr	r3, [r4, #12]
 800943c:	6832      	ldr	r2, [r6, #0]
 800943e:	1a9b      	subs	r3, r3, r2
 8009440:	42ab      	cmp	r3, r5
 8009442:	dc26      	bgt.n	8009492 <_printf_common+0x96>
 8009444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	3b00      	subs	r3, #0
 800944c:	bf18      	it	ne
 800944e:	2301      	movne	r3, #1
 8009450:	0692      	lsls	r2, r2, #26
 8009452:	d42b      	bmi.n	80094ac <_printf_common+0xb0>
 8009454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009458:	4641      	mov	r1, r8
 800945a:	4638      	mov	r0, r7
 800945c:	47c8      	blx	r9
 800945e:	3001      	adds	r0, #1
 8009460:	d01e      	beq.n	80094a0 <_printf_common+0xa4>
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	6922      	ldr	r2, [r4, #16]
 8009466:	f003 0306 	and.w	r3, r3, #6
 800946a:	2b04      	cmp	r3, #4
 800946c:	bf02      	ittt	eq
 800946e:	68e5      	ldreq	r5, [r4, #12]
 8009470:	6833      	ldreq	r3, [r6, #0]
 8009472:	1aed      	subeq	r5, r5, r3
 8009474:	68a3      	ldr	r3, [r4, #8]
 8009476:	bf0c      	ite	eq
 8009478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800947c:	2500      	movne	r5, #0
 800947e:	4293      	cmp	r3, r2
 8009480:	bfc4      	itt	gt
 8009482:	1a9b      	subgt	r3, r3, r2
 8009484:	18ed      	addgt	r5, r5, r3
 8009486:	2600      	movs	r6, #0
 8009488:	341a      	adds	r4, #26
 800948a:	42b5      	cmp	r5, r6
 800948c:	d11a      	bne.n	80094c4 <_printf_common+0xc8>
 800948e:	2000      	movs	r0, #0
 8009490:	e008      	b.n	80094a4 <_printf_common+0xa8>
 8009492:	2301      	movs	r3, #1
 8009494:	4652      	mov	r2, sl
 8009496:	4641      	mov	r1, r8
 8009498:	4638      	mov	r0, r7
 800949a:	47c8      	blx	r9
 800949c:	3001      	adds	r0, #1
 800949e:	d103      	bne.n	80094a8 <_printf_common+0xac>
 80094a0:	f04f 30ff 	mov.w	r0, #4294967295
 80094a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a8:	3501      	adds	r5, #1
 80094aa:	e7c6      	b.n	800943a <_printf_common+0x3e>
 80094ac:	18e1      	adds	r1, r4, r3
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	2030      	movs	r0, #48	@ 0x30
 80094b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094b6:	4422      	add	r2, r4
 80094b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094c0:	3302      	adds	r3, #2
 80094c2:	e7c7      	b.n	8009454 <_printf_common+0x58>
 80094c4:	2301      	movs	r3, #1
 80094c6:	4622      	mov	r2, r4
 80094c8:	4641      	mov	r1, r8
 80094ca:	4638      	mov	r0, r7
 80094cc:	47c8      	blx	r9
 80094ce:	3001      	adds	r0, #1
 80094d0:	d0e6      	beq.n	80094a0 <_printf_common+0xa4>
 80094d2:	3601      	adds	r6, #1
 80094d4:	e7d9      	b.n	800948a <_printf_common+0x8e>
	...

080094d8 <_printf_i>:
 80094d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094dc:	7e0f      	ldrb	r7, [r1, #24]
 80094de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094e0:	2f78      	cmp	r7, #120	@ 0x78
 80094e2:	4691      	mov	r9, r2
 80094e4:	4680      	mov	r8, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	469a      	mov	sl, r3
 80094ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094ee:	d807      	bhi.n	8009500 <_printf_i+0x28>
 80094f0:	2f62      	cmp	r7, #98	@ 0x62
 80094f2:	d80a      	bhi.n	800950a <_printf_i+0x32>
 80094f4:	2f00      	cmp	r7, #0
 80094f6:	f000 80d2 	beq.w	800969e <_printf_i+0x1c6>
 80094fa:	2f58      	cmp	r7, #88	@ 0x58
 80094fc:	f000 80b9 	beq.w	8009672 <_printf_i+0x19a>
 8009500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009508:	e03a      	b.n	8009580 <_printf_i+0xa8>
 800950a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800950e:	2b15      	cmp	r3, #21
 8009510:	d8f6      	bhi.n	8009500 <_printf_i+0x28>
 8009512:	a101      	add	r1, pc, #4	@ (adr r1, 8009518 <_printf_i+0x40>)
 8009514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009518:	08009571 	.word	0x08009571
 800951c:	08009585 	.word	0x08009585
 8009520:	08009501 	.word	0x08009501
 8009524:	08009501 	.word	0x08009501
 8009528:	08009501 	.word	0x08009501
 800952c:	08009501 	.word	0x08009501
 8009530:	08009585 	.word	0x08009585
 8009534:	08009501 	.word	0x08009501
 8009538:	08009501 	.word	0x08009501
 800953c:	08009501 	.word	0x08009501
 8009540:	08009501 	.word	0x08009501
 8009544:	08009685 	.word	0x08009685
 8009548:	080095af 	.word	0x080095af
 800954c:	0800963f 	.word	0x0800963f
 8009550:	08009501 	.word	0x08009501
 8009554:	08009501 	.word	0x08009501
 8009558:	080096a7 	.word	0x080096a7
 800955c:	08009501 	.word	0x08009501
 8009560:	080095af 	.word	0x080095af
 8009564:	08009501 	.word	0x08009501
 8009568:	08009501 	.word	0x08009501
 800956c:	08009647 	.word	0x08009647
 8009570:	6833      	ldr	r3, [r6, #0]
 8009572:	1d1a      	adds	r2, r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6032      	str	r2, [r6, #0]
 8009578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800957c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009580:	2301      	movs	r3, #1
 8009582:	e09d      	b.n	80096c0 <_printf_i+0x1e8>
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	1d19      	adds	r1, r3, #4
 800958a:	6031      	str	r1, [r6, #0]
 800958c:	0606      	lsls	r6, r0, #24
 800958e:	d501      	bpl.n	8009594 <_printf_i+0xbc>
 8009590:	681d      	ldr	r5, [r3, #0]
 8009592:	e003      	b.n	800959c <_printf_i+0xc4>
 8009594:	0645      	lsls	r5, r0, #25
 8009596:	d5fb      	bpl.n	8009590 <_printf_i+0xb8>
 8009598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800959c:	2d00      	cmp	r5, #0
 800959e:	da03      	bge.n	80095a8 <_printf_i+0xd0>
 80095a0:	232d      	movs	r3, #45	@ 0x2d
 80095a2:	426d      	negs	r5, r5
 80095a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095a8:	4859      	ldr	r0, [pc, #356]	@ (8009710 <_printf_i+0x238>)
 80095aa:	230a      	movs	r3, #10
 80095ac:	e011      	b.n	80095d2 <_printf_i+0xfa>
 80095ae:	6821      	ldr	r1, [r4, #0]
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	0608      	lsls	r0, r1, #24
 80095b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80095b8:	d402      	bmi.n	80095c0 <_printf_i+0xe8>
 80095ba:	0649      	lsls	r1, r1, #25
 80095bc:	bf48      	it	mi
 80095be:	b2ad      	uxthmi	r5, r5
 80095c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80095c2:	4853      	ldr	r0, [pc, #332]	@ (8009710 <_printf_i+0x238>)
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	bf14      	ite	ne
 80095c8:	230a      	movne	r3, #10
 80095ca:	2308      	moveq	r3, #8
 80095cc:	2100      	movs	r1, #0
 80095ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095d2:	6866      	ldr	r6, [r4, #4]
 80095d4:	60a6      	str	r6, [r4, #8]
 80095d6:	2e00      	cmp	r6, #0
 80095d8:	bfa2      	ittt	ge
 80095da:	6821      	ldrge	r1, [r4, #0]
 80095dc:	f021 0104 	bicge.w	r1, r1, #4
 80095e0:	6021      	strge	r1, [r4, #0]
 80095e2:	b90d      	cbnz	r5, 80095e8 <_printf_i+0x110>
 80095e4:	2e00      	cmp	r6, #0
 80095e6:	d04b      	beq.n	8009680 <_printf_i+0x1a8>
 80095e8:	4616      	mov	r6, r2
 80095ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80095ee:	fb03 5711 	mls	r7, r3, r1, r5
 80095f2:	5dc7      	ldrb	r7, [r0, r7]
 80095f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095f8:	462f      	mov	r7, r5
 80095fa:	42bb      	cmp	r3, r7
 80095fc:	460d      	mov	r5, r1
 80095fe:	d9f4      	bls.n	80095ea <_printf_i+0x112>
 8009600:	2b08      	cmp	r3, #8
 8009602:	d10b      	bne.n	800961c <_printf_i+0x144>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	07df      	lsls	r7, r3, #31
 8009608:	d508      	bpl.n	800961c <_printf_i+0x144>
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	6861      	ldr	r1, [r4, #4]
 800960e:	4299      	cmp	r1, r3
 8009610:	bfde      	ittt	le
 8009612:	2330      	movle	r3, #48	@ 0x30
 8009614:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009618:	f106 36ff 	addle.w	r6, r6, #4294967295
 800961c:	1b92      	subs	r2, r2, r6
 800961e:	6122      	str	r2, [r4, #16]
 8009620:	f8cd a000 	str.w	sl, [sp]
 8009624:	464b      	mov	r3, r9
 8009626:	aa03      	add	r2, sp, #12
 8009628:	4621      	mov	r1, r4
 800962a:	4640      	mov	r0, r8
 800962c:	f7ff fee6 	bl	80093fc <_printf_common>
 8009630:	3001      	adds	r0, #1
 8009632:	d14a      	bne.n	80096ca <_printf_i+0x1f2>
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	b004      	add	sp, #16
 800963a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f043 0320 	orr.w	r3, r3, #32
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	4833      	ldr	r0, [pc, #204]	@ (8009714 <_printf_i+0x23c>)
 8009648:	2778      	movs	r7, #120	@ 0x78
 800964a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	6831      	ldr	r1, [r6, #0]
 8009652:	061f      	lsls	r7, r3, #24
 8009654:	f851 5b04 	ldr.w	r5, [r1], #4
 8009658:	d402      	bmi.n	8009660 <_printf_i+0x188>
 800965a:	065f      	lsls	r7, r3, #25
 800965c:	bf48      	it	mi
 800965e:	b2ad      	uxthmi	r5, r5
 8009660:	6031      	str	r1, [r6, #0]
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	bf44      	itt	mi
 8009666:	f043 0320 	orrmi.w	r3, r3, #32
 800966a:	6023      	strmi	r3, [r4, #0]
 800966c:	b11d      	cbz	r5, 8009676 <_printf_i+0x19e>
 800966e:	2310      	movs	r3, #16
 8009670:	e7ac      	b.n	80095cc <_printf_i+0xf4>
 8009672:	4827      	ldr	r0, [pc, #156]	@ (8009710 <_printf_i+0x238>)
 8009674:	e7e9      	b.n	800964a <_printf_i+0x172>
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	f023 0320 	bic.w	r3, r3, #32
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	e7f6      	b.n	800966e <_printf_i+0x196>
 8009680:	4616      	mov	r6, r2
 8009682:	e7bd      	b.n	8009600 <_printf_i+0x128>
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	6825      	ldr	r5, [r4, #0]
 8009688:	6961      	ldr	r1, [r4, #20]
 800968a:	1d18      	adds	r0, r3, #4
 800968c:	6030      	str	r0, [r6, #0]
 800968e:	062e      	lsls	r6, r5, #24
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	d501      	bpl.n	8009698 <_printf_i+0x1c0>
 8009694:	6019      	str	r1, [r3, #0]
 8009696:	e002      	b.n	800969e <_printf_i+0x1c6>
 8009698:	0668      	lsls	r0, r5, #25
 800969a:	d5fb      	bpl.n	8009694 <_printf_i+0x1bc>
 800969c:	8019      	strh	r1, [r3, #0]
 800969e:	2300      	movs	r3, #0
 80096a0:	6123      	str	r3, [r4, #16]
 80096a2:	4616      	mov	r6, r2
 80096a4:	e7bc      	b.n	8009620 <_printf_i+0x148>
 80096a6:	6833      	ldr	r3, [r6, #0]
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	6032      	str	r2, [r6, #0]
 80096ac:	681e      	ldr	r6, [r3, #0]
 80096ae:	6862      	ldr	r2, [r4, #4]
 80096b0:	2100      	movs	r1, #0
 80096b2:	4630      	mov	r0, r6
 80096b4:	f7f6 fdbc 	bl	8000230 <memchr>
 80096b8:	b108      	cbz	r0, 80096be <_printf_i+0x1e6>
 80096ba:	1b80      	subs	r0, r0, r6
 80096bc:	6060      	str	r0, [r4, #4]
 80096be:	6863      	ldr	r3, [r4, #4]
 80096c0:	6123      	str	r3, [r4, #16]
 80096c2:	2300      	movs	r3, #0
 80096c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096c8:	e7aa      	b.n	8009620 <_printf_i+0x148>
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	4632      	mov	r2, r6
 80096ce:	4649      	mov	r1, r9
 80096d0:	4640      	mov	r0, r8
 80096d2:	47d0      	blx	sl
 80096d4:	3001      	adds	r0, #1
 80096d6:	d0ad      	beq.n	8009634 <_printf_i+0x15c>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	079b      	lsls	r3, r3, #30
 80096dc:	d413      	bmi.n	8009706 <_printf_i+0x22e>
 80096de:	68e0      	ldr	r0, [r4, #12]
 80096e0:	9b03      	ldr	r3, [sp, #12]
 80096e2:	4298      	cmp	r0, r3
 80096e4:	bfb8      	it	lt
 80096e6:	4618      	movlt	r0, r3
 80096e8:	e7a6      	b.n	8009638 <_printf_i+0x160>
 80096ea:	2301      	movs	r3, #1
 80096ec:	4632      	mov	r2, r6
 80096ee:	4649      	mov	r1, r9
 80096f0:	4640      	mov	r0, r8
 80096f2:	47d0      	blx	sl
 80096f4:	3001      	adds	r0, #1
 80096f6:	d09d      	beq.n	8009634 <_printf_i+0x15c>
 80096f8:	3501      	adds	r5, #1
 80096fa:	68e3      	ldr	r3, [r4, #12]
 80096fc:	9903      	ldr	r1, [sp, #12]
 80096fe:	1a5b      	subs	r3, r3, r1
 8009700:	42ab      	cmp	r3, r5
 8009702:	dcf2      	bgt.n	80096ea <_printf_i+0x212>
 8009704:	e7eb      	b.n	80096de <_printf_i+0x206>
 8009706:	2500      	movs	r5, #0
 8009708:	f104 0619 	add.w	r6, r4, #25
 800970c:	e7f5      	b.n	80096fa <_printf_i+0x222>
 800970e:	bf00      	nop
 8009710:	08009b91 	.word	0x08009b91
 8009714:	08009ba2 	.word	0x08009ba2

08009718 <__sflush_r>:
 8009718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	0716      	lsls	r6, r2, #28
 8009722:	4605      	mov	r5, r0
 8009724:	460c      	mov	r4, r1
 8009726:	d454      	bmi.n	80097d2 <__sflush_r+0xba>
 8009728:	684b      	ldr	r3, [r1, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	dc02      	bgt.n	8009734 <__sflush_r+0x1c>
 800972e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	dd48      	ble.n	80097c6 <__sflush_r+0xae>
 8009734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009736:	2e00      	cmp	r6, #0
 8009738:	d045      	beq.n	80097c6 <__sflush_r+0xae>
 800973a:	2300      	movs	r3, #0
 800973c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009740:	682f      	ldr	r7, [r5, #0]
 8009742:	6a21      	ldr	r1, [r4, #32]
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	d030      	beq.n	80097aa <__sflush_r+0x92>
 8009748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	0759      	lsls	r1, r3, #29
 800974e:	d505      	bpl.n	800975c <__sflush_r+0x44>
 8009750:	6863      	ldr	r3, [r4, #4]
 8009752:	1ad2      	subs	r2, r2, r3
 8009754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009756:	b10b      	cbz	r3, 800975c <__sflush_r+0x44>
 8009758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	2300      	movs	r3, #0
 800975e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009760:	6a21      	ldr	r1, [r4, #32]
 8009762:	4628      	mov	r0, r5
 8009764:	47b0      	blx	r6
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	d106      	bne.n	800977a <__sflush_r+0x62>
 800976c:	6829      	ldr	r1, [r5, #0]
 800976e:	291d      	cmp	r1, #29
 8009770:	d82b      	bhi.n	80097ca <__sflush_r+0xb2>
 8009772:	4a2a      	ldr	r2, [pc, #168]	@ (800981c <__sflush_r+0x104>)
 8009774:	410a      	asrs	r2, r1
 8009776:	07d6      	lsls	r6, r2, #31
 8009778:	d427      	bmi.n	80097ca <__sflush_r+0xb2>
 800977a:	2200      	movs	r2, #0
 800977c:	6062      	str	r2, [r4, #4]
 800977e:	04d9      	lsls	r1, r3, #19
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	d504      	bpl.n	8009790 <__sflush_r+0x78>
 8009786:	1c42      	adds	r2, r0, #1
 8009788:	d101      	bne.n	800978e <__sflush_r+0x76>
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	b903      	cbnz	r3, 8009790 <__sflush_r+0x78>
 800978e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009792:	602f      	str	r7, [r5, #0]
 8009794:	b1b9      	cbz	r1, 80097c6 <__sflush_r+0xae>
 8009796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800979a:	4299      	cmp	r1, r3
 800979c:	d002      	beq.n	80097a4 <__sflush_r+0x8c>
 800979e:	4628      	mov	r0, r5
 80097a0:	f7ff fa9a 	bl	8008cd8 <_free_r>
 80097a4:	2300      	movs	r3, #0
 80097a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80097a8:	e00d      	b.n	80097c6 <__sflush_r+0xae>
 80097aa:	2301      	movs	r3, #1
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b0      	blx	r6
 80097b0:	4602      	mov	r2, r0
 80097b2:	1c50      	adds	r0, r2, #1
 80097b4:	d1c9      	bne.n	800974a <__sflush_r+0x32>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0c6      	beq.n	800974a <__sflush_r+0x32>
 80097bc:	2b1d      	cmp	r3, #29
 80097be:	d001      	beq.n	80097c4 <__sflush_r+0xac>
 80097c0:	2b16      	cmp	r3, #22
 80097c2:	d11e      	bne.n	8009802 <__sflush_r+0xea>
 80097c4:	602f      	str	r7, [r5, #0]
 80097c6:	2000      	movs	r0, #0
 80097c8:	e022      	b.n	8009810 <__sflush_r+0xf8>
 80097ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ce:	b21b      	sxth	r3, r3
 80097d0:	e01b      	b.n	800980a <__sflush_r+0xf2>
 80097d2:	690f      	ldr	r7, [r1, #16]
 80097d4:	2f00      	cmp	r7, #0
 80097d6:	d0f6      	beq.n	80097c6 <__sflush_r+0xae>
 80097d8:	0793      	lsls	r3, r2, #30
 80097da:	680e      	ldr	r6, [r1, #0]
 80097dc:	bf08      	it	eq
 80097de:	694b      	ldreq	r3, [r1, #20]
 80097e0:	600f      	str	r7, [r1, #0]
 80097e2:	bf18      	it	ne
 80097e4:	2300      	movne	r3, #0
 80097e6:	eba6 0807 	sub.w	r8, r6, r7
 80097ea:	608b      	str	r3, [r1, #8]
 80097ec:	f1b8 0f00 	cmp.w	r8, #0
 80097f0:	dde9      	ble.n	80097c6 <__sflush_r+0xae>
 80097f2:	6a21      	ldr	r1, [r4, #32]
 80097f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097f6:	4643      	mov	r3, r8
 80097f8:	463a      	mov	r2, r7
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b0      	blx	r6
 80097fe:	2800      	cmp	r0, #0
 8009800:	dc08      	bgt.n	8009814 <__sflush_r+0xfc>
 8009802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009814:	4407      	add	r7, r0
 8009816:	eba8 0800 	sub.w	r8, r8, r0
 800981a:	e7e7      	b.n	80097ec <__sflush_r+0xd4>
 800981c:	dfbffffe 	.word	0xdfbffffe

08009820 <_fflush_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	690b      	ldr	r3, [r1, #16]
 8009824:	4605      	mov	r5, r0
 8009826:	460c      	mov	r4, r1
 8009828:	b913      	cbnz	r3, 8009830 <_fflush_r+0x10>
 800982a:	2500      	movs	r5, #0
 800982c:	4628      	mov	r0, r5
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	b118      	cbz	r0, 800983a <_fflush_r+0x1a>
 8009832:	6a03      	ldr	r3, [r0, #32]
 8009834:	b90b      	cbnz	r3, 800983a <_fflush_r+0x1a>
 8009836:	f7ff f835 	bl	80088a4 <__sinit>
 800983a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0f3      	beq.n	800982a <_fflush_r+0xa>
 8009842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009844:	07d0      	lsls	r0, r2, #31
 8009846:	d404      	bmi.n	8009852 <_fflush_r+0x32>
 8009848:	0599      	lsls	r1, r3, #22
 800984a:	d402      	bmi.n	8009852 <_fflush_r+0x32>
 800984c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800984e:	f7ff fa40 	bl	8008cd2 <__retarget_lock_acquire_recursive>
 8009852:	4628      	mov	r0, r5
 8009854:	4621      	mov	r1, r4
 8009856:	f7ff ff5f 	bl	8009718 <__sflush_r>
 800985a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800985c:	07da      	lsls	r2, r3, #31
 800985e:	4605      	mov	r5, r0
 8009860:	d4e4      	bmi.n	800982c <_fflush_r+0xc>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	059b      	lsls	r3, r3, #22
 8009866:	d4e1      	bmi.n	800982c <_fflush_r+0xc>
 8009868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800986a:	f7ff fa33 	bl	8008cd4 <__retarget_lock_release_recursive>
 800986e:	e7dd      	b.n	800982c <_fflush_r+0xc>

08009870 <__swhatbuf_r>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009878:	2900      	cmp	r1, #0
 800987a:	b096      	sub	sp, #88	@ 0x58
 800987c:	4615      	mov	r5, r2
 800987e:	461e      	mov	r6, r3
 8009880:	da0d      	bge.n	800989e <__swhatbuf_r+0x2e>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009888:	f04f 0100 	mov.w	r1, #0
 800988c:	bf14      	ite	ne
 800988e:	2340      	movne	r3, #64	@ 0x40
 8009890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009894:	2000      	movs	r0, #0
 8009896:	6031      	str	r1, [r6, #0]
 8009898:	602b      	str	r3, [r5, #0]
 800989a:	b016      	add	sp, #88	@ 0x58
 800989c:	bd70      	pop	{r4, r5, r6, pc}
 800989e:	466a      	mov	r2, sp
 80098a0:	f000 f862 	bl	8009968 <_fstat_r>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	dbec      	blt.n	8009882 <__swhatbuf_r+0x12>
 80098a8:	9901      	ldr	r1, [sp, #4]
 80098aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098b2:	4259      	negs	r1, r3
 80098b4:	4159      	adcs	r1, r3
 80098b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098ba:	e7eb      	b.n	8009894 <__swhatbuf_r+0x24>

080098bc <__smakebuf_r>:
 80098bc:	898b      	ldrh	r3, [r1, #12]
 80098be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c0:	079d      	lsls	r5, r3, #30
 80098c2:	4606      	mov	r6, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	d507      	bpl.n	80098d8 <__smakebuf_r+0x1c>
 80098c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	6123      	str	r3, [r4, #16]
 80098d0:	2301      	movs	r3, #1
 80098d2:	6163      	str	r3, [r4, #20]
 80098d4:	b003      	add	sp, #12
 80098d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d8:	ab01      	add	r3, sp, #4
 80098da:	466a      	mov	r2, sp
 80098dc:	f7ff ffc8 	bl	8009870 <__swhatbuf_r>
 80098e0:	9f00      	ldr	r7, [sp, #0]
 80098e2:	4605      	mov	r5, r0
 80098e4:	4639      	mov	r1, r7
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7ff fa62 	bl	8008db0 <_malloc_r>
 80098ec:	b948      	cbnz	r0, 8009902 <__smakebuf_r+0x46>
 80098ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f2:	059a      	lsls	r2, r3, #22
 80098f4:	d4ee      	bmi.n	80098d4 <__smakebuf_r+0x18>
 80098f6:	f023 0303 	bic.w	r3, r3, #3
 80098fa:	f043 0302 	orr.w	r3, r3, #2
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	e7e2      	b.n	80098c8 <__smakebuf_r+0xc>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	6020      	str	r0, [r4, #0]
 8009906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009912:	b15b      	cbz	r3, 800992c <__smakebuf_r+0x70>
 8009914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009918:	4630      	mov	r0, r6
 800991a:	f000 f837 	bl	800998c <_isatty_r>
 800991e:	b128      	cbz	r0, 800992c <__smakebuf_r+0x70>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	f043 0301 	orr.w	r3, r3, #1
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	431d      	orrs	r5, r3
 8009930:	81a5      	strh	r5, [r4, #12]
 8009932:	e7cf      	b.n	80098d4 <__smakebuf_r+0x18>

08009934 <memmove>:
 8009934:	4288      	cmp	r0, r1
 8009936:	b510      	push	{r4, lr}
 8009938:	eb01 0402 	add.w	r4, r1, r2
 800993c:	d902      	bls.n	8009944 <memmove+0x10>
 800993e:	4284      	cmp	r4, r0
 8009940:	4623      	mov	r3, r4
 8009942:	d807      	bhi.n	8009954 <memmove+0x20>
 8009944:	1e43      	subs	r3, r0, #1
 8009946:	42a1      	cmp	r1, r4
 8009948:	d008      	beq.n	800995c <memmove+0x28>
 800994a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800994e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009952:	e7f8      	b.n	8009946 <memmove+0x12>
 8009954:	4402      	add	r2, r0
 8009956:	4601      	mov	r1, r0
 8009958:	428a      	cmp	r2, r1
 800995a:	d100      	bne.n	800995e <memmove+0x2a>
 800995c:	bd10      	pop	{r4, pc}
 800995e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009966:	e7f7      	b.n	8009958 <memmove+0x24>

08009968 <_fstat_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d07      	ldr	r5, [pc, #28]	@ (8009988 <_fstat_r+0x20>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	4611      	mov	r1, r2
 8009974:	602b      	str	r3, [r5, #0]
 8009976:	f7f6 ff50 	bl	800081a <_fstat>
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	d102      	bne.n	8009984 <_fstat_r+0x1c>
 800997e:	682b      	ldr	r3, [r5, #0]
 8009980:	b103      	cbz	r3, 8009984 <_fstat_r+0x1c>
 8009982:	6023      	str	r3, [r4, #0]
 8009984:	bd38      	pop	{r3, r4, r5, pc}
 8009986:	bf00      	nop
 8009988:	20001f88 	.word	0x20001f88

0800998c <_isatty_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d06      	ldr	r5, [pc, #24]	@ (80099a8 <_isatty_r+0x1c>)
 8009990:	2300      	movs	r3, #0
 8009992:	4604      	mov	r4, r0
 8009994:	4608      	mov	r0, r1
 8009996:	602b      	str	r3, [r5, #0]
 8009998:	f7f6 ff4f 	bl	800083a <_isatty>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_isatty_r+0x1a>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_isatty_r+0x1a>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	20001f88 	.word	0x20001f88

080099ac <_sbrk_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d06      	ldr	r5, [pc, #24]	@ (80099c8 <_sbrk_r+0x1c>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	f7f6 ff58 	bl	800086c <_sbrk>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_sbrk_r+0x1a>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_sbrk_r+0x1a>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20001f88 	.word	0x20001f88

080099cc <memcpy>:
 80099cc:	440a      	add	r2, r1
 80099ce:	4291      	cmp	r1, r2
 80099d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d4:	d100      	bne.n	80099d8 <memcpy+0xc>
 80099d6:	4770      	bx	lr
 80099d8:	b510      	push	{r4, lr}
 80099da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e2:	4291      	cmp	r1, r2
 80099e4:	d1f9      	bne.n	80099da <memcpy+0xe>
 80099e6:	bd10      	pop	{r4, pc}

080099e8 <_realloc_r>:
 80099e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ec:	4680      	mov	r8, r0
 80099ee:	4615      	mov	r5, r2
 80099f0:	460c      	mov	r4, r1
 80099f2:	b921      	cbnz	r1, 80099fe <_realloc_r+0x16>
 80099f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f8:	4611      	mov	r1, r2
 80099fa:	f7ff b9d9 	b.w	8008db0 <_malloc_r>
 80099fe:	b92a      	cbnz	r2, 8009a0c <_realloc_r+0x24>
 8009a00:	f7ff f96a 	bl	8008cd8 <_free_r>
 8009a04:	2400      	movs	r4, #0
 8009a06:	4620      	mov	r0, r4
 8009a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0c:	f000 f81a 	bl	8009a44 <_malloc_usable_size_r>
 8009a10:	4285      	cmp	r5, r0
 8009a12:	4606      	mov	r6, r0
 8009a14:	d802      	bhi.n	8009a1c <_realloc_r+0x34>
 8009a16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a1a:	d8f4      	bhi.n	8009a06 <_realloc_r+0x1e>
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4640      	mov	r0, r8
 8009a20:	f7ff f9c6 	bl	8008db0 <_malloc_r>
 8009a24:	4607      	mov	r7, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d0ec      	beq.n	8009a04 <_realloc_r+0x1c>
 8009a2a:	42b5      	cmp	r5, r6
 8009a2c:	462a      	mov	r2, r5
 8009a2e:	4621      	mov	r1, r4
 8009a30:	bf28      	it	cs
 8009a32:	4632      	movcs	r2, r6
 8009a34:	f7ff ffca 	bl	80099cc <memcpy>
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	f7ff f94c 	bl	8008cd8 <_free_r>
 8009a40:	463c      	mov	r4, r7
 8009a42:	e7e0      	b.n	8009a06 <_realloc_r+0x1e>

08009a44 <_malloc_usable_size_r>:
 8009a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a48:	1f18      	subs	r0, r3, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfbc      	itt	lt
 8009a4e:	580b      	ldrlt	r3, [r1, r0]
 8009a50:	18c0      	addlt	r0, r0, r3
 8009a52:	4770      	bx	lr

08009a54 <_init>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	bf00      	nop
 8009a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5a:	bc08      	pop	{r3}
 8009a5c:	469e      	mov	lr, r3
 8009a5e:	4770      	bx	lr

08009a60 <_fini>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr

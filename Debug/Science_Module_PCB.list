
Science_Module_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e50  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009010  08009010  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009138  08009138  0000b168  2**0
                  CONTENTS
  4 .ARM          00000008  08009138  08009138  0000a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009140  08009140  0000b168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009140  08009140  0000a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009144  08009144  0000a144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08009148  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ddc  20000168  080092b0  0000b168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f44  080092b0  0000bf44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b46  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325e  00000000  00000000  0001bcde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b33  00000000  00000000  0001fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de2e  00000000  00000000  00020993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f1d  00000000  00000000  0004e7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105d3a  00000000  00000000  000616de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000445c  00000000  00000000  0016745c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000168 	.word	0x20000168
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008ff8 	.word	0x08008ff8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000016c 	.word	0x2000016c
 80001fc:	08008ff8 	.word	0x08008ff8

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fa9d 	bl	8000812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f872 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f8be 	bl	800045c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002e0:	f006 ff38 	bl	8007154 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 80002e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002e8:	f000 fb08 	bl	80008fc <HAL_Delay>
  printf(">\r\n");
 80002ec:	482f      	ldr	r0, [pc, #188]	@ (80003ac <main+0xdc>)
 80002ee:	f007 ff8b 	bl	8008208 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80002f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fa:	f000 fddf 	bl	8000ebc <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80002fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000302:	f000 fafb 	bl	80008fc <HAL_Delay>

    if (LED2_flag)
 8000306:	4b2a      	ldr	r3, [pc, #168]	@ (80003b0 <main+0xe0>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d005      	beq.n	800031a <main+0x4a>
    {
      HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2108      	movs	r1, #8
 8000312:	4828      	ldr	r0, [pc, #160]	@ (80003b4 <main+0xe4>)
 8000314:	f000 fdba 	bl	8000e8c <HAL_GPIO_WritePin>
 8000318:	e004      	b.n	8000324 <main+0x54>
    }
    else 
    {
      HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2108      	movs	r1, #8
 800031e:	4825      	ldr	r0, [pc, #148]	@ (80003b4 <main+0xe4>)
 8000320:	f000 fdb4 	bl	8000e8c <HAL_GPIO_WritePin>
    }
    if (Pump3_flag)
 8000324:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <main+0xe8>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0e2      	beq.n	80002f2 <main+0x22>
    {
      if (Pump3_dir){ //forward
 800032c:	4b23      	ldr	r3, [pc, #140]	@ (80003bc <main+0xec>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01d      	beq.n	8000370 <main+0xa0>
        HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800033a:	481e      	ldr	r0, [pc, #120]	@ (80003b4 <main+0xe4>)
 800033c:	f000 fda6 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000346:	481b      	ldr	r0, [pc, #108]	@ (80003b4 <main+0xe4>)
 8000348:	f000 fda0 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000352:	4818      	ldr	r0, [pc, #96]	@ (80003b4 <main+0xe4>)
 8000354:	f000 fd9a 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800035e:	4815      	ldr	r0, [pc, #84]	@ (80003b4 <main+0xe4>)
 8000360:	f000 fd94 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2108      	movs	r1, #8
 8000368:	4812      	ldr	r0, [pc, #72]	@ (80003b4 <main+0xe4>)
 800036a:	f000 fd8f 	bl	8000e8c <HAL_GPIO_WritePin>
 800036e:	e7c0      	b.n	80002f2 <main+0x22>
      }
      else { //backward
        HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000376:	480f      	ldr	r0, [pc, #60]	@ (80003b4 <main+0xe4>)
 8000378:	f000 fd88 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000382:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <main+0xe4>)
 8000384:	f000 fd82 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800038e:	4809      	ldr	r0, [pc, #36]	@ (80003b4 <main+0xe4>)
 8000390:	f000 fd7c 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800039a:	4806      	ldr	r0, [pc, #24]	@ (80003b4 <main+0xe4>)
 800039c:	f000 fd76 	bl	8000e8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2108      	movs	r1, #8
 80003a4:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <main+0xe4>)
 80003a6:	f000 fd71 	bl	8000e8c <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80003aa:	e7a2      	b.n	80002f2 <main+0x22>
 80003ac:	08009010 	.word	0x08009010
 80003b0:	20000184 	.word	0x20000184
 80003b4:	48000400 	.word	0x48000400
 80003b8:	20000185 	.word	0x20000185
 80003bc:	20000186 	.word	0x20000186

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b098      	sub	sp, #96	@ 0x60
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	2248      	movs	r2, #72	@ 0x48
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f008 f81a 	bl	8008408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80003e2:	2000      	movs	r0, #0
 80003e4:	f001 ff3a 	bl	800225c <HAL_PWREx_ControlVoltageScaling>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003ee:	f000 f8e8 	bl	80005c2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000400:	2303      	movs	r3, #3
 8000402:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000404:	2301      	movs	r3, #1
 8000406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000408:	231e      	movs	r3, #30
 800040a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000410:	2302      	movs	r3, #2
 8000412:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	4618      	mov	r0, r3
 800041e:	f001 ffd1 	bl	80023c4 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000428:	f000 f8cb 	bl	80005c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2303      	movs	r3, #3
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2105      	movs	r1, #5
 8000444:	4618      	mov	r0, r3
 8000446:	f002 fc39 	bl	8002cbc <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000450:	f000 f8b7 	bl	80005c2 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3760      	adds	r7, #96	@ 0x60
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	@ 0x28
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b47      	ldr	r3, [pc, #284]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	4a46      	ldr	r2, [pc, #280]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047e:	4b44      	ldr	r3, [pc, #272]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	f003 0304 	and.w	r3, r3, #4
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800048a:	4b41      	ldr	r3, [pc, #260]	@ (8000590 <MX_GPIO_Init+0x134>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	4a40      	ldr	r2, [pc, #256]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000496:	4b3e      	ldr	r3, [pc, #248]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	4a3a      	ldr	r2, [pc, #232]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ae:	4b38      	ldr	r3, [pc, #224]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b35      	ldr	r3, [pc, #212]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004be:	4a34      	ldr	r2, [pc, #208]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004c0:	f043 0302 	orr.w	r3, r3, #2
 80004c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004c6:	4b32      	ldr	r3, [pc, #200]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80004d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004dc:	f000 fcd6 	bl	8000e8c <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 80004e0:	2200      	movs	r2, #0
 80004e2:	f64f 31cf 	movw	r1, #64463	@ 0xfbcf
 80004e6:	482b      	ldr	r0, [pc, #172]	@ (8000594 <MX_GPIO_Init+0x138>)
 80004e8:	f000 fcd0 	bl	8000e8c <HAL_GPIO_WritePin>
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SM_EN__GPIO_Port, MCU_SM_EN__Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2108      	movs	r1, #8
 80004f0:	4829      	ldr	r0, [pc, #164]	@ (8000598 <MX_GPIO_Init+0x13c>)
 80004f2:	f000 fccb 	bl	8000e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_Flow1_Pin MCU_Flow2_Pin MCU_Flow3_Pin */
  GPIO_InitStruct.Pin = MCU_Flow1_Pin|MCU_Flow2_Pin|MCU_Flow3_Pin;
 80004f6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4619      	mov	r1, r3
 800050a:	4824      	ldr	r0, [pc, #144]	@ (800059c <MX_GPIO_Init+0x140>)
 800050c:	f000 fb2c 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_BANK_EN_Pin MCU_Pump3_HS_LR_Pin MCU_Pump3_LS_LR_Pin MCU_Pump3_HS_RL_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 8000510:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000514:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052c:	f000 fb1c 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_Pump3_LS_RL_Pin MCU_Pump2_HS_LR_Pin MCU_Pump2_LS_LR_Pin MCU_Pump2_LS_RL_Pin
                           P3_LS_RL_Pin P3_LS_LR_Pin P3_HS_LR_Pin P3_HS_RL_Pin
                           LED2_Pin MCU_SM_PUL__Pin MCU_SM_DIR__Pin MCU_VM_EN_Pin
                           MCU_AM_EN_Pin */
  GPIO_InitStruct.Pin = MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 8000530:	f64f 33cf 	movw	r3, #64463	@ 0xfbcf
 8000534:	617b      	str	r3, [r7, #20]
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	4812      	ldr	r0, [pc, #72]	@ (8000594 <MX_GPIO_Init+0x138>)
 800054a:	f000 fb0d 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_Pump2_HS_RL_Pin */
  GPIO_InitStruct.Pin = MCU_Pump2_HS_RL_Pin;
 800054e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000554:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_Pump2_HS_RL_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <MX_GPIO_Init+0x138>)
 8000566:	f000 faff 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SM_EN__Pin */
  GPIO_InitStruct.Pin = MCU_SM_EN__Pin;
 800056a:	2308      	movs	r3, #8
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_SM_EN__GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_GPIO_Init+0x13c>)
 8000582:	f000 faf1 	bl	8000b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000586:	bf00      	nop
 8000588:	3728      	adds	r7, #40	@ 0x28
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	48000400 	.word	0x48000400
 8000598:	48001c00 	.word	0x48001c00
 800059c:	48000800 	.word	0x48000800

080005a0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	f006 ff72 	bl	800749c <CDC_Transmit_FS>
  return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c6:	b672      	cpsid	i
}
 80005c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x44>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x44>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_MspInit+0x44>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_MspInit+0x44>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <NMI_Handler+0x4>

08000620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <HardFault_Handler+0x4>

08000628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <MemManage_Handler+0x4>

08000630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <UsageFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066e:	f000 f925 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <OTG_FS_IRQHandler+0x10>)
 800067e:	f000 fd75 	bl	800116c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200016f4 	.word	0x200016f4

0800068c <_read>:
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00a      	b.n	80006b4 <_read+0x28>
 800069e:	f3af 8000 	nop.w
 80006a2:	4601      	mov	r1, r0
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	b2ca      	uxtb	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf0      	blt.n	800069e <_read+0x12>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <_close>:
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <_fstat>:
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	2300      	movs	r3, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <_isatty>:
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	2301      	movs	r3, #1
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <_lseek>:
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2300      	movs	r3, #0
 8000722:	4618      	mov	r0, r3
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <_sbrk>:
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	4a14      	ldr	r2, [pc, #80]	@ (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
 8000760:	f007 fea0 	bl	80084a4 <__errno>
 8000764:	4603      	mov	r3, r0
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <_sbrk+0x64>)
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20050000 	.word	0x20050000
 8000790:	00000400 	.word	0x00000400
 8000794:	20000188 	.word	0x20000188
 8000798:	20001f48 	.word	0x20001f48

0800079c <SystemInit>:
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <SystemInit+0x20>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a6:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <SystemInit+0x20>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007f8 <LoopForever+0x2>
 80007c4:	f7ff ffea 	bl	800079c <SystemInit>
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <LoopForever+0x6>)
 80007ca:	490d      	ldr	r1, [pc, #52]	@ (8000800 <LoopForever+0xa>)
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <LoopForever+0xe>)
 80007ce:	2300      	movs	r3, #0
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:
 80007d2:	58d4      	ldr	r4, [r2, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:
 80007d8:	18c4      	adds	r4, r0, r3
 80007da:	428c      	cmp	r4, r1
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <LoopForever+0x12>)
 80007e0:	4c0a      	ldr	r4, [pc, #40]	@ (800080c <LoopForever+0x16>)
 80007e2:	2300      	movs	r3, #0
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:
 80007ea:	42a2      	cmp	r2, r4
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>
 80007ee:	f007 fe5f 	bl	80084b0 <__libc_init_array>
 80007f2:	f7ff fd6d 	bl	80002d0 <main>

080007f6 <LoopForever>:
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
 80007f8:	20050000 	.word	0x20050000
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000168 	.word	0x20000168
 8000804:	08009148 	.word	0x08009148
 8000808:	20000168 	.word	0x20000168
 800080c:	20001f44 	.word	0x20001f44

08000810 <ADC1_2_IRQHandler>:
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>

08000812 <HAL_Init>:
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	2300      	movs	r3, #0
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f961 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>
 8000822:	200f      	movs	r0, #15
 8000824:	f000 f80e 	bl	8000844 <HAL_InitTick>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <HAL_Init+0x22>
 800082e:	2301      	movs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	e001      	b.n	8000838 <HAL_Init+0x26>
 8000834:	f7ff fecc 	bl	80005d0 <HAL_MspInit>
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_InitTick>:
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <HAL_InitTick+0x6c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d023      	beq.n	80008a0 <HAL_InitTick+0x5c>
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <HAL_InitTick+0x70>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HAL_InitTick+0x6c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f96d 	bl	8000b4e <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10f      	bne.n	800089a <HAL_InitTick+0x56>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d809      	bhi.n	8000894 <HAL_InitTick+0x50>
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f000 f937 	bl	8000afa <HAL_NVIC_SetPriority>
 800088c:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_InitTick+0x74>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e007      	b.n	80008a4 <HAL_InitTick+0x60>
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e004      	b.n	80008a4 <HAL_InitTick+0x60>
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e001      	b.n	80008a4 <HAL_InitTick+0x60>
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4618      	mov	r0, r3
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	2000018c 	.word	0x2000018c

080008e4 <HAL_GetTick>:
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	2000018c 	.word	0x2000018c

080008fc <HAL_Delay>:
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	f7ff ffee 	bl	80008e4 <HAL_GetTick>
 8000908:	60b8      	str	r0, [r7, #8]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_Delay+0x44>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	bf00      	nop
 8000924:	f7ff ffde 	bl	80008e4 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008

08000944 <__NVIC_SetPriorityGrouping>:
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
 8000990:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4907      	ldr	r1, [pc, #28]	@ (80009e0 <__NVIC_EnableIRQ+0x38>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	@ (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	@ (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	@ 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
 8000a90:	4313      	orrs	r3, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	@ 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <SysTick_Config>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff8e 	bl	80009e4 <__NVIC_SetPriority>
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff29 	bl	8000944 <__NVIC_SetPriorityGrouping>
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	f7ff ff3e 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff8e 	bl	8000a38 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff31 	bl	80009a8 <__NVIC_EnableIRQ>
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e166      	b.n	8000e46 <HAL_GPIO_Init+0x2de>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8158 	beq.w	8000e40 <HAL_GPIO_Init+0x2d8>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_GPIO_Init+0x40>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d130      	bne.n	8000c0a <HAL_GPIO_Init+0xa2>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	f003 0201 	and.w	r2, r3, #1
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0xde>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	6939      	ldr	r1, [r7, #16]
 8000c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0203 	and.w	r2, r3, #3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 80b2 	beq.w	8000e40 <HAL_GPIO_Init+0x2d8>
 8000cdc:	4b61      	ldr	r3, [pc, #388]	@ (8000e64 <HAL_GPIO_Init+0x2fc>)
 8000cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce0:	4a60      	ldr	r2, [pc, #384]	@ (8000e64 <HAL_GPIO_Init+0x2fc>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8000e64 <HAL_GPIO_Init+0x2fc>)
 8000cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	4a5c      	ldr	r2, [pc, #368]	@ (8000e68 <HAL_GPIO_Init+0x300>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d1e:	d02b      	beq.n	8000d78 <HAL_GPIO_Init+0x210>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a52      	ldr	r2, [pc, #328]	@ (8000e6c <HAL_GPIO_Init+0x304>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d025      	beq.n	8000d74 <HAL_GPIO_Init+0x20c>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a51      	ldr	r2, [pc, #324]	@ (8000e70 <HAL_GPIO_Init+0x308>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d01f      	beq.n	8000d70 <HAL_GPIO_Init+0x208>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a50      	ldr	r2, [pc, #320]	@ (8000e74 <HAL_GPIO_Init+0x30c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d019      	beq.n	8000d6c <HAL_GPIO_Init+0x204>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8000e78 <HAL_GPIO_Init+0x310>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d013      	beq.n	8000d68 <HAL_GPIO_Init+0x200>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a4e      	ldr	r2, [pc, #312]	@ (8000e7c <HAL_GPIO_Init+0x314>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d00d      	beq.n	8000d64 <HAL_GPIO_Init+0x1fc>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e80 <HAL_GPIO_Init+0x318>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d007      	beq.n	8000d60 <HAL_GPIO_Init+0x1f8>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a4c      	ldr	r2, [pc, #304]	@ (8000e84 <HAL_GPIO_Init+0x31c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d101      	bne.n	8000d5c <HAL_GPIO_Init+0x1f4>
 8000d58:	2307      	movs	r3, #7
 8000d5a:	e00e      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	e00c      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d60:	2306      	movs	r3, #6
 8000d62:	e00a      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d64:	2305      	movs	r3, #5
 8000d66:	e008      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e004      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	f002 0203 	and.w	r2, r2, #3
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4937      	ldr	r1, [pc, #220]	@ (8000e68 <HAL_GPIO_Init+0x300>)
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d98:	4b3b      	ldr	r3, [pc, #236]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x254>
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	4a32      	ldr	r2, [pc, #200]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6093      	str	r3, [r2, #8]
 8000dc2:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x27e>
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4a28      	ldr	r2, [pc, #160]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	60d3      	str	r3, [r2, #12]
 8000dec:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2a8>
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6053      	str	r3, [r2, #4]
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2d2>
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4a13      	ldr	r2, [pc, #76]	@ (8000e88 <HAL_GPIO_Init+0x320>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f47f ae91 	bne.w	8000b78 <HAL_GPIO_Init+0x10>
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	48000800 	.word	0x48000800
 8000e74:	48000c00 	.word	0x48000c00
 8000e78:	48001000 	.word	0x48001000
 8000e7c:	48001400 	.word	0x48001400
 8000e80:	48001800 	.word	0x48001800
 8000e84:	48001c00 	.word	0x48001c00
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_GPIO_WritePin>:
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	807b      	strh	r3, [r7, #2]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	707b      	strb	r3, [r7, #1]
 8000e9c:	787b      	ldrb	r3, [r7, #1]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_WritePin+0x1e>
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	619a      	str	r2, [r3, #24]
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_WritePin+0x24>
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_GPIO_TogglePin>:
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	041a      	lsls	r2, r3, #16
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43d9      	mvns	r1, r3
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	400b      	ands	r3, r1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_PCD_Init>:
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_PCD_Init+0x12>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e101      	b.n	8001106 <HAL_PCD_Init+0x216>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d106      	bne.n	8000f1c <HAL_PCD_Init+0x2c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f006 fc1a 	bl	8007750 <HAL_PCD_MspInit>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	719a      	strb	r2, [r3, #6]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 ff85 	bl	8003e3e <USB_DisableGlobalInt>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7c1a      	ldrb	r2, [r3, #16]
 8000f3c:	f88d 2000 	strb.w	r2, [sp]
 8000f40:	3304      	adds	r3, #4
 8000f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f44:	f002 fea0 	bl	8003c88 <USB_CoreInit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <HAL_PCD_Init+0x6a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2202      	movs	r2, #2
 8000f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0d5      	b.n	8001106 <HAL_PCD_Init+0x216>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 ff7d 	bl	8003e60 <USB_SetCurrentMode>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <HAL_PCD_Init+0x88>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8000f74:	2301      	movs	r3, #1
 8000f76:	e0c6      	b.n	8001106 <HAL_PCD_Init+0x216>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e04a      	b.n	8001014 <HAL_PCD_Init+0x124>
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3315      	adds	r3, #21
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3314      	adds	r3, #20
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	b298      	uxth	r0, r3
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	332e      	adds	r3, #46	@ 0x2e
 8000fba:	4602      	mov	r2, r0
 8000fbc:	801a      	strh	r2, [r3, #0]
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	3318      	adds	r3, #24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	331c      	adds	r3, #28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3320      	adds	r3, #32
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3324      	adds	r3, #36	@ 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3af      	bcc.n	8000f7e <HAL_PCD_Init+0x8e>
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e044      	b.n	80010ae <HAL_PCD_Init+0x1be>
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	3301      	adds	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3b5      	bcc.n	8001024 <HAL_PCD_Init+0x134>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7c1a      	ldrb	r2, [r3, #16]
 80010c0:	f88d 2000 	strb.w	r2, [sp]
 80010c4:	3304      	adds	r3, #4
 80010c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c8:	f002 ff16 	bl	8003ef8 <USB_DevInit>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <HAL_PCD_Init+0x1ee>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2202      	movs	r2, #2
 80010d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 80010da:	2301      	movs	r3, #1
 80010dc:	e013      	b.n	8001106 <HAL_PCD_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	745a      	strb	r2, [r3, #17]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d102      	bne.n	80010fa <HAL_PCD_Init+0x20a>
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f001 f86d 	bl	80021d4 <HAL_PCDEx_ActivateLPM>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fecd 	bl	8004e9e <USB_DevDisconnect>
 8001104:	2300      	movs	r3, #0
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_PCD_Start>:
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_PCD_Start+0x1c>
 8001126:	2302      	movs	r3, #2
 8001128:	e01c      	b.n	8001164 <HAL_PCD_Start+0x56>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b5b      	ldrb	r3, [r3, #13]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <HAL_PCD_Start+0x38>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800113e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	639a      	str	r2, [r3, #56]	@ 0x38
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fe66 	bl	8003e1c <USB_EnableGlobalInt>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fe81 	bl	8004e5c <USB_DevConnect>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001162:	2300      	movs	r3, #0
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_PCD_IRQHandler>:
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08d      	sub	sp, #52	@ 0x34
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f003 ff3f 	bl	8005006 <USB_GetMode>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 8481 	bne.w	8001a92 <HAL_PCD_IRQHandler+0x926>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fea3 	bl	8004ee0 <USB_ReadInterrupts>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 8477 	beq.w	8001a90 <HAL_PCD_IRQHandler+0x924>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fe90 	bl	8004ee0 <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d107      	bne.n	80011da <HAL_PCD_IRQHandler+0x6e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f002 0202 	and.w	r2, r2, #2
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fe7e 	bl	8004ee0 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	d161      	bne.n	80012b2 <HAL_PCD_IRQHandler+0x146>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0210 	bic.w	r2, r2, #16
 80011fc:	619a      	str	r2, [r3, #24]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f003 020f 	and.w	r2, r3, #15
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	0c5b      	lsrs	r3, r3, #17
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	2b02      	cmp	r3, #2
 8001228:	d124      	bne.n	8001274 <HAL_PCD_IRQHandler+0x108>
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d035      	beq.n	80012a2 <HAL_PCD_IRQHandler+0x136>
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	68d9      	ldr	r1, [r3, #12]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	b29b      	uxth	r3, r3
 8001240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001244:	b29b      	uxth	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	6a38      	ldr	r0, [r7, #32]
 800124a:	f003 fcb5 	bl	8004bb8 <USB_ReadPacket>
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800125a:	441a      	add	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126c:	441a      	add	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	e016      	b.n	80012a2 <HAL_PCD_IRQHandler+0x136>
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	0c5b      	lsrs	r3, r3, #17
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	2b06      	cmp	r3, #6
 800127e:	d110      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x136>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001286:	2208      	movs	r2, #8
 8001288:	4619      	mov	r1, r3
 800128a:	6a38      	ldr	r0, [r7, #32]
 800128c:	f003 fc94 	bl	8004bb8 <USB_ReadPacket>
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129c:	441a      	add	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	615a      	str	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0210 	orr.w	r2, r2, #16
 80012b0:	619a      	str	r2, [r3, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fe12 	bl	8004ee0 <USB_ReadInterrupts>
 80012bc:	4603      	mov	r3, r0
 80012be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80012c6:	f040 80a7 	bne.w	8001418 <HAL_PCD_IRQHandler+0x2ac>
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fe17 	bl	8004f06 <USB_ReadDevAllOutEpInterrupt>
 80012d8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80012da:	e099      	b.n	8001410 <HAL_PCD_IRQHandler+0x2a4>
 80012dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 808e 	beq.w	8001404 <HAL_PCD_IRQHandler+0x298>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fe3b 	bl	8004f6e <USB_ReadDevOutEPInterrupt>
 80012f8:	6138      	str	r0, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00c      	beq.n	800131e <HAL_PCD_IRQHandler+0x1b2>
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	015a      	lsls	r2, r3, #5
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	4413      	add	r3, r2
 800130c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001310:	461a      	mov	r2, r3
 8001312:	2301      	movs	r3, #1
 8001314:	6093      	str	r3, [r2, #8]
 8001316:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fe81 	bl	8002020 <PCD_EP_OutXfrComplete_int>
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <HAL_PCD_IRQHandler+0x1d6>
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	015a      	lsls	r2, r3, #5
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001334:	461a      	mov	r2, r3
 8001336:	2308      	movs	r3, #8
 8001338:	6093      	str	r3, [r2, #8]
 800133a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 febd 	bl	80020bc <PCD_EP_OutSetupPacket_int>
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <HAL_PCD_IRQHandler+0x1f2>
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	015a      	lsls	r2, r3, #5
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	4413      	add	r3, r2
 8001354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001358:	461a      	mov	r2, r3
 800135a:	2310      	movs	r3, #16
 800135c:	6093      	str	r3, [r2, #8]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d030      	beq.n	80013ca <HAL_PCD_IRQHandler+0x25e>
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001370:	2b80      	cmp	r3, #128	@ 0x80
 8001372:	d109      	bne.n	8001388 <HAL_PCD_IRQHandler+0x21c>
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001386:	6053      	str	r3, [r2, #4]
 8001388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	78db      	ldrb	r3, [r3, #3]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d108      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x24c>
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2200      	movs	r2, #0
 80013aa:	70da      	strb	r2, [r3, #3]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f006 fb20 	bl	80079f8 <HAL_PCD_ISOOUTIncompleteCallback>
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	015a      	lsls	r2, r3, #5
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	4413      	add	r3, r2
 80013c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c4:	461a      	mov	r2, r3
 80013c6:	2302      	movs	r3, #2
 80013c8:	6093      	str	r3, [r2, #8]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d008      	beq.n	80013e6 <HAL_PCD_IRQHandler+0x27a>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	015a      	lsls	r2, r3, #5
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013e0:	461a      	mov	r2, r3
 80013e2:	2320      	movs	r3, #32
 80013e4:	6093      	str	r3, [r2, #8]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <HAL_PCD_IRQHandler+0x298>
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013fc:	461a      	mov	r2, r3
 80013fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001402:	6093      	str	r3, [r2, #8]
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	3301      	adds	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
 800140a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001412:	2b00      	cmp	r3, #0
 8001414:	f47f af62 	bne.w	80012dc <HAL_PCD_IRQHandler+0x170>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f003 fd5f 	bl	8004ee0 <USB_ReadInterrupts>
 8001422:	4603      	mov	r3, r0
 8001424:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001428:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800142c:	f040 80a4 	bne.w	8001578 <HAL_PCD_IRQHandler+0x40c>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fd80 	bl	8004f3a <USB_ReadDevAllInEpInterrupt>
 800143a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001440:	e096      	b.n	8001570 <HAL_PCD_IRQHandler+0x404>
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 808b 	beq.w	8001564 <HAL_PCD_IRQHandler+0x3f8>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fda6 	bl	8004faa <USB_ReadDevInEPInterrupt>
 800145e:	6138      	str	r0, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d020      	beq.n	80014ac <HAL_PCD_IRQHandler+0x340>
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800147e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	69f9      	ldr	r1, [r7, #28]
 8001486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800148a:	4013      	ands	r3, r2
 800148c:	634b      	str	r3, [r1, #52]	@ 0x34
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800149a:	461a      	mov	r2, r3
 800149c:	2301      	movs	r3, #1
 800149e:	6093      	str	r3, [r2, #8]
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f006 fa11 	bl	80078ce <HAL_PCD_DataInStageCallback>
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <HAL_PCD_IRQHandler+0x35c>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014c2:	461a      	mov	r2, r3
 80014c4:	2308      	movs	r3, #8
 80014c6:	6093      	str	r3, [r2, #8]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d008      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x378>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014de:	461a      	mov	r2, r3
 80014e0:	2310      	movs	r3, #16
 80014e2:	6093      	str	r3, [r2, #8]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <HAL_PCD_IRQHandler+0x394>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014fa:	461a      	mov	r2, r3
 80014fc:	2340      	movs	r3, #64	@ 0x40
 80014fe:	6093      	str	r3, [r2, #8]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d023      	beq.n	8001552 <HAL_PCD_IRQHandler+0x3e6>
 800150a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800150c:	6a38      	ldr	r0, [r7, #32]
 800150e:	f002 fe3b 	bl	8004188 <USB_FlushTxFifo>
 8001512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	3310      	adds	r3, #16
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	3304      	adds	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	78db      	ldrb	r3, [r3, #3]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d108      	bne.n	8001540 <HAL_PCD_IRQHandler+0x3d4>
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2200      	movs	r2, #0
 8001532:	70da      	strb	r2, [r3, #3]
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f006 fa6e 	bl	8007a1c <HAL_PCD_ISOINIncompleteCallback>
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800154c:	461a      	mov	r2, r3
 800154e:	2302      	movs	r3, #2
 8001550:	6093      	str	r3, [r2, #8]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_PCD_IRQHandler+0x3f8>
 800155c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fcd6 	bl	8001f10 <PCD_WriteEmptyTxFifo>
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001572:	2b00      	cmp	r3, #0
 8001574:	f47f af65 	bne.w	8001442 <HAL_PCD_IRQHandler+0x2d6>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fcaf 	bl	8004ee0 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800158c:	d122      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x468>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d108      	bne.n	80015be <HAL_PCD_IRQHandler+0x452>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 80015b4:	2100      	movs	r1, #0
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f006 fca2 	bl	8007f00 <HAL_PCDEx_LPM_Callback>
 80015bc:	e002      	b.n	80015c4 <HAL_PCD_IRQHandler+0x458>
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f006 f9f2 	bl	80079a8 <HAL_PCD_ResumeCallback>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fc81 	bl	8004ee0 <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015e8:	d112      	bne.n	8001610 <HAL_PCD_IRQHandler+0x4a4>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d102      	bne.n	8001600 <HAL_PCD_IRQHandler+0x494>
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f006 f9ae 	bl	800795c <HAL_PCD_SuspendCallback>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fc63 	bl	8004ee0 <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001624:	d121      	bne.n	800166a <HAL_PCD_IRQHandler+0x4fe>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800163c:	2b00      	cmp	r3, #0
 800163e:	d111      	bne.n	8001664 <HAL_PCD_IRQHandler+0x4f8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	f003 020f 	and.w	r2, r3, #15
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0
 800165a:	2101      	movs	r1, #1
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f006 fc4f 	bl	8007f00 <HAL_PCDEx_LPM_Callback>
 8001662:	e002      	b.n	800166a <HAL_PCD_IRQHandler+0x4fe>
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f006 f979 	bl	800795c <HAL_PCD_SuspendCallback>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fc36 	bl	8004ee0 <USB_ReadInterrupts>
 8001674:	4603      	mov	r3, r0
 8001676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800167a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800167e:	f040 80b6 	bne.w	80017ee <HAL_PCD_IRQHandler+0x682>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6053      	str	r3, [r2, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2110      	movs	r1, #16
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fd73 	bl	8004188 <USB_FlushTxFifo>
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a6:	e046      	b.n	8001736 <HAL_PCD_IRQHandler+0x5ca>
 80016a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016ba:	6093      	str	r3, [r2, #8]
 80016bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016be:	015a      	lsls	r2, r3, #5
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	4413      	add	r3, r2
 80016c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016cc:	0151      	lsls	r1, r2, #5
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	440a      	add	r2, r1
 80016d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80016d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016e8:	461a      	mov	r2, r3
 80016ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016ee:	6093      	str	r3, [r2, #8]
 80016f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001700:	0151      	lsls	r1, r2, #5
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	440a      	add	r2, r1
 8001706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800170a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001720:	0151      	lsls	r1, r2, #5
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	440a      	add	r2, r1
 8001726:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800172a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001732:	3301      	adds	r3, #1
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	461a      	mov	r2, r3
 800173c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173e:	4293      	cmp	r3, r2
 8001740:	d3b2      	bcc.n	80016a8 <HAL_PCD_IRQHandler+0x53c>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001750:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7bdb      	ldrb	r3, [r3, #15]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d016      	beq.n	800178c <HAL_PCD_IRQHandler+0x620>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800176e:	f043 030b 	orr.w	r3, r3, #11
 8001772:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001784:	f043 030b 	orr.w	r3, r3, #11
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	e015      	b.n	80017b8 <HAL_PCD_IRQHandler+0x64c>
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800179a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800179e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80017a2:	6153      	str	r3, [r2, #20]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b2:	f043 030b 	orr.w	r3, r3, #11
 80017b6:	6113      	str	r3, [r2, #16]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f003 fc45 	bl	8005068 <USB_EP0_OutStart>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fb74 	bl	8004ee0 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001802:	d123      	bne.n	800184c <HAL_PCD_IRQHandler+0x6e0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fc0a 	bl	8005022 <USB_ActivateSetup>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fd31 	bl	800427a <USB_GetDevSpeed>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	71da      	strb	r2, [r3, #7]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681c      	ldr	r4, [r3, #0]
 8001824:	f001 fc10 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8001828:	4601      	mov	r1, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	79db      	ldrb	r3, [r3, #7]
 800182e:	461a      	mov	r2, r3
 8001830:	4620      	mov	r0, r4
 8001832:	f002 fa57 	bl	8003ce4 <USB_SetTurnaroundTime>
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f006 f871 	bl	800791e <HAL_PCD_ResetCallback>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fb45 	bl	8004ee0 <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b08      	cmp	r3, #8
 800185e:	d10a      	bne.n	8001876 <HAL_PCD_IRQHandler+0x70a>
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f006 f84e 	bl	8007902 <HAL_PCD_SOFCallback>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f002 0208 	and.w	r2, r2, #8
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fb30 	bl	8004ee0 <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001886:	2b80      	cmp	r3, #128	@ 0x80
 8001888:	d123      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x766>
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	619a      	str	r2, [r3, #24]
 8001896:	2301      	movs	r3, #1
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
 800189a:	e014      	b.n	80018c6 <HAL_PCD_IRQHandler+0x75a>
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x754>
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4619      	mov	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 faf7 	bl	8001eae <HAL_PCD_EP_Abort>
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	3301      	adds	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	791b      	ldrb	r3, [r3, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d3e4      	bcc.n	800189c <HAL_PCD_IRQHandler+0x730>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fb02 	bl	8004ee0 <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018e6:	d13c      	bne.n	8001962 <HAL_PCD_IRQHandler+0x7f6>
 80018e8:	2301      	movs	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	e02b      	b.n	8001946 <HAL_PCD_IRQHandler+0x7da>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3318      	adds	r3, #24
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d115      	bne.n	8001940 <HAL_PCD_IRQHandler+0x7d4>
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da12      	bge.n	8001940 <HAL_PCD_IRQHandler+0x7d4>
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3317      	adds	r3, #23
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fab7 	bl	8001eae <HAL_PCD_EP_Abort>
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	3301      	adds	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	791b      	ldrb	r3, [r3, #4]
 800194a:	461a      	mov	r2, r3
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	4293      	cmp	r3, r2
 8001950:	d3cd      	bcc.n	80018ee <HAL_PCD_IRQHandler+0x782>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 faba 	bl	8004ee0 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001976:	d156      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x8ba>
 8001978:	2301      	movs	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
 800197c:	e045      	b.n	8001a0a <HAL_PCD_IRQHandler+0x89e>
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d12e      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x898>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da2b      	bge.n	8001a04 <HAL_PCD_IRQHandler+0x898>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	429a      	cmp	r2, r3
 80019be:	d121      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x898>
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	619a      	str	r2, [r3, #24]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x898>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a00:	6053      	str	r3, [r2, #4]
 8001a02:	e008      	b.n	8001a16 <HAL_PCD_IRQHandler+0x8aa>
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	3301      	adds	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	791b      	ldrb	r3, [r3, #4]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d3b3      	bcc.n	800197e <HAL_PCD_IRQHandler+0x812>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fa58 	bl	8004ee0 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a3a:	d10a      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x8e6>
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f005 ffff 	bl	8007a40 <HAL_PCD_ConnectCallback>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fa42 	bl	8004ee0 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d115      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x926>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_PCD_IRQHandler+0x912>
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f005 ffef 	bl	8007a5c <HAL_PCD_DisconnectCallback>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	e000      	b.n	8001a92 <HAL_PCD_IRQHandler+0x926>
 8001a90:	bf00      	nop
 8001a92:	3734      	adds	r7, #52	@ 0x34
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}

08001a98 <HAL_PCD_SetAddress>:
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_PCD_SetAddress+0x1a>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e012      	b.n	8001ad8 <HAL_PCD_SetAddress+0x40>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	745a      	strb	r2, [r3, #17]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 f9a1 	bl	8004e10 <USB_SetDevAddress>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_PCD_EP_Open>:
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	70fb      	strb	r3, [r7, #3]
 8001af2:	460b      	mov	r3, r1
 8001af4:	803b      	strh	r3, [r7, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	70bb      	strb	r3, [r7, #2]
 8001afa:	2300      	movs	r3, #0
 8001afc:	72fb      	strb	r3, [r7, #11]
 8001afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da0f      	bge.n	8001b26 <HAL_PCD_EP_Open+0x46>
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3310      	adds	r3, #16
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	705a      	strb	r2, [r3, #1]
 8001b24:	e00f      	b.n	8001b46 <HAL_PCD_EP_Open+0x66>
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	705a      	strb	r2, [r3, #1]
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	78ba      	ldrb	r2, [r7, #2]
 8001b60:	711a      	strb	r2, [r3, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_PCD_EP_Open+0x94>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	835a      	strh	r2, [r3, #26]
 8001b74:	78bb      	ldrb	r3, [r7, #2]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d102      	bne.n	8001b80 <HAL_PCD_EP_Open+0xa0>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	715a      	strb	r2, [r3, #5]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_EP_Open+0xae>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e00e      	b.n	8001bac <HAL_PCD_EP_Open+0xcc>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68f9      	ldr	r1, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fb8b 	bl	80042b8 <USB_ActivateEndpoint>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001baa:	7afb      	ldrb	r3, [r7, #11]
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_PCD_EP_Close>:
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
 8001bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	da0f      	bge.n	8001be8 <HAL_PCD_EP_Close+0x34>
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	705a      	strb	r2, [r3, #1]
 8001be6:	e00f      	b.n	8001c08 <HAL_PCD_EP_Close+0x54>
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 020f 	and.w	r2, r3, #15
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3304      	adds	r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	705a      	strb	r2, [r3, #1]
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_PCD_EP_Close+0x6e>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e00e      	b.n	8001c40 <HAL_PCD_EP_Close+0x8c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fbc9 	bl	80043c8 <USB_DeactivateEndpoint>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001c3e:	2300      	movs	r3, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_PCD_EP_Receive>:
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	72fb      	strb	r3, [r7, #11]
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6979      	ldr	r1, [r7, #20]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fc6f 	bl	8004580 <USB_EPStartXfer>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PCD_EP_GetRxCount>:
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_PCD_EP_Transmit>:
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	72fb      	strb	r3, [r7, #11]
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 020f 	and.w	r2, r3, #15
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3310      	adds	r3, #16
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	705a      	strb	r2, [r3, #1]
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6979      	ldr	r1, [r7, #20]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 fc26 	bl	8004580 <USB_EPStartXfer>
 8001d34:	2300      	movs	r3, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_SetStall>:
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	7912      	ldrb	r2, [r2, #4]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_PCD_EP_SetStall+0x1e>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e04e      	b.n	8001dfa <HAL_PCD_EP_SetStall+0xbc>
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0f      	bge.n	8001d84 <HAL_PCD_EP_SetStall+0x46>
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3310      	adds	r3, #16
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	705a      	strb	r2, [r3, #1]
 8001d82:	e00d      	b.n	8001da0 <HAL_PCD_EP_SetStall+0x62>
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	3304      	adds	r3, #4
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	709a      	strb	r2, [r3, #2]
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_EP_SetStall+0x82>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e01c      	b.n	8001dfa <HAL_PCD_EP_SetStall+0xbc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 ff4a 	bl	8004c68 <USB_EPSetStall>
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d108      	bne.n	8001df0 <HAL_PCD_EP_SetStall+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f003 f93c 	bl	8005068 <USB_EP0_OutStart>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_PCD_EP_ClrStall>:
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	7912      	ldrb	r2, [r2, #4]
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_PCD_EP_ClrStall+0x1e>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e042      	b.n	8001ea6 <HAL_PCD_EP_ClrStall+0xa4>
 8001e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0f      	bge.n	8001e48 <HAL_PCD_EP_ClrStall+0x46>
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3310      	adds	r3, #16
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	705a      	strb	r2, [r3, #1]
 8001e46:	e00f      	b.n	8001e68 <HAL_PCD_EP_ClrStall+0x66>
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	705a      	strb	r2, [r3, #1]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	709a      	strb	r2, [r3, #2]
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_EP_ClrStall+0x86>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e00e      	b.n	8001ea6 <HAL_PCD_EP_ClrStall+0xa4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 ff54 	bl	8004d44 <USB_EPClearStall>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_PCD_EP_Abort>:
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	70fb      	strb	r3, [r7, #3]
 8001eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da0c      	bge.n	8001edc <HAL_PCD_EP_Abort+0x2e>
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e00c      	b.n	8001ef6 <HAL_PCD_EP_Abort+0x48>
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fd77 	bl	80049f0 <USB_EPStopXfer>
 8001f02:	4603      	mov	r3, r0
 8001f04:	72fb      	strb	r3, [r7, #11]
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <PCD_WriteEmptyTxFifo>:
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	3310      	adds	r3, #16
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d901      	bls.n	8001f48 <PCD_WriteEmptyTxFifo+0x38>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e067      	b.n	8002018 <PCD_WriteEmptyTxFifo+0x108>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d902      	bls.n	8001f64 <PCD_WriteEmptyTxFifo+0x54>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3303      	adds	r3, #3
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	e026      	b.n	8001fbc <PCD_WriteEmptyTxFifo+0xac>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d902      	bls.n	8001f8a <PCD_WriteEmptyTxFifo+0x7a>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	68d9      	ldr	r1, [r3, #12]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f002 fdd0 	bl	8004b44 <USB_WritePacket>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	441a      	add	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	441a      	add	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d809      	bhi.n	8001fe6 <PCD_WriteEmptyTxFifo+0xd6>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d203      	bcs.n	8001fe6 <PCD_WriteEmptyTxFifo+0xd6>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1c3      	bne.n	8001f6e <PCD_WriteEmptyTxFifo+0x5e>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d811      	bhi.n	8002016 <PCD_WriteEmptyTxFifo+0x106>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	43db      	mvns	r3, r3
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002012:	4013      	ands	r3, r2
 8002014:	634b      	str	r3, [r1, #52]	@ 0x34
 8002016:	2300      	movs	r3, #0
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <PCD_EP_OutXfrComplete_int>:
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	333c      	adds	r3, #60	@ 0x3c
 8002038:	3304      	adds	r3, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a19      	ldr	r2, [pc, #100]	@ (80020b8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d124      	bne.n	80020a0 <PCD_EP_OutXfrComplete_int+0x80>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <PCD_EP_OutXfrComplete_int+0x56>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800206c:	461a      	mov	r2, r3
 800206e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002072:	6093      	str	r3, [r2, #8]
 8002074:	e01a      	b.n	80020ac <PCD_EP_OutXfrComplete_int+0x8c>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <PCD_EP_OutXfrComplete_int+0x72>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800208c:	461a      	mov	r2, r3
 800208e:	2320      	movs	r3, #32
 8002090:	6093      	str	r3, [r2, #8]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f005 fbfd 	bl	8007898 <HAL_PCD_DataOutStageCallback>
 800209e:	e005      	b.n	80020ac <PCD_EP_OutXfrComplete_int+0x8c>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f005 fbf6 	bl	8007898 <HAL_PCD_DataOutStageCallback>
 80020ac:	2300      	movs	r3, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	4f54310a 	.word	0x4f54310a

080020bc <PCD_EP_OutSetupPacket_int>:
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	333c      	adds	r3, #60	@ 0x3c
 80020d4:	3304      	adds	r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <PCD_EP_OutSetupPacket_int+0x64>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d90e      	bls.n	8002110 <PCD_EP_OutSetupPacket_int+0x54>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <PCD_EP_OutSetupPacket_int+0x54>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800210e:	6093      	str	r3, [r2, #8]
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f005 fbaf 	bl	8007874 <HAL_PCD_SetupStageCallback>
 8002116:	2300      	movs	r3, #0
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	4f54300a 	.word	0x4f54300a

08002124 <HAL_PCDEx_SetTxFiFo>:
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
 8002130:	4613      	mov	r3, r2
 8002132:	803b      	strh	r3, [r7, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_PCDEx_SetTxFiFo+0x2e>
 8002142:	883b      	ldrh	r3, [r7, #0]
 8002144:	0419      	lsls	r1, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	430a      	orrs	r2, r1
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002150:	e028      	b.n	80021a4 <HAL_PCDEx_SetTxFiFo+0x80>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4413      	add	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e00d      	b.n	8002182 <HAL_PCDEx_SetTxFiFo+0x5e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	3340      	adds	r3, #64	@ 0x40
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	0c1b      	lsrs	r3, r3, #16
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	4413      	add	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	3301      	adds	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	3b01      	subs	r3, #1
 8002188:	429a      	cmp	r2, r3
 800218a:	d3ec      	bcc.n	8002166 <HAL_PCDEx_SetTxFiFo+0x42>
 800218c:	883b      	ldrh	r3, [r7, #0]
 800218e:	0418      	lsls	r0, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	3b01      	subs	r3, #1
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	4302      	orrs	r2, r0
 800219c:	3340      	adds	r3, #64	@ 0x40
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	2300      	movs	r3, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_PCDEx_SetRxFiFo>:
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80021c6:	2300      	movs	r3, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_PCDEx_ActivateLPM>:
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	619a      	str	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002206:	f043 0303 	orr.w	r3, r3, #3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	6553      	str	r3, [r2, #84]	@ 0x54
 800220e:	2300      	movs	r3, #0
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_PWREx_GetVoltageRange>:
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
 8002220:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222c:	d102      	bne.n	8002234 <HAL_PWREx_GetVoltageRange+0x18>
 800222e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002232:	e00b      	b.n	800224c <HAL_PWREx_GetVoltageRange+0x30>
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800223a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002242:	d102      	bne.n	800224a <HAL_PWREx_GetVoltageRange+0x2e>
 8002244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002248:	e000      	b.n	800224c <HAL_PWREx_GetVoltageRange+0x30>
 800224a:	2300      	movs	r3, #0
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_ControlVoltageScaling>:
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d141      	bne.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x92>
 800226a:	4b4b      	ldr	r3, [pc, #300]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002276:	d131      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x80>
 8002278:	4b47      	ldr	r3, [pc, #284]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800227e:	4a46      	ldr	r2, [pc, #280]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002288:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002290:	4a41      	ldr	r2, [pc, #260]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b40      	ldr	r3, [pc, #256]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2232      	movs	r2, #50	@ 0x32
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a3f      	ldr	r2, [pc, #252]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e002      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b38      	ldr	r3, [pc, #224]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c2:	d102      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f2      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x54>
 80022ca:	4b33      	ldr	r3, [pc, #204]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d6:	d158      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
 80022d8:	2303      	movs	r3, #3
 80022da:	e057      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
 80022dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022ec:	e04d      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f4:	d141      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x11e>
 80022f6:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002302:	d131      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x10c>
 8002304:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800230a:	4a23      	ldr	r2, [pc, #140]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002314:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800231c:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2232      	movs	r2, #50	@ 0x32
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	4a1c      	ldr	r2, [pc, #112]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e002      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0xe6>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3b01      	subs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234e:	d102      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0xe0>
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002362:	d112      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002364:	2303      	movs	r3, #3
 8002366:	e011      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002378:	e007      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40007000 	.word	0x40007000
 800239c:	20000000 	.word	0x20000000
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <HAL_PWREx_EnableVddUSB>:
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b2:	6053      	str	r3, [r2, #4]
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000

080023c4 <HAL_RCC_OscConfig>:
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_RCC_OscConfig+0x14>
 80023d2:	2301      	movs	r3, #1
 80023d4:	f000 bc68 	b.w	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80023d8:	4b97      	ldr	r3, [pc, #604]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	4b95      	ldr	r3, [pc, #596]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80e6 	beq.w	80025c6 <HAL_RCC_OscConfig+0x202>
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_RCC_OscConfig+0x4c>
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	f040 808d 	bne.w	8002522 <HAL_RCC_OscConfig+0x15e>
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b01      	cmp	r3, #1
 800240c:	f040 8089 	bne.w	8002522 <HAL_RCC_OscConfig+0x15e>
 8002410:	4b89      	ldr	r3, [pc, #548]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_RCC_OscConfig+0x66>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_RCC_OscConfig+0x66>
 8002424:	2301      	movs	r3, #1
 8002426:	f000 bc3f 	b.w	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800242e:	4b82      	ldr	r3, [pc, #520]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_RCC_OscConfig+0x80>
 800243a:	4b7f      	ldr	r3, [pc, #508]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002442:	e005      	b.n	8002450 <HAL_RCC_OscConfig+0x8c>
 8002444:	4b7c      	ldr	r3, [pc, #496]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002450:	4293      	cmp	r3, r2
 8002452:	d224      	bcs.n	800249e <HAL_RCC_OscConfig+0xda>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fe01 	bl	8003060 <RCC_SetFlashLatencyFromMSIRange>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_RCC_OscConfig+0xa6>
 8002464:	2301      	movs	r3, #1
 8002466:	f000 bc1f 	b.w	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 800246a:	4b73      	ldr	r3, [pc, #460]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a72      	ldr	r2, [pc, #456]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002470:	f043 0308 	orr.w	r3, r3, #8
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b70      	ldr	r3, [pc, #448]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	496d      	ldr	r1, [pc, #436]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	4b6b      	ldr	r3, [pc, #428]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	4968      	ldr	r1, [pc, #416]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e025      	b.n	80024ea <HAL_RCC_OscConfig+0x126>
 800249e:	4b66      	ldr	r3, [pc, #408]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b63      	ldr	r3, [pc, #396]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	4960      	ldr	r1, [pc, #384]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	495b      	ldr	r1, [pc, #364]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_OscConfig+0x126>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fdc0 	bl	8003060 <RCC_SetFlashLatencyFromMSIRange>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x126>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e3de      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80024ea:	f000 fd21 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b51      	ldr	r3, [pc, #324]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	4950      	ldr	r1, [pc, #320]	@ (800263c <HAL_RCC_OscConfig+0x278>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a4e      	ldr	r2, [pc, #312]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b4e      	ldr	r3, [pc, #312]	@ (8002644 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f998 	bl	8000844 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d052      	beq.n	80025c4 <HAL_RCC_OscConfig+0x200>
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	e3c2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d032      	beq.n	8002590 <HAL_RCC_OscConfig+0x1cc>
 800252a:	4b43      	ldr	r3, [pc, #268]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a42      	ldr	r2, [pc, #264]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	f7fe f9d5 	bl	80008e4 <HAL_GetTick>
 800253a:	61b8      	str	r0, [r7, #24]
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x18c>
 800253e:	f7fe f9d1 	bl	80008e4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x18c>
 800254c:	2303      	movs	r3, #3
 800254e:	e3ab      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002550:	4b39      	ldr	r3, [pc, #228]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x17a>
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a35      	ldr	r2, [pc, #212]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b33      	ldr	r3, [pc, #204]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	4930      	ldr	r1, [pc, #192]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
 800257a:	4b2f      	ldr	r3, [pc, #188]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	492b      	ldr	r1, [pc, #172]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 800258e:	e01a      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
 8002590:	4b29      	ldr	r3, [pc, #164]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a28      	ldr	r2, [pc, #160]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	f7fe f9a2 	bl	80008e4 <HAL_GetTick>
 80025a0:	61b8      	str	r0, [r7, #24]
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1f2>
 80025a4:	f7fe f99e 	bl	80008e4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1f2>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e378      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80025b6:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1e0>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
 80025c4:	bf00      	nop
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d073      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f6>
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_OscConfig+0x220>
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d10e      	bne.n	80025fc <HAL_RCC_OscConfig+0x238>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d10b      	bne.n	80025fc <HAL_RCC_OscConfig+0x238>
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d063      	beq.n	80026b8 <HAL_RCC_OscConfig+0x2f4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d15f      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2f4>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e355      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x250>
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a0b      	ldr	r2, [pc, #44]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e025      	b.n	8002660 <HAL_RCC_OscConfig+0x29c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800261c:	d114      	bne.n	8002648 <HAL_RCC_OscConfig+0x284>
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a02      	ldr	r2, [pc, #8]	@ (8002638 <HAL_RCC_OscConfig+0x274>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e013      	b.n	8002660 <HAL_RCC_OscConfig+0x29c>
 8002638:	40021000 	.word	0x40021000
 800263c:	080090c4 	.word	0x080090c4
 8002640:	20000000 	.word	0x20000000
 8002644:	20000004 	.word	0x20000004
 8002648:	4b8f      	ldr	r3, [pc, #572]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a8e      	ldr	r2, [pc, #568]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b8c      	ldr	r3, [pc, #560]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a8b      	ldr	r2, [pc, #556]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0x2cc>
 8002668:	f7fe f93c 	bl	80008e4 <HAL_GetTick>
 800266c:	61b8      	str	r0, [r7, #24]
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2be>
 8002670:	f7fe f938 	bl	80008e4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2be>
 800267e:	2303      	movs	r3, #3
 8002680:	e312      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002682:	4b81      	ldr	r3, [pc, #516]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x2ac>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x2f6>
 8002690:	f7fe f928 	bl	80008e4 <HAL_GetTick>
 8002694:	61b8      	str	r0, [r7, #24]
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x2e6>
 8002698:	f7fe f924 	bl	80008e4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x2e6>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e2fe      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80026aa:	4b77      	ldr	r3, [pc, #476]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x2d4>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x2f6>
 80026b8:	bf00      	nop
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d060      	beq.n	8002788 <HAL_RCC_OscConfig+0x3c4>
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x314>
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_OscConfig+0x342>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d116      	bne.n	8002706 <HAL_RCC_OscConfig+0x342>
 80026d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x32c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_OscConfig+0x32c>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e2db      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80026f0:	4b65      	ldr	r3, [pc, #404]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	4962      	ldr	r1, [pc, #392]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	e040      	b.n	8002788 <HAL_RCC_OscConfig+0x3c4>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d023      	beq.n	8002756 <HAL_RCC_OscConfig+0x392>
 800270e:	4b5e      	ldr	r3, [pc, #376]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5d      	ldr	r2, [pc, #372]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	f7fe f8e3 	bl	80008e4 <HAL_GetTick>
 800271e:	61b8      	str	r0, [r7, #24]
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x370>
 8002722:	f7fe f8df 	bl	80008e4 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x370>
 8002730:	2303      	movs	r3, #3
 8002732:	e2b9      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002734:	4b54      	ldr	r3, [pc, #336]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x35e>
 8002740:	4b51      	ldr	r3, [pc, #324]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	494e      	ldr	r1, [pc, #312]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	e018      	b.n	8002788 <HAL_RCC_OscConfig+0x3c4>
 8002756:	4b4c      	ldr	r3, [pc, #304]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a4b      	ldr	r2, [pc, #300]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	f7fe f8bf 	bl	80008e4 <HAL_GetTick>
 8002766:	61b8      	str	r0, [r7, #24]
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x3b8>
 800276a:	f7fe f8bb 	bl	80008e4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3b8>
 8002778:	2303      	movs	r3, #3
 800277a:	e295      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 800277c:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x3a6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8082 	beq.w	800289a <HAL_RCC_OscConfig+0x4d6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d05f      	beq.n	800285e <HAL_RCC_OscConfig+0x49a>
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d037      	beq.n	8002824 <HAL_RCC_OscConfig+0x460>
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_RCC_OscConfig+0x408>
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x408>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e26d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01b      	beq.n	800280e <HAL_RCC_OscConfig+0x44a>
 80027d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80027e6:	f7fe f87d 	bl	80008e4 <HAL_GetTick>
 80027ea:	61b8      	str	r0, [r7, #24]
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x43c>
 80027ee:	f7fe f879 	bl	80008e4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b11      	cmp	r3, #17
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x43c>
 80027fc:	2303      	movs	r3, #3
 80027fe:	e253      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002800:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ef      	bne.n	80027ee <HAL_RCC_OscConfig+0x42a>
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002814:	f023 0210 	bic.w	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	491a      	ldr	r1, [pc, #104]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
 8002824:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282a:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002834:	f7fe f856 	bl	80008e4 <HAL_GetTick>
 8002838:	61b8      	str	r0, [r7, #24]
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x48a>
 800283c:	f7fe f852 	bl	80008e4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b11      	cmp	r3, #17
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x48a>
 800284a:	2303      	movs	r3, #3
 800284c:	e22c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ef      	beq.n	800283c <HAL_RCC_OscConfig+0x478>
 800285c:	e01d      	b.n	800289a <HAL_RCC_OscConfig+0x4d6>
 800285e:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002864:	4a08      	ldr	r2, [pc, #32]	@ (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800286e:	f7fe f839 	bl	80008e4 <HAL_GetTick>
 8002872:	61b8      	str	r0, [r7, #24]
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x4c8>
 8002876:	f7fe f835 	bl	80008e4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b11      	cmp	r3, #17
 8002882:	d903      	bls.n	800288c <HAL_RCC_OscConfig+0x4c8>
 8002884:	2303      	movs	r3, #3
 8002886:	e20f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002888:	40021000 	.word	0x40021000
 800288c:	4b83      	ldr	r3, [pc, #524]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ed      	bne.n	8002876 <HAL_RCC_OscConfig+0x4b2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80bd 	beq.w	8002a22 <HAL_RCC_OscConfig+0x65e>
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80028ae:	4b7b      	ldr	r3, [pc, #492]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_RCC_OscConfig+0x514>
 80028ba:	4b78      	ldr	r3, [pc, #480]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	4a77      	ldr	r2, [pc, #476]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c6:	4b75      	ldr	r3, [pc, #468]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80028d8:	4b71      	ldr	r3, [pc, #452]	@ (8002aa0 <HAL_RCC_OscConfig+0x6dc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d118      	bne.n	8002916 <HAL_RCC_OscConfig+0x552>
 80028e4:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa0 <HAL_RCC_OscConfig+0x6dc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6d      	ldr	r2, [pc, #436]	@ (8002aa0 <HAL_RCC_OscConfig+0x6dc>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	f7fd fff8 	bl	80008e4 <HAL_GetTick>
 80028f4:	61b8      	str	r0, [r7, #24]
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x546>
 80028f8:	f7fd fff4 	bl	80008e4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x546>
 8002906:	2303      	movs	r3, #3
 8002908:	e1ce      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 800290a:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <HAL_RCC_OscConfig+0x6dc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x534>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02c      	beq.n	800297c <HAL_RCC_OscConfig+0x5b8>
 8002922:	4b5e      	ldr	r3, [pc, #376]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002928:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002934:	4959      	ldr	r1, [pc, #356]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d010      	beq.n	800296a <HAL_RCC_OscConfig+0x5a6>
 8002948:	4b54      	ldr	r3, [pc, #336]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	4a53      	ldr	r2, [pc, #332]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002958:	4b50      	ldr	r3, [pc, #320]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	4a4f      	ldr	r2, [pc, #316]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0x5d8>
 800296a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002970:	4a4a      	ldr	r2, [pc, #296]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800297a:	e00f      	b.n	800299c <HAL_RCC_OscConfig+0x5d8>
 800297c:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	4a46      	ldr	r2, [pc, #280]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800298c:	4b43      	ldr	r3, [pc, #268]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002992:	4a42      	ldr	r2, [pc, #264]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d016      	beq.n	80029d2 <HAL_RCC_OscConfig+0x60e>
 80029a4:	f7fd ff9e 	bl	80008e4 <HAL_GetTick>
 80029a8:	61b8      	str	r0, [r7, #24]
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x5fe>
 80029ac:	f7fd ff9a 	bl	80008e4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x5fe>
 80029be:	2303      	movs	r3, #3
 80029c0:	e172      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80029c2:	4b36      	ldr	r3, [pc, #216]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ed      	beq.n	80029ac <HAL_RCC_OscConfig+0x5e8>
 80029d0:	e01d      	b.n	8002a0e <HAL_RCC_OscConfig+0x64a>
 80029d2:	f7fd ff87 	bl	80008e4 <HAL_GetTick>
 80029d6:	61b8      	str	r0, [r7, #24]
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x62c>
 80029da:	f7fd ff83 	bl	80008e4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x62c>
 80029ec:	2303      	movs	r3, #3
 80029ee:	e15b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 80029f0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ed      	bne.n	80029da <HAL_RCC_OscConfig+0x616>
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a04:	4a25      	ldr	r2, [pc, #148]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x65e>
 8002a16:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1a:	4a20      	ldr	r2, [pc, #128]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d041      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x6ee>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x6ac>
 8002a36:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a3c:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002a46:	f7fd ff4d 	bl	80008e4 <HAL_GetTick>
 8002a4a:	61b8      	str	r0, [r7, #24]
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x69c>
 8002a4e:	f7fd ff49 	bl	80008e4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x69c>
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e123      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ef      	beq.n	8002a4e <HAL_RCC_OscConfig+0x68a>
 8002a6e:	e020      	b.n	8002ab2 <HAL_RCC_OscConfig+0x6ee>
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_RCC_OscConfig+0x6d8>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002a80:	f7fd ff30 	bl	80008e4 <HAL_GetTick>
 8002a84:	61b8      	str	r0, [r7, #24]
 8002a86:	e00d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x6e0>
 8002a88:	f7fd ff2c 	bl	80008e4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d906      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x6e0>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e106      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	4b82      	ldr	r3, [pc, #520]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ea      	bne.n	8002a88 <HAL_RCC_OscConfig+0x6c4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80f5 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x8e2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 80cb 	bne.w	8002c5c <HAL_RCC_OscConfig+0x898>
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d12c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x770>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d123      	bne.n	8002b34 <HAL_RCC_OscConfig+0x770>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d11b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x770>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b06:	06db      	lsls	r3, r3, #27
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d113      	bne.n	8002b34 <HAL_RCC_OscConfig+0x770>
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	055b      	lsls	r3, r3, #21
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_OscConfig+0x770>
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	065b      	lsls	r3, r3, #25
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d06d      	beq.n	8002c10 <HAL_RCC_OscConfig+0x84c>
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d068      	beq.n	8002c0c <HAL_RCC_OscConfig+0x848>
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x78e>
 8002b46:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x792>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0a8      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002b56:	4b56      	ldr	r3, [pc, #344]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a55      	ldr	r2, [pc, #340]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	f7fd febf 	bl	80008e4 <HAL_GetTick>
 8002b66:	61b8      	str	r0, [r7, #24]
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x7b8>
 8002b6a:	f7fd febb 	bl	80008e4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x7b8>
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e095      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x7a6>
 8002b88:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4b49      	ldr	r3, [pc, #292]	@ (8002cb4 <HAL_RCC_OscConfig+0x8f0>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ba2:	0212      	lsls	r2, r2, #8
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	3a01      	subs	r2, #1
 8002bae:	0552      	lsls	r2, r2, #21
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0652      	lsls	r2, r2, #25
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bc2:	06d2      	lsls	r2, r2, #27
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	493a      	ldr	r1, [pc, #232]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
 8002bcc:	4b38      	ldr	r3, [pc, #224]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a37      	ldr	r2, [pc, #220]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b35      	ldr	r3, [pc, #212]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a34      	ldr	r2, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be2:	60d3      	str	r3, [r2, #12]
 8002be4:	f7fd fe7e 	bl	80008e4 <HAL_GetTick>
 8002be8:	61b8      	str	r0, [r7, #24]
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x83a>
 8002bec:	f7fd fe7a 	bl	80008e4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x83a>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e054      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x828>
 8002c0a:	e04c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8e2>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e04b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002c10:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d144      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x8e2>
 8002c1c:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a23      	ldr	r2, [pc, #140]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]
 8002c34:	f7fd fe56 	bl	80008e4 <HAL_GetTick>
 8002c38:	61b8      	str	r0, [r7, #24]
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x88a>
 8002c3c:	f7fd fe52 	bl	80008e4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x88a>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e02c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x878>
 8002c5a:	e024      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8e2>
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d01f      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x8de>
 8002c62:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	f7fd fe39 	bl	80008e4 <HAL_GetTick>
 8002c72:	61b8      	str	r0, [r7, #24]
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x8c4>
 8002c76:	f7fd fe35 	bl	80008e4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x8c4>
 8002c84:	2303      	movs	r3, #3
 8002c86:	e00f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x8b2>
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	4905      	ldr	r1, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x8ec>)
 8002c9a:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <HAL_RCC_OscConfig+0x8f4>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
 8002ca0:	e001      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8e2>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x8e4>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3728      	adds	r7, #40	@ 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	019d800c 	.word	0x019d800c
 8002cb8:	feeefffc 	.word	0xfeeefffc

08002cbc <HAL_RCC_ClockConfig>:
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e11d      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002cd4:	4b90      	ldr	r3, [pc, #576]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d910      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x48>
 8002ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 020f 	bic.w	r2, r3, #15
 8002cea:	498b      	ldr	r1, [pc, #556]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
 8002cf2:	4b89      	ldr	r3, [pc, #548]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x48>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e105      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x76>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b81      	ldr	r3, [pc, #516]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d908      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x76>
 8002d20:	4b7e      	ldr	r3, [pc, #504]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	497b      	ldr	r1, [pc, #492]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d079      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x176>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d11e      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xc8>
 8002d46:	4b75      	ldr	r3, [pc, #468]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x9a>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0dc      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002d56:	f000 f9dd 	bl	8003114 <RCC_GetSysClockFreqFromPLLSource>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a70      	ldr	r2, [pc, #448]	@ (8002f20 <HAL_RCC_ClockConfig+0x264>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d946      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x134>
 8002d62:	4b6e      	ldr	r3, [pc, #440]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d140      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x134>
 8002d6e:	4b6b      	ldr	r3, [pc, #428]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d76:	4a69      	ldr	r2, [pc, #420]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d7c:	6093      	str	r3, [r2, #8]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e035      	b.n	8002df0 <HAL_RCC_ClockConfig+0x134>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xe0>
 8002d8c:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d115      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x108>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0b9      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xf8>
 8002da4:	4b5d      	ldr	r3, [pc, #372]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x108>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0ad      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002db4:	4b59      	ldr	r3, [pc, #356]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x108>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0a5      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002dc4:	f000 f8b4 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4a55      	ldr	r2, [pc, #340]	@ (8002f20 <HAL_RCC_ClockConfig+0x264>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d90f      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x134>
 8002dd0:	4b52      	ldr	r3, [pc, #328]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x134>
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002de4:	4a4d      	ldr	r2, [pc, #308]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dea:	6093      	str	r3, [r2, #8]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 0203 	bic.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4947      	ldr	r1, [pc, #284]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
 8002e02:	f7fd fd6f 	bl	80008e4 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_ClockConfig+0x164>
 8002e0a:	f7fd fd6b 	bl	80008e4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x164>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e077      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002e20:	4b3e      	ldr	r3, [pc, #248]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 020c 	and.w	r2, r3, #12
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d1eb      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x14e>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b80      	cmp	r3, #128	@ 0x80
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x188>
 8002e38:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a37      	ldr	r2, [pc, #220]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e42:	6093      	str	r3, [r2, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d208      	bcs.n	8002e72 <HAL_RCC_ClockConfig+0x1b6>
 8002e60:	4b2e      	ldr	r3, [pc, #184]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	492b      	ldr	r1, [pc, #172]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
 8002e72:	4b29      	ldr	r3, [pc, #164]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d210      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x1e6>
 8002e80:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	4923      	ldr	r1, [pc, #140]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_ClockConfig+0x25c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x1e6>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e036      	b.n	8002f10 <HAL_RCC_ClockConfig+0x254>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x204>
 8002eae:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4918      	ldr	r1, [pc, #96]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x224>
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4910      	ldr	r1, [pc, #64]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
 8002ee0:	f000 f826 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_RCC_ClockConfig+0x260>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	490c      	ldr	r1, [pc, #48]	@ (8002f24 <HAL_RCC_ClockConfig+0x268>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <HAL_RCC_ClockConfig+0x26c>)
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_RCC_ClockConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fc9d 	bl	8000844 <HAL_InitTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	04c4b400 	.word	0x04c4b400
 8002f24:	080090c4 	.word	0x080090c4
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_RCC_GetSysClockFreq>:
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	4b3b      	ldr	r3, [pc, #236]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d121      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d11e      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
 8002f64:	4b34      	ldr	r3, [pc, #208]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0x50>
 8002f70:	4b31      	ldr	r3, [pc, #196]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x5c>
 8002f80:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800303c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x7e>
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e004      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
 8002fb4:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d134      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xf8>
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xac>
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xb2>
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	bf00      	nop
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	fb03 f202 	mul.w	r2, r3, r2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	0e5b      	lsrs	r3, r3, #25
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	3301      	adds	r3, #1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	@ 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	080090d4 	.word	0x080090d4
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <RCC_SetFlashLatencyFromMSIRange>:
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	4b27      	ldr	r3, [pc, #156]	@ (800310c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8003078:	f7ff f8d0 	bl	800221c <HAL_PWREx_GetVoltageRange>
 800307c:	6178      	str	r0, [r7, #20]
 800307e:	e014      	b.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8003080:	4b22      	ldr	r3, [pc, #136]	@ (800310c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	4a21      	ldr	r2, [pc, #132]	@ (800310c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308a:	6593      	str	r3, [r2, #88]	@ 0x58
 800308c:	4b1f      	ldr	r3, [pc, #124]	@ (800310c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f7ff f8c0 	bl	800221c <HAL_PWREx_GetVoltageRange>
 800309c:	6178      	str	r0, [r7, #20]
 800309e:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a2:	4a1a      	ldr	r2, [pc, #104]	@ (800310c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b0:	d10b      	bne.n	80030ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	d913      	bls.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80030bc:	d902      	bls.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
 80030be:	2302      	movs	r3, #2
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	e00d      	b.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80030c4:	2301      	movs	r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	e00a      	b.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80030ce:	d902      	bls.n	80030d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
 80030d0:	2302      	movs	r3, #2
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	e004      	b.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b70      	cmp	r3, #112	@ 0x70
 80030da:	d101      	bne.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80030dc:	2301      	movs	r3, #1
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 020f 	bic.w	r2, r3, #15
 80030e8:	4909      	ldr	r1, [pc, #36]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
 80030f0:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0xa2>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <RCC_SetFlashLatencyFromMSIRange+0xa4>
 8003102:	2300      	movs	r3, #0
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	40022000 	.word	0x40022000

08003114 <RCC_GetSysClockFreqFromPLLSource>:
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d00b      	beq.n	8003142 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d825      	bhi.n	800317c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d008      	beq.n	8003148 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d11f      	bne.n	800317c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800313c:	4b25      	ldr	r3, [pc, #148]	@ (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	e01f      	b.n	8003182 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003142:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	e01c      	b.n	8003182 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003148:	4b21      	ldr	r3, [pc, #132]	@ (80031d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003154:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e005      	b.n	8003170 <RCC_GetSysClockFreqFromPLLSource+0x5c>
 8003164:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	4a1a      	ldr	r2, [pc, #104]	@ (80031dc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	e002      	b.n	8003182 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	bf00      	nop
 8003182:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	3301      	adds	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	fb03 f202 	mul.w	r2, r3, r2
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	0e5b      	lsrs	r3, r3, #25
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	3301      	adds	r3, #1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40021000 	.word	0x40021000
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	007a1200 	.word	0x007a1200
 80031dc:	080090d4 	.word	0x080090d4

080031e0 <HAL_RCCEx_PeriphCLKConfig>:
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	2300      	movs	r3, #0
 80031ea:	74fb      	strb	r3, [r7, #19]
 80031ec:	2300      	movs	r3, #0
 80031ee:	74bb      	strb	r3, [r7, #18]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d040      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003200:	2b80      	cmp	r3, #128	@ 0x80
 8003202:	d02a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003204:	2b80      	cmp	r3, #128	@ 0x80
 8003206:	d825      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003208:	2b60      	cmp	r3, #96	@ 0x60
 800320a:	d026      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800320c:	2b60      	cmp	r3, #96	@ 0x60
 800320e:	d821      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003210:	2b40      	cmp	r3, #64	@ 0x40
 8003212:	d006      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003214:	2b40      	cmp	r3, #64	@ 0x40
 8003216:	d81d      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800321c:	2b20      	cmp	r3, #32
 800321e:	d010      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003220:	e018      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003222:	4b89      	ldr	r3, [pc, #548]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a88      	ldr	r2, [pc, #544]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322c:	60d3      	str	r3, [r2, #12]
 800322e:	e015      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fb3e 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]
 8003240:	e00c      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3320      	adds	r3, #32
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fc29 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	74fb      	strb	r3, [r7, #19]
 8003252:	e003      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003254:	2301      	movs	r3, #1
 8003256:	74fb      	strb	r3, [r7, #19]
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800325a:	bf00      	nop
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8003262:	4b79      	ldr	r3, [pc, #484]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003264:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003268:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003270:	4975      	ldr	r1, [pc, #468]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003278:	e001      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	74bb      	strb	r3, [r7, #18]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d047      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d030      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003298:	d82a      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800329a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800329e:	d02a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032a4:	d824      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032aa:	d008      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b0:	d81e      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ba:	d010      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032bc:	e018      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032be:	4b62      	ldr	r3, [pc, #392]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4a61      	ldr	r2, [pc, #388]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c8:	60d3      	str	r3, [r2, #12]
 80032ca:	e015      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 faf0 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	74fb      	strb	r3, [r7, #19]
 80032dc:	e00c      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3320      	adds	r3, #32
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fbdb 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80032f0:	2301      	movs	r3, #1
 80032f2:	74fb      	strb	r3, [r7, #19]
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80032f6:	bf00      	nop
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032fe:	4b52      	ldr	r3, [pc, #328]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003300:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330c:	494e      	ldr	r1, [pc, #312]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003314:	e001      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	74bb      	strb	r3, [r7, #18]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 809f 	beq.w	8003466 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003328:	2300      	movs	r3, #0
 800332a:	747b      	strb	r3, [r7, #17]
 800332c:	4b46      	ldr	r3, [pc, #280]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003342:	4b41      	ldr	r3, [pc, #260]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	4a40      	ldr	r2, [pc, #256]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	@ 0x58
 800334e:	4b3e      	ldr	r3, [pc, #248]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2301      	movs	r3, #1
 800335c:	747b      	strb	r3, [r7, #17]
 800335e:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a3a      	ldr	r2, [pc, #232]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	f7fd fabb 	bl	80008e4 <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	e009      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003372:	f7fd fab7 	bl	80008e4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d902      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003380:	2303      	movs	r3, #3
 8003382:	74fb      	strb	r3, [r7, #19]
 8003384:	e005      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003386:	4b31      	ldr	r3, [pc, #196]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ef      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d15b      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8003398:	4b2b      	ldr	r3, [pc, #172]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01f      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d019      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033b6:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033e2:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d016      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80033f4:	f7fd fa76 	bl	80008e4 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	e00b      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80033fc:	f7fd fa72 	bl	80008e4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d902      	bls.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800340e:	2303      	movs	r3, #3
 8003410:	74fb      	strb	r3, [r7, #19]
 8003412:	e006      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ec      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10c      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003428:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003438:	4903      	ldr	r1, [pc, #12]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003440:	e008      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	74bb      	strb	r3, [r7, #18]
 8003446:	e005      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
 8003454:	7c7b      	ldrb	r3, [r7, #17]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800345a:	4ba0      	ldr	r3, [pc, #640]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345e:	4a9f      	ldr	r2, [pc, #636]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003464:	6593      	str	r3, [r2, #88]	@ 0x58
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003472:	4b9a      	ldr	r3, [pc, #616]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003478:	f023 0203 	bic.w	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	4996      	ldr	r1, [pc, #600]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003494:	4b91      	ldr	r3, [pc, #580]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349a:	f023 020c 	bic.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	498e      	ldr	r1, [pc, #568]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 80034b6:	4b89      	ldr	r3, [pc, #548]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c4:	4985      	ldr	r1, [pc, #532]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80034d8:	4b80      	ldr	r3, [pc, #512]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e6:	497d      	ldr	r1, [pc, #500]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80034fa:	4b78      	ldr	r3, [pc, #480]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003508:	4974      	ldr	r1, [pc, #464]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800351c:	4b6f      	ldr	r3, [pc, #444]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352a:	496c      	ldr	r1, [pc, #432]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800353e:	4b67      	ldr	r3, [pc, #412]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003544:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800354c:	4963      	ldr	r1, [pc, #396]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8003560:	4b5e      	ldr	r3, [pc, #376]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800356e:	495b      	ldr	r1, [pc, #364]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003582:	4b56      	ldr	r3, [pc, #344]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003588:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003590:	4952      	ldr	r1, [pc, #328]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
 80035a4:	4b4d      	ldr	r3, [pc, #308]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b2:	494a      	ldr	r1, [pc, #296]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80035c6:	4b45      	ldr	r3, [pc, #276]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	4941      	ldr	r1, [pc, #260]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x41e>
 80035e8:	4b3c      	ldr	r3, [pc, #240]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f6:	4939      	ldr	r1, [pc, #228]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d028      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003610:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003618:	4930      	ldr	r1, [pc, #192]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003624:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003628:	d106      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800362a:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003630:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003634:	60d3      	str	r3, [r2, #12]
 8003636:	e011      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003640:	d10c      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f935 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	74fb      	strb	r3, [r7, #19]
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	74bb      	strb	r3, [r7, #18]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04d      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800366c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003670:	d108      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003672:	4b1a      	ldr	r3, [pc, #104]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003678:	4a18      	ldr	r2, [pc, #96]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800367e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003682:	e012      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003684:	4b15      	ldr	r3, [pc, #84]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800368a:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003690:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003694:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a2:	490e      	ldr	r1, [pc, #56]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80036b4:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a08      	ldr	r2, [pc, #32]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036be:	60d3      	str	r3, [r2, #12]
 80036c0:	e020      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ca:	d109      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a02      	ldr	r2, [pc, #8]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d6:	60d3      	str	r3, [r2, #12]
 80036d8:	e014      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f8e1 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	74fb      	strb	r3, [r7, #19]
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	74bb      	strb	r3, [r7, #18]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d028      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003710:	4b68      	ldr	r3, [pc, #416]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800371e:	4965      	ldr	r1, [pc, #404]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800372a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372e:	d106      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003730:	4b60      	ldr	r3, [pc, #384]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a5f      	ldr	r2, [pc, #380]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373a:	60d3      	str	r3, [r2, #12]
 800373c:	e011      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003742:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003746:	d10c      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f8b2 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	74bb      	strb	r3, [r7, #18]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01e      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800376e:	4b51      	ldr	r3, [pc, #324]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800377e:	494d      	ldr	r1, [pc, #308]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003790:	d10c      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f88d 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	74fb      	strb	r3, [r7, #19]
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	74bb      	strb	r3, [r7, #18]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80037b8:	4b3e      	ldr	r3, [pc, #248]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037be:	f023 0204 	bic.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c8:	493a      	ldr	r1, [pc, #232]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80037dc:	4b35      	ldr	r3, [pc, #212]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037e2:	f023 0218 	bic.w	r2, r3, #24
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	4931      	ldr	r1, [pc, #196]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d035      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003800:	4b2c      	ldr	r3, [pc, #176]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2b      	ldr	r2, [pc, #172]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	f7fd f86a 	bl	80008e4 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	e009      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003814:	f7fd f866 	bl	80008e4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003822:	2303      	movs	r3, #3
 8003824:	74fb      	strb	r3, [r7, #19]
 8003826:	e005      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8003828:	4b22      	ldr	r3, [pc, #136]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ef      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d113      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800383a:	4b1e      	ldr	r3, [pc, #120]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800383c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003840:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800384a:	491a      	ldr	r1, [pc, #104]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3320      	adds	r3, #32
 8003856:	2102      	movs	r1, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f921 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003878:	4b0e      	ldr	r3, [pc, #56]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800387e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003888:	490a      	ldr	r1, [pc, #40]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a04      	ldr	r2, [pc, #16]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038a6:	60d3      	str	r3, [r2, #12]
 80038a8:	7cbb      	ldrb	r3, [r7, #18]
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000

080038b8 <RCCEx_PLLSAI1_Config>:
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00e      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x38>
 80038d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0203 	and.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d103      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x32>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d142      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0xb8>
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e03f      	b.n	8003970 <RCCEx_PLLSAI1_Config+0xb8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d018      	beq.n	800392a <RCCEx_PLLSAI1_Config+0x72>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d825      	bhi.n	8003948 <RCCEx_PLLSAI1_Config+0x90>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d002      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0x4e>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d009      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x60>
 8003904:	e020      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x90>
 8003906:	4b62      	ldr	r3, [pc, #392]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x96>
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e01a      	b.n	800394e <RCCEx_PLLSAI1_Config+0x96>
 8003918:	4b5d      	ldr	r3, [pc, #372]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0x9a>
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e013      	b.n	8003952 <RCCEx_PLLSAI1_Config+0x9a>
 800392a:	4b59      	ldr	r3, [pc, #356]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x9e>
 8003936:	4b56      	ldr	r3, [pc, #344]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x9e>
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e006      	b.n	8003956 <RCCEx_PLLSAI1_Config+0x9e>
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e004      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xa0>
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xa0>
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xa0>
 8003956:	bf00      	nop
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d108      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0xb8>
 800395e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 0203 	bic.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4949      	ldr	r1, [pc, #292]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	60cb      	str	r3, [r1, #12]
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f040 8086 	bne.w	8003a84 <RCCEx_PLLSAI1_Config+0x1cc>
 8003978:	4b45      	ldr	r3, [pc, #276]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a44      	ldr	r2, [pc, #272]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 800397e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	f7fc ffae 	bl	80008e4 <HAL_GetTick>
 8003988:	60b8      	str	r0, [r7, #8]
 800398a:	e009      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xe8>
 800398c:	f7fc ffaa 	bl	80008e4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d902      	bls.n	80039a0 <RCCEx_PLLSAI1_Config+0xe8>
 800399a:	2303      	movs	r3, #3
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e005      	b.n	80039ac <RCCEx_PLLSAI1_Config+0xf4>
 80039a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ef      	bne.n	800398c <RCCEx_PLLSAI1_Config+0xd4>
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d168      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1cc>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d113      	bne.n	80039e0 <RCCEx_PLLSAI1_Config+0x128>
 80039b8:	4b35      	ldr	r3, [pc, #212]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	4b35      	ldr	r3, [pc, #212]	@ (8003a94 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039be:	4013      	ands	r3, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6892      	ldr	r2, [r2, #8]
 80039c4:	0211      	lsls	r1, r2, #8
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68d2      	ldr	r2, [r2, #12]
 80039ca:	06d2      	lsls	r2, r2, #27
 80039cc:	4311      	orrs	r1, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	3a01      	subs	r2, #1
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	430a      	orrs	r2, r1
 80039d8:	492d      	ldr	r1, [pc, #180]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	610b      	str	r3, [r1, #16]
 80039de:	e02d      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x184>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d115      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0x15a>
 80039e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6892      	ldr	r2, [r2, #8]
 80039f2:	0211      	lsls	r1, r2, #8
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6912      	ldr	r2, [r2, #16]
 80039f8:	0852      	lsrs	r2, r2, #1
 80039fa:	3a01      	subs	r2, #1
 80039fc:	0552      	lsls	r2, r2, #21
 80039fe:	4311      	orrs	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6852      	ldr	r2, [r2, #4]
 8003a04:	3a01      	subs	r2, #1
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	4921      	ldr	r1, [pc, #132]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	610b      	str	r3, [r1, #16]
 8003a10:	e014      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x184>
 8003a12:	4b1f      	ldr	r3, [pc, #124]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	4b21      	ldr	r3, [pc, #132]	@ (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6892      	ldr	r2, [r2, #8]
 8003a1e:	0211      	lsls	r1, r2, #8
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6952      	ldr	r2, [r2, #20]
 8003a24:	0852      	lsrs	r2, r2, #1
 8003a26:	3a01      	subs	r2, #1
 8003a28:	0652      	lsls	r2, r2, #25
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6852      	ldr	r2, [r2, #4]
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	430a      	orrs	r2, r1
 8003a36:	4916      	ldr	r1, [pc, #88]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
 8003a3c:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	f7fc ff4c 	bl	80008e4 <HAL_GetTick>
 8003a4c:	60b8      	str	r0, [r7, #8]
 8003a4e:	e009      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0x1ac>
 8003a50:	f7fc ff48 	bl	80008e4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d902      	bls.n	8003a64 <RCCEx_PLLSAI1_Config+0x1ac>
 8003a5e:	2303      	movs	r3, #3
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	e005      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0x1b8>
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ef      	beq.n	8003a50 <RCCEx_PLLSAI1_Config+0x198>
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1cc>
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	4904      	ldr	r1, [pc, #16]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	07ff800f 	.word	0x07ff800f
 8003a98:	ff9f800f 	.word	0xff9f800f
 8003a9c:	f9ff800f 	.word	0xf9ff800f

08003aa0 <RCCEx_PLLSAI2_Config>:
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	4b72      	ldr	r3, [pc, #456]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00e      	beq.n	8003ad8 <RCCEx_PLLSAI2_Config+0x38>
 8003aba:	4b6f      	ldr	r3, [pc, #444]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0203 	and.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d103      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0x32>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d142      	bne.n	8003b58 <RCCEx_PLLSAI2_Config+0xb8>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e03f      	b.n	8003b58 <RCCEx_PLLSAI2_Config+0xb8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d018      	beq.n	8003b12 <RCCEx_PLLSAI2_Config+0x72>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d825      	bhi.n	8003b30 <RCCEx_PLLSAI2_Config+0x90>
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d002      	beq.n	8003aee <RCCEx_PLLSAI2_Config+0x4e>
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d009      	beq.n	8003b00 <RCCEx_PLLSAI2_Config+0x60>
 8003aec:	e020      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x90>
 8003aee:	4b62      	ldr	r3, [pc, #392]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0x96>
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	e01a      	b.n	8003b36 <RCCEx_PLLSAI2_Config+0x96>
 8003b00:	4b5d      	ldr	r3, [pc, #372]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <RCCEx_PLLSAI2_Config+0x9a>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e013      	b.n	8003b3a <RCCEx_PLLSAI2_Config+0x9a>
 8003b12:	4b59      	ldr	r3, [pc, #356]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0x9e>
 8003b1e:	4b56      	ldr	r3, [pc, #344]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0x9e>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	e006      	b.n	8003b3e <RCCEx_PLLSAI2_Config+0x9e>
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e004      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0xa0>
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0xa0>
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0xa0>
 8003b3e:	bf00      	nop
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <RCCEx_PLLSAI2_Config+0xb8>
 8003b46:	4b4c      	ldr	r3, [pc, #304]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4949      	ldr	r1, [pc, #292]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60cb      	str	r3, [r1, #12]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 8086 	bne.w	8003c6c <RCCEx_PLLSAI2_Config+0x1cc>
 8003b60:	4b45      	ldr	r3, [pc, #276]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a44      	ldr	r2, [pc, #272]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	f7fc feba 	bl	80008e4 <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]
 8003b72:	e009      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xe8>
 8003b74:	f7fc feb6 	bl	80008e4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <RCCEx_PLLSAI2_Config+0xe8>
 8003b82:	2303      	movs	r3, #3
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	e005      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0xf4>
 8003b88:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ef      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0xd4>
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d168      	bne.n	8003c6c <RCCEx_PLLSAI2_Config+0x1cc>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d113      	bne.n	8003bc8 <RCCEx_PLLSAI2_Config+0x128>
 8003ba0:	4b35      	ldr	r3, [pc, #212]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6892      	ldr	r2, [r2, #8]
 8003bac:	0211      	lsls	r1, r2, #8
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	06d2      	lsls	r2, r2, #27
 8003bb4:	4311      	orrs	r1, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6852      	ldr	r2, [r2, #4]
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	492d      	ldr	r1, [pc, #180]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	614b      	str	r3, [r1, #20]
 8003bc6:	e02d      	b.n	8003c24 <RCCEx_PLLSAI2_Config+0x184>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d115      	bne.n	8003bfa <RCCEx_PLLSAI2_Config+0x15a>
 8003bce:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c80 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	0211      	lsls	r1, r2, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6912      	ldr	r2, [r2, #16]
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	3a01      	subs	r2, #1
 8003be4:	0552      	lsls	r2, r2, #21
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6852      	ldr	r2, [r2, #4]
 8003bec:	3a01      	subs	r2, #1
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	4921      	ldr	r1, [pc, #132]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	614b      	str	r3, [r1, #20]
 8003bf8:	e014      	b.n	8003c24 <RCCEx_PLLSAI2_Config+0x184>
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	4b21      	ldr	r3, [pc, #132]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6892      	ldr	r2, [r2, #8]
 8003c06:	0211      	lsls	r1, r2, #8
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6952      	ldr	r2, [r2, #20]
 8003c0c:	0852      	lsrs	r2, r2, #1
 8003c0e:	3a01      	subs	r2, #1
 8003c10:	0652      	lsls	r2, r2, #25
 8003c12:	4311      	orrs	r1, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6852      	ldr	r2, [r2, #4]
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	4916      	ldr	r1, [pc, #88]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	614b      	str	r3, [r1, #20]
 8003c24:	4b14      	ldr	r3, [pc, #80]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a13      	ldr	r2, [pc, #76]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	f7fc fe58 	bl	80008e4 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]
 8003c36:	e009      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
 8003c38:	f7fc fe54 	bl	80008e4 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d902      	bls.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
 8003c46:	2303      	movs	r3, #3
 8003c48:	73fb      	strb	r3, [r7, #15]
 8003c4a:	e005      	b.n	8003c58 <RCCEx_PLLSAI2_Config+0x1b8>
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ef      	beq.n	8003c38 <RCCEx_PLLSAI2_Config+0x198>
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <RCCEx_PLLSAI2_Config+0x1cc>
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	4904      	ldr	r1, [pc, #16]	@ (8003c78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	614b      	str	r3, [r1, #20]
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	07ff800f 	.word	0x07ff800f
 8003c80:	ff9f800f 	.word	0xff9f800f
 8003c84:	f9ff800f 	.word	0xf9ff800f

08003c88 <USB_CoreInit>:
 8003c88:	b084      	sub	sp, #16
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	f107 001c 	add.w	r0, r7, #28
 8003c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f001 fa26 	bl	80050f8 <USB_CoreReset>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <USB_CoreInit+0x3e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cc4:	e005      	b.n	8003cd2 <USB_CoreInit+0x4a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cde:	b004      	add	sp, #16
 8003ce0:	4770      	bx	lr
	...

08003ce4 <USB_SetTurnaroundTime>:
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	71fb      	strb	r3, [r7, #7]
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d165      	bne.n	8003dc4 <USB_SetTurnaroundTime+0xe0>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4a3e      	ldr	r2, [pc, #248]	@ (8003df4 <USB_SetTurnaroundTime+0x110>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d906      	bls.n	8003d0e <USB_SetTurnaroundTime+0x2a>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4a3d      	ldr	r2, [pc, #244]	@ (8003df8 <USB_SetTurnaroundTime+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d202      	bcs.n	8003d0e <USB_SetTurnaroundTime+0x2a>
 8003d08:	230f      	movs	r3, #15
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e05c      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4a39      	ldr	r2, [pc, #228]	@ (8003df8 <USB_SetTurnaroundTime+0x114>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d306      	bcc.n	8003d24 <USB_SetTurnaroundTime+0x40>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a38      	ldr	r2, [pc, #224]	@ (8003dfc <USB_SetTurnaroundTime+0x118>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d202      	bcs.n	8003d24 <USB_SetTurnaroundTime+0x40>
 8003d1e:	230e      	movs	r3, #14
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e051      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4a35      	ldr	r2, [pc, #212]	@ (8003dfc <USB_SetTurnaroundTime+0x118>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d306      	bcc.n	8003d3a <USB_SetTurnaroundTime+0x56>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a34      	ldr	r2, [pc, #208]	@ (8003e00 <USB_SetTurnaroundTime+0x11c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d202      	bcs.n	8003d3a <USB_SetTurnaroundTime+0x56>
 8003d34:	230d      	movs	r3, #13
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e046      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4a30      	ldr	r2, [pc, #192]	@ (8003e00 <USB_SetTurnaroundTime+0x11c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d306      	bcc.n	8003d50 <USB_SetTurnaroundTime+0x6c>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a2f      	ldr	r2, [pc, #188]	@ (8003e04 <USB_SetTurnaroundTime+0x120>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d802      	bhi.n	8003d50 <USB_SetTurnaroundTime+0x6c>
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e03b      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4a2c      	ldr	r2, [pc, #176]	@ (8003e04 <USB_SetTurnaroundTime+0x120>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d906      	bls.n	8003d66 <USB_SetTurnaroundTime+0x82>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e08 <USB_SetTurnaroundTime+0x124>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d802      	bhi.n	8003d66 <USB_SetTurnaroundTime+0x82>
 8003d60:	230b      	movs	r3, #11
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e030      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4a27      	ldr	r2, [pc, #156]	@ (8003e08 <USB_SetTurnaroundTime+0x124>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d906      	bls.n	8003d7c <USB_SetTurnaroundTime+0x98>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a26      	ldr	r2, [pc, #152]	@ (8003e0c <USB_SetTurnaroundTime+0x128>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d802      	bhi.n	8003d7c <USB_SetTurnaroundTime+0x98>
 8003d76:	230a      	movs	r3, #10
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e025      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4a23      	ldr	r2, [pc, #140]	@ (8003e0c <USB_SetTurnaroundTime+0x128>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d906      	bls.n	8003d92 <USB_SetTurnaroundTime+0xae>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a22      	ldr	r2, [pc, #136]	@ (8003e10 <USB_SetTurnaroundTime+0x12c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d202      	bcs.n	8003d92 <USB_SetTurnaroundTime+0xae>
 8003d8c:	2309      	movs	r3, #9
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e01a      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <USB_SetTurnaroundTime+0x12c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d306      	bcc.n	8003da8 <USB_SetTurnaroundTime+0xc4>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <USB_SetTurnaroundTime+0x130>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d802      	bhi.n	8003da8 <USB_SetTurnaroundTime+0xc4>
 8003da2:	2308      	movs	r3, #8
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e00f      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <USB_SetTurnaroundTime+0x130>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d906      	bls.n	8003dbe <USB_SetTurnaroundTime+0xda>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a19      	ldr	r2, [pc, #100]	@ (8003e18 <USB_SetTurnaroundTime+0x134>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d202      	bcs.n	8003dbe <USB_SetTurnaroundTime+0xda>
 8003db8:	2307      	movs	r3, #7
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e004      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003dbe:	2306      	movs	r3, #6
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e001      	b.n	8003dc8 <USB_SetTurnaroundTime+0xe4>
 8003dc4:	2309      	movs	r3, #9
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	60da      	str	r2, [r3, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	2300      	movs	r3, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	00d8acbf 	.word	0x00d8acbf
 8003df8:	00e4e1c0 	.word	0x00e4e1c0
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	01067380 	.word	0x01067380
 8003e04:	011a499f 	.word	0x011a499f
 8003e08:	01312cff 	.word	0x01312cff
 8003e0c:	014ca43f 	.word	0x014ca43f
 8003e10:	016e3600 	.word	0x016e3600
 8003e14:	01a6ab1f 	.word	0x01a6ab1f
 8003e18:	01e84800 	.word	0x01e84800

08003e1c <USB_EnableGlobalInt>:
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f043 0201 	orr.w	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	2300      	movs	r3, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <USB_DisableGlobalInt>:
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	2300      	movs	r3, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_SetCurrentMode>:
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d115      	bne.n	8003eae <USB_SetCurrentMode+0x4e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	200a      	movs	r0, #10
 8003e90:	f7fc fd34 	bl	80008fc <HAL_Delay>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	330a      	adds	r3, #10
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f001 f8b3 	bl	8005006 <USB_GetMode>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d01e      	beq.n	8003ee4 <USB_SetCurrentMode+0x84>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2bc7      	cmp	r3, #199	@ 0xc7
 8003eaa:	d9f0      	bls.n	8003e8e <USB_SetCurrentMode+0x2e>
 8003eac:	e01a      	b.n	8003ee4 <USB_SetCurrentMode+0x84>
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d115      	bne.n	8003ee0 <USB_SetCurrentMode+0x80>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	200a      	movs	r0, #10
 8003ec2:	f7fc fd1b 	bl	80008fc <HAL_Delay>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	330a      	adds	r3, #10
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 f89a 	bl	8005006 <USB_GetMode>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <USB_SetCurrentMode+0x84>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2bc7      	cmp	r3, #199	@ 0xc7
 8003edc:	d9f0      	bls.n	8003ec0 <USB_SetCurrentMode+0x60>
 8003ede:	e001      	b.n	8003ee4 <USB_SetCurrentMode+0x84>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e005      	b.n	8003ef0 <USB_SetCurrentMode+0x90>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ee8:	d101      	bne.n	8003eee <USB_SetCurrentMode+0x8e>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <USB_SetCurrentMode+0x90>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <USB_DevInit>:
 8003ef8:	b084      	sub	sp, #16
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e009      	b.n	8003f2c <USB_DevInit+0x34>
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3340      	adds	r3, #64	@ 0x40
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0e      	cmp	r3, #14
 8003f30:	d9f2      	bls.n	8003f18 <USB_DevInit+0x20>
 8003f32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11c      	bne.n	8003f74 <USB_DevInit+0x7c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	6053      	str	r3, [r2, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e005      	b.n	8003f80 <USB_DevInit+0x88>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f86:	461a      	mov	r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	2103      	movs	r1, #3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f95a 	bl	8004248 <USB_SetDevSpeed>
 8003f94:	2110      	movs	r1, #16
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8f6 	bl	8004188 <USB_FlushTxFifo>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <USB_DevInit+0xae>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f920 	bl	80041ec <USB_FlushRxFifo>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <USB_DevInit+0xbe>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6113      	str	r3, [r2, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6153      	str	r3, [r2, #20]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61d3      	str	r3, [r2, #28]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	e043      	b.n	8004068 <USB_DevInit+0x170>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ff6:	d118      	bne.n	800402a <USB_DevInit+0x132>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <USB_DevInit+0x11c>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400a:	461a      	mov	r2, r3
 800400c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e013      	b.n	800403c <USB_DevInit+0x144>
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004020:	461a      	mov	r2, r3
 8004022:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e008      	b.n	800403c <USB_DevInit+0x144>
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	2300      	movs	r3, #0
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	6113      	str	r3, [r2, #16]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405a:	461a      	mov	r2, r3
 800405c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004060:	6093      	str	r3, [r2, #8]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3301      	adds	r3, #1
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800406c:	461a      	mov	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4293      	cmp	r3, r2
 8004072:	d3b5      	bcc.n	8003fe0 <USB_DevInit+0xe8>
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e043      	b.n	8004102 <USB_DevInit+0x20a>
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800408c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004090:	d118      	bne.n	80040c4 <USB_DevInit+0x1cc>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <USB_DevInit+0x1b6>
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e013      	b.n	80040d6 <USB_DevInit+0x1de>
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e008      	b.n	80040d6 <USB_DevInit+0x1de>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6113      	str	r3, [r2, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3301      	adds	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004106:	461a      	mov	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4293      	cmp	r3, r2
 800410c:	d3b5      	bcc.n	800407a <USB_DevInit+0x182>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004120:	6113      	str	r3, [r2, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800412e:	615a      	str	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f043 0210 	orr.w	r2, r3, #16
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <USB_DevInit+0x28c>)
 8004142:	4313      	orrs	r3, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6193      	str	r3, [r2, #24]
 8004148:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <USB_DevInit+0x264>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f043 0208 	orr.w	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
 800415c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <USB_DevInit+0x27c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004180:	b004      	add	sp, #16
 8004182:	4770      	bx	lr
 8004184:	803c3800 	.word	0x803c3800

08004188 <USB_FlushTxFifo>:
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041a2:	d901      	bls.n	80041a8 <USB_FlushTxFifo+0x20>
 80041a4:	2303      	movs	r3, #3
 80041a6:	e01b      	b.n	80041e0 <USB_FlushTxFifo+0x58>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	daf2      	bge.n	8004196 <USB_FlushTxFifo+0xe>
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	019b      	lsls	r3, r3, #6
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	611a      	str	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041cc:	d901      	bls.n	80041d2 <USB_FlushTxFifo+0x4a>
 80041ce:	2303      	movs	r3, #3
 80041d0:	e006      	b.n	80041e0 <USB_FlushTxFifo+0x58>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d0f0      	beq.n	80041c0 <USB_FlushTxFifo+0x38>
 80041de:	2300      	movs	r3, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_FlushRxFifo>:
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004204:	d901      	bls.n	800420a <USB_FlushRxFifo+0x1e>
 8004206:	2303      	movs	r3, #3
 8004208:	e018      	b.n	800423c <USB_FlushRxFifo+0x50>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	daf2      	bge.n	80041f8 <USB_FlushRxFifo+0xc>
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2210      	movs	r2, #16
 800421a:	611a      	str	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004228:	d901      	bls.n	800422e <USB_FlushRxFifo+0x42>
 800422a:	2303      	movs	r3, #3
 800422c:	e006      	b.n	800423c <USB_FlushRxFifo+0x50>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d0f0      	beq.n	800421c <USB_FlushRxFifo+0x30>
 800423a:	2300      	movs	r3, #0
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_SetDevSpeed>:
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <USB_GetDevSpeed>:
 800427a:	b480      	push	{r7}
 800427c:	b087      	sub	sp, #28
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0306 	and.w	r3, r3, #6
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d002      	beq.n	80042a0 <USB_GetDevSpeed+0x26>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b06      	cmp	r3, #6
 800429e:	d102      	bne.n	80042a6 <USB_GetDevSpeed+0x2c>
 80042a0:	2302      	movs	r3, #2
 80042a2:	75fb      	strb	r3, [r7, #23]
 80042a4:	e001      	b.n	80042aa <USB_GetDevSpeed+0x30>
 80042a6:	230f      	movs	r3, #15
 80042a8:	75fb      	strb	r3, [r7, #23]
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	4618      	mov	r0, r3
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <USB_ActivateEndpoint>:
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d13a      	bne.n	800434a <USB_ActivateEndpoint+0x92>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	68f9      	ldr	r1, [r7, #12]
 80042ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61cb      	str	r3, [r1, #28]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d155      	bne.n	80043b8 <USB_ActivateEndpoint+0x100>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	791b      	ldrb	r3, [r3, #4]
 8004326:	049b      	lsls	r3, r3, #18
 8004328:	4319      	orrs	r1, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	059b      	lsls	r3, r3, #22
 800432e:	430b      	orrs	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e036      	b.n	80043b8 <USB_ActivateEndpoint+0x100>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	2101      	movs	r1, #1
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004368:	4313      	orrs	r3, r2
 800436a:	61cb      	str	r3, [r1, #28]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11a      	bne.n	80043b8 <USB_ActivateEndpoint+0x100>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	791b      	ldrb	r3, [r3, #4]
 800439c:	049b      	lsls	r3, r3, #18
 800439e:	430b      	orrs	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <USB_DeactivateEndpoint>:
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d161      	bne.n	80044a8 <USB_DeactivateEndpoint+0xe0>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043fa:	d11f      	bne.n	800443c <USB_DeactivateEndpoint+0x74>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004416:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004436:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800445c:	4013      	ands	r3, r2
 800445e:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	2101      	movs	r1, #1
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004480:	4013      	ands	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	0159      	lsls	r1, r3, #5
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	440b      	add	r3, r1
 800449a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449e:	4619      	mov	r1, r3
 80044a0:	4b35      	ldr	r3, [pc, #212]	@ (8004578 <USB_DeactivateEndpoint+0x1b0>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
 80044a6:	e060      	b.n	800456a <USB_DeactivateEndpoint+0x1a2>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044be:	d11f      	bne.n	8004500 <USB_DeactivateEndpoint+0x138>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	2101      	movs	r1, #1
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	43db      	mvns	r3, r3
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004520:	4013      	ands	r3, r2
 8004522:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f303 	lsl.w	r3, r1, r3
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	43db      	mvns	r3, r3
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004544:	4013      	ands	r3, r2
 8004546:	61cb      	str	r3, [r1, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	0159      	lsls	r1, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	440b      	add	r3, r1
 800455e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004562:	4619      	mov	r1, r3
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <USB_DeactivateEndpoint+0x1b4>)
 8004566:	4013      	ands	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
 800456a:	2300      	movs	r3, #0
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	ec337800 	.word	0xec337800
 800457c:	eff37800 	.word	0xeff37800

08004580 <USB_EPStartXfer>:
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b01      	cmp	r3, #1
 800459a:	f040 812d 	bne.w	80047f8 <USB_EPStartXfer+0x278>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d132      	bne.n	800460c <USB_EPStartXfer+0x8c>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80045c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80045c8:	6113      	str	r3, [r2, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045e8:	6113      	str	r3, [r2, #16]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004604:	0cdb      	lsrs	r3, r3, #19
 8004606:	04db      	lsls	r3, r3, #19
 8004608:	6113      	str	r3, [r2, #16]
 800460a:	e097      	b.n	800473c <USB_EPStartXfer+0x1bc>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004626:	0cdb      	lsrs	r3, r3, #19
 8004628:	04db      	lsls	r3, r3, #19
 800462a:	6113      	str	r3, [r2, #16]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004646:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800464a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800464e:	6113      	str	r3, [r2, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11a      	bne.n	800468c <USB_EPStartXfer+0x10c>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d903      	bls.n	800466a <USB_EPStartXfer+0xea>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004688:	6113      	str	r3, [r2, #16]
 800468a:	e044      	b.n	8004716 <USB_EPStartXfer+0x196>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4413      	add	r3, r2
 8004696:	1e5a      	subs	r2, r3, #1
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	81fb      	strh	r3, [r7, #14]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	89fb      	ldrh	r3, [r7, #14]
 80046b2:	04d9      	lsls	r1, r3, #19
 80046b4:	4b8f      	ldr	r3, [pc, #572]	@ (80048f4 <USB_EPStartXfer+0x374>)
 80046b6:	400b      	ands	r3, r1
 80046b8:	6939      	ldr	r1, [r7, #16]
 80046ba:	0148      	lsls	r0, r1, #5
 80046bc:	6979      	ldr	r1, [r7, #20]
 80046be:	4401      	add	r1, r0
 80046c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046c4:	4313      	orrs	r3, r2
 80046c6:	610b      	str	r3, [r1, #16]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d122      	bne.n	8004716 <USB_EPStartXfer+0x196>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80046ee:	6113      	str	r3, [r2, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	89fb      	ldrh	r3, [r7, #14]
 8004700:	075b      	lsls	r3, r3, #29
 8004702:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004706:	6939      	ldr	r1, [r7, #16]
 8004708:	0148      	lsls	r0, r1, #5
 800470a:	6979      	ldr	r1, [r7, #20]
 800470c:	4401      	add	r1, r0
 800470e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004712:	4313      	orrs	r3, r2
 8004714:	610b      	str	r3, [r1, #16]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472c:	6939      	ldr	r1, [r7, #16]
 800472e:	0148      	lsls	r0, r1, #5
 8004730:	6979      	ldr	r1, [r7, #20]
 8004732:	4401      	add	r1, r0
 8004734:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004756:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	791b      	ldrb	r3, [r3, #4]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d015      	beq.n	8004790 <USB_EPStartXfer+0x210>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 813a 	beq.w	80049e2 <USB_EPStartXfer+0x462>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	2101      	movs	r1, #1
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	6979      	ldr	r1, [r7, #20]
 8004786:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800478a:	4313      	orrs	r3, r2
 800478c:	634b      	str	r3, [r1, #52]	@ 0x34
 800478e:	e128      	b.n	80049e2 <USB_EPStartXfer+0x462>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d110      	bne.n	80047c2 <USB_EPStartXfer+0x242>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e00f      	b.n	80047e2 <USB_EPStartXfer+0x262>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68d9      	ldr	r1, [r3, #12]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f9a7 	bl	8004b44 <USB_WritePacket>
 80047f6:	e0f4      	b.n	80049e2 <USB_EPStartXfer+0x462>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004812:	0cdb      	lsrs	r3, r3, #19
 8004814:	04db      	lsls	r3, r3, #19
 8004816:	6113      	str	r3, [r2, #16]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004832:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004836:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800483a:	6113      	str	r3, [r2, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d12f      	bne.n	80048a2 <USB_EPStartXfer+0x322>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <USB_EPStartXfer+0x2d2>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	611a      	str	r2, [r3, #16]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	621a      	str	r2, [r3, #32]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	6939      	ldr	r1, [r7, #16]
 8004872:	0148      	lsls	r0, r1, #5
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	4401      	add	r1, r0
 8004878:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800487c:	4313      	orrs	r3, r2
 800487e:	610b      	str	r3, [r1, #16]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800489a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800489e:	6113      	str	r3, [r2, #16]
 80048a0:	e062      	b.n	8004968 <USB_EPStartXfer+0x3e8>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d126      	bne.n	80048f8 <USB_EPStartXfer+0x378>
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	6939      	ldr	r1, [r7, #16]
 80048c2:	0148      	lsls	r0, r1, #5
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	4401      	add	r1, r0
 80048c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048ee:	6113      	str	r3, [r2, #16]
 80048f0:	e03a      	b.n	8004968 <USB_EPStartXfer+0x3e8>
 80048f2:	bf00      	nop
 80048f4:	1ff80000 	.word	0x1ff80000
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4413      	add	r3, r2
 8004902:	1e5a      	subs	r2, r3, #1
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	81fb      	strh	r3, [r7, #14]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	89fa      	ldrh	r2, [r7, #14]
 8004914:	fb03 f202 	mul.w	r2, r3, r2
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	621a      	str	r2, [r3, #32]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	04d9      	lsls	r1, r3, #19
 800492e:	4b2f      	ldr	r3, [pc, #188]	@ (80049ec <USB_EPStartXfer+0x46c>)
 8004930:	400b      	ands	r3, r1
 8004932:	6939      	ldr	r1, [r7, #16]
 8004934:	0148      	lsls	r0, r1, #5
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	4401      	add	r1, r0
 800493a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800493e:	4313      	orrs	r3, r2
 8004940:	610b      	str	r3, [r1, #16]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004958:	6939      	ldr	r1, [r7, #16]
 800495a:	0148      	lsls	r0, r1, #5
 800495c:	6979      	ldr	r1, [r7, #20]
 800495e:	4401      	add	r1, r0
 8004960:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004964:	4313      	orrs	r3, r2
 8004966:	610b      	str	r3, [r1, #16]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d128      	bne.n	80049c2 <USB_EPStartXfer+0x442>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d110      	bne.n	80049a2 <USB_EPStartXfer+0x422>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800499a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e00f      	b.n	80049c2 <USB_EPStartXfer+0x442>
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	2300      	movs	r3, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	1ff80000 	.word	0x1ff80000

080049f0 <USB_EPStopXfer>:
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d14a      	bne.n	8004aa4 <USB_EPStopXfer+0xb4>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a26:	f040 8086 	bne.w	8004b36 <USB_EPStopXfer+0x146>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	7812      	ldrb	r2, [r2, #0]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d902      	bls.n	8004a88 <USB_EPStopXfer+0x98>
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
 8004a86:	e056      	b.n	8004b36 <USB_EPStopXfer+0x146>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa0:	d0e7      	beq.n	8004a72 <USB_EPStopXfer+0x82>
 8004aa2:	e048      	b.n	8004b36 <USB_EPStopXfer+0x146>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004abc:	d13b      	bne.n	8004b36 <USB_EPStopXfer+0x146>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004adc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d902      	bls.n	8004b1c <USB_EPStopXfer+0x12c>
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
 8004b1a:	e00c      	b.n	8004b36 <USB_EPStopXfer+0x146>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b34:	d0e7      	beq.n	8004b06 <USB_EPStopXfer+0x116>
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USB_WritePacket>:
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	@ 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	460b      	mov	r3, r1
 8004b54:	71fb      	strb	r3, [r7, #7]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80bb      	strh	r3, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	88bb      	ldrh	r3, [r7, #4]
 8004b64:	3303      	adds	r3, #3
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e018      	b.n	8004ba2 <USB_WritePacket+0x5e>
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	031a      	lsls	r2, r3, #12
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	3301      	adds	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	3301      	adds	r3, #1
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3e2      	bcc.n	8004b70 <USB_WritePacket+0x2c>
 8004baa:	2300      	movs	r3, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	3724      	adds	r7, #36	@ 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <USB_ReadPacket>:
 8004bb8:	b480      	push	{r7}
 8004bba:	b08b      	sub	sp, #44	@ 0x2c
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	83fb      	strh	r3, [r7, #30]
 8004bde:	2300      	movs	r3, #0
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	e014      	b.n	8004c0e <USB_ReadPacket+0x56>
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	3301      	adds	r3, #1
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d3e6      	bcc.n	8004be4 <USB_ReadPacket+0x2c>
 8004c16:	8bfb      	ldrh	r3, [r7, #30]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01e      	beq.n	8004c5a <USB_ReadPacket+0xa2>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c26:	461a      	mov	r2, r3
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	3301      	adds	r3, #1
 8004c46:	623b      	str	r3, [r7, #32]
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4e:	8bfb      	ldrh	r3, [r7, #30]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	83fb      	strh	r3, [r7, #30]
 8004c54:	8bfb      	ldrh	r3, [r7, #30]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1ea      	bne.n	8004c30 <USB_ReadPacket+0x78>
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	372c      	adds	r7, #44	@ 0x2c
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_EPSetStall>:
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d12c      	bne.n	8004cde <USB_EPSetStall+0x76>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db12      	blt.n	8004cbc <USB_EPSetStall+0x54>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00f      	beq.n	8004cbc <USB_EPSetStall+0x54>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0151      	lsls	r1, r2, #5
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e02b      	b.n	8004d36 <USB_EPSetStall+0xce>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	db12      	blt.n	8004d16 <USB_EPSetStall+0xae>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <USB_EPSetStall+0xae>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	2300      	movs	r3, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USB_EPClearStall>:
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d128      	bne.n	8004db2 <USB_EPClearStall+0x6e>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	791b      	ldrb	r3, [r3, #4]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d003      	beq.n	8004d90 <USB_EPClearStall+0x4c>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	791b      	ldrb	r3, [r3, #4]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d138      	bne.n	8004e02 <USB_EPClearStall+0xbe>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e027      	b.n	8004e02 <USB_EPClearStall+0xbe>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dcc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	791b      	ldrb	r3, [r3, #4]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d003      	beq.n	8004de2 <USB_EPClearStall+0x9e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	791b      	ldrb	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d10f      	bne.n	8004e02 <USB_EPClearStall+0xbe>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <USB_SetDevAddress>:
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e2e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <USB_DevConnect>:
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e8a:	f023 0302 	bic.w	r3, r3, #2
 8004e8e:	6053      	str	r3, [r2, #4]
 8004e90:	2300      	movs	r3, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_DevDisconnect>:
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004eb8:	f023 0303 	bic.w	r3, r3, #3
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USB_ReadInterrupts>:
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <USB_ReadDevAllOutEpInterrupt>:
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <USB_ReadDevAllInEpInterrupt>:
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USB_ReadDevOutEPInterrupt>:
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_ReadDevInEPInterrupt>:
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fda:	01db      	lsls	r3, r3, #7
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <USB_GetMode>:
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_ActivateSetup>:
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800503c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005040:	f023 0307 	bic.w	r3, r3, #7
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005058:	6053      	str	r3, [r2, #4]
 800505a:	2300      	movs	r3, #0
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_EP0_OutStart>:
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	333c      	adds	r3, #60	@ 0x3c
 800507a:	3304      	adds	r3, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <USB_EP0_OutStart+0x8c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d90a      	bls.n	800509e <USB_EP0_OutStart+0x36>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005098:	d101      	bne.n	800509e <USB_EP0_OutStart+0x36>
 800509a:	2300      	movs	r3, #0
 800509c:	e024      	b.n	80050e8 <USB_EP0_OutStart+0x80>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a4:	461a      	mov	r2, r3
 80050a6:	2300      	movs	r3, #0
 80050a8:	6113      	str	r3, [r2, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050bc:	6113      	str	r3, [r2, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050cc:	f043 0318 	orr.w	r3, r3, #24
 80050d0:	6113      	str	r3, [r2, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80050e4:	6113      	str	r3, [r2, #16]
 80050e6:	2300      	movs	r3, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	4f54300a 	.word	0x4f54300a

080050f8 <USB_CoreReset>:
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3301      	adds	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005110:	d901      	bls.n	8005116 <USB_CoreReset+0x1e>
 8005112:	2303      	movs	r3, #3
 8005114:	e01b      	b.n	800514e <USB_CoreReset+0x56>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	daf2      	bge.n	8005104 <USB_CoreReset+0xc>
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	611a      	str	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800513a:	d901      	bls.n	8005140 <USB_CoreReset+0x48>
 800513c:	2303      	movs	r3, #3
 800513e:	e006      	b.n	800514e <USB_CoreReset+0x56>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d0f0      	beq.n	800512e <USB_CoreReset+0x36>
 800514c:	2300      	movs	r3, #0
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005168:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800516c:	f002 ff16 	bl	8007f9c <USBD_static_malloc>
 8005170:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	32b0      	adds	r2, #176	@ 0xb0
 8005182:	2100      	movs	r1, #0
 8005184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005188:	2302      	movs	r3, #2
 800518a:	e0d4      	b.n	8005336 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800518c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005190:	2100      	movs	r1, #0
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f003 f938 	bl	8008408 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	32b0      	adds	r2, #176	@ 0xb0
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	32b0      	adds	r2, #176	@ 0xb0
 80051b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7c1b      	ldrb	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d138      	bne.n	8005236 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80051c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005340 <USBD_CDC_Init+0x1e4>)
 80051c6:	7819      	ldrb	r1, [r3, #0]
 80051c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051cc:	2202      	movs	r2, #2
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f002 fcd0 	bl	8007b74 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005340 <USBD_CDC_Init+0x1e4>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	f003 020f 	and.w	r2, r3, #15
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	3324      	adds	r3, #36	@ 0x24
 80051ea:	2201      	movs	r2, #1
 80051ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051ee:	4b55      	ldr	r3, [pc, #340]	@ (8005344 <USBD_CDC_Init+0x1e8>)
 80051f0:	7819      	ldrb	r1, [r3, #0]
 80051f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051f6:	2202      	movs	r2, #2
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f002 fcbb 	bl	8007b74 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051fe:	4b51      	ldr	r3, [pc, #324]	@ (8005344 <USBD_CDC_Init+0x1e8>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	f003 020f 	and.w	r2, r3, #15
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005216:	2201      	movs	r2, #1
 8005218:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800521a:	4b4b      	ldr	r3, [pc, #300]	@ (8005348 <USBD_CDC_Init+0x1ec>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3326      	adds	r3, #38	@ 0x26
 8005230:	2210      	movs	r2, #16
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e035      	b.n	80052a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005236:	4b42      	ldr	r3, [pc, #264]	@ (8005340 <USBD_CDC_Init+0x1e4>)
 8005238:	7819      	ldrb	r1, [r3, #0]
 800523a:	2340      	movs	r3, #64	@ 0x40
 800523c:	2202      	movs	r2, #2
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f002 fc98 	bl	8007b74 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005244:	4b3e      	ldr	r3, [pc, #248]	@ (8005340 <USBD_CDC_Init+0x1e4>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3324      	adds	r3, #36	@ 0x24
 800525a:	2201      	movs	r2, #1
 800525c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800525e:	4b39      	ldr	r3, [pc, #228]	@ (8005344 <USBD_CDC_Init+0x1e8>)
 8005260:	7819      	ldrb	r1, [r3, #0]
 8005262:	2340      	movs	r3, #64	@ 0x40
 8005264:	2202      	movs	r2, #2
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f002 fc84 	bl	8007b74 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800526c:	4b35      	ldr	r3, [pc, #212]	@ (8005344 <USBD_CDC_Init+0x1e8>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005284:	2201      	movs	r2, #1
 8005286:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005288:	4b2f      	ldr	r3, [pc, #188]	@ (8005348 <USBD_CDC_Init+0x1ec>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 020f 	and.w	r2, r3, #15
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3326      	adds	r3, #38	@ 0x26
 800529e:	2210      	movs	r2, #16
 80052a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052a2:	4b29      	ldr	r3, [pc, #164]	@ (8005348 <USBD_CDC_Init+0x1ec>)
 80052a4:	7819      	ldrb	r1, [r3, #0]
 80052a6:	2308      	movs	r3, #8
 80052a8:	2203      	movs	r2, #3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f002 fc62 	bl	8007b74 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <USBD_CDC_Init+0x1ec>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	f003 020f 	and.w	r2, r3, #15
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	3324      	adds	r3, #36	@ 0x24
 80052c6:	2201      	movs	r2, #1
 80052c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	33b0      	adds	r3, #176	@ 0xb0
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005300:	2302      	movs	r3, #2
 8005302:	e018      	b.n	8005336 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7c1b      	ldrb	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800530c:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <USBD_CDC_Init+0x1e8>)
 800530e:	7819      	ldrb	r1, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f002 fda4 	bl	8007e68 <USBD_LL_PrepareReceive>
 8005320:	e008      	b.n	8005334 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005322:	4b08      	ldr	r3, [pc, #32]	@ (8005344 <USBD_CDC_Init+0x1e8>)
 8005324:	7819      	ldrb	r1, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800532c:	2340      	movs	r3, #64	@ 0x40
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f002 fd9a 	bl	8007e68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000093 	.word	0x20000093
 8005344:	20000094 	.word	0x20000094
 8005348:	20000095 	.word	0x20000095

0800534c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005358:	4b3a      	ldr	r3, [pc, #232]	@ (8005444 <USBD_CDC_DeInit+0xf8>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f002 fc46 	bl	8007bf0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005364:	4b37      	ldr	r3, [pc, #220]	@ (8005444 <USBD_CDC_DeInit+0xf8>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	f003 020f 	and.w	r2, r3, #15
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3324      	adds	r3, #36	@ 0x24
 800537a:	2200      	movs	r2, #0
 800537c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800537e:	4b32      	ldr	r3, [pc, #200]	@ (8005448 <USBD_CDC_DeInit+0xfc>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f002 fc33 	bl	8007bf0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800538a:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <USBD_CDC_DeInit+0xfc>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 020f 	and.w	r2, r3, #15
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053a2:	2200      	movs	r2, #0
 80053a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80053a6:	4b29      	ldr	r3, [pc, #164]	@ (800544c <USBD_CDC_DeInit+0x100>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f002 fc1f 	bl	8007bf0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80053b2:	4b26      	ldr	r3, [pc, #152]	@ (800544c <USBD_CDC_DeInit+0x100>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f003 020f 	and.w	r2, r3, #15
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	3324      	adds	r3, #36	@ 0x24
 80053c8:	2200      	movs	r2, #0
 80053ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80053cc:	4b1f      	ldr	r3, [pc, #124]	@ (800544c <USBD_CDC_DeInit+0x100>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3326      	adds	r3, #38	@ 0x26
 80053e2:	2200      	movs	r2, #0
 80053e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	32b0      	adds	r2, #176	@ 0xb0
 80053f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01f      	beq.n	8005438 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	33b0      	adds	r3, #176	@ 0xb0
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	32b0      	adds	r2, #176	@ 0xb0
 8005416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541a:	4618      	mov	r0, r3
 800541c:	f002 fdcc 	bl	8007fb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	32b0      	adds	r2, #176	@ 0xb0
 800542a:	2100      	movs	r1, #0
 800542c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000093 	.word	0x20000093
 8005448:	20000094 	.word	0x20000094
 800544c:	20000095 	.word	0x20000095

08005450 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	32b0      	adds	r2, #176	@ 0xb0
 8005464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005468:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800547c:	2303      	movs	r3, #3
 800547e:	e0bf      	b.n	8005600 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005488:	2b00      	cmp	r3, #0
 800548a:	d050      	beq.n	800552e <USBD_CDC_Setup+0xde>
 800548c:	2b20      	cmp	r3, #32
 800548e:	f040 80af 	bne.w	80055f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	88db      	ldrh	r3, [r3, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d03a      	beq.n	8005510 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b25b      	sxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	da1b      	bge.n	80054dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	33b0      	adds	r3, #176	@ 0xb0
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80054ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	88d2      	ldrh	r2, [r2, #6]
 80054c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	88db      	ldrh	r3, [r3, #6]
 80054c6:	2b07      	cmp	r3, #7
 80054c8:	bf28      	it	cs
 80054ca:	2307      	movcs	r3, #7
 80054cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	89fa      	ldrh	r2, [r7, #14]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fdbd 	bl	8007054 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054da:	e090      	b.n	80055fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	785a      	ldrb	r2, [r3, #1]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	88db      	ldrh	r3, [r3, #6]
 80054ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80054ec:	d803      	bhi.n	80054f6 <USBD_CDC_Setup+0xa6>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	88db      	ldrh	r3, [r3, #6]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	e000      	b.n	80054f8 <USBD_CDC_Setup+0xa8>
 80054f6:	2240      	movs	r2, #64	@ 0x40
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005506:	461a      	mov	r2, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 fdcf 	bl	80070ac <USBD_CtlPrepareRx>
      break;
 800550e:	e076      	b.n	80055fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	33b0      	adds	r3, #176	@ 0xb0
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	7850      	ldrb	r0, [r2, #1]
 8005526:	2200      	movs	r2, #0
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	4798      	blx	r3
      break;
 800552c:	e067      	b.n	80055fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b0b      	cmp	r3, #11
 8005534:	d851      	bhi.n	80055da <USBD_CDC_Setup+0x18a>
 8005536:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <USBD_CDC_Setup+0xec>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	0800556d 	.word	0x0800556d
 8005540:	080055e9 	.word	0x080055e9
 8005544:	080055db 	.word	0x080055db
 8005548:	080055db 	.word	0x080055db
 800554c:	080055db 	.word	0x080055db
 8005550:	080055db 	.word	0x080055db
 8005554:	080055db 	.word	0x080055db
 8005558:	080055db 	.word	0x080055db
 800555c:	080055db 	.word	0x080055db
 8005560:	080055db 	.word	0x080055db
 8005564:	08005597 	.word	0x08005597
 8005568:	080055c1 	.word	0x080055c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d107      	bne.n	8005588 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005578:	f107 030a 	add.w	r3, r7, #10
 800557c:	2202      	movs	r2, #2
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 fd67 	bl	8007054 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005586:	e032      	b.n	80055ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fce5 	bl	8006f5a <USBD_CtlError>
            ret = USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	75fb      	strb	r3, [r7, #23]
          break;
 8005594:	e02b      	b.n	80055ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d107      	bne.n	80055b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80055a2:	f107 030d 	add.w	r3, r7, #13
 80055a6:	2201      	movs	r2, #1
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 fd52 	bl	8007054 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055b0:	e01d      	b.n	80055ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fcd0 	bl	8006f5a <USBD_CtlError>
            ret = USBD_FAIL;
 80055ba:	2303      	movs	r3, #3
 80055bc:	75fb      	strb	r3, [r7, #23]
          break;
 80055be:	e016      	b.n	80055ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d00f      	beq.n	80055ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 fcc3 	bl	8006f5a <USBD_CtlError>
            ret = USBD_FAIL;
 80055d4:	2303      	movs	r3, #3
 80055d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055d8:	e008      	b.n	80055ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fcbc 	bl	8006f5a <USBD_CtlError>
          ret = USBD_FAIL;
 80055e2:	2303      	movs	r3, #3
 80055e4:	75fb      	strb	r3, [r7, #23]
          break;
 80055e6:	e002      	b.n	80055ee <USBD_CDC_Setup+0x19e>
          break;
 80055e8:	bf00      	nop
 80055ea:	e008      	b.n	80055fe <USBD_CDC_Setup+0x1ae>
          break;
 80055ec:	bf00      	nop
      }
      break;
 80055ee:	e006      	b.n	80055fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fcb1 	bl	8006f5a <USBD_CtlError>
      ret = USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	75fb      	strb	r3, [r7, #23]
      break;
 80055fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800561a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	32b0      	adds	r2, #176	@ 0xb0
 8005626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800562e:	2303      	movs	r3, #3
 8005630:	e065      	b.n	80056fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	32b0      	adds	r2, #176	@ 0xb0
 800563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005640:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	f003 020f 	and.w	r2, r3, #15
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3318      	adds	r3, #24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d02f      	beq.n	80056bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 020f 	and.w	r2, r3, #15
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	3318      	adds	r3, #24
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	f003 010f 	and.w	r1, r3, #15
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	460b      	mov	r3, r1
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4403      	add	r3, r0
 8005684:	331c      	adds	r3, #28
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	fbb2 f1f3 	udiv	r1, r2, r3
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005692:	2b00      	cmp	r3, #0
 8005694:	d112      	bne.n	80056bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	f003 020f 	and.w	r2, r3, #15
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	3318      	adds	r3, #24
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056ae:	78f9      	ldrb	r1, [r7, #3]
 80056b0:	2300      	movs	r3, #0
 80056b2:	2200      	movs	r2, #0
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f002 fb9f 	bl	8007df8 <USBD_LL_Transmit>
 80056ba:	e01f      	b.n	80056fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	33b0      	adds	r3, #176	@ 0xb0
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	33b0      	adds	r3, #176	@ 0xb0
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	32b0      	adds	r2, #176	@ 0xb0
 800571c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005720:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	32b0      	adds	r2, #176	@ 0xb0
 800572c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005734:	2303      	movs	r3, #3
 8005736:	e01a      	b.n	800576e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f002 fbcb 	bl	8007ed8 <USBD_LL_GetRxDataSize>
 8005742:	4602      	mov	r2, r0
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	33b0      	adds	r3, #176	@ 0xb0
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005768:	4611      	mov	r1, r2
 800576a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	32b0      	adds	r2, #176	@ 0xb0
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	e024      	b.n	80057e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	33b0      	adds	r3, #176	@ 0xb0
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d019      	beq.n	80057e0 <USBD_CDC_EP0_RxReady+0x6a>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80057b2:	2bff      	cmp	r3, #255	@ 0xff
 80057b4:	d014      	beq.n	80057e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	33b0      	adds	r3, #176	@ 0xb0
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80057ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	22ff      	movs	r2, #255	@ 0xff
 80057dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057f4:	2182      	movs	r1, #130	@ 0x82
 80057f6:	4818      	ldr	r0, [pc, #96]	@ (8005858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057f8:	f000 fd4f 	bl	800629a <USBD_GetEpDesc>
 80057fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057fe:	2101      	movs	r1, #1
 8005800:	4815      	ldr	r0, [pc, #84]	@ (8005858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005802:	f000 fd4a 	bl	800629a <USBD_GetEpDesc>
 8005806:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005808:	2181      	movs	r1, #129	@ 0x81
 800580a:	4813      	ldr	r0, [pc, #76]	@ (8005858 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800580c:	f000 fd45 	bl	800629a <USBD_GetEpDesc>
 8005810:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2210      	movs	r2, #16
 800581c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d006      	beq.n	8005832 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2200      	movs	r2, #0
 8005828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800582c:	711a      	strb	r2, [r3, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d006      	beq.n	8005846 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005840:	711a      	strb	r2, [r3, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2243      	movs	r2, #67	@ 0x43
 800584a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800584c:	4b02      	ldr	r3, [pc, #8]	@ (8005858 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000050 	.word	0x20000050

0800585c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005864:	2182      	movs	r1, #130	@ 0x82
 8005866:	4818      	ldr	r0, [pc, #96]	@ (80058c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005868:	f000 fd17 	bl	800629a <USBD_GetEpDesc>
 800586c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800586e:	2101      	movs	r1, #1
 8005870:	4815      	ldr	r0, [pc, #84]	@ (80058c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005872:	f000 fd12 	bl	800629a <USBD_GetEpDesc>
 8005876:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005878:	2181      	movs	r1, #129	@ 0x81
 800587a:	4813      	ldr	r0, [pc, #76]	@ (80058c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800587c:	f000 fd0d 	bl	800629a <USBD_GetEpDesc>
 8005880:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2210      	movs	r2, #16
 800588c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2200      	movs	r2, #0
 8005898:	711a      	strb	r2, [r3, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f042 0202 	orr.w	r2, r2, #2
 80058a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d006      	beq.n	80058b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	711a      	strb	r2, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f042 0202 	orr.w	r2, r2, #2
 80058b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2243      	movs	r2, #67	@ 0x43
 80058ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058bc:	4b02      	ldr	r3, [pc, #8]	@ (80058c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000050 	.word	0x20000050

080058cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058d4:	2182      	movs	r1, #130	@ 0x82
 80058d6:	4818      	ldr	r0, [pc, #96]	@ (8005938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058d8:	f000 fcdf 	bl	800629a <USBD_GetEpDesc>
 80058dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058de:	2101      	movs	r1, #1
 80058e0:	4815      	ldr	r0, [pc, #84]	@ (8005938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058e2:	f000 fcda 	bl	800629a <USBD_GetEpDesc>
 80058e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058e8:	2181      	movs	r1, #129	@ 0x81
 80058ea:	4813      	ldr	r0, [pc, #76]	@ (8005938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058ec:	f000 fcd5 	bl	800629a <USBD_GetEpDesc>
 80058f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2210      	movs	r2, #16
 80058fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d006      	beq.n	8005912 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2200      	movs	r2, #0
 8005908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800590c:	711a      	strb	r2, [r3, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005920:	711a      	strb	r2, [r3, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2243      	movs	r2, #67	@ 0x43
 800592a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800592c:	4b02      	ldr	r3, [pc, #8]	@ (8005938 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000050 	.word	0x20000050

0800593c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	220a      	movs	r2, #10
 8005948:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800594a:	4b03      	ldr	r3, [pc, #12]	@ (8005958 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	2000000c 	.word	0x2000000c

0800595c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800596c:	2303      	movs	r3, #3
 800596e:	e009      	b.n	8005984 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	33b0      	adds	r3, #176	@ 0xb0
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	32b0      	adds	r2, #176	@ 0xb0
 80059a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e008      	b.n	80059c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	32b0      	adds	r2, #176	@ 0xb0
 80059e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e004      	b.n	8005a02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	32b0      	adds	r2, #176	@ 0xb0
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e025      	b.n	8005a82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11f      	bne.n	8005a80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a48:	4b10      	ldr	r3, [pc, #64]	@ (8005a8c <USBD_CDC_TransmitPacket+0x7c>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4403      	add	r3, r0
 8005a62:	3318      	adds	r3, #24
 8005a64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a66:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <USBD_CDC_TransmitPacket+0x7c>)
 8005a68:	7819      	ldrb	r1, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 f9be 	bl	8007df8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000093 	.word	0x20000093

08005a90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	32b0      	adds	r2, #176	@ 0xb0
 8005aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	32b0      	adds	r2, #176	@ 0xb0
 8005ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e018      	b.n	8005af0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7c1b      	ldrb	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <USBD_CDC_ReceivePacket+0x68>)
 8005ac8:	7819      	ldrb	r1, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f002 f9c7 	bl	8007e68 <USBD_LL_PrepareReceive>
 8005ada:	e008      	b.n	8005aee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <USBD_CDC_ReceivePacket+0x68>)
 8005ade:	7819      	ldrb	r1, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ae6:	2340      	movs	r3, #64	@ 0x40
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 f9bd 	bl	8007e68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000094 	.word	0x20000094

08005afc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e01f      	b.n	8005b54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	79fa      	ldrb	r2, [r7, #7]
 8005b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f001 ff95 	bl	8007a78 <USBD_LL_Init>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e025      	b.n	8005bc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	32ae      	adds	r2, #174	@ 0xae
 8005b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00f      	beq.n	8005bb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	32ae      	adds	r2, #174	@ 0xae
 8005b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	f107 020e 	add.w	r2, r7, #14
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	4602      	mov	r2, r0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 ff9d 	bl	8007b10 <USBD_LL_Start>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005be8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
 8005c20:	4603      	mov	r3, r0
 8005c22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	78fa      	ldrb	r2, [r7, #3]
 8005c48:	4611      	mov	r1, r2
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 f936 	bl	8006ee6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d01a      	beq.n	8005cd4 <USBD_LL_SetupStage+0x72>
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d822      	bhi.n	8005ce8 <USBD_LL_SetupStage+0x86>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <USBD_LL_SetupStage+0x4a>
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d00a      	beq.n	8005cc0 <USBD_LL_SetupStage+0x5e>
 8005caa:	e01d      	b.n	8005ce8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fb63 	bl	8006380 <USBD_StdDevReq>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbe:	e020      	b.n	8005d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fbcb 	bl	8006464 <USBD_StdItfReq>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd2:	e016      	b.n	8005d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fc2d 	bl	800653c <USBD_StdEPReq>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce6:	e00c      	b.n	8005d02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 ffb0 	bl	8007c5c <USBD_LL_StallEP>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	bf00      	nop
  }

  return ret;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	460b      	mov	r3, r1
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d1e:	7afb      	ldrb	r3, [r7, #11]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d16e      	bne.n	8005e02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005d2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	f040 8098 	bne.w	8005e68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d913      	bls.n	8005d6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	1ad2      	subs	r2, r2, r3
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	bf28      	it	cs
 8005d5e:	4613      	movcs	r3, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f001 f9be 	bl	80070e6 <USBD_CtlContinueRx>
 8005d6a:	e07d      	b.n	8005e68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d014      	beq.n	8005da4 <USBD_LL_DataOutStage+0x98>
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d81d      	bhi.n	8005dba <USBD_LL_DataOutStage+0xae>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <USBD_LL_DataOutStage+0x7c>
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d003      	beq.n	8005d8e <USBD_LL_DataOutStage+0x82>
 8005d86:	e018      	b.n	8005dba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	75bb      	strb	r3, [r7, #22]
            break;
 8005d8c:	e018      	b.n	8005dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	4619      	mov	r1, r3
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fa64 	bl	8006266 <USBD_CoreFindIF>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	75bb      	strb	r3, [r7, #22]
            break;
 8005da2:	e00d      	b.n	8005dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fa66 	bl	8006280 <USBD_CoreFindEP>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75bb      	strb	r3, [r7, #22]
            break;
 8005db8:	e002      	b.n	8005dc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75bb      	strb	r3, [r7, #22]
            break;
 8005dbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005dc0:	7dbb      	ldrb	r3, [r7, #22]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d119      	bne.n	8005dfa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d113      	bne.n	8005dfa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005dd2:	7dba      	ldrb	r2, [r7, #22]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	32ae      	adds	r2, #174	@ 0xae
 8005dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005de2:	7dba      	ldrb	r2, [r7, #22]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005dea:	7dba      	ldrb	r2, [r7, #22]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	32ae      	adds	r2, #174	@ 0xae
 8005df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f001 f984 	bl	8007108 <USBD_CtlSendStatus>
 8005e00:	e032      	b.n	8005e68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fa37 	bl	8006280 <USBD_CoreFindEP>
 8005e12:	4603      	mov	r3, r0
 8005e14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e16:	7dbb      	ldrb	r3, [r7, #22]
 8005e18:	2bff      	cmp	r3, #255	@ 0xff
 8005e1a:	d025      	beq.n	8005e68 <USBD_LL_DataOutStage+0x15c>
 8005e1c:	7dbb      	ldrb	r3, [r7, #22]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d122      	bne.n	8005e68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d117      	bne.n	8005e5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e2e:	7dba      	ldrb	r2, [r7, #22]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	32ae      	adds	r2, #174	@ 0xae
 8005e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00f      	beq.n	8005e5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e3e:	7dba      	ldrb	r2, [r7, #22]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e46:	7dba      	ldrb	r2, [r7, #22]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	32ae      	adds	r2, #174	@ 0xae
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	7afa      	ldrb	r2, [r7, #11]
 8005e54:	4611      	mov	r1, r2
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	4798      	blx	r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	e000      	b.n	8005e6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b086      	sub	sp, #24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d16f      	bne.n	8005f66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d15a      	bne.n	8005f4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d914      	bls.n	8005ecc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	1ad2      	subs	r2, r2, r3
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f001 f8e6 	bl	800708a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f001 ffcf 	bl	8007e68 <USBD_LL_PrepareReceive>
 8005eca:	e03f      	b.n	8005f4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d11c      	bne.n	8005f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d316      	bcc.n	8005f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d20f      	bcs.n	8005f12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f001 f8c7 	bl	800708a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f04:	2300      	movs	r3, #0
 8005f06:	2200      	movs	r2, #0
 8005f08:	2100      	movs	r1, #0
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f001 ffac 	bl	8007e68 <USBD_LL_PrepareReceive>
 8005f10:	e01c      	b.n	8005f4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d10f      	bne.n	8005f3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f3e:	2180      	movs	r1, #128	@ 0x80
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f001 fe8b 	bl	8007c5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f001 f8f1 	bl	800712e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d03a      	beq.n	8005fcc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff fe42 	bl	8005be0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f64:	e032      	b.n	8005fcc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f985 	bl	8006280 <USBD_CoreFindEP>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
 8005f7c:	2bff      	cmp	r3, #255	@ 0xff
 8005f7e:	d025      	beq.n	8005fcc <USBD_LL_DataInStage+0x15a>
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d122      	bne.n	8005fcc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d11c      	bne.n	8005fcc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f92:	7dfa      	ldrb	r2, [r7, #23]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	32ae      	adds	r2, #174	@ 0xae
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d014      	beq.n	8005fcc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005fa2:	7dfa      	ldrb	r2, [r7, #23]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005faa:	7dfa      	ldrb	r2, [r7, #23]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	32ae      	adds	r2, #174	@ 0xae
 8005fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	7afa      	ldrb	r2, [r7, #11]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	4798      	blx	r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005fc2:	7dbb      	ldrb	r3, [r7, #22]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005fc8:	7dbb      	ldrb	r3, [r7, #22]
 8005fca:	e000      	b.n	8005fce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d014      	beq.n	800603c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00e      	beq.n	800603c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	4611      	mov	r1, r2
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006038:	2303      	movs	r3, #3
 800603a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800603c:	2340      	movs	r3, #64	@ 0x40
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fd96 	bl	8007b74 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2240      	movs	r2, #64	@ 0x40
 8006054:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006058:	2340      	movs	r3, #64	@ 0x40
 800605a:	2200      	movs	r2, #0
 800605c:	2180      	movs	r1, #128	@ 0x80
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fd88 	bl	8007b74 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2240      	movs	r2, #64	@ 0x40
 800606e:	621a      	str	r2, [r3, #32]

  return ret;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d006      	beq.n	80060bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2204      	movs	r2, #4
 80060c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d106      	bne.n	80060f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b03      	cmp	r3, #3
 8006114:	d110      	bne.n	8006138 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	32ae      	adds	r2, #174	@ 0xae
 8006158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006160:	2303      	movs	r3, #3
 8006162:	e01c      	b.n	800619e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b03      	cmp	r3, #3
 800616e:	d115      	bne.n	800619c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	32ae      	adds	r2, #174	@ 0xae
 800617a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	32ae      	adds	r2, #174	@ 0xae
 800618e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	78fa      	ldrb	r2, [r7, #3]
 8006196:	4611      	mov	r1, r2
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	32ae      	adds	r2, #174	@ 0xae
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e01c      	b.n	8006202 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d115      	bne.n	8006200 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	32ae      	adds	r2, #174	@ 0xae
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32ae      	adds	r2, #174	@ 0xae
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	4611      	mov	r1, r2
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6852      	ldr	r2, [r2, #4]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	4611      	mov	r1, r2
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006272:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800628c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	885b      	ldrh	r3, [r3, #2]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	4293      	cmp	r3, r2
 80062be:	d91f      	bls.n	8006300 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80062c6:	e013      	b.n	80062f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80062c8:	f107 030a 	add.w	r3, r7, #10
 80062cc:	4619      	mov	r1, r3
 80062ce:	6978      	ldr	r0, [r7, #20]
 80062d0:	f000 f81b 	bl	800630a <USBD_GetNextDesc>
 80062d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d108      	bne.n	80062f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	789b      	ldrb	r3, [r3, #2]
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d008      	beq.n	80062fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	885b      	ldrh	r3, [r3, #2]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	897b      	ldrh	r3, [r7, #10]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d8e5      	bhi.n	80062c8 <USBD_GetEpDesc+0x2e>
 80062fc:	e000      	b.n	8006300 <USBD_GetEpDesc+0x66>
          break;
 80062fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006300:	693b      	ldr	r3, [r7, #16]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	4413      	add	r3, r2
 8006322:	b29a      	uxth	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4413      	add	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006334:	68fb      	ldr	r3, [r7, #12]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006342:	b480      	push	{r7}
 8006344:	b087      	sub	sp, #28
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	3301      	adds	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006360:	8a3b      	ldrh	r3, [r7, #16]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	b21a      	sxth	r2, r3
 8006366:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800636a:	4313      	orrs	r3, r2
 800636c:	b21b      	sxth	r3, r3
 800636e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006370:	89fb      	ldrh	r3, [r7, #14]
}
 8006372:	4618      	mov	r0, r3
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d005      	beq.n	80063a6 <USBD_StdDevReq+0x26>
 800639a:	2b40      	cmp	r3, #64	@ 0x40
 800639c:	d857      	bhi.n	800644e <USBD_StdDevReq+0xce>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00f      	beq.n	80063c2 <USBD_StdDevReq+0x42>
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d153      	bne.n	800644e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	32ae      	adds	r2, #174	@ 0xae
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]
      break;
 80063c0:	e04a      	b.n	8006458 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b09      	cmp	r3, #9
 80063c8:	d83b      	bhi.n	8006442 <USBD_StdDevReq+0xc2>
 80063ca:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <USBD_StdDevReq+0x50>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	08006425 	.word	0x08006425
 80063d4:	08006439 	.word	0x08006439
 80063d8:	08006443 	.word	0x08006443
 80063dc:	0800642f 	.word	0x0800642f
 80063e0:	08006443 	.word	0x08006443
 80063e4:	08006403 	.word	0x08006403
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	08006443 	.word	0x08006443
 80063f0:	0800641b 	.word	0x0800641b
 80063f4:	0800640d 	.word	0x0800640d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa3c 	bl	8006878 <USBD_GetDescriptor>
          break;
 8006400:	e024      	b.n	800644c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fbcb 	bl	8006ba0 <USBD_SetAddress>
          break;
 800640a:	e01f      	b.n	800644c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fc0a 	bl	8006c28 <USBD_SetConfig>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
          break;
 8006418:	e018      	b.n	800644c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fcad 	bl	8006d7c <USBD_GetConfig>
          break;
 8006422:	e013      	b.n	800644c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fcde 	bl	8006de8 <USBD_GetStatus>
          break;
 800642c:	e00e      	b.n	800644c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fd0d 	bl	8006e50 <USBD_SetFeature>
          break;
 8006436:	e009      	b.n	800644c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fd31 	bl	8006ea2 <USBD_ClrFeature>
          break;
 8006440:	e004      	b.n	800644c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fd88 	bl	8006f5a <USBD_CtlError>
          break;
 800644a:	bf00      	nop
      }
      break;
 800644c:	e004      	b.n	8006458 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fd82 	bl	8006f5a <USBD_CtlError>
      break;
 8006456:	bf00      	nop
  }

  return ret;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop

08006464 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800647a:	2b40      	cmp	r3, #64	@ 0x40
 800647c:	d005      	beq.n	800648a <USBD_StdItfReq+0x26>
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d852      	bhi.n	8006528 <USBD_StdItfReq+0xc4>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <USBD_StdItfReq+0x26>
 8006486:	2b20      	cmp	r3, #32
 8006488:	d14e      	bne.n	8006528 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	2b02      	cmp	r3, #2
 8006496:	d840      	bhi.n	800651a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	889b      	ldrh	r3, [r3, #4]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d836      	bhi.n	8006510 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	889b      	ldrh	r3, [r3, #4]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fedb 	bl	8006266 <USBD_CoreFindIF>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	2bff      	cmp	r3, #255	@ 0xff
 80064b8:	d01d      	beq.n	80064f6 <USBD_StdItfReq+0x92>
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11a      	bne.n	80064f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80064c0:	7bba      	ldrb	r2, [r7, #14]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	32ae      	adds	r2, #174	@ 0xae
 80064c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00f      	beq.n	80064f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80064d0:	7bba      	ldrb	r2, [r7, #14]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064d8:	7bba      	ldrb	r2, [r7, #14]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32ae      	adds	r2, #174	@ 0xae
 80064de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064ee:	e004      	b.n	80064fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80064f0:	2303      	movs	r3, #3
 80064f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064f4:	e001      	b.n	80064fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80064f6:	2303      	movs	r3, #3
 80064f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	88db      	ldrh	r3, [r3, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d110      	bne.n	8006524 <USBD_StdItfReq+0xc0>
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10d      	bne.n	8006524 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fdfd 	bl	8007108 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800650e:	e009      	b.n	8006524 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fd21 	bl	8006f5a <USBD_CtlError>
          break;
 8006518:	e004      	b.n	8006524 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fd1c 	bl	8006f5a <USBD_CtlError>
          break;
 8006522:	e000      	b.n	8006526 <USBD_StdItfReq+0xc2>
          break;
 8006524:	bf00      	nop
      }
      break;
 8006526:	e004      	b.n	8006532 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fd15 	bl	8006f5a <USBD_CtlError>
      break;
 8006530:	bf00      	nop
  }

  return ret;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	889b      	ldrh	r3, [r3, #4]
 800654e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006558:	2b40      	cmp	r3, #64	@ 0x40
 800655a:	d007      	beq.n	800656c <USBD_StdEPReq+0x30>
 800655c:	2b40      	cmp	r3, #64	@ 0x40
 800655e:	f200 817f 	bhi.w	8006860 <USBD_StdEPReq+0x324>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d02a      	beq.n	80065bc <USBD_StdEPReq+0x80>
 8006566:	2b20      	cmp	r3, #32
 8006568:	f040 817a 	bne.w	8006860 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fe85 	bl	8006280 <USBD_CoreFindEP>
 8006576:	4603      	mov	r3, r0
 8006578:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800657a:	7b7b      	ldrb	r3, [r7, #13]
 800657c:	2bff      	cmp	r3, #255	@ 0xff
 800657e:	f000 8174 	beq.w	800686a <USBD_StdEPReq+0x32e>
 8006582:	7b7b      	ldrb	r3, [r7, #13]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 8170 	bne.w	800686a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800658a:	7b7a      	ldrb	r2, [r7, #13]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006592:	7b7a      	ldrb	r2, [r7, #13]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	32ae      	adds	r2, #174	@ 0xae
 8006598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8163 	beq.w	800686a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065a4:	7b7a      	ldrb	r2, [r7, #13]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	32ae      	adds	r2, #174	@ 0xae
 80065aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ba:	e156      	b.n	800686a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	785b      	ldrb	r3, [r3, #1]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d008      	beq.n	80065d6 <USBD_StdEPReq+0x9a>
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	f300 8145 	bgt.w	8006854 <USBD_StdEPReq+0x318>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 809b 	beq.w	8006706 <USBD_StdEPReq+0x1ca>
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d03c      	beq.n	800664e <USBD_StdEPReq+0x112>
 80065d4:	e13e      	b.n	8006854 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d002      	beq.n	80065e8 <USBD_StdEPReq+0xac>
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d016      	beq.n	8006614 <USBD_StdEPReq+0xd8>
 80065e6:	e02c      	b.n	8006642 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <USBD_StdEPReq+0xce>
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	2b80      	cmp	r3, #128	@ 0x80
 80065f2:	d00a      	beq.n	800660a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fb2f 	bl	8007c5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065fe:	2180      	movs	r1, #128	@ 0x80
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fb2b 	bl	8007c5c <USBD_LL_StallEP>
 8006606:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006608:	e020      	b.n	800664c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fca4 	bl	8006f5a <USBD_CtlError>
              break;
 8006612:	e01b      	b.n	800664c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	885b      	ldrh	r3, [r3, #2]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10e      	bne.n	800663a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <USBD_StdEPReq+0xfe>
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b80      	cmp	r3, #128	@ 0x80
 8006626:	d008      	beq.n	800663a <USBD_StdEPReq+0xfe>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	88db      	ldrh	r3, [r3, #6]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fb11 	bl	8007c5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fd64 	bl	8007108 <USBD_CtlSendStatus>

              break;
 8006640:	e004      	b.n	800664c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc88 	bl	8006f5a <USBD_CtlError>
              break;
 800664a:	bf00      	nop
          }
          break;
 800664c:	e107      	b.n	800685e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d002      	beq.n	8006660 <USBD_StdEPReq+0x124>
 800665a:	2b03      	cmp	r3, #3
 800665c:	d016      	beq.n	800668c <USBD_StdEPReq+0x150>
 800665e:	e04b      	b.n	80066f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <USBD_StdEPReq+0x146>
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b80      	cmp	r3, #128	@ 0x80
 800666a:	d00a      	beq.n	8006682 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 faf3 	bl	8007c5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006676:	2180      	movs	r1, #128	@ 0x80
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 faef 	bl	8007c5c <USBD_LL_StallEP>
 800667e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006680:	e040      	b.n	8006704 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fc68 	bl	8006f5a <USBD_CtlError>
              break;
 800668a:	e03b      	b.n	8006704 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	885b      	ldrh	r3, [r3, #2]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d136      	bne.n	8006702 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fb10 	bl	8007cc8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fd2d 	bl	8007108 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fde4 	bl	8006280 <USBD_CoreFindEP>
 80066b8:	4603      	mov	r3, r0
 80066ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066bc:	7b7b      	ldrb	r3, [r7, #13]
 80066be:	2bff      	cmp	r3, #255	@ 0xff
 80066c0:	d01f      	beq.n	8006702 <USBD_StdEPReq+0x1c6>
 80066c2:	7b7b      	ldrb	r3, [r7, #13]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11c      	bne.n	8006702 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80066c8:	7b7a      	ldrb	r2, [r7, #13]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80066d0:	7b7a      	ldrb	r2, [r7, #13]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	32ae      	adds	r2, #174	@ 0xae
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066e0:	7b7a      	ldrb	r2, [r7, #13]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32ae      	adds	r2, #174	@ 0xae
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
 80066f2:	4603      	mov	r3, r0
 80066f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80066f6:	e004      	b.n	8006702 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc2d 	bl	8006f5a <USBD_CtlError>
              break;
 8006700:	e000      	b.n	8006704 <USBD_StdEPReq+0x1c8>
              break;
 8006702:	bf00      	nop
          }
          break;
 8006704:	e0ab      	b.n	800685e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d002      	beq.n	8006718 <USBD_StdEPReq+0x1dc>
 8006712:	2b03      	cmp	r3, #3
 8006714:	d032      	beq.n	800677c <USBD_StdEPReq+0x240>
 8006716:	e097      	b.n	8006848 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <USBD_StdEPReq+0x1f2>
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b80      	cmp	r3, #128	@ 0x80
 8006722:	d004      	beq.n	800672e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fc17 	bl	8006f5a <USBD_CtlError>
                break;
 800672c:	e091      	b.n	8006852 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800672e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006732:	2b00      	cmp	r3, #0
 8006734:	da0b      	bge.n	800674e <USBD_StdEPReq+0x212>
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	3310      	adds	r3, #16
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4413      	add	r3, r2
 800674a:	3304      	adds	r3, #4
 800674c:	e00b      	b.n	8006766 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	4413      	add	r3, r2
 8006764:	3304      	adds	r3, #4
 8006766:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2202      	movs	r2, #2
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fc6d 	bl	8007054 <USBD_CtlSendData>
              break;
 800677a:	e06a      	b.n	8006852 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800677c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006780:	2b00      	cmp	r3, #0
 8006782:	da11      	bge.n	80067a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	f003 020f 	and.w	r2, r3, #15
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3324      	adds	r3, #36	@ 0x24
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d117      	bne.n	80067ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fbda 	bl	8006f5a <USBD_CtlError>
                  break;
 80067a6:	e054      	b.n	8006852 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	f003 020f 	and.w	r2, r3, #15
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fbc7 	bl	8006f5a <USBD_CtlError>
                  break;
 80067cc:	e041      	b.n	8006852 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da0b      	bge.n	80067ee <USBD_StdEPReq+0x2b2>
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	3310      	adds	r3, #16
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4413      	add	r3, r2
 80067ea:	3304      	adds	r3, #4
 80067ec:	e00b      	b.n	8006806 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <USBD_StdEPReq+0x2d8>
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	2b80      	cmp	r3, #128	@ 0x80
 8006812:	d103      	bne.n	800681c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e00e      	b.n	800683a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fa87 	bl	8007d34 <USBD_LL_IsStallEP>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2201      	movs	r2, #1
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	e002      	b.n	800683a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2202      	movs	r2, #2
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fc07 	bl	8007054 <USBD_CtlSendData>
              break;
 8006846:	e004      	b.n	8006852 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fb85 	bl	8006f5a <USBD_CtlError>
              break;
 8006850:	bf00      	nop
          }
          break;
 8006852:	e004      	b.n	800685e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fb7f 	bl	8006f5a <USBD_CtlError>
          break;
 800685c:	bf00      	nop
      }
      break;
 800685e:	e005      	b.n	800686c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fb79 	bl	8006f5a <USBD_CtlError>
      break;
 8006868:	e000      	b.n	800686c <USBD_StdEPReq+0x330>
      break;
 800686a:	bf00      	nop
  }

  return ret;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	2b0e      	cmp	r3, #14
 800689a:	f200 8152 	bhi.w	8006b42 <USBD_GetDescriptor+0x2ca>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <USBD_GetDescriptor+0x2c>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	08006915 	.word	0x08006915
 80068a8:	0800692d 	.word	0x0800692d
 80068ac:	0800696d 	.word	0x0800696d
 80068b0:	08006b43 	.word	0x08006b43
 80068b4:	08006b43 	.word	0x08006b43
 80068b8:	08006ae3 	.word	0x08006ae3
 80068bc:	08006b0f 	.word	0x08006b0f
 80068c0:	08006b43 	.word	0x08006b43
 80068c4:	08006b43 	.word	0x08006b43
 80068c8:	08006b43 	.word	0x08006b43
 80068cc:	08006b43 	.word	0x08006b43
 80068d0:	08006b43 	.word	0x08006b43
 80068d4:	08006b43 	.word	0x08006b43
 80068d8:	08006b43 	.word	0x08006b43
 80068dc:	080068e1 	.word	0x080068e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006902:	e126      	b.n	8006b52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fb27 	bl	8006f5a <USBD_CtlError>
        err++;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	3301      	adds	r3, #1
 8006910:	72fb      	strb	r3, [r7, #11]
      break;
 8006912:	e11e      	b.n	8006b52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	7c12      	ldrb	r2, [r2, #16]
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	4610      	mov	r0, r2
 8006926:	4798      	blx	r3
 8006928:	60f8      	str	r0, [r7, #12]
      break;
 800692a:	e112      	b.n	8006b52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	7c1b      	ldrb	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10d      	bne.n	8006950 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	f107 0208 	add.w	r2, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3301      	adds	r3, #1
 800694a:	2202      	movs	r2, #2
 800694c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800694e:	e100      	b.n	8006b52 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006958:	f107 0208 	add.w	r2, r7, #8
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
 8006960:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	2202      	movs	r2, #2
 8006968:	701a      	strb	r2, [r3, #0]
      break;
 800696a:	e0f2      	b.n	8006b52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	885b      	ldrh	r3, [r3, #2]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b05      	cmp	r3, #5
 8006974:	f200 80ac 	bhi.w	8006ad0 <USBD_GetDescriptor+0x258>
 8006978:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <USBD_GetDescriptor+0x108>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006999 	.word	0x08006999
 8006984:	080069cd 	.word	0x080069cd
 8006988:	08006a01 	.word	0x08006a01
 800698c:	08006a35 	.word	0x08006a35
 8006990:	08006a69 	.word	0x08006a69
 8006994:	08006a9d 	.word	0x08006a9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	7c12      	ldrb	r2, [r2, #16]
 80069b0:	f107 0108 	add.w	r1, r7, #8
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
 80069b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ba:	e091      	b.n	8006ae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 facb 	bl	8006f5a <USBD_CtlError>
            err++;
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	3301      	adds	r3, #1
 80069c8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ca:	e089      	b.n	8006ae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	7c12      	ldrb	r2, [r2, #16]
 80069e4:	f107 0108 	add.w	r1, r7, #8
 80069e8:	4610      	mov	r0, r2
 80069ea:	4798      	blx	r3
 80069ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ee:	e077      	b.n	8006ae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fab1 	bl	8006f5a <USBD_CtlError>
            err++;
 80069f8:	7afb      	ldrb	r3, [r7, #11]
 80069fa:	3301      	adds	r3, #1
 80069fc:	72fb      	strb	r3, [r7, #11]
          break;
 80069fe:	e06f      	b.n	8006ae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	7c12      	ldrb	r2, [r2, #16]
 8006a18:	f107 0108 	add.w	r1, r7, #8
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a22:	e05d      	b.n	8006ae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa97 	bl	8006f5a <USBD_CtlError>
            err++;
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	72fb      	strb	r3, [r7, #11]
          break;
 8006a32:	e055      	b.n	8006ae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	7c12      	ldrb	r2, [r2, #16]
 8006a4c:	f107 0108 	add.w	r1, r7, #8
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a56:	e043      	b.n	8006ae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa7d 	bl	8006f5a <USBD_CtlError>
            err++;
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	3301      	adds	r3, #1
 8006a64:	72fb      	strb	r3, [r7, #11]
          break;
 8006a66:	e03b      	b.n	8006ae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	7c12      	ldrb	r2, [r2, #16]
 8006a80:	f107 0108 	add.w	r1, r7, #8
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a8a:	e029      	b.n	8006ae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa63 	bl	8006f5a <USBD_CtlError>
            err++;
 8006a94:	7afb      	ldrb	r3, [r7, #11]
 8006a96:	3301      	adds	r3, #1
 8006a98:	72fb      	strb	r3, [r7, #11]
          break;
 8006a9a:	e021      	b.n	8006ae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	7c12      	ldrb	r2, [r2, #16]
 8006ab4:	f107 0108 	add.w	r1, r7, #8
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006abe:	e00f      	b.n	8006ae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa49 	bl	8006f5a <USBD_CtlError>
            err++;
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	3301      	adds	r3, #1
 8006acc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ace:	e007      	b.n	8006ae0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa41 	bl	8006f5a <USBD_CtlError>
          err++;
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	3301      	adds	r3, #1
 8006adc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ade:	bf00      	nop
      }
      break;
 8006ae0:	e037      	b.n	8006b52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7c1b      	ldrb	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af2:	f107 0208 	add.w	r2, r7, #8
 8006af6:	4610      	mov	r0, r2
 8006af8:	4798      	blx	r3
 8006afa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006afc:	e029      	b.n	8006b52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa2a 	bl	8006f5a <USBD_CtlError>
        err++;
 8006b06:	7afb      	ldrb	r3, [r7, #11]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b0c:	e021      	b.n	8006b52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7c1b      	ldrb	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10d      	bne.n	8006b32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1e:	f107 0208 	add.w	r2, r7, #8
 8006b22:	4610      	mov	r0, r2
 8006b24:	4798      	blx	r3
 8006b26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	2207      	movs	r2, #7
 8006b2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b30:	e00f      	b.n	8006b52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fa10 	bl	8006f5a <USBD_CtlError>
        err++;
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b40:	e007      	b.n	8006b52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fa08 	bl	8006f5a <USBD_CtlError>
      err++;
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b50:	bf00      	nop
  }

  if (err != 0U)
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11e      	bne.n	8006b96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	88db      	ldrh	r3, [r3, #6]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d016      	beq.n	8006b8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006b60:	893b      	ldrh	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00e      	beq.n	8006b84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	88da      	ldrh	r2, [r3, #6]
 8006b6a:	893b      	ldrh	r3, [r7, #8]
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	bf28      	it	cs
 8006b70:	4613      	movcs	r3, r2
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b76:	893b      	ldrh	r3, [r7, #8]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fa69 	bl	8007054 <USBD_CtlSendData>
 8006b82:	e009      	b.n	8006b98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9e7 	bl	8006f5a <USBD_CtlError>
 8006b8c:	e004      	b.n	8006b98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 faba 	bl	8007108 <USBD_CtlSendStatus>
 8006b94:	e000      	b.n	8006b98 <USBD_GetDescriptor+0x320>
    return;
 8006b96:	bf00      	nop
  }
}
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop

08006ba0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	889b      	ldrh	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d131      	bne.n	8006c16 <USBD_SetAddress+0x76>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	88db      	ldrh	r3, [r3, #6]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d12d      	bne.n	8006c16 <USBD_SetAddress+0x76>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bc0:	d829      	bhi.n	8006c16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	885b      	ldrh	r3, [r3, #2]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d104      	bne.n	8006be4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f9bc 	bl	8006f5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be2:	e01d      	b.n	8006c20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7bfa      	ldrb	r2, [r7, #15]
 8006be8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f8cb 	bl	8007d8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa86 	bl	8007108 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0a:	e009      	b.n	8006c20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c14:	e004      	b.n	8006c20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f99e 	bl	8006f5a <USBD_CtlError>
  }
}
 8006c1e:	bf00      	nop
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006c3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c40:	4b4d      	ldr	r3, [pc, #308]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d905      	bls.n	8006c54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f985 	bl	8006f5a <USBD_CtlError>
    return USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e08c      	b.n	8006d6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d002      	beq.n	8006c66 <USBD_SetConfig+0x3e>
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d029      	beq.n	8006cb8 <USBD_SetConfig+0x90>
 8006c64:	e075      	b.n	8006d52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c66:	4b44      	ldr	r3, [pc, #272]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c6e:	4b42      	ldr	r3, [pc, #264]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c78:	4b3f      	ldr	r3, [pc, #252]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fe ffb9 	bl	8005bf6 <USBD_SetClassConfig>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f962 	bl	8006f5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c9e:	e065      	b.n	8006d6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fa31 	bl	8007108 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2203      	movs	r2, #3
 8006caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cae:	e05d      	b.n	8006d6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fa29 	bl	8007108 <USBD_CtlSendStatus>
      break;
 8006cb6:	e059      	b.n	8006d6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d112      	bne.n	8006ce6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cd2:	4b29      	ldr	r3, [pc, #164]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7fe ffa8 	bl	8005c2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa12 	bl	8007108 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ce4:	e042      	b.n	8006d6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ce6:	4b24      	ldr	r3, [pc, #144]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d02a      	beq.n	8006d4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7fe ff96 	bl	8005c2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d02:	4b1d      	ldr	r3, [pc, #116]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe ff6f 	bl	8005bf6 <USBD_SetClassConfig>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00f      	beq.n	8006d42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f918 	bl	8006f5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fe ff7b 	bl	8005c2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d40:	e014      	b.n	8006d6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9e0 	bl	8007108 <USBD_CtlSendStatus>
      break;
 8006d48:	e010      	b.n	8006d6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f9dc 	bl	8007108 <USBD_CtlSendStatus>
      break;
 8006d50:	e00c      	b.n	8006d6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f900 	bl	8006f5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d5a:	4b07      	ldr	r3, [pc, #28]	@ (8006d78 <USBD_SetConfig+0x150>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7fe ff64 	bl	8005c2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d66:	2303      	movs	r3, #3
 8006d68:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6a:	bf00      	nop
  }

  return ret;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000190 	.word	0x20000190

08006d7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d004      	beq.n	8006d98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8e2 	bl	8006f5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d96:	e023      	b.n	8006de0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	dc02      	bgt.n	8006daa <USBD_GetConfig+0x2e>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dc03      	bgt.n	8006db0 <USBD_GetConfig+0x34>
 8006da8:	e015      	b.n	8006dd6 <USBD_GetConfig+0x5a>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d00b      	beq.n	8006dc6 <USBD_GetConfig+0x4a>
 8006dae:	e012      	b.n	8006dd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3308      	adds	r3, #8
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f948 	bl	8007054 <USBD_CtlSendData>
        break;
 8006dc4:	e00c      	b.n	8006de0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f940 	bl	8007054 <USBD_CtlSendData>
        break;
 8006dd4:	e004      	b.n	8006de0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f8be 	bl	8006f5a <USBD_CtlError>
        break;
 8006dde:	bf00      	nop
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d81e      	bhi.n	8006e3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	88db      	ldrh	r3, [r3, #6]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d004      	beq.n	8006e12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8a5 	bl	8006f5a <USBD_CtlError>
        break;
 8006e10:	e01a      	b.n	8006e48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f043 0202 	orr.w	r2, r3, #2
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	330c      	adds	r3, #12
 8006e32:	2202      	movs	r2, #2
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f90c 	bl	8007054 <USBD_CtlSendData>
      break;
 8006e3c:	e004      	b.n	8006e48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f88a 	bl	8006f5a <USBD_CtlError>
      break;
 8006e46:	bf00      	nop
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d107      	bne.n	8006e72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f94c 	bl	8007108 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e70:	e013      	b.n	8006e9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	885b      	ldrh	r3, [r3, #2]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d10b      	bne.n	8006e92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	889b      	ldrh	r3, [r3, #4]
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f93c 	bl	8007108 <USBD_CtlSendStatus>
}
 8006e90:	e003      	b.n	8006e9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f860 	bl	8006f5a <USBD_CtlError>
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d80b      	bhi.n	8006ed2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	885b      	ldrh	r3, [r3, #2]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d10c      	bne.n	8006edc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f91c 	bl	8007108 <USBD_CtlSendStatus>
      }
      break;
 8006ed0:	e004      	b.n	8006edc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f840 	bl	8006f5a <USBD_CtlError>
      break;
 8006eda:	e000      	b.n	8006ede <USBD_ClrFeature+0x3c>
      break;
 8006edc:	bf00      	nop
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	781a      	ldrb	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff fa16 	bl	8006342 <SWAPBYTE>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fa09 	bl	8006342 <SWAPBYTE>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff f9fc 	bl	8006342 <SWAPBYTE>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	80da      	strh	r2, [r3, #6]
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f64:	2180      	movs	r1, #128	@ 0x80
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fe78 	bl	8007c5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fe74 	bl	8007c5c <USBD_LL_StallEP>
}
 8006f74:	bf00      	nop
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d042      	beq.n	8007018 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006f96:	6938      	ldr	r0, [r7, #16]
 8006f98:	f000 f842 	bl	8007020 <USBD_GetLen>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa6:	d808      	bhi.n	8006fba <USBD_GetString+0x3e>
 8006fa8:	6938      	ldr	r0, [r7, #16]
 8006faa:	f000 f839 	bl	8007020 <USBD_GetLen>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	e001      	b.n	8006fbe <USBD_GetString+0x42>
 8006fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	4413      	add	r3, r2
 8006fda:	2203      	movs	r2, #3
 8006fdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fe4:	e013      	b.n	800700e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	4413      	add	r3, r2
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	7812      	ldrb	r2, [r2, #0]
 8006ff0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	613b      	str	r3, [r7, #16]
    idx++;
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	4413      	add	r3, r2
 8007004:	2200      	movs	r2, #0
 8007006:	701a      	strb	r2, [r3, #0]
    idx++;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	3301      	adds	r3, #1
 800700c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e7      	bne.n	8006fe6 <USBD_GetString+0x6a>
 8007016:	e000      	b.n	800701a <USBD_GetString+0x9e>
    return;
 8007018:	bf00      	nop
  }
}
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007030:	e005      	b.n	800703e <USBD_GetLen+0x1e>
  {
    len++;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	3301      	adds	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3301      	adds	r3, #1
 800703c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f5      	bne.n	8007032 <USBD_GetLen+0x12>
  }

  return len;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2202      	movs	r2, #2
 8007064:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	2100      	movs	r1, #0
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 febc 	bl	8007df8 <USBD_LL_Transmit>

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	2100      	movs	r1, #0
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 feab 	bl	8007df8 <USBD_LL_Transmit>

  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2203      	movs	r2, #3
 80070bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fec6 	bl	8007e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	2100      	movs	r1, #0
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 feb5 	bl	8007e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2204      	movs	r2, #4
 8007114:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007118:	2300      	movs	r3, #0
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fe6a 	bl	8007df8 <USBD_LL_Transmit>

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2205      	movs	r2, #5
 800713a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800713e:	2300      	movs	r3, #0
 8007140:	2200      	movs	r2, #0
 8007142:	2100      	movs	r1, #0
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fe8f 	bl	8007e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007158:	2200      	movs	r2, #0
 800715a:	4912      	ldr	r1, [pc, #72]	@ (80071a4 <MX_USB_DEVICE_Init+0x50>)
 800715c:	4812      	ldr	r0, [pc, #72]	@ (80071a8 <MX_USB_DEVICE_Init+0x54>)
 800715e:	f7fe fccd 	bl	8005afc <USBD_Init>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007168:	f7f9 fa2b 	bl	80005c2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800716c:	490f      	ldr	r1, [pc, #60]	@ (80071ac <MX_USB_DEVICE_Init+0x58>)
 800716e:	480e      	ldr	r0, [pc, #56]	@ (80071a8 <MX_USB_DEVICE_Init+0x54>)
 8007170:	f7fe fcf4 	bl	8005b5c <USBD_RegisterClass>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800717a:	f7f9 fa22 	bl	80005c2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800717e:	490c      	ldr	r1, [pc, #48]	@ (80071b0 <MX_USB_DEVICE_Init+0x5c>)
 8007180:	4809      	ldr	r0, [pc, #36]	@ (80071a8 <MX_USB_DEVICE_Init+0x54>)
 8007182:	f7fe fbeb 	bl	800595c <USBD_CDC_RegisterInterface>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800718c:	f7f9 fa19 	bl	80005c2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007190:	4805      	ldr	r0, [pc, #20]	@ (80071a8 <MX_USB_DEVICE_Init+0x54>)
 8007192:	f7fe fd19 	bl	8005bc8 <USBD_Start>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800719c:	f7f9 fa11 	bl	80005c2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071a0:	bf00      	nop
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	200000ac 	.word	0x200000ac
 80071a8:	20000194 	.word	0x20000194
 80071ac:	20000018 	.word	0x20000018
 80071b0:	20000098 	.word	0x20000098

080071b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071b8:	2200      	movs	r2, #0
 80071ba:	4907      	ldr	r1, [pc, #28]	@ (80071d8 <CDC_Init_FS+0x24>)
 80071bc:	4807      	ldr	r0, [pc, #28]	@ (80071dc <CDC_Init_FS+0x28>)
 80071be:	f7fe fbe7 	bl	8005990 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071c2:	4907      	ldr	r1, [pc, #28]	@ (80071e0 <CDC_Init_FS+0x2c>)
 80071c4:	4805      	ldr	r0, [pc, #20]	@ (80071dc <CDC_Init_FS+0x28>)
 80071c6:	f7fe fc05 	bl	80059d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071ca:	4804      	ldr	r0, [pc, #16]	@ (80071dc <CDC_Init_FS+0x28>)
 80071cc:	f7fe fc60 	bl	8005a90 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80071d0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000cf4 	.word	0x20000cf4
 80071dc:	20000194 	.word	0x20000194
 80071e0:	200004f4 	.word	0x200004f4

080071e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
 8007200:	4613      	mov	r3, r2
 8007202:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	2b23      	cmp	r3, #35	@ 0x23
 8007208:	d84a      	bhi.n	80072a0 <CDC_Control_FS+0xac>
 800720a:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <CDC_Control_FS+0x1c>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	080072a1 	.word	0x080072a1
 8007214:	080072a1 	.word	0x080072a1
 8007218:	080072a1 	.word	0x080072a1
 800721c:	080072a1 	.word	0x080072a1
 8007220:	080072a1 	.word	0x080072a1
 8007224:	080072a1 	.word	0x080072a1
 8007228:	080072a1 	.word	0x080072a1
 800722c:	080072a1 	.word	0x080072a1
 8007230:	080072a1 	.word	0x080072a1
 8007234:	080072a1 	.word	0x080072a1
 8007238:	080072a1 	.word	0x080072a1
 800723c:	080072a1 	.word	0x080072a1
 8007240:	080072a1 	.word	0x080072a1
 8007244:	080072a1 	.word	0x080072a1
 8007248:	080072a1 	.word	0x080072a1
 800724c:	080072a1 	.word	0x080072a1
 8007250:	080072a1 	.word	0x080072a1
 8007254:	080072a1 	.word	0x080072a1
 8007258:	080072a1 	.word	0x080072a1
 800725c:	080072a1 	.word	0x080072a1
 8007260:	080072a1 	.word	0x080072a1
 8007264:	080072a1 	.word	0x080072a1
 8007268:	080072a1 	.word	0x080072a1
 800726c:	080072a1 	.word	0x080072a1
 8007270:	080072a1 	.word	0x080072a1
 8007274:	080072a1 	.word	0x080072a1
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a1 	.word	0x080072a1
 8007284:	080072a1 	.word	0x080072a1
 8007288:	080072a1 	.word	0x080072a1
 800728c:	080072a1 	.word	0x080072a1
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072a1 	.word	0x080072a1
 8007298:	080072a1 	.word	0x080072a1
 800729c:	080072a1 	.word	0x080072a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80072a0:	bf00      	nop
  }

  return (USBD_OK);
 80072a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b0c6      	sub	sp, #280	@ 0x118
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80072ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80072be:	6018      	str	r0, [r3, #0]
 80072c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80072c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80072c8:	6019      	str	r1, [r3, #0]
  /* USER CODE BEGIN 6 */

    char temp[CMD_BUFFER_SIZE*2];
    uint8_t valid = 0; 
 80072ca:	2300      	movs	r3, #0
 80072cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
      for (uint32_t i = 0; i < *Len; i++) {
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80072d6:	e0ad      	b.n	8007434 <CDC_Receive_FS+0x184>
          char c = (char)Buf[i];
 80072d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80072dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80072e6:	4413      	add	r3, r2
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
          uint8_t u = (uint8_t)c;
 80072ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80072f2:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80072f6:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80072fa:	701a      	strb	r2, [r3, #0]
  
          // Echo every char back
          if (c != '\r' && c != '\n') {
 80072fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007300:	2b0d      	cmp	r3, #13
 8007302:	d01a      	beq.n	800733a <CDC_Receive_FS+0x8a>
 8007304:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007308:	2b0a      	cmp	r3, #10
 800730a:	d016      	beq.n	800733a <CDC_Receive_FS+0x8a>
              // block until endpoint is free
              CDC_Transmit_FS(&u, 1);
 800730c:	f107 030b 	add.w	r3, r7, #11
 8007310:	2101      	movs	r1, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f000 f8c2 	bl	800749c <CDC_Transmit_FS>
              
              if (command_index < CMD_BUFFER_SIZE - 1) {
 8007318:	4b54      	ldr	r3, [pc, #336]	@ (800746c <CDC_Receive_FS+0x1bc>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b7e      	cmp	r3, #126	@ 0x7e
 800731e:	f200 8083 	bhi.w	8007428 <CDC_Receive_FS+0x178>
                  command_buffer[command_index++] = c;
 8007322:	4b52      	ldr	r3, [pc, #328]	@ (800746c <CDC_Receive_FS+0x1bc>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	b2d1      	uxtb	r1, r2
 800732a:	4a50      	ldr	r2, [pc, #320]	@ (800746c <CDC_Receive_FS+0x1bc>)
 800732c:	7011      	strb	r1, [r2, #0]
 800732e:	4619      	mov	r1, r3
 8007330:	4a4f      	ldr	r2, [pc, #316]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 8007332:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007336:	5453      	strb	r3, [r2, r1]
 8007338:	e077      	b.n	800742a <CDC_Receive_FS+0x17a>
              }
              continue;
          }
          
          // Terminate command
          command_buffer[command_index] = '\0';
 800733a:	4b4c      	ldr	r3, [pc, #304]	@ (800746c <CDC_Receive_FS+0x1bc>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	4b4b      	ldr	r3, [pc, #300]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 8007342:	2100      	movs	r1, #0
 8007344:	5499      	strb	r1, [r3, r2]
  
          if (command_index > 0) {
 8007346:	4b49      	ldr	r3, [pc, #292]	@ (800746c <CDC_Receive_FS+0x1bc>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d06d      	beq.n	800742a <CDC_Receive_FS+0x17a>
              // your command logic
              if (strcmp(command_buffer, "LED2 on") == 0) {
 800734e:	4949      	ldr	r1, [pc, #292]	@ (8007474 <CDC_Receive_FS+0x1c4>)
 8007350:	4847      	ldr	r0, [pc, #284]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 8007352:	f7f8 ff55 	bl	8000200 <strcmp>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <CDC_Receive_FS+0xba>
                  LED2_flag = 1;
 800735c:	4b46      	ldr	r3, [pc, #280]	@ (8007478 <CDC_Receive_FS+0x1c8>)
 800735e:	2201      	movs	r2, #1
 8007360:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8007368:	e00c      	b.n	8007384 <CDC_Receive_FS+0xd4>
              }
              else if (strcmp(command_buffer, "LED2 off") == 0) {
 800736a:	4944      	ldr	r1, [pc, #272]	@ (800747c <CDC_Receive_FS+0x1cc>)
 800736c:	4840      	ldr	r0, [pc, #256]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 800736e:	f7f8 ff47 	bl	8000200 <strcmp>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d105      	bne.n	8007384 <CDC_Receive_FS+0xd4>
                  LED2_flag = 0;
 8007378:	4b3f      	ldr	r3, [pc, #252]	@ (8007478 <CDC_Receive_FS+0x1c8>)
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
              
              // Prompting Pump 3
              if (strcmp(command_buffer, "Pump3 on forward") == 0){
 8007384:	493e      	ldr	r1, [pc, #248]	@ (8007480 <CDC_Receive_FS+0x1d0>)
 8007386:	483a      	ldr	r0, [pc, #232]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 8007388:	f7f8 ff3a 	bl	8000200 <strcmp>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <CDC_Receive_FS+0xf6>
                Pump3_flag = 1; 
 8007392:	4b3c      	ldr	r3, [pc, #240]	@ (8007484 <CDC_Receive_FS+0x1d4>)
 8007394:	2201      	movs	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 1; 
 8007398:	4b3b      	ldr	r3, [pc, #236]	@ (8007488 <CDC_Receive_FS+0x1d8>)
 800739a:	2201      	movs	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80073a4:	e00f      	b.n	80073c6 <CDC_Receive_FS+0x116>
              }
              else if (strcmp(command_buffer, "Pump3 on backward") == 0){
 80073a6:	4939      	ldr	r1, [pc, #228]	@ (800748c <CDC_Receive_FS+0x1dc>)
 80073a8:	4831      	ldr	r0, [pc, #196]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 80073aa:	f7f8 ff29 	bl	8000200 <strcmp>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d108      	bne.n	80073c6 <CDC_Receive_FS+0x116>
                Pump3_flag = 1; 
 80073b4:	4b33      	ldr	r3, [pc, #204]	@ (8007484 <CDC_Receive_FS+0x1d4>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 0; 
 80073ba:	4b33      	ldr	r3, [pc, #204]	@ (8007488 <CDC_Receive_FS+0x1d8>)
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
  
              if (valid)
 80073c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d014      	beq.n	80073f8 <CDC_Receive_FS+0x148>
              {
                sprintf(temp, "\r\nReceieved: %s\r\n> ", command_buffer);
 80073ce:	f107 030c 	add.w	r3, r7, #12
 80073d2:	4a27      	ldr	r2, [pc, #156]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 80073d4:	492e      	ldr	r1, [pc, #184]	@ (8007490 <CDC_Receive_FS+0x1e0>)
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 ff1e 	bl	8008218 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7f8 ff17 	bl	8000214 <strlen>
 80073e6:	4603      	mov	r3, r0
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f107 030c 	add.w	r3, r7, #12
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f853 	bl	800749c <CDC_Transmit_FS>
 80073f6:	e013      	b.n	8007420 <CDC_Receive_FS+0x170>
              }
              else 
              {
                sprintf(temp, "\r\nError Commaand:%s\r\n> ", command_buffer);
 80073f8:	f107 030c 	add.w	r3, r7, #12
 80073fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007470 <CDC_Receive_FS+0x1c0>)
 80073fe:	4925      	ldr	r1, [pc, #148]	@ (8007494 <CDC_Receive_FS+0x1e4>)
 8007400:	4618      	mov	r0, r3
 8007402:	f000 ff09 	bl	8008218 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8007406:	f107 030c 	add.w	r3, r7, #12
 800740a:	4618      	mov	r0, r3
 800740c:	f7f8 ff02 	bl	8000214 <strlen>
 8007410:	4603      	mov	r3, r0
 8007412:	b29a      	uxth	r2, r3
 8007414:	f107 030c 	add.w	r3, r7, #12
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f000 f83e 	bl	800749c <CDC_Transmit_FS>
              }
              command_index = 0;
 8007420:	4b12      	ldr	r3, [pc, #72]	@ (800746c <CDC_Receive_FS+0x1bc>)
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e000      	b.n	800742a <CDC_Receive_FS+0x17a>
              continue;
 8007428:	bf00      	nop
      for (uint32_t i = 0; i < *Len; i++) {
 800742a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800742e:	3301      	adds	r3, #1
 8007430:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007434:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007438:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8007444:	429a      	cmp	r2, r3
 8007446:	f4ff af47 	bcc.w	80072d8 <CDC_Receive_FS+0x28>
          }
  
      }
  
      // 4) re-arm USB to receive more
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 800744a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800744e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	4810      	ldr	r0, [pc, #64]	@ (8007498 <CDC_Receive_FS+0x1e8>)
 8007456:	f7fe fabd 	bl	80059d4 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800745a:	480f      	ldr	r0, [pc, #60]	@ (8007498 <CDC_Receive_FS+0x1e8>)
 800745c:	f7fe fb18 	bl	8005a90 <USBD_CDC_ReceivePacket>
      return USBD_OK;
 8007460:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007462:	4618      	mov	r0, r3
 8007464:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200004f0 	.word	0x200004f0
 8007470:	20000470 	.word	0x20000470
 8007474:	08009014 	.word	0x08009014
 8007478:	20000184 	.word	0x20000184
 800747c:	0800901c 	.word	0x0800901c
 8007480:	08009028 	.word	0x08009028
 8007484:	20000185 	.word	0x20000185
 8007488:	20000186 	.word	0x20000186
 800748c:	0800903c 	.word	0x0800903c
 8007490:	08009050 	.word	0x08009050
 8007494:	08009064 	.word	0x08009064
 8007498:	20000194 	.word	0x20000194

0800749c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074ac:	4b0d      	ldr	r3, [pc, #52]	@ (80074e4 <CDC_Transmit_FS+0x48>)
 80074ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074be:	2301      	movs	r3, #1
 80074c0:	e00b      	b.n	80074da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074c2:	887b      	ldrh	r3, [r7, #2]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	4806      	ldr	r0, [pc, #24]	@ (80074e4 <CDC_Transmit_FS+0x48>)
 80074ca:	f7fe fa61 	bl	8005990 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074ce:	4805      	ldr	r0, [pc, #20]	@ (80074e4 <CDC_Transmit_FS+0x48>)
 80074d0:	f7fe fa9e 	bl	8005a10 <USBD_CDC_TransmitPacket>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000194 	.word	0x20000194

080074e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2212      	movs	r2, #18
 800751c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800751e:	4b03      	ldr	r3, [pc, #12]	@ (800752c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	200000cc 	.word	0x200000cc

08007530 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2204      	movs	r2, #4
 8007540:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007542:	4b03      	ldr	r3, [pc, #12]	@ (8007550 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	200000ec 	.word	0x200000ec

08007554 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	4907      	ldr	r1, [pc, #28]	@ (8007588 <USBD_FS_ProductStrDescriptor+0x34>)
 800756a:	4808      	ldr	r0, [pc, #32]	@ (800758c <USBD_FS_ProductStrDescriptor+0x38>)
 800756c:	f7ff fd06 	bl	8006f7c <USBD_GetString>
 8007570:	e004      	b.n	800757c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	4904      	ldr	r1, [pc, #16]	@ (8007588 <USBD_FS_ProductStrDescriptor+0x34>)
 8007576:	4805      	ldr	r0, [pc, #20]	@ (800758c <USBD_FS_ProductStrDescriptor+0x38>)
 8007578:	f7ff fd00 	bl	8006f7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800757c:	4b02      	ldr	r3, [pc, #8]	@ (8007588 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200014f4 	.word	0x200014f4
 800758c:	0800907c 	.word	0x0800907c

08007590 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	4603      	mov	r3, r0
 8007598:	6039      	str	r1, [r7, #0]
 800759a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	4904      	ldr	r1, [pc, #16]	@ (80075b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075a0:	4804      	ldr	r0, [pc, #16]	@ (80075b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075a2:	f7ff fceb 	bl	8006f7c <USBD_GetString>
  return USBD_StrDesc;
 80075a6:	4b02      	ldr	r3, [pc, #8]	@ (80075b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200014f4 	.word	0x200014f4
 80075b4:	08009094 	.word	0x08009094

080075b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	6039      	str	r1, [r7, #0]
 80075c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	221a      	movs	r2, #26
 80075c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075ca:	f000 f855 	bl	8007678 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075ce:	4b02      	ldr	r3, [pc, #8]	@ (80075d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	200000f0 	.word	0x200000f0

080075dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4907      	ldr	r1, [pc, #28]	@ (8007610 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075f2:	4808      	ldr	r0, [pc, #32]	@ (8007614 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f4:	f7ff fcc2 	bl	8006f7c <USBD_GetString>
 80075f8:	e004      	b.n	8007604 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4904      	ldr	r1, [pc, #16]	@ (8007610 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075fe:	4805      	ldr	r0, [pc, #20]	@ (8007614 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007600:	f7ff fcbc 	bl	8006f7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007604:	4b02      	ldr	r3, [pc, #8]	@ (8007610 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200014f4 	.word	0x200014f4
 8007614:	080090a8 	.word	0x080090a8

08007618 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	6039      	str	r1, [r7, #0]
 8007622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4907      	ldr	r1, [pc, #28]	@ (800764c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800762e:	4808      	ldr	r0, [pc, #32]	@ (8007650 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007630:	f7ff fca4 	bl	8006f7c <USBD_GetString>
 8007634:	e004      	b.n	8007640 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	4904      	ldr	r1, [pc, #16]	@ (800764c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800763a:	4805      	ldr	r0, [pc, #20]	@ (8007650 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800763c:	f7ff fc9e 	bl	8006f7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007640:	4b02      	ldr	r3, [pc, #8]	@ (800764c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	200014f4 	.word	0x200014f4
 8007650:	080090b4 	.word	0x080090b4

08007654 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	220c      	movs	r2, #12
 8007664:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007666:	4b03      	ldr	r3, [pc, #12]	@ (8007674 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	200000e0 	.word	0x200000e0

08007678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800767e:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <Get_SerialNum+0x44>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007684:	4b0e      	ldr	r3, [pc, #56]	@ (80076c0 <Get_SerialNum+0x48>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800768a:	4b0e      	ldr	r3, [pc, #56]	@ (80076c4 <Get_SerialNum+0x4c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4413      	add	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800769e:	2208      	movs	r2, #8
 80076a0:	4909      	ldr	r1, [pc, #36]	@ (80076c8 <Get_SerialNum+0x50>)
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f814 	bl	80076d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076a8:	2204      	movs	r2, #4
 80076aa:	4908      	ldr	r1, [pc, #32]	@ (80076cc <Get_SerialNum+0x54>)
 80076ac:	68b8      	ldr	r0, [r7, #8]
 80076ae:	f000 f80f 	bl	80076d0 <IntToUnicode>
  }
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	1fff7590 	.word	0x1fff7590
 80076c0:	1fff7594 	.word	0x1fff7594
 80076c4:	1fff7598 	.word	0x1fff7598
 80076c8:	200000f2 	.word	0x200000f2
 80076cc:	20000102 	.word	0x20000102

080076d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]
 80076e6:	e027      	b.n	8007738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	0f1b      	lsrs	r3, r3, #28
 80076ec:	2b09      	cmp	r3, #9
 80076ee:	d80b      	bhi.n	8007708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	0f1b      	lsrs	r3, r3, #28
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	4619      	mov	r1, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	440b      	add	r3, r1
 8007700:	3230      	adds	r2, #48	@ 0x30
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	701a      	strb	r2, [r3, #0]
 8007706:	e00a      	b.n	800771e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	0f1b      	lsrs	r3, r3, #28
 800770c:	b2da      	uxtb	r2, r3
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4619      	mov	r1, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	440b      	add	r3, r1
 8007718:	3237      	adds	r2, #55	@ 0x37
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	3301      	adds	r3, #1
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	3301      	adds	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
 8007738:	7dfa      	ldrb	r2, [r7, #23]
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	429a      	cmp	r2, r3
 800773e:	d3d3      	bcc.n	80076e8 <IntToUnicode+0x18>
  }
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b0b0      	sub	sp, #192	@ 0xc0
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007758:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	609a      	str	r2, [r3, #8]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007768:	f107 0314 	add.w	r3, r7, #20
 800776c:	2298      	movs	r2, #152	@ 0x98
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fe49 	bl	8008408 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800777e:	d173      	bne.n	8007868 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007784:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007786:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800778a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800778e:	2303      	movs	r3, #3
 8007790:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007792:	2301      	movs	r3, #1
 8007794:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8007796:	230c      	movs	r3, #12
 8007798:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800779a:	2302      	movs	r3, #2
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800779e:	2302      	movs	r3, #2
 80077a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80077a2:	2302      	movs	r3, #2
 80077a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80077a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80077aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077ac:	f107 0314 	add.w	r3, r7, #20
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fb fd15 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80077bc:	f7f8 ff01 	bl	80005c2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 80077c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077cc:	4b28      	ldr	r3, [pc, #160]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 80077ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077d8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80077dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e0:	2302      	movs	r3, #2
 80077e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ec:	2303      	movs	r3, #3
 80077ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077f2:	230a      	movs	r3, #10
 80077f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80077fc:	4619      	mov	r1, r3
 80077fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007802:	f7f9 f9b1 	bl	8000b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007806:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 8007808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780a:	4a19      	ldr	r2, [pc, #100]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 800780c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007812:	4b17      	ldr	r3, [pc, #92]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 8007814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800781e:	4b14      	ldr	r3, [pc, #80]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 8007820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d114      	bne.n	8007854 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800782a:	4b11      	ldr	r3, [pc, #68]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 800782c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800782e:	4a10      	ldr	r2, [pc, #64]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 8007830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007834:	6593      	str	r3, [r2, #88]	@ 0x58
 8007836:	4b0e      	ldr	r3, [pc, #56]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 8007838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800783a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007842:	f7fa fdaf 	bl	80023a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007846:	4b0a      	ldr	r3, [pc, #40]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	4a09      	ldr	r2, [pc, #36]	@ (8007870 <HAL_PCD_MspInit+0x120>)
 800784c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007850:	6593      	str	r3, [r2, #88]	@ 0x58
 8007852:	e001      	b.n	8007858 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007854:	f7fa fda6 	bl	80023a4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007858:	2200      	movs	r2, #0
 800785a:	2100      	movs	r1, #0
 800785c:	2043      	movs	r0, #67	@ 0x43
 800785e:	f7f9 f94c 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007862:	2043      	movs	r0, #67	@ 0x43
 8007864:	f7f9 f965 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007868:	bf00      	nop
 800786a:	37c0      	adds	r7, #192	@ 0xc0
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	40021000 	.word	0x40021000

08007874 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007888:	4619      	mov	r1, r3
 800788a:	4610      	mov	r0, r2
 800788c:	f7fe f9e9 	bl	8005c62 <USBD_LL_SetupStage>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	4619      	mov	r1, r3
 80078c2:	f7fe fa23 	bl	8005d0c <USBD_LL_DataOutStage>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	3320      	adds	r3, #32
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	4619      	mov	r1, r3
 80078f6:	f7fe fabc 	bl	8005e72 <USBD_LL_DataInStage>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fbf6 	bl	8006102 <USBD_LL_SOF>
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007926:	2301      	movs	r3, #1
 8007928:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	79db      	ldrb	r3, [r3, #7]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d001      	beq.n	8007936 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007932:	f7f8 fe46 	bl	80005c2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800793c:	7bfa      	ldrb	r2, [r7, #15]
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fb9a 	bl	800607a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fb42 	bl	8005fd6 <USBD_LL_Reset>
}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fb89 	bl	800609a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7adb      	ldrb	r3, [r3, #11]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007990:	4b04      	ldr	r3, [pc, #16]	@ (80079a4 <HAL_PCD_SuspendCallback+0x48>)
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	4a03      	ldr	r2, [pc, #12]	@ (80079a4 <HAL_PCD_SuspendCallback+0x48>)
 8007996:	f043 0306 	orr.w	r3, r3, #6
 800799a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	e000ed00 	.word	0xe000ed00

080079a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7adb      	ldrb	r3, [r3, #11]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079d0:	4b08      	ldr	r3, [pc, #32]	@ (80079f4 <HAL_PCD_ResumeCallback+0x4c>)
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	4a07      	ldr	r2, [pc, #28]	@ (80079f4 <HAL_PCD_ResumeCallback+0x4c>)
 80079d6:	f023 0306 	bic.w	r3, r3, #6
 80079da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80079dc:	f000 faf6 	bl	8007fcc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fb73 	bl	80060d2 <USBD_LL_Resume>
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	e000ed00 	.word	0xe000ed00

080079f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a0a:	78fa      	ldrb	r2, [r7, #3]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fbc9 	bl	80061a6 <USBD_LL_IsoOUTIncomplete>
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fb85 	bl	8006142 <USBD_LL_IsoINIncomplete>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fbdb 	bl	800620a <USBD_LL_DevConnected>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fbd8 	bl	8006220 <USBD_LL_DevDisconnected>
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d13c      	bne.n	8007b02 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a88:	4a20      	ldr	r2, [pc, #128]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a1e      	ldr	r2, [pc, #120]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007a94:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a98:	4b1c      	ldr	r3, [pc, #112]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007a9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007aa2:	2206      	movs	r2, #6
 8007aa4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aa6:	4b19      	ldr	r3, [pc, #100]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007aac:	4b17      	ldr	r3, [pc, #92]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007aae:	2202      	movs	r2, #2
 8007ab0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ab2:	4b16      	ldr	r3, [pc, #88]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ab8:	4b14      	ldr	r3, [pc, #80]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007abe:	4b13      	ldr	r3, [pc, #76]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007ac4:	4b11      	ldr	r3, [pc, #68]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007aca:	4b10      	ldr	r3, [pc, #64]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ad6:	480d      	ldr	r0, [pc, #52]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007ad8:	f7f9 fa0a 	bl	8000ef0 <HAL_PCD_Init>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ae2:	f7f8 fd6e 	bl	80005c2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ae6:	2180      	movs	r1, #128	@ 0x80
 8007ae8:	4808      	ldr	r0, [pc, #32]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007aea:	f7fa fb62 	bl	80021b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007aee:	2240      	movs	r2, #64	@ 0x40
 8007af0:	2100      	movs	r1, #0
 8007af2:	4806      	ldr	r0, [pc, #24]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007af4:	f7fa fb16 	bl	8002124 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007af8:	2280      	movs	r2, #128	@ 0x80
 8007afa:	2101      	movs	r1, #1
 8007afc:	4803      	ldr	r0, [pc, #12]	@ (8007b0c <USBD_LL_Init+0x94>)
 8007afe:	f7fa fb11 	bl	8002124 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	200016f4 	.word	0x200016f4

08007b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7f9 faf1 	bl	800110e <HAL_PCD_Start>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d816      	bhi.n	8007b64 <USBD_LL_Start+0x54>
 8007b36:	a201      	add	r2, pc, #4	@ (adr r2, 8007b3c <USBD_LL_Start+0x2c>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b4d 	.word	0x08007b4d
 8007b40:	08007b53 	.word	0x08007b53
 8007b44:	08007b59 	.word	0x08007b59
 8007b48:	08007b5f 	.word	0x08007b5f
    case HAL_OK :
      usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b50:	e00b      	b.n	8007b6a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b52:	2303      	movs	r3, #3
 8007b54:	73fb      	strb	r3, [r7, #15]
    break;
 8007b56:	e008      	b.n	8007b6a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5c:	e005      	b.n	8007b6a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	73fb      	strb	r3, [r7, #15]
    break;
 8007b62:	e002      	b.n	8007b6a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	73fb      	strb	r3, [r7, #15]
    break;
 8007b68:	bf00      	nop
  }
  return usb_status;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	461a      	mov	r2, r3
 8007b82:	4603      	mov	r3, r0
 8007b84:	70fb      	strb	r3, [r7, #3]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70bb      	strb	r3, [r7, #2]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b9c:	78bb      	ldrb	r3, [r7, #2]
 8007b9e:	883a      	ldrh	r2, [r7, #0]
 8007ba0:	78f9      	ldrb	r1, [r7, #3]
 8007ba2:	f7f9 ff9d 	bl	8001ae0 <HAL_PCD_EP_Open>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d817      	bhi.n	8007be0 <USBD_LL_OpenEP+0x6c>
 8007bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <USBD_LL_OpenEP+0x44>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bc9 	.word	0x08007bc9
 8007bbc:	08007bcf 	.word	0x08007bcf
 8007bc0:	08007bd5 	.word	0x08007bd5
 8007bc4:	08007bdb 	.word	0x08007bdb
    case HAL_OK :
      usb_status = USBD_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	e00b      	b.n	8007be6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd2:	e008      	b.n	8007be6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd8:	e005      	b.n	8007be6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8007bde:	e002      	b.n	8007be6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	73fb      	strb	r3, [r7, #15]
    break;
 8007be4:	bf00      	nop
  }
  return usb_status;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f9 ffd0 	bl	8001bb4 <HAL_PCD_EP_Close>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d816      	bhi.n	8007c4c <USBD_LL_CloseEP+0x5c>
 8007c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c24 <USBD_LL_CloseEP+0x34>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c3b 	.word	0x08007c3b
 8007c2c:	08007c41 	.word	0x08007c41
 8007c30:	08007c47 	.word	0x08007c47
    case HAL_OK :
      usb_status = USBD_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
    break;
 8007c38:	e00b      	b.n	8007c52 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3e:	e008      	b.n	8007c52 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
    break;
 8007c44:	e005      	b.n	8007c52 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4a:	e002      	b.n	8007c52 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c50:	bf00      	nop
  }
  return usb_status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c76:	78fa      	ldrb	r2, [r7, #3]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fa f85f 	bl	8001d3e <HAL_PCD_EP_SetStall>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d816      	bhi.n	8007cb8 <USBD_LL_StallEP+0x5c>
 8007c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c90 <USBD_LL_StallEP+0x34>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007ca1 	.word	0x08007ca1
 8007c94:	08007ca7 	.word	0x08007ca7
 8007c98:	08007cad 	.word	0x08007cad
 8007c9c:	08007cb3 	.word	0x08007cb3
    case HAL_OK :
      usb_status = USBD_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca4:	e00b      	b.n	8007cbe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8007caa:	e008      	b.n	8007cbe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cac:	2301      	movs	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb0:	e005      	b.n	8007cbe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb6:	e002      	b.n	8007cbe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	73fb      	strb	r3, [r7, #15]
    break;
 8007cbc:	bf00      	nop
  }
  return usb_status;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa f88b 	bl	8001e02 <HAL_PCD_EP_ClrStall>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d816      	bhi.n	8007d24 <USBD_LL_ClearStallEP+0x5c>
 8007cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cfc <USBD_LL_ClearStallEP+0x34>)
 8007cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfc:	08007d0d 	.word	0x08007d0d
 8007d00:	08007d13 	.word	0x08007d13
 8007d04:	08007d19 	.word	0x08007d19
 8007d08:	08007d1f 	.word	0x08007d1f
    case HAL_OK :
      usb_status = USBD_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d10:	e00b      	b.n	8007d2a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d12:	2303      	movs	r3, #3
 8007d14:	73fb      	strb	r3, [r7, #15]
    break;
 8007d16:	e008      	b.n	8007d2a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1c:	e005      	b.n	8007d2a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	73fb      	strb	r3, [r7, #15]
    break;
 8007d22:	e002      	b.n	8007d2a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007d24:	2303      	movs	r3, #3
 8007d26:	73fb      	strb	r3, [r7, #15]
    break;
 8007d28:	bf00      	nop
  }
  return usb_status;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	da0b      	bge.n	8007d68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	3316      	adds	r3, #22
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	e00b      	b.n	8007d80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	4613      	mov	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007d7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f9 fe74 	bl	8001a98 <HAL_PCD_SetAddress>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d816      	bhi.n	8007de8 <USBD_LL_SetUSBAddress+0x5c>
 8007dba:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc0 <USBD_LL_SetUSBAddress+0x34>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007dd7 	.word	0x08007dd7
 8007dc8:	08007ddd 	.word	0x08007ddd
 8007dcc:	08007de3 	.word	0x08007de3
    case HAL_OK :
      usb_status = USBD_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd4:	e00b      	b.n	8007dee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dda:	e008      	b.n	8007dee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
    break;
 8007de0:	e005      	b.n	8007dee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	73fb      	strb	r3, [r7, #15]
    break;
 8007de6:	e002      	b.n	8007dee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	73fb      	strb	r3, [r7, #15]
    break;
 8007dec:	bf00      	nop
  }
  return usb_status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	460b      	mov	r3, r1
 8007e06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e16:	7af9      	ldrb	r1, [r7, #11]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	f7f9 ff5e 	bl	8001cdc <HAL_PCD_EP_Transmit>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007e24:	7dbb      	ldrb	r3, [r7, #22]
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d816      	bhi.n	8007e58 <USBD_LL_Transmit+0x60>
 8007e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <USBD_LL_Transmit+0x38>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e47 	.word	0x08007e47
 8007e38:	08007e4d 	.word	0x08007e4d
 8007e3c:	08007e53 	.word	0x08007e53
    case HAL_OK :
      usb_status = USBD_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	75fb      	strb	r3, [r7, #23]
    break;
 8007e44:	e00b      	b.n	8007e5e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	75fb      	strb	r3, [r7, #23]
    break;
 8007e4a:	e008      	b.n	8007e5e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
    break;
 8007e50:	e005      	b.n	8007e5e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e52:	2303      	movs	r3, #3
 8007e54:	75fb      	strb	r3, [r7, #23]
    break;
 8007e56:	e002      	b.n	8007e5e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	75fb      	strb	r3, [r7, #23]
    break;
 8007e5c:	bf00      	nop
  }
  return usb_status;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	460b      	mov	r3, r1
 8007e76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e86:	7af9      	ldrb	r1, [r7, #11]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	f7f9 fedc 	bl	8001c48 <HAL_PCD_EP_Receive>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007e94:	7dbb      	ldrb	r3, [r7, #22]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d816      	bhi.n	8007ec8 <USBD_LL_PrepareReceive+0x60>
 8007e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea0 <USBD_LL_PrepareReceive+0x38>)
 8007e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea0:	08007eb1 	.word	0x08007eb1
 8007ea4:	08007eb7 	.word	0x08007eb7
 8007ea8:	08007ebd 	.word	0x08007ebd
 8007eac:	08007ec3 	.word	0x08007ec3
    case HAL_OK :
      usb_status = USBD_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	75fb      	strb	r3, [r7, #23]
    break;
 8007eb4:	e00b      	b.n	8007ece <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	75fb      	strb	r3, [r7, #23]
    break;
 8007eba:	e008      	b.n	8007ece <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	75fb      	strb	r3, [r7, #23]
    break;
 8007ec0:	e005      	b.n	8007ece <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ec6:	e002      	b.n	8007ece <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	75fb      	strb	r3, [r7, #23]
    break;
 8007ecc:	bf00      	nop
  }
  return usb_status;
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	4611      	mov	r1, r2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f9 fedc 	bl	8001cac <HAL_PCD_EP_GetRxCount>
 8007ef4:	4603      	mov	r3, r0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <HAL_PCDEx_LPM_Callback+0x18>
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d01f      	beq.n	8007f56 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007f16:	e03b      	b.n	8007f90 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7adb      	ldrb	r3, [r3, #11]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007f20:	f000 f854 	bl	8007fcc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f24:	4b1c      	ldr	r3, [pc, #112]	@ (8007f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	4a1b      	ldr	r2, [pc, #108]	@ (8007f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8007f2a:	f023 0306 	bic.w	r3, r3, #6
 8007f2e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f42:	f023 0301 	bic.w	r3, r3, #1
 8007f46:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe f8bf 	bl	80060d2 <USBD_LL_Resume>
    break;
 8007f54:	e01c      	b.n	8007f90 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f68:	f043 0301 	orr.w	r3, r3, #1
 8007f6c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe f890 	bl	800609a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7adb      	ldrb	r3, [r3, #11]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f82:	4b05      	ldr	r3, [pc, #20]	@ (8007f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	4a04      	ldr	r2, [pc, #16]	@ (8007f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8007f88:	f043 0306 	orr.w	r3, r3, #6
 8007f8c:	6113      	str	r3, [r2, #16]
    break;
 8007f8e:	bf00      	nop
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed00 	.word	0xe000ed00

08007f9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fa4:	4b03      	ldr	r3, [pc, #12]	@ (8007fb4 <USBD_static_malloc+0x18>)
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20001bd8 	.word	0x20001bd8

08007fb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]

}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007fd0:	f7f8 f9f6 	bl	80003c0 <SystemClock_Config>
}
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <std>:
 8007fd8:	2300      	movs	r3, #0
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	4604      	mov	r4, r0
 8007fde:	e9c0 3300 	strd	r3, r3, [r0]
 8007fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fe6:	6083      	str	r3, [r0, #8]
 8007fe8:	8181      	strh	r1, [r0, #12]
 8007fea:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fec:	81c2      	strh	r2, [r0, #14]
 8007fee:	6183      	str	r3, [r0, #24]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	305c      	adds	r0, #92	@ 0x5c
 8007ff6:	f000 fa07 	bl	8008408 <memset>
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8008030 <std+0x58>)
 8007ffc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <std+0x5c>)
 8008000:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008002:	4b0d      	ldr	r3, [pc, #52]	@ (8008038 <std+0x60>)
 8008004:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008006:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <std+0x64>)
 8008008:	6323      	str	r3, [r4, #48]	@ 0x30
 800800a:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <std+0x68>)
 800800c:	6224      	str	r4, [r4, #32]
 800800e:	429c      	cmp	r4, r3
 8008010:	d006      	beq.n	8008020 <std+0x48>
 8008012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008016:	4294      	cmp	r4, r2
 8008018:	d002      	beq.n	8008020 <std+0x48>
 800801a:	33d0      	adds	r3, #208	@ 0xd0
 800801c:	429c      	cmp	r4, r3
 800801e:	d105      	bne.n	800802c <std+0x54>
 8008020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f000 ba66 	b.w	80084f8 <__retarget_lock_init_recursive>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	bf00      	nop
 8008030:	08008259 	.word	0x08008259
 8008034:	0800827b 	.word	0x0800827b
 8008038:	080082b3 	.word	0x080082b3
 800803c:	080082d7 	.word	0x080082d7
 8008040:	20001df8 	.word	0x20001df8

08008044 <stdio_exit_handler>:
 8008044:	4a02      	ldr	r2, [pc, #8]	@ (8008050 <stdio_exit_handler+0xc>)
 8008046:	4903      	ldr	r1, [pc, #12]	@ (8008054 <stdio_exit_handler+0x10>)
 8008048:	4803      	ldr	r0, [pc, #12]	@ (8008058 <stdio_exit_handler+0x14>)
 800804a:	f000 b869 	b.w	8008120 <_fwalk_sglue>
 800804e:	bf00      	nop
 8008050:	2000010c 	.word	0x2000010c
 8008054:	08008dc5 	.word	0x08008dc5
 8008058:	2000011c 	.word	0x2000011c

0800805c <cleanup_stdio>:
 800805c:	6841      	ldr	r1, [r0, #4]
 800805e:	4b0c      	ldr	r3, [pc, #48]	@ (8008090 <cleanup_stdio+0x34>)
 8008060:	4299      	cmp	r1, r3
 8008062:	b510      	push	{r4, lr}
 8008064:	4604      	mov	r4, r0
 8008066:	d001      	beq.n	800806c <cleanup_stdio+0x10>
 8008068:	f000 feac 	bl	8008dc4 <_fflush_r>
 800806c:	68a1      	ldr	r1, [r4, #8]
 800806e:	4b09      	ldr	r3, [pc, #36]	@ (8008094 <cleanup_stdio+0x38>)
 8008070:	4299      	cmp	r1, r3
 8008072:	d002      	beq.n	800807a <cleanup_stdio+0x1e>
 8008074:	4620      	mov	r0, r4
 8008076:	f000 fea5 	bl	8008dc4 <_fflush_r>
 800807a:	68e1      	ldr	r1, [r4, #12]
 800807c:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <cleanup_stdio+0x3c>)
 800807e:	4299      	cmp	r1, r3
 8008080:	d004      	beq.n	800808c <cleanup_stdio+0x30>
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008088:	f000 be9c 	b.w	8008dc4 <_fflush_r>
 800808c:	bd10      	pop	{r4, pc}
 800808e:	bf00      	nop
 8008090:	20001df8 	.word	0x20001df8
 8008094:	20001e60 	.word	0x20001e60
 8008098:	20001ec8 	.word	0x20001ec8

0800809c <global_stdio_init.part.0>:
 800809c:	b510      	push	{r4, lr}
 800809e:	4b0b      	ldr	r3, [pc, #44]	@ (80080cc <global_stdio_init.part.0+0x30>)
 80080a0:	4c0b      	ldr	r4, [pc, #44]	@ (80080d0 <global_stdio_init.part.0+0x34>)
 80080a2:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <global_stdio_init.part.0+0x38>)
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	4620      	mov	r0, r4
 80080a8:	2200      	movs	r2, #0
 80080aa:	2104      	movs	r1, #4
 80080ac:	f7ff ff94 	bl	8007fd8 <std>
 80080b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080b4:	2201      	movs	r2, #1
 80080b6:	2109      	movs	r1, #9
 80080b8:	f7ff ff8e 	bl	8007fd8 <std>
 80080bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080c0:	2202      	movs	r2, #2
 80080c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c6:	2112      	movs	r1, #18
 80080c8:	f7ff bf86 	b.w	8007fd8 <std>
 80080cc:	20001f30 	.word	0x20001f30
 80080d0:	20001df8 	.word	0x20001df8
 80080d4:	08008045 	.word	0x08008045

080080d8 <__sfp_lock_acquire>:
 80080d8:	4801      	ldr	r0, [pc, #4]	@ (80080e0 <__sfp_lock_acquire+0x8>)
 80080da:	f000 ba0e 	b.w	80084fa <__retarget_lock_acquire_recursive>
 80080de:	bf00      	nop
 80080e0:	20001f39 	.word	0x20001f39

080080e4 <__sfp_lock_release>:
 80080e4:	4801      	ldr	r0, [pc, #4]	@ (80080ec <__sfp_lock_release+0x8>)
 80080e6:	f000 ba09 	b.w	80084fc <__retarget_lock_release_recursive>
 80080ea:	bf00      	nop
 80080ec:	20001f39 	.word	0x20001f39

080080f0 <__sinit>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	4604      	mov	r4, r0
 80080f4:	f7ff fff0 	bl	80080d8 <__sfp_lock_acquire>
 80080f8:	6a23      	ldr	r3, [r4, #32]
 80080fa:	b11b      	cbz	r3, 8008104 <__sinit+0x14>
 80080fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008100:	f7ff bff0 	b.w	80080e4 <__sfp_lock_release>
 8008104:	4b04      	ldr	r3, [pc, #16]	@ (8008118 <__sinit+0x28>)
 8008106:	6223      	str	r3, [r4, #32]
 8008108:	4b04      	ldr	r3, [pc, #16]	@ (800811c <__sinit+0x2c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f5      	bne.n	80080fc <__sinit+0xc>
 8008110:	f7ff ffc4 	bl	800809c <global_stdio_init.part.0>
 8008114:	e7f2      	b.n	80080fc <__sinit+0xc>
 8008116:	bf00      	nop
 8008118:	0800805d 	.word	0x0800805d
 800811c:	20001f30 	.word	0x20001f30

08008120 <_fwalk_sglue>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	4607      	mov	r7, r0
 8008126:	4688      	mov	r8, r1
 8008128:	4614      	mov	r4, r2
 800812a:	2600      	movs	r6, #0
 800812c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008130:	f1b9 0901 	subs.w	r9, r9, #1
 8008134:	d505      	bpl.n	8008142 <_fwalk_sglue+0x22>
 8008136:	6824      	ldr	r4, [r4, #0]
 8008138:	2c00      	cmp	r4, #0
 800813a:	d1f7      	bne.n	800812c <_fwalk_sglue+0xc>
 800813c:	4630      	mov	r0, r6
 800813e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d907      	bls.n	8008158 <_fwalk_sglue+0x38>
 8008148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800814c:	3301      	adds	r3, #1
 800814e:	d003      	beq.n	8008158 <_fwalk_sglue+0x38>
 8008150:	4629      	mov	r1, r5
 8008152:	4638      	mov	r0, r7
 8008154:	47c0      	blx	r8
 8008156:	4306      	orrs	r6, r0
 8008158:	3568      	adds	r5, #104	@ 0x68
 800815a:	e7e9      	b.n	8008130 <_fwalk_sglue+0x10>

0800815c <_puts_r>:
 800815c:	6a03      	ldr	r3, [r0, #32]
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	6884      	ldr	r4, [r0, #8]
 8008162:	4605      	mov	r5, r0
 8008164:	460e      	mov	r6, r1
 8008166:	b90b      	cbnz	r3, 800816c <_puts_r+0x10>
 8008168:	f7ff ffc2 	bl	80080f0 <__sinit>
 800816c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800816e:	07db      	lsls	r3, r3, #31
 8008170:	d405      	bmi.n	800817e <_puts_r+0x22>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	0598      	lsls	r0, r3, #22
 8008176:	d402      	bmi.n	800817e <_puts_r+0x22>
 8008178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817a:	f000 f9be 	bl	80084fa <__retarget_lock_acquire_recursive>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d502      	bpl.n	800818a <_puts_r+0x2e>
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d135      	bne.n	80081f6 <_puts_r+0x9a>
 800818a:	4621      	mov	r1, r4
 800818c:	4628      	mov	r0, r5
 800818e:	f000 f8e5 	bl	800835c <__swsetup_r>
 8008192:	b380      	cbz	r0, 80081f6 <_puts_r+0x9a>
 8008194:	f04f 35ff 	mov.w	r5, #4294967295
 8008198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800819a:	07da      	lsls	r2, r3, #31
 800819c:	d405      	bmi.n	80081aa <_puts_r+0x4e>
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	059b      	lsls	r3, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_puts_r+0x4e>
 80081a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081a6:	f000 f9a9 	bl	80084fc <__retarget_lock_release_recursive>
 80081aa:	4628      	mov	r0, r5
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da04      	bge.n	80081bc <_puts_r+0x60>
 80081b2:	69a2      	ldr	r2, [r4, #24]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	dc17      	bgt.n	80081e8 <_puts_r+0x8c>
 80081b8:	290a      	cmp	r1, #10
 80081ba:	d015      	beq.n	80081e8 <_puts_r+0x8c>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	6022      	str	r2, [r4, #0]
 80081c2:	7019      	strb	r1, [r3, #0]
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081ca:	3b01      	subs	r3, #1
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	2900      	cmp	r1, #0
 80081d0:	d1ed      	bne.n	80081ae <_puts_r+0x52>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da11      	bge.n	80081fa <_puts_r+0x9e>
 80081d6:	4622      	mov	r2, r4
 80081d8:	210a      	movs	r1, #10
 80081da:	4628      	mov	r0, r5
 80081dc:	f000 f87f 	bl	80082de <__swbuf_r>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d0d7      	beq.n	8008194 <_puts_r+0x38>
 80081e4:	250a      	movs	r5, #10
 80081e6:	e7d7      	b.n	8008198 <_puts_r+0x3c>
 80081e8:	4622      	mov	r2, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f877 	bl	80082de <__swbuf_r>
 80081f0:	3001      	adds	r0, #1
 80081f2:	d1e7      	bne.n	80081c4 <_puts_r+0x68>
 80081f4:	e7ce      	b.n	8008194 <_puts_r+0x38>
 80081f6:	3e01      	subs	r6, #1
 80081f8:	e7e4      	b.n	80081c4 <_puts_r+0x68>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	6022      	str	r2, [r4, #0]
 8008200:	220a      	movs	r2, #10
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e7ee      	b.n	80081e4 <_puts_r+0x88>
	...

08008208 <puts>:
 8008208:	4b02      	ldr	r3, [pc, #8]	@ (8008214 <puts+0xc>)
 800820a:	4601      	mov	r1, r0
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f7ff bfa5 	b.w	800815c <_puts_r>
 8008212:	bf00      	nop
 8008214:	20000118 	.word	0x20000118

08008218 <siprintf>:
 8008218:	b40e      	push	{r1, r2, r3}
 800821a:	b500      	push	{lr}
 800821c:	b09c      	sub	sp, #112	@ 0x70
 800821e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008220:	9002      	str	r0, [sp, #8]
 8008222:	9006      	str	r0, [sp, #24]
 8008224:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008228:	4809      	ldr	r0, [pc, #36]	@ (8008250 <siprintf+0x38>)
 800822a:	9107      	str	r1, [sp, #28]
 800822c:	9104      	str	r1, [sp, #16]
 800822e:	4909      	ldr	r1, [pc, #36]	@ (8008254 <siprintf+0x3c>)
 8008230:	f853 2b04 	ldr.w	r2, [r3], #4
 8008234:	9105      	str	r1, [sp, #20]
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	a902      	add	r1, sp, #8
 800823c:	f000 fab4 	bl	80087a8 <_svfiprintf_r>
 8008240:	9b02      	ldr	r3, [sp, #8]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	b01c      	add	sp, #112	@ 0x70
 8008248:	f85d eb04 	ldr.w	lr, [sp], #4
 800824c:	b003      	add	sp, #12
 800824e:	4770      	bx	lr
 8008250:	20000118 	.word	0x20000118
 8008254:	ffff0208 	.word	0xffff0208

08008258 <__sread>:
 8008258:	b510      	push	{r4, lr}
 800825a:	460c      	mov	r4, r1
 800825c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008260:	f000 f8fc 	bl	800845c <_read_r>
 8008264:	2800      	cmp	r0, #0
 8008266:	bfab      	itete	ge
 8008268:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800826a:	89a3      	ldrhlt	r3, [r4, #12]
 800826c:	181b      	addge	r3, r3, r0
 800826e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008272:	bfac      	ite	ge
 8008274:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008276:	81a3      	strhlt	r3, [r4, #12]
 8008278:	bd10      	pop	{r4, pc}

0800827a <__swrite>:
 800827a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827e:	461f      	mov	r7, r3
 8008280:	898b      	ldrh	r3, [r1, #12]
 8008282:	05db      	lsls	r3, r3, #23
 8008284:	4605      	mov	r5, r0
 8008286:	460c      	mov	r4, r1
 8008288:	4616      	mov	r6, r2
 800828a:	d505      	bpl.n	8008298 <__swrite+0x1e>
 800828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008290:	2302      	movs	r3, #2
 8008292:	2200      	movs	r2, #0
 8008294:	f000 f8d0 	bl	8008438 <_lseek_r>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	4632      	mov	r2, r6
 80082a6:	463b      	mov	r3, r7
 80082a8:	4628      	mov	r0, r5
 80082aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ae:	f000 b8e7 	b.w	8008480 <_write_r>

080082b2 <__sseek>:
 80082b2:	b510      	push	{r4, lr}
 80082b4:	460c      	mov	r4, r1
 80082b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ba:	f000 f8bd 	bl	8008438 <_lseek_r>
 80082be:	1c43      	adds	r3, r0, #1
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	bf15      	itete	ne
 80082c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082ce:	81a3      	strheq	r3, [r4, #12]
 80082d0:	bf18      	it	ne
 80082d2:	81a3      	strhne	r3, [r4, #12]
 80082d4:	bd10      	pop	{r4, pc}

080082d6 <__sclose>:
 80082d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082da:	f000 b89d 	b.w	8008418 <_close_r>

080082de <__swbuf_r>:
 80082de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e0:	460e      	mov	r6, r1
 80082e2:	4614      	mov	r4, r2
 80082e4:	4605      	mov	r5, r0
 80082e6:	b118      	cbz	r0, 80082f0 <__swbuf_r+0x12>
 80082e8:	6a03      	ldr	r3, [r0, #32]
 80082ea:	b90b      	cbnz	r3, 80082f0 <__swbuf_r+0x12>
 80082ec:	f7ff ff00 	bl	80080f0 <__sinit>
 80082f0:	69a3      	ldr	r3, [r4, #24]
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	071a      	lsls	r2, r3, #28
 80082f8:	d501      	bpl.n	80082fe <__swbuf_r+0x20>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	b943      	cbnz	r3, 8008310 <__swbuf_r+0x32>
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f82b 	bl	800835c <__swsetup_r>
 8008306:	b118      	cbz	r0, 8008310 <__swbuf_r+0x32>
 8008308:	f04f 37ff 	mov.w	r7, #4294967295
 800830c:	4638      	mov	r0, r7
 800830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	6922      	ldr	r2, [r4, #16]
 8008314:	1a98      	subs	r0, r3, r2
 8008316:	6963      	ldr	r3, [r4, #20]
 8008318:	b2f6      	uxtb	r6, r6
 800831a:	4283      	cmp	r3, r0
 800831c:	4637      	mov	r7, r6
 800831e:	dc05      	bgt.n	800832c <__swbuf_r+0x4e>
 8008320:	4621      	mov	r1, r4
 8008322:	4628      	mov	r0, r5
 8008324:	f000 fd4e 	bl	8008dc4 <_fflush_r>
 8008328:	2800      	cmp	r0, #0
 800832a:	d1ed      	bne.n	8008308 <__swbuf_r+0x2a>
 800832c:	68a3      	ldr	r3, [r4, #8]
 800832e:	3b01      	subs	r3, #1
 8008330:	60a3      	str	r3, [r4, #8]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	6022      	str	r2, [r4, #0]
 8008338:	701e      	strb	r6, [r3, #0]
 800833a:	6962      	ldr	r2, [r4, #20]
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	429a      	cmp	r2, r3
 8008340:	d004      	beq.n	800834c <__swbuf_r+0x6e>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	07db      	lsls	r3, r3, #31
 8008346:	d5e1      	bpl.n	800830c <__swbuf_r+0x2e>
 8008348:	2e0a      	cmp	r6, #10
 800834a:	d1df      	bne.n	800830c <__swbuf_r+0x2e>
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f000 fd38 	bl	8008dc4 <_fflush_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	d0d9      	beq.n	800830c <__swbuf_r+0x2e>
 8008358:	e7d6      	b.n	8008308 <__swbuf_r+0x2a>
	...

0800835c <__swsetup_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4b29      	ldr	r3, [pc, #164]	@ (8008404 <__swsetup_r+0xa8>)
 8008360:	4605      	mov	r5, r0
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	460c      	mov	r4, r1
 8008366:	b118      	cbz	r0, 8008370 <__swsetup_r+0x14>
 8008368:	6a03      	ldr	r3, [r0, #32]
 800836a:	b90b      	cbnz	r3, 8008370 <__swsetup_r+0x14>
 800836c:	f7ff fec0 	bl	80080f0 <__sinit>
 8008370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008374:	0719      	lsls	r1, r3, #28
 8008376:	d422      	bmi.n	80083be <__swsetup_r+0x62>
 8008378:	06da      	lsls	r2, r3, #27
 800837a:	d407      	bmi.n	800838c <__swsetup_r+0x30>
 800837c:	2209      	movs	r2, #9
 800837e:	602a      	str	r2, [r5, #0]
 8008380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008384:	81a3      	strh	r3, [r4, #12]
 8008386:	f04f 30ff 	mov.w	r0, #4294967295
 800838a:	e033      	b.n	80083f4 <__swsetup_r+0x98>
 800838c:	0758      	lsls	r0, r3, #29
 800838e:	d512      	bpl.n	80083b6 <__swsetup_r+0x5a>
 8008390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008392:	b141      	cbz	r1, 80083a6 <__swsetup_r+0x4a>
 8008394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008398:	4299      	cmp	r1, r3
 800839a:	d002      	beq.n	80083a2 <__swsetup_r+0x46>
 800839c:	4628      	mov	r0, r5
 800839e:	f000 f8af 	bl	8008500 <_free_r>
 80083a2:	2300      	movs	r3, #0
 80083a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	2300      	movs	r3, #0
 80083b0:	6063      	str	r3, [r4, #4]
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	f043 0308 	orr.w	r3, r3, #8
 80083bc:	81a3      	strh	r3, [r4, #12]
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	b94b      	cbnz	r3, 80083d6 <__swsetup_r+0x7a>
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083cc:	d003      	beq.n	80083d6 <__swsetup_r+0x7a>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 fd45 	bl	8008e60 <__smakebuf_r>
 80083d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083da:	f013 0201 	ands.w	r2, r3, #1
 80083de:	d00a      	beq.n	80083f6 <__swsetup_r+0x9a>
 80083e0:	2200      	movs	r2, #0
 80083e2:	60a2      	str	r2, [r4, #8]
 80083e4:	6962      	ldr	r2, [r4, #20]
 80083e6:	4252      	negs	r2, r2
 80083e8:	61a2      	str	r2, [r4, #24]
 80083ea:	6922      	ldr	r2, [r4, #16]
 80083ec:	b942      	cbnz	r2, 8008400 <__swsetup_r+0xa4>
 80083ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083f2:	d1c5      	bne.n	8008380 <__swsetup_r+0x24>
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	0799      	lsls	r1, r3, #30
 80083f8:	bf58      	it	pl
 80083fa:	6962      	ldrpl	r2, [r4, #20]
 80083fc:	60a2      	str	r2, [r4, #8]
 80083fe:	e7f4      	b.n	80083ea <__swsetup_r+0x8e>
 8008400:	2000      	movs	r0, #0
 8008402:	e7f7      	b.n	80083f4 <__swsetup_r+0x98>
 8008404:	20000118 	.word	0x20000118

08008408 <memset>:
 8008408:	4402      	add	r2, r0
 800840a:	4603      	mov	r3, r0
 800840c:	4293      	cmp	r3, r2
 800840e:	d100      	bne.n	8008412 <memset+0xa>
 8008410:	4770      	bx	lr
 8008412:	f803 1b01 	strb.w	r1, [r3], #1
 8008416:	e7f9      	b.n	800840c <memset+0x4>

08008418 <_close_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d06      	ldr	r5, [pc, #24]	@ (8008434 <_close_r+0x1c>)
 800841c:	2300      	movs	r3, #0
 800841e:	4604      	mov	r4, r0
 8008420:	4608      	mov	r0, r1
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	f7f8 f94f 	bl	80006c6 <_close>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_close_r+0x1a>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_close_r+0x1a>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	20001f34 	.word	0x20001f34

08008438 <_lseek_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	@ (8008458 <_lseek_r+0x20>)
 800843c:	4604      	mov	r4, r0
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f7f8 f964 	bl	8000714 <_lseek>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_lseek_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_lseek_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20001f34 	.word	0x20001f34

0800845c <_read_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d07      	ldr	r5, [pc, #28]	@ (800847c <_read_r+0x20>)
 8008460:	4604      	mov	r4, r0
 8008462:	4608      	mov	r0, r1
 8008464:	4611      	mov	r1, r2
 8008466:	2200      	movs	r2, #0
 8008468:	602a      	str	r2, [r5, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	f7f8 f90e 	bl	800068c <_read>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_read_r+0x1e>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	b103      	cbz	r3, 800847a <_read_r+0x1e>
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	20001f34 	.word	0x20001f34

08008480 <_write_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d07      	ldr	r5, [pc, #28]	@ (80084a0 <_write_r+0x20>)
 8008484:	4604      	mov	r4, r0
 8008486:	4608      	mov	r0, r1
 8008488:	4611      	mov	r1, r2
 800848a:	2200      	movs	r2, #0
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f7f8 f886 	bl	80005a0 <_write>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_write_r+0x1e>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_write_r+0x1e>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20001f34 	.word	0x20001f34

080084a4 <__errno>:
 80084a4:	4b01      	ldr	r3, [pc, #4]	@ (80084ac <__errno+0x8>)
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20000118 	.word	0x20000118

080084b0 <__libc_init_array>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	4d0d      	ldr	r5, [pc, #52]	@ (80084e8 <__libc_init_array+0x38>)
 80084b4:	4c0d      	ldr	r4, [pc, #52]	@ (80084ec <__libc_init_array+0x3c>)
 80084b6:	1b64      	subs	r4, r4, r5
 80084b8:	10a4      	asrs	r4, r4, #2
 80084ba:	2600      	movs	r6, #0
 80084bc:	42a6      	cmp	r6, r4
 80084be:	d109      	bne.n	80084d4 <__libc_init_array+0x24>
 80084c0:	4d0b      	ldr	r5, [pc, #44]	@ (80084f0 <__libc_init_array+0x40>)
 80084c2:	4c0c      	ldr	r4, [pc, #48]	@ (80084f4 <__libc_init_array+0x44>)
 80084c4:	f000 fd98 	bl	8008ff8 <_init>
 80084c8:	1b64      	subs	r4, r4, r5
 80084ca:	10a4      	asrs	r4, r4, #2
 80084cc:	2600      	movs	r6, #0
 80084ce:	42a6      	cmp	r6, r4
 80084d0:	d105      	bne.n	80084de <__libc_init_array+0x2e>
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
 80084d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d8:	4798      	blx	r3
 80084da:	3601      	adds	r6, #1
 80084dc:	e7ee      	b.n	80084bc <__libc_init_array+0xc>
 80084de:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e2:	4798      	blx	r3
 80084e4:	3601      	adds	r6, #1
 80084e6:	e7f2      	b.n	80084ce <__libc_init_array+0x1e>
 80084e8:	08009140 	.word	0x08009140
 80084ec:	08009140 	.word	0x08009140
 80084f0:	08009140 	.word	0x08009140
 80084f4:	08009144 	.word	0x08009144

080084f8 <__retarget_lock_init_recursive>:
 80084f8:	4770      	bx	lr

080084fa <__retarget_lock_acquire_recursive>:
 80084fa:	4770      	bx	lr

080084fc <__retarget_lock_release_recursive>:
 80084fc:	4770      	bx	lr
	...

08008500 <_free_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4605      	mov	r5, r0
 8008504:	2900      	cmp	r1, #0
 8008506:	d041      	beq.n	800858c <_free_r+0x8c>
 8008508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800850c:	1f0c      	subs	r4, r1, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfb8      	it	lt
 8008512:	18e4      	addlt	r4, r4, r3
 8008514:	f000 f8e0 	bl	80086d8 <__malloc_lock>
 8008518:	4a1d      	ldr	r2, [pc, #116]	@ (8008590 <_free_r+0x90>)
 800851a:	6813      	ldr	r3, [r2, #0]
 800851c:	b933      	cbnz	r3, 800852c <_free_r+0x2c>
 800851e:	6063      	str	r3, [r4, #4]
 8008520:	6014      	str	r4, [r2, #0]
 8008522:	4628      	mov	r0, r5
 8008524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008528:	f000 b8dc 	b.w	80086e4 <__malloc_unlock>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d908      	bls.n	8008542 <_free_r+0x42>
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	1821      	adds	r1, r4, r0
 8008534:	428b      	cmp	r3, r1
 8008536:	bf01      	itttt	eq
 8008538:	6819      	ldreq	r1, [r3, #0]
 800853a:	685b      	ldreq	r3, [r3, #4]
 800853c:	1809      	addeq	r1, r1, r0
 800853e:	6021      	streq	r1, [r4, #0]
 8008540:	e7ed      	b.n	800851e <_free_r+0x1e>
 8008542:	461a      	mov	r2, r3
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	b10b      	cbz	r3, 800854c <_free_r+0x4c>
 8008548:	42a3      	cmp	r3, r4
 800854a:	d9fa      	bls.n	8008542 <_free_r+0x42>
 800854c:	6811      	ldr	r1, [r2, #0]
 800854e:	1850      	adds	r0, r2, r1
 8008550:	42a0      	cmp	r0, r4
 8008552:	d10b      	bne.n	800856c <_free_r+0x6c>
 8008554:	6820      	ldr	r0, [r4, #0]
 8008556:	4401      	add	r1, r0
 8008558:	1850      	adds	r0, r2, r1
 800855a:	4283      	cmp	r3, r0
 800855c:	6011      	str	r1, [r2, #0]
 800855e:	d1e0      	bne.n	8008522 <_free_r+0x22>
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	6053      	str	r3, [r2, #4]
 8008566:	4408      	add	r0, r1
 8008568:	6010      	str	r0, [r2, #0]
 800856a:	e7da      	b.n	8008522 <_free_r+0x22>
 800856c:	d902      	bls.n	8008574 <_free_r+0x74>
 800856e:	230c      	movs	r3, #12
 8008570:	602b      	str	r3, [r5, #0]
 8008572:	e7d6      	b.n	8008522 <_free_r+0x22>
 8008574:	6820      	ldr	r0, [r4, #0]
 8008576:	1821      	adds	r1, r4, r0
 8008578:	428b      	cmp	r3, r1
 800857a:	bf04      	itt	eq
 800857c:	6819      	ldreq	r1, [r3, #0]
 800857e:	685b      	ldreq	r3, [r3, #4]
 8008580:	6063      	str	r3, [r4, #4]
 8008582:	bf04      	itt	eq
 8008584:	1809      	addeq	r1, r1, r0
 8008586:	6021      	streq	r1, [r4, #0]
 8008588:	6054      	str	r4, [r2, #4]
 800858a:	e7ca      	b.n	8008522 <_free_r+0x22>
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	bf00      	nop
 8008590:	20001f40 	.word	0x20001f40

08008594 <sbrk_aligned>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	4e0f      	ldr	r6, [pc, #60]	@ (80085d4 <sbrk_aligned+0x40>)
 8008598:	460c      	mov	r4, r1
 800859a:	6831      	ldr	r1, [r6, #0]
 800859c:	4605      	mov	r5, r0
 800859e:	b911      	cbnz	r1, 80085a6 <sbrk_aligned+0x12>
 80085a0:	f000 fcd6 	bl	8008f50 <_sbrk_r>
 80085a4:	6030      	str	r0, [r6, #0]
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 fcd1 	bl	8008f50 <_sbrk_r>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d103      	bne.n	80085ba <sbrk_aligned+0x26>
 80085b2:	f04f 34ff 	mov.w	r4, #4294967295
 80085b6:	4620      	mov	r0, r4
 80085b8:	bd70      	pop	{r4, r5, r6, pc}
 80085ba:	1cc4      	adds	r4, r0, #3
 80085bc:	f024 0403 	bic.w	r4, r4, #3
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d0f8      	beq.n	80085b6 <sbrk_aligned+0x22>
 80085c4:	1a21      	subs	r1, r4, r0
 80085c6:	4628      	mov	r0, r5
 80085c8:	f000 fcc2 	bl	8008f50 <_sbrk_r>
 80085cc:	3001      	adds	r0, #1
 80085ce:	d1f2      	bne.n	80085b6 <sbrk_aligned+0x22>
 80085d0:	e7ef      	b.n	80085b2 <sbrk_aligned+0x1e>
 80085d2:	bf00      	nop
 80085d4:	20001f3c 	.word	0x20001f3c

080085d8 <_malloc_r>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	1ccd      	adds	r5, r1, #3
 80085de:	f025 0503 	bic.w	r5, r5, #3
 80085e2:	3508      	adds	r5, #8
 80085e4:	2d0c      	cmp	r5, #12
 80085e6:	bf38      	it	cc
 80085e8:	250c      	movcc	r5, #12
 80085ea:	2d00      	cmp	r5, #0
 80085ec:	4606      	mov	r6, r0
 80085ee:	db01      	blt.n	80085f4 <_malloc_r+0x1c>
 80085f0:	42a9      	cmp	r1, r5
 80085f2:	d904      	bls.n	80085fe <_malloc_r+0x26>
 80085f4:	230c      	movs	r3, #12
 80085f6:	6033      	str	r3, [r6, #0]
 80085f8:	2000      	movs	r0, #0
 80085fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086d4 <_malloc_r+0xfc>
 8008602:	f000 f869 	bl	80086d8 <__malloc_lock>
 8008606:	f8d8 3000 	ldr.w	r3, [r8]
 800860a:	461c      	mov	r4, r3
 800860c:	bb44      	cbnz	r4, 8008660 <_malloc_r+0x88>
 800860e:	4629      	mov	r1, r5
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff ffbf 	bl	8008594 <sbrk_aligned>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	4604      	mov	r4, r0
 800861a:	d158      	bne.n	80086ce <_malloc_r+0xf6>
 800861c:	f8d8 4000 	ldr.w	r4, [r8]
 8008620:	4627      	mov	r7, r4
 8008622:	2f00      	cmp	r7, #0
 8008624:	d143      	bne.n	80086ae <_malloc_r+0xd6>
 8008626:	2c00      	cmp	r4, #0
 8008628:	d04b      	beq.n	80086c2 <_malloc_r+0xea>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	4639      	mov	r1, r7
 800862e:	4630      	mov	r0, r6
 8008630:	eb04 0903 	add.w	r9, r4, r3
 8008634:	f000 fc8c 	bl	8008f50 <_sbrk_r>
 8008638:	4581      	cmp	r9, r0
 800863a:	d142      	bne.n	80086c2 <_malloc_r+0xea>
 800863c:	6821      	ldr	r1, [r4, #0]
 800863e:	1a6d      	subs	r5, r5, r1
 8008640:	4629      	mov	r1, r5
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff ffa6 	bl	8008594 <sbrk_aligned>
 8008648:	3001      	adds	r0, #1
 800864a:	d03a      	beq.n	80086c2 <_malloc_r+0xea>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	442b      	add	r3, r5
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	f8d8 3000 	ldr.w	r3, [r8]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	bb62      	cbnz	r2, 80086b4 <_malloc_r+0xdc>
 800865a:	f8c8 7000 	str.w	r7, [r8]
 800865e:	e00f      	b.n	8008680 <_malloc_r+0xa8>
 8008660:	6822      	ldr	r2, [r4, #0]
 8008662:	1b52      	subs	r2, r2, r5
 8008664:	d420      	bmi.n	80086a8 <_malloc_r+0xd0>
 8008666:	2a0b      	cmp	r2, #11
 8008668:	d917      	bls.n	800869a <_malloc_r+0xc2>
 800866a:	1961      	adds	r1, r4, r5
 800866c:	42a3      	cmp	r3, r4
 800866e:	6025      	str	r5, [r4, #0]
 8008670:	bf18      	it	ne
 8008672:	6059      	strne	r1, [r3, #4]
 8008674:	6863      	ldr	r3, [r4, #4]
 8008676:	bf08      	it	eq
 8008678:	f8c8 1000 	streq.w	r1, [r8]
 800867c:	5162      	str	r2, [r4, r5]
 800867e:	604b      	str	r3, [r1, #4]
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f82f 	bl	80086e4 <__malloc_unlock>
 8008686:	f104 000b 	add.w	r0, r4, #11
 800868a:	1d23      	adds	r3, r4, #4
 800868c:	f020 0007 	bic.w	r0, r0, #7
 8008690:	1ac2      	subs	r2, r0, r3
 8008692:	bf1c      	itt	ne
 8008694:	1a1b      	subne	r3, r3, r0
 8008696:	50a3      	strne	r3, [r4, r2]
 8008698:	e7af      	b.n	80085fa <_malloc_r+0x22>
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	42a3      	cmp	r3, r4
 800869e:	bf0c      	ite	eq
 80086a0:	f8c8 2000 	streq.w	r2, [r8]
 80086a4:	605a      	strne	r2, [r3, #4]
 80086a6:	e7eb      	b.n	8008680 <_malloc_r+0xa8>
 80086a8:	4623      	mov	r3, r4
 80086aa:	6864      	ldr	r4, [r4, #4]
 80086ac:	e7ae      	b.n	800860c <_malloc_r+0x34>
 80086ae:	463c      	mov	r4, r7
 80086b0:	687f      	ldr	r7, [r7, #4]
 80086b2:	e7b6      	b.n	8008622 <_malloc_r+0x4a>
 80086b4:	461a      	mov	r2, r3
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d1fb      	bne.n	80086b4 <_malloc_r+0xdc>
 80086bc:	2300      	movs	r3, #0
 80086be:	6053      	str	r3, [r2, #4]
 80086c0:	e7de      	b.n	8008680 <_malloc_r+0xa8>
 80086c2:	230c      	movs	r3, #12
 80086c4:	6033      	str	r3, [r6, #0]
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 f80c 	bl	80086e4 <__malloc_unlock>
 80086cc:	e794      	b.n	80085f8 <_malloc_r+0x20>
 80086ce:	6005      	str	r5, [r0, #0]
 80086d0:	e7d6      	b.n	8008680 <_malloc_r+0xa8>
 80086d2:	bf00      	nop
 80086d4:	20001f40 	.word	0x20001f40

080086d8 <__malloc_lock>:
 80086d8:	4801      	ldr	r0, [pc, #4]	@ (80086e0 <__malloc_lock+0x8>)
 80086da:	f7ff bf0e 	b.w	80084fa <__retarget_lock_acquire_recursive>
 80086de:	bf00      	nop
 80086e0:	20001f38 	.word	0x20001f38

080086e4 <__malloc_unlock>:
 80086e4:	4801      	ldr	r0, [pc, #4]	@ (80086ec <__malloc_unlock+0x8>)
 80086e6:	f7ff bf09 	b.w	80084fc <__retarget_lock_release_recursive>
 80086ea:	bf00      	nop
 80086ec:	20001f38 	.word	0x20001f38

080086f0 <__ssputs_r>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	688e      	ldr	r6, [r1, #8]
 80086f6:	461f      	mov	r7, r3
 80086f8:	42be      	cmp	r6, r7
 80086fa:	680b      	ldr	r3, [r1, #0]
 80086fc:	4682      	mov	sl, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	4690      	mov	r8, r2
 8008702:	d82d      	bhi.n	8008760 <__ssputs_r+0x70>
 8008704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008708:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800870c:	d026      	beq.n	800875c <__ssputs_r+0x6c>
 800870e:	6965      	ldr	r5, [r4, #20]
 8008710:	6909      	ldr	r1, [r1, #16]
 8008712:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008716:	eba3 0901 	sub.w	r9, r3, r1
 800871a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800871e:	1c7b      	adds	r3, r7, #1
 8008720:	444b      	add	r3, r9
 8008722:	106d      	asrs	r5, r5, #1
 8008724:	429d      	cmp	r5, r3
 8008726:	bf38      	it	cc
 8008728:	461d      	movcc	r5, r3
 800872a:	0553      	lsls	r3, r2, #21
 800872c:	d527      	bpl.n	800877e <__ssputs_r+0x8e>
 800872e:	4629      	mov	r1, r5
 8008730:	f7ff ff52 	bl	80085d8 <_malloc_r>
 8008734:	4606      	mov	r6, r0
 8008736:	b360      	cbz	r0, 8008792 <__ssputs_r+0xa2>
 8008738:	6921      	ldr	r1, [r4, #16]
 800873a:	464a      	mov	r2, r9
 800873c:	f000 fc18 	bl	8008f70 <memcpy>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	6126      	str	r6, [r4, #16]
 800874e:	6165      	str	r5, [r4, #20]
 8008750:	444e      	add	r6, r9
 8008752:	eba5 0509 	sub.w	r5, r5, r9
 8008756:	6026      	str	r6, [r4, #0]
 8008758:	60a5      	str	r5, [r4, #8]
 800875a:	463e      	mov	r6, r7
 800875c:	42be      	cmp	r6, r7
 800875e:	d900      	bls.n	8008762 <__ssputs_r+0x72>
 8008760:	463e      	mov	r6, r7
 8008762:	6820      	ldr	r0, [r4, #0]
 8008764:	4632      	mov	r2, r6
 8008766:	4641      	mov	r1, r8
 8008768:	f000 fbb6 	bl	8008ed8 <memmove>
 800876c:	68a3      	ldr	r3, [r4, #8]
 800876e:	1b9b      	subs	r3, r3, r6
 8008770:	60a3      	str	r3, [r4, #8]
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	4433      	add	r3, r6
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	2000      	movs	r0, #0
 800877a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877e:	462a      	mov	r2, r5
 8008780:	f000 fc04 	bl	8008f8c <_realloc_r>
 8008784:	4606      	mov	r6, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	d1e0      	bne.n	800874c <__ssputs_r+0x5c>
 800878a:	6921      	ldr	r1, [r4, #16]
 800878c:	4650      	mov	r0, sl
 800878e:	f7ff feb7 	bl	8008500 <_free_r>
 8008792:	230c      	movs	r3, #12
 8008794:	f8ca 3000 	str.w	r3, [sl]
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e7e9      	b.n	800877a <__ssputs_r+0x8a>
	...

080087a8 <_svfiprintf_r>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4698      	mov	r8, r3
 80087ae:	898b      	ldrh	r3, [r1, #12]
 80087b0:	061b      	lsls	r3, r3, #24
 80087b2:	b09d      	sub	sp, #116	@ 0x74
 80087b4:	4607      	mov	r7, r0
 80087b6:	460d      	mov	r5, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	d510      	bpl.n	80087de <_svfiprintf_r+0x36>
 80087bc:	690b      	ldr	r3, [r1, #16]
 80087be:	b973      	cbnz	r3, 80087de <_svfiprintf_r+0x36>
 80087c0:	2140      	movs	r1, #64	@ 0x40
 80087c2:	f7ff ff09 	bl	80085d8 <_malloc_r>
 80087c6:	6028      	str	r0, [r5, #0]
 80087c8:	6128      	str	r0, [r5, #16]
 80087ca:	b930      	cbnz	r0, 80087da <_svfiprintf_r+0x32>
 80087cc:	230c      	movs	r3, #12
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	b01d      	add	sp, #116	@ 0x74
 80087d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087da:	2340      	movs	r3, #64	@ 0x40
 80087dc:	616b      	str	r3, [r5, #20]
 80087de:	2300      	movs	r3, #0
 80087e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e2:	2320      	movs	r3, #32
 80087e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ec:	2330      	movs	r3, #48	@ 0x30
 80087ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800898c <_svfiprintf_r+0x1e4>
 80087f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087f6:	f04f 0901 	mov.w	r9, #1
 80087fa:	4623      	mov	r3, r4
 80087fc:	469a      	mov	sl, r3
 80087fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008802:	b10a      	cbz	r2, 8008808 <_svfiprintf_r+0x60>
 8008804:	2a25      	cmp	r2, #37	@ 0x25
 8008806:	d1f9      	bne.n	80087fc <_svfiprintf_r+0x54>
 8008808:	ebba 0b04 	subs.w	fp, sl, r4
 800880c:	d00b      	beq.n	8008826 <_svfiprintf_r+0x7e>
 800880e:	465b      	mov	r3, fp
 8008810:	4622      	mov	r2, r4
 8008812:	4629      	mov	r1, r5
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ff6b 	bl	80086f0 <__ssputs_r>
 800881a:	3001      	adds	r0, #1
 800881c:	f000 80a7 	beq.w	800896e <_svfiprintf_r+0x1c6>
 8008820:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008822:	445a      	add	r2, fp
 8008824:	9209      	str	r2, [sp, #36]	@ 0x24
 8008826:	f89a 3000 	ldrb.w	r3, [sl]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 809f 	beq.w	800896e <_svfiprintf_r+0x1c6>
 8008830:	2300      	movs	r3, #0
 8008832:	f04f 32ff 	mov.w	r2, #4294967295
 8008836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883a:	f10a 0a01 	add.w	sl, sl, #1
 800883e:	9304      	str	r3, [sp, #16]
 8008840:	9307      	str	r3, [sp, #28]
 8008842:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008846:	931a      	str	r3, [sp, #104]	@ 0x68
 8008848:	4654      	mov	r4, sl
 800884a:	2205      	movs	r2, #5
 800884c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008850:	484e      	ldr	r0, [pc, #312]	@ (800898c <_svfiprintf_r+0x1e4>)
 8008852:	f7f7 fced 	bl	8000230 <memchr>
 8008856:	9a04      	ldr	r2, [sp, #16]
 8008858:	b9d8      	cbnz	r0, 8008892 <_svfiprintf_r+0xea>
 800885a:	06d0      	lsls	r0, r2, #27
 800885c:	bf44      	itt	mi
 800885e:	2320      	movmi	r3, #32
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008864:	0711      	lsls	r1, r2, #28
 8008866:	bf44      	itt	mi
 8008868:	232b      	movmi	r3, #43	@ 0x2b
 800886a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800886e:	f89a 3000 	ldrb.w	r3, [sl]
 8008872:	2b2a      	cmp	r3, #42	@ 0x2a
 8008874:	d015      	beq.n	80088a2 <_svfiprintf_r+0xfa>
 8008876:	9a07      	ldr	r2, [sp, #28]
 8008878:	4654      	mov	r4, sl
 800887a:	2000      	movs	r0, #0
 800887c:	f04f 0c0a 	mov.w	ip, #10
 8008880:	4621      	mov	r1, r4
 8008882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008886:	3b30      	subs	r3, #48	@ 0x30
 8008888:	2b09      	cmp	r3, #9
 800888a:	d94b      	bls.n	8008924 <_svfiprintf_r+0x17c>
 800888c:	b1b0      	cbz	r0, 80088bc <_svfiprintf_r+0x114>
 800888e:	9207      	str	r2, [sp, #28]
 8008890:	e014      	b.n	80088bc <_svfiprintf_r+0x114>
 8008892:	eba0 0308 	sub.w	r3, r0, r8
 8008896:	fa09 f303 	lsl.w	r3, r9, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	9304      	str	r3, [sp, #16]
 800889e:	46a2      	mov	sl, r4
 80088a0:	e7d2      	b.n	8008848 <_svfiprintf_r+0xa0>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	1d19      	adds	r1, r3, #4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	9103      	str	r1, [sp, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfbb      	ittet	lt
 80088ae:	425b      	neglt	r3, r3
 80088b0:	f042 0202 	orrlt.w	r2, r2, #2
 80088b4:	9307      	strge	r3, [sp, #28]
 80088b6:	9307      	strlt	r3, [sp, #28]
 80088b8:	bfb8      	it	lt
 80088ba:	9204      	strlt	r2, [sp, #16]
 80088bc:	7823      	ldrb	r3, [r4, #0]
 80088be:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c0:	d10a      	bne.n	80088d8 <_svfiprintf_r+0x130>
 80088c2:	7863      	ldrb	r3, [r4, #1]
 80088c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c6:	d132      	bne.n	800892e <_svfiprintf_r+0x186>
 80088c8:	9b03      	ldr	r3, [sp, #12]
 80088ca:	1d1a      	adds	r2, r3, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	9203      	str	r2, [sp, #12]
 80088d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d4:	3402      	adds	r4, #2
 80088d6:	9305      	str	r3, [sp, #20]
 80088d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800899c <_svfiprintf_r+0x1f4>
 80088dc:	7821      	ldrb	r1, [r4, #0]
 80088de:	2203      	movs	r2, #3
 80088e0:	4650      	mov	r0, sl
 80088e2:	f7f7 fca5 	bl	8000230 <memchr>
 80088e6:	b138      	cbz	r0, 80088f8 <_svfiprintf_r+0x150>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	eba0 000a 	sub.w	r0, r0, sl
 80088ee:	2240      	movs	r2, #64	@ 0x40
 80088f0:	4082      	lsls	r2, r0
 80088f2:	4313      	orrs	r3, r2
 80088f4:	3401      	adds	r4, #1
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fc:	4824      	ldr	r0, [pc, #144]	@ (8008990 <_svfiprintf_r+0x1e8>)
 80088fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008902:	2206      	movs	r2, #6
 8008904:	f7f7 fc94 	bl	8000230 <memchr>
 8008908:	2800      	cmp	r0, #0
 800890a:	d036      	beq.n	800897a <_svfiprintf_r+0x1d2>
 800890c:	4b21      	ldr	r3, [pc, #132]	@ (8008994 <_svfiprintf_r+0x1ec>)
 800890e:	bb1b      	cbnz	r3, 8008958 <_svfiprintf_r+0x1b0>
 8008910:	9b03      	ldr	r3, [sp, #12]
 8008912:	3307      	adds	r3, #7
 8008914:	f023 0307 	bic.w	r3, r3, #7
 8008918:	3308      	adds	r3, #8
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891e:	4433      	add	r3, r6
 8008920:	9309      	str	r3, [sp, #36]	@ 0x24
 8008922:	e76a      	b.n	80087fa <_svfiprintf_r+0x52>
 8008924:	fb0c 3202 	mla	r2, ip, r2, r3
 8008928:	460c      	mov	r4, r1
 800892a:	2001      	movs	r0, #1
 800892c:	e7a8      	b.n	8008880 <_svfiprintf_r+0xd8>
 800892e:	2300      	movs	r3, #0
 8008930:	3401      	adds	r4, #1
 8008932:	9305      	str	r3, [sp, #20]
 8008934:	4619      	mov	r1, r3
 8008936:	f04f 0c0a 	mov.w	ip, #10
 800893a:	4620      	mov	r0, r4
 800893c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008940:	3a30      	subs	r2, #48	@ 0x30
 8008942:	2a09      	cmp	r2, #9
 8008944:	d903      	bls.n	800894e <_svfiprintf_r+0x1a6>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0c6      	beq.n	80088d8 <_svfiprintf_r+0x130>
 800894a:	9105      	str	r1, [sp, #20]
 800894c:	e7c4      	b.n	80088d8 <_svfiprintf_r+0x130>
 800894e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008952:	4604      	mov	r4, r0
 8008954:	2301      	movs	r3, #1
 8008956:	e7f0      	b.n	800893a <_svfiprintf_r+0x192>
 8008958:	ab03      	add	r3, sp, #12
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	462a      	mov	r2, r5
 800895e:	4b0e      	ldr	r3, [pc, #56]	@ (8008998 <_svfiprintf_r+0x1f0>)
 8008960:	a904      	add	r1, sp, #16
 8008962:	4638      	mov	r0, r7
 8008964:	f3af 8000 	nop.w
 8008968:	1c42      	adds	r2, r0, #1
 800896a:	4606      	mov	r6, r0
 800896c:	d1d6      	bne.n	800891c <_svfiprintf_r+0x174>
 800896e:	89ab      	ldrh	r3, [r5, #12]
 8008970:	065b      	lsls	r3, r3, #25
 8008972:	f53f af2d 	bmi.w	80087d0 <_svfiprintf_r+0x28>
 8008976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008978:	e72c      	b.n	80087d4 <_svfiprintf_r+0x2c>
 800897a:	ab03      	add	r3, sp, #12
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	462a      	mov	r2, r5
 8008980:	4b05      	ldr	r3, [pc, #20]	@ (8008998 <_svfiprintf_r+0x1f0>)
 8008982:	a904      	add	r1, sp, #16
 8008984:	4638      	mov	r0, r7
 8008986:	f000 f879 	bl	8008a7c <_printf_i>
 800898a:	e7ed      	b.n	8008968 <_svfiprintf_r+0x1c0>
 800898c:	08009104 	.word	0x08009104
 8008990:	0800910e 	.word	0x0800910e
 8008994:	00000000 	.word	0x00000000
 8008998:	080086f1 	.word	0x080086f1
 800899c:	0800910a 	.word	0x0800910a

080089a0 <_printf_common>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	4616      	mov	r6, r2
 80089a6:	4698      	mov	r8, r3
 80089a8:	688a      	ldr	r2, [r1, #8]
 80089aa:	690b      	ldr	r3, [r1, #16]
 80089ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089b0:	4293      	cmp	r3, r2
 80089b2:	bfb8      	it	lt
 80089b4:	4613      	movlt	r3, r2
 80089b6:	6033      	str	r3, [r6, #0]
 80089b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089bc:	4607      	mov	r7, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b10a      	cbz	r2, 80089c6 <_printf_common+0x26>
 80089c2:	3301      	adds	r3, #1
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	0699      	lsls	r1, r3, #26
 80089ca:	bf42      	ittt	mi
 80089cc:	6833      	ldrmi	r3, [r6, #0]
 80089ce:	3302      	addmi	r3, #2
 80089d0:	6033      	strmi	r3, [r6, #0]
 80089d2:	6825      	ldr	r5, [r4, #0]
 80089d4:	f015 0506 	ands.w	r5, r5, #6
 80089d8:	d106      	bne.n	80089e8 <_printf_common+0x48>
 80089da:	f104 0a19 	add.w	sl, r4, #25
 80089de:	68e3      	ldr	r3, [r4, #12]
 80089e0:	6832      	ldr	r2, [r6, #0]
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	42ab      	cmp	r3, r5
 80089e6:	dc26      	bgt.n	8008a36 <_printf_common+0x96>
 80089e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089ec:	6822      	ldr	r2, [r4, #0]
 80089ee:	3b00      	subs	r3, #0
 80089f0:	bf18      	it	ne
 80089f2:	2301      	movne	r3, #1
 80089f4:	0692      	lsls	r2, r2, #26
 80089f6:	d42b      	bmi.n	8008a50 <_printf_common+0xb0>
 80089f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089fc:	4641      	mov	r1, r8
 80089fe:	4638      	mov	r0, r7
 8008a00:	47c8      	blx	r9
 8008a02:	3001      	adds	r0, #1
 8008a04:	d01e      	beq.n	8008a44 <_printf_common+0xa4>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	6922      	ldr	r2, [r4, #16]
 8008a0a:	f003 0306 	and.w	r3, r3, #6
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	bf02      	ittt	eq
 8008a12:	68e5      	ldreq	r5, [r4, #12]
 8008a14:	6833      	ldreq	r3, [r6, #0]
 8008a16:	1aed      	subeq	r5, r5, r3
 8008a18:	68a3      	ldr	r3, [r4, #8]
 8008a1a:	bf0c      	ite	eq
 8008a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a20:	2500      	movne	r5, #0
 8008a22:	4293      	cmp	r3, r2
 8008a24:	bfc4      	itt	gt
 8008a26:	1a9b      	subgt	r3, r3, r2
 8008a28:	18ed      	addgt	r5, r5, r3
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	341a      	adds	r4, #26
 8008a2e:	42b5      	cmp	r5, r6
 8008a30:	d11a      	bne.n	8008a68 <_printf_common+0xc8>
 8008a32:	2000      	movs	r0, #0
 8008a34:	e008      	b.n	8008a48 <_printf_common+0xa8>
 8008a36:	2301      	movs	r3, #1
 8008a38:	4652      	mov	r2, sl
 8008a3a:	4641      	mov	r1, r8
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	47c8      	blx	r9
 8008a40:	3001      	adds	r0, #1
 8008a42:	d103      	bne.n	8008a4c <_printf_common+0xac>
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	e7c6      	b.n	80089de <_printf_common+0x3e>
 8008a50:	18e1      	adds	r1, r4, r3
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	2030      	movs	r0, #48	@ 0x30
 8008a56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a5a:	4422      	add	r2, r4
 8008a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a64:	3302      	adds	r3, #2
 8008a66:	e7c7      	b.n	80089f8 <_printf_common+0x58>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	4641      	mov	r1, r8
 8008a6e:	4638      	mov	r0, r7
 8008a70:	47c8      	blx	r9
 8008a72:	3001      	adds	r0, #1
 8008a74:	d0e6      	beq.n	8008a44 <_printf_common+0xa4>
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7d9      	b.n	8008a2e <_printf_common+0x8e>
	...

08008a7c <_printf_i>:
 8008a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	7e0f      	ldrb	r7, [r1, #24]
 8008a82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a84:	2f78      	cmp	r7, #120	@ 0x78
 8008a86:	4691      	mov	r9, r2
 8008a88:	4680      	mov	r8, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	469a      	mov	sl, r3
 8008a8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a92:	d807      	bhi.n	8008aa4 <_printf_i+0x28>
 8008a94:	2f62      	cmp	r7, #98	@ 0x62
 8008a96:	d80a      	bhi.n	8008aae <_printf_i+0x32>
 8008a98:	2f00      	cmp	r7, #0
 8008a9a:	f000 80d2 	beq.w	8008c42 <_printf_i+0x1c6>
 8008a9e:	2f58      	cmp	r7, #88	@ 0x58
 8008aa0:	f000 80b9 	beq.w	8008c16 <_printf_i+0x19a>
 8008aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008aac:	e03a      	b.n	8008b24 <_printf_i+0xa8>
 8008aae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ab2:	2b15      	cmp	r3, #21
 8008ab4:	d8f6      	bhi.n	8008aa4 <_printf_i+0x28>
 8008ab6:	a101      	add	r1, pc, #4	@ (adr r1, 8008abc <_printf_i+0x40>)
 8008ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008abc:	08008b15 	.word	0x08008b15
 8008ac0:	08008b29 	.word	0x08008b29
 8008ac4:	08008aa5 	.word	0x08008aa5
 8008ac8:	08008aa5 	.word	0x08008aa5
 8008acc:	08008aa5 	.word	0x08008aa5
 8008ad0:	08008aa5 	.word	0x08008aa5
 8008ad4:	08008b29 	.word	0x08008b29
 8008ad8:	08008aa5 	.word	0x08008aa5
 8008adc:	08008aa5 	.word	0x08008aa5
 8008ae0:	08008aa5 	.word	0x08008aa5
 8008ae4:	08008aa5 	.word	0x08008aa5
 8008ae8:	08008c29 	.word	0x08008c29
 8008aec:	08008b53 	.word	0x08008b53
 8008af0:	08008be3 	.word	0x08008be3
 8008af4:	08008aa5 	.word	0x08008aa5
 8008af8:	08008aa5 	.word	0x08008aa5
 8008afc:	08008c4b 	.word	0x08008c4b
 8008b00:	08008aa5 	.word	0x08008aa5
 8008b04:	08008b53 	.word	0x08008b53
 8008b08:	08008aa5 	.word	0x08008aa5
 8008b0c:	08008aa5 	.word	0x08008aa5
 8008b10:	08008beb 	.word	0x08008beb
 8008b14:	6833      	ldr	r3, [r6, #0]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6032      	str	r2, [r6, #0]
 8008b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b24:	2301      	movs	r3, #1
 8008b26:	e09d      	b.n	8008c64 <_printf_i+0x1e8>
 8008b28:	6833      	ldr	r3, [r6, #0]
 8008b2a:	6820      	ldr	r0, [r4, #0]
 8008b2c:	1d19      	adds	r1, r3, #4
 8008b2e:	6031      	str	r1, [r6, #0]
 8008b30:	0606      	lsls	r6, r0, #24
 8008b32:	d501      	bpl.n	8008b38 <_printf_i+0xbc>
 8008b34:	681d      	ldr	r5, [r3, #0]
 8008b36:	e003      	b.n	8008b40 <_printf_i+0xc4>
 8008b38:	0645      	lsls	r5, r0, #25
 8008b3a:	d5fb      	bpl.n	8008b34 <_printf_i+0xb8>
 8008b3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	da03      	bge.n	8008b4c <_printf_i+0xd0>
 8008b44:	232d      	movs	r3, #45	@ 0x2d
 8008b46:	426d      	negs	r5, r5
 8008b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b4c:	4859      	ldr	r0, [pc, #356]	@ (8008cb4 <_printf_i+0x238>)
 8008b4e:	230a      	movs	r3, #10
 8008b50:	e011      	b.n	8008b76 <_printf_i+0xfa>
 8008b52:	6821      	ldr	r1, [r4, #0]
 8008b54:	6833      	ldr	r3, [r6, #0]
 8008b56:	0608      	lsls	r0, r1, #24
 8008b58:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b5c:	d402      	bmi.n	8008b64 <_printf_i+0xe8>
 8008b5e:	0649      	lsls	r1, r1, #25
 8008b60:	bf48      	it	mi
 8008b62:	b2ad      	uxthmi	r5, r5
 8008b64:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b66:	4853      	ldr	r0, [pc, #332]	@ (8008cb4 <_printf_i+0x238>)
 8008b68:	6033      	str	r3, [r6, #0]
 8008b6a:	bf14      	ite	ne
 8008b6c:	230a      	movne	r3, #10
 8008b6e:	2308      	moveq	r3, #8
 8008b70:	2100      	movs	r1, #0
 8008b72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b76:	6866      	ldr	r6, [r4, #4]
 8008b78:	60a6      	str	r6, [r4, #8]
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	bfa2      	ittt	ge
 8008b7e:	6821      	ldrge	r1, [r4, #0]
 8008b80:	f021 0104 	bicge.w	r1, r1, #4
 8008b84:	6021      	strge	r1, [r4, #0]
 8008b86:	b90d      	cbnz	r5, 8008b8c <_printf_i+0x110>
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	d04b      	beq.n	8008c24 <_printf_i+0x1a8>
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b92:	fb03 5711 	mls	r7, r3, r1, r5
 8008b96:	5dc7      	ldrb	r7, [r0, r7]
 8008b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b9c:	462f      	mov	r7, r5
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	d9f4      	bls.n	8008b8e <_printf_i+0x112>
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d10b      	bne.n	8008bc0 <_printf_i+0x144>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07df      	lsls	r7, r3, #31
 8008bac:	d508      	bpl.n	8008bc0 <_printf_i+0x144>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	bfde      	ittt	le
 8008bb6:	2330      	movle	r3, #48	@ 0x30
 8008bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bc0:	1b92      	subs	r2, r2, r6
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	f8cd a000 	str.w	sl, [sp]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fee6 	bl	80089a0 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14a      	bne.n	8008c6e <_printf_i+0x1f2>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b004      	add	sp, #16
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	f043 0320 	orr.w	r3, r3, #32
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	4833      	ldr	r0, [pc, #204]	@ (8008cb8 <_printf_i+0x23c>)
 8008bec:	2778      	movs	r7, #120	@ 0x78
 8008bee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	6831      	ldr	r1, [r6, #0]
 8008bf6:	061f      	lsls	r7, r3, #24
 8008bf8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bfc:	d402      	bmi.n	8008c04 <_printf_i+0x188>
 8008bfe:	065f      	lsls	r7, r3, #25
 8008c00:	bf48      	it	mi
 8008c02:	b2ad      	uxthmi	r5, r5
 8008c04:	6031      	str	r1, [r6, #0]
 8008c06:	07d9      	lsls	r1, r3, #31
 8008c08:	bf44      	itt	mi
 8008c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0e:	6023      	strmi	r3, [r4, #0]
 8008c10:	b11d      	cbz	r5, 8008c1a <_printf_i+0x19e>
 8008c12:	2310      	movs	r3, #16
 8008c14:	e7ac      	b.n	8008b70 <_printf_i+0xf4>
 8008c16:	4827      	ldr	r0, [pc, #156]	@ (8008cb4 <_printf_i+0x238>)
 8008c18:	e7e9      	b.n	8008bee <_printf_i+0x172>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	f023 0320 	bic.w	r3, r3, #32
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	e7f6      	b.n	8008c12 <_printf_i+0x196>
 8008c24:	4616      	mov	r6, r2
 8008c26:	e7bd      	b.n	8008ba4 <_printf_i+0x128>
 8008c28:	6833      	ldr	r3, [r6, #0]
 8008c2a:	6825      	ldr	r5, [r4, #0]
 8008c2c:	6961      	ldr	r1, [r4, #20]
 8008c2e:	1d18      	adds	r0, r3, #4
 8008c30:	6030      	str	r0, [r6, #0]
 8008c32:	062e      	lsls	r6, r5, #24
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	d501      	bpl.n	8008c3c <_printf_i+0x1c0>
 8008c38:	6019      	str	r1, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <_printf_i+0x1c6>
 8008c3c:	0668      	lsls	r0, r5, #25
 8008c3e:	d5fb      	bpl.n	8008c38 <_printf_i+0x1bc>
 8008c40:	8019      	strh	r1, [r3, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	6123      	str	r3, [r4, #16]
 8008c46:	4616      	mov	r6, r2
 8008c48:	e7bc      	b.n	8008bc4 <_printf_i+0x148>
 8008c4a:	6833      	ldr	r3, [r6, #0]
 8008c4c:	1d1a      	adds	r2, r3, #4
 8008c4e:	6032      	str	r2, [r6, #0]
 8008c50:	681e      	ldr	r6, [r3, #0]
 8008c52:	6862      	ldr	r2, [r4, #4]
 8008c54:	2100      	movs	r1, #0
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7f7 faea 	bl	8000230 <memchr>
 8008c5c:	b108      	cbz	r0, 8008c62 <_printf_i+0x1e6>
 8008c5e:	1b80      	subs	r0, r0, r6
 8008c60:	6060      	str	r0, [r4, #4]
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	2300      	movs	r3, #0
 8008c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c6c:	e7aa      	b.n	8008bc4 <_printf_i+0x148>
 8008c6e:	6923      	ldr	r3, [r4, #16]
 8008c70:	4632      	mov	r2, r6
 8008c72:	4649      	mov	r1, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	47d0      	blx	sl
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d0ad      	beq.n	8008bd8 <_printf_i+0x15c>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	079b      	lsls	r3, r3, #30
 8008c80:	d413      	bmi.n	8008caa <_printf_i+0x22e>
 8008c82:	68e0      	ldr	r0, [r4, #12]
 8008c84:	9b03      	ldr	r3, [sp, #12]
 8008c86:	4298      	cmp	r0, r3
 8008c88:	bfb8      	it	lt
 8008c8a:	4618      	movlt	r0, r3
 8008c8c:	e7a6      	b.n	8008bdc <_printf_i+0x160>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4632      	mov	r2, r6
 8008c92:	4649      	mov	r1, r9
 8008c94:	4640      	mov	r0, r8
 8008c96:	47d0      	blx	sl
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d09d      	beq.n	8008bd8 <_printf_i+0x15c>
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	9903      	ldr	r1, [sp, #12]
 8008ca2:	1a5b      	subs	r3, r3, r1
 8008ca4:	42ab      	cmp	r3, r5
 8008ca6:	dcf2      	bgt.n	8008c8e <_printf_i+0x212>
 8008ca8:	e7eb      	b.n	8008c82 <_printf_i+0x206>
 8008caa:	2500      	movs	r5, #0
 8008cac:	f104 0619 	add.w	r6, r4, #25
 8008cb0:	e7f5      	b.n	8008c9e <_printf_i+0x222>
 8008cb2:	bf00      	nop
 8008cb4:	08009115 	.word	0x08009115
 8008cb8:	08009126 	.word	0x08009126

08008cbc <__sflush_r>:
 8008cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	0716      	lsls	r6, r2, #28
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	460c      	mov	r4, r1
 8008cca:	d454      	bmi.n	8008d76 <__sflush_r+0xba>
 8008ccc:	684b      	ldr	r3, [r1, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dc02      	bgt.n	8008cd8 <__sflush_r+0x1c>
 8008cd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd48      	ble.n	8008d6a <__sflush_r+0xae>
 8008cd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cda:	2e00      	cmp	r6, #0
 8008cdc:	d045      	beq.n	8008d6a <__sflush_r+0xae>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ce4:	682f      	ldr	r7, [r5, #0]
 8008ce6:	6a21      	ldr	r1, [r4, #32]
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	d030      	beq.n	8008d4e <__sflush_r+0x92>
 8008cec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	0759      	lsls	r1, r3, #29
 8008cf2:	d505      	bpl.n	8008d00 <__sflush_r+0x44>
 8008cf4:	6863      	ldr	r3, [r4, #4]
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cfa:	b10b      	cbz	r3, 8008d00 <__sflush_r+0x44>
 8008cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	2300      	movs	r3, #0
 8008d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d04:	6a21      	ldr	r1, [r4, #32]
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b0      	blx	r6
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	d106      	bne.n	8008d1e <__sflush_r+0x62>
 8008d10:	6829      	ldr	r1, [r5, #0]
 8008d12:	291d      	cmp	r1, #29
 8008d14:	d82b      	bhi.n	8008d6e <__sflush_r+0xb2>
 8008d16:	4a2a      	ldr	r2, [pc, #168]	@ (8008dc0 <__sflush_r+0x104>)
 8008d18:	410a      	asrs	r2, r1
 8008d1a:	07d6      	lsls	r6, r2, #31
 8008d1c:	d427      	bmi.n	8008d6e <__sflush_r+0xb2>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6062      	str	r2, [r4, #4]
 8008d22:	04d9      	lsls	r1, r3, #19
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	d504      	bpl.n	8008d34 <__sflush_r+0x78>
 8008d2a:	1c42      	adds	r2, r0, #1
 8008d2c:	d101      	bne.n	8008d32 <__sflush_r+0x76>
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	b903      	cbnz	r3, 8008d34 <__sflush_r+0x78>
 8008d32:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d36:	602f      	str	r7, [r5, #0]
 8008d38:	b1b9      	cbz	r1, 8008d6a <__sflush_r+0xae>
 8008d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d002      	beq.n	8008d48 <__sflush_r+0x8c>
 8008d42:	4628      	mov	r0, r5
 8008d44:	f7ff fbdc 	bl	8008500 <_free_r>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d4c:	e00d      	b.n	8008d6a <__sflush_r+0xae>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b0      	blx	r6
 8008d54:	4602      	mov	r2, r0
 8008d56:	1c50      	adds	r0, r2, #1
 8008d58:	d1c9      	bne.n	8008cee <__sflush_r+0x32>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0c6      	beq.n	8008cee <__sflush_r+0x32>
 8008d60:	2b1d      	cmp	r3, #29
 8008d62:	d001      	beq.n	8008d68 <__sflush_r+0xac>
 8008d64:	2b16      	cmp	r3, #22
 8008d66:	d11e      	bne.n	8008da6 <__sflush_r+0xea>
 8008d68:	602f      	str	r7, [r5, #0]
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e022      	b.n	8008db4 <__sflush_r+0xf8>
 8008d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d72:	b21b      	sxth	r3, r3
 8008d74:	e01b      	b.n	8008dae <__sflush_r+0xf2>
 8008d76:	690f      	ldr	r7, [r1, #16]
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	d0f6      	beq.n	8008d6a <__sflush_r+0xae>
 8008d7c:	0793      	lsls	r3, r2, #30
 8008d7e:	680e      	ldr	r6, [r1, #0]
 8008d80:	bf08      	it	eq
 8008d82:	694b      	ldreq	r3, [r1, #20]
 8008d84:	600f      	str	r7, [r1, #0]
 8008d86:	bf18      	it	ne
 8008d88:	2300      	movne	r3, #0
 8008d8a:	eba6 0807 	sub.w	r8, r6, r7
 8008d8e:	608b      	str	r3, [r1, #8]
 8008d90:	f1b8 0f00 	cmp.w	r8, #0
 8008d94:	dde9      	ble.n	8008d6a <__sflush_r+0xae>
 8008d96:	6a21      	ldr	r1, [r4, #32]
 8008d98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d9a:	4643      	mov	r3, r8
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	4628      	mov	r0, r5
 8008da0:	47b0      	blx	r6
 8008da2:	2800      	cmp	r0, #0
 8008da4:	dc08      	bgt.n	8008db8 <__sflush_r+0xfc>
 8008da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	4407      	add	r7, r0
 8008dba:	eba8 0800 	sub.w	r8, r8, r0
 8008dbe:	e7e7      	b.n	8008d90 <__sflush_r+0xd4>
 8008dc0:	dfbffffe 	.word	0xdfbffffe

08008dc4 <_fflush_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	690b      	ldr	r3, [r1, #16]
 8008dc8:	4605      	mov	r5, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	b913      	cbnz	r3, 8008dd4 <_fflush_r+0x10>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	b118      	cbz	r0, 8008dde <_fflush_r+0x1a>
 8008dd6:	6a03      	ldr	r3, [r0, #32]
 8008dd8:	b90b      	cbnz	r3, 8008dde <_fflush_r+0x1a>
 8008dda:	f7ff f989 	bl	80080f0 <__sinit>
 8008dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0f3      	beq.n	8008dce <_fflush_r+0xa>
 8008de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008de8:	07d0      	lsls	r0, r2, #31
 8008dea:	d404      	bmi.n	8008df6 <_fflush_r+0x32>
 8008dec:	0599      	lsls	r1, r3, #22
 8008dee:	d402      	bmi.n	8008df6 <_fflush_r+0x32>
 8008df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008df2:	f7ff fb82 	bl	80084fa <__retarget_lock_acquire_recursive>
 8008df6:	4628      	mov	r0, r5
 8008df8:	4621      	mov	r1, r4
 8008dfa:	f7ff ff5f 	bl	8008cbc <__sflush_r>
 8008dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e00:	07da      	lsls	r2, r3, #31
 8008e02:	4605      	mov	r5, r0
 8008e04:	d4e4      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	059b      	lsls	r3, r3, #22
 8008e0a:	d4e1      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e0e:	f7ff fb75 	bl	80084fc <__retarget_lock_release_recursive>
 8008e12:	e7dd      	b.n	8008dd0 <_fflush_r+0xc>

08008e14 <__swhatbuf_r>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	460c      	mov	r4, r1
 8008e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	b096      	sub	sp, #88	@ 0x58
 8008e20:	4615      	mov	r5, r2
 8008e22:	461e      	mov	r6, r3
 8008e24:	da0d      	bge.n	8008e42 <__swhatbuf_r+0x2e>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e2c:	f04f 0100 	mov.w	r1, #0
 8008e30:	bf14      	ite	ne
 8008e32:	2340      	movne	r3, #64	@ 0x40
 8008e34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e38:	2000      	movs	r0, #0
 8008e3a:	6031      	str	r1, [r6, #0]
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	b016      	add	sp, #88	@ 0x58
 8008e40:	bd70      	pop	{r4, r5, r6, pc}
 8008e42:	466a      	mov	r2, sp
 8008e44:	f000 f862 	bl	8008f0c <_fstat_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	dbec      	blt.n	8008e26 <__swhatbuf_r+0x12>
 8008e4c:	9901      	ldr	r1, [sp, #4]
 8008e4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e56:	4259      	negs	r1, r3
 8008e58:	4159      	adcs	r1, r3
 8008e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e5e:	e7eb      	b.n	8008e38 <__swhatbuf_r+0x24>

08008e60 <__smakebuf_r>:
 8008e60:	898b      	ldrh	r3, [r1, #12]
 8008e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e64:	079d      	lsls	r5, r3, #30
 8008e66:	4606      	mov	r6, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	d507      	bpl.n	8008e7c <__smakebuf_r+0x1c>
 8008e6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	6123      	str	r3, [r4, #16]
 8008e74:	2301      	movs	r3, #1
 8008e76:	6163      	str	r3, [r4, #20]
 8008e78:	b003      	add	sp, #12
 8008e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e7c:	ab01      	add	r3, sp, #4
 8008e7e:	466a      	mov	r2, sp
 8008e80:	f7ff ffc8 	bl	8008e14 <__swhatbuf_r>
 8008e84:	9f00      	ldr	r7, [sp, #0]
 8008e86:	4605      	mov	r5, r0
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff fba4 	bl	80085d8 <_malloc_r>
 8008e90:	b948      	cbnz	r0, 8008ea6 <__smakebuf_r+0x46>
 8008e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e96:	059a      	lsls	r2, r3, #22
 8008e98:	d4ee      	bmi.n	8008e78 <__smakebuf_r+0x18>
 8008e9a:	f023 0303 	bic.w	r3, r3, #3
 8008e9e:	f043 0302 	orr.w	r3, r3, #2
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	e7e2      	b.n	8008e6c <__smakebuf_r+0xc>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	6020      	str	r0, [r4, #0]
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	9b01      	ldr	r3, [sp, #4]
 8008eb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008eb6:	b15b      	cbz	r3, 8008ed0 <__smakebuf_r+0x70>
 8008eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f000 f837 	bl	8008f30 <_isatty_r>
 8008ec2:	b128      	cbz	r0, 8008ed0 <__smakebuf_r+0x70>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	431d      	orrs	r5, r3
 8008ed4:	81a5      	strh	r5, [r4, #12]
 8008ed6:	e7cf      	b.n	8008e78 <__smakebuf_r+0x18>

08008ed8 <memmove>:
 8008ed8:	4288      	cmp	r0, r1
 8008eda:	b510      	push	{r4, lr}
 8008edc:	eb01 0402 	add.w	r4, r1, r2
 8008ee0:	d902      	bls.n	8008ee8 <memmove+0x10>
 8008ee2:	4284      	cmp	r4, r0
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	d807      	bhi.n	8008ef8 <memmove+0x20>
 8008ee8:	1e43      	subs	r3, r0, #1
 8008eea:	42a1      	cmp	r1, r4
 8008eec:	d008      	beq.n	8008f00 <memmove+0x28>
 8008eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ef6:	e7f8      	b.n	8008eea <memmove+0x12>
 8008ef8:	4402      	add	r2, r0
 8008efa:	4601      	mov	r1, r0
 8008efc:	428a      	cmp	r2, r1
 8008efe:	d100      	bne.n	8008f02 <memmove+0x2a>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f0a:	e7f7      	b.n	8008efc <memmove+0x24>

08008f0c <_fstat_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d07      	ldr	r5, [pc, #28]	@ (8008f2c <_fstat_r+0x20>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	602b      	str	r3, [r5, #0]
 8008f1a:	f7f7 fbe0 	bl	80006de <_fstat>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d102      	bne.n	8008f28 <_fstat_r+0x1c>
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	b103      	cbz	r3, 8008f28 <_fstat_r+0x1c>
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	bd38      	pop	{r3, r4, r5, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20001f34 	.word	0x20001f34

08008f30 <_isatty_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d06      	ldr	r5, [pc, #24]	@ (8008f4c <_isatty_r+0x1c>)
 8008f34:	2300      	movs	r3, #0
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	f7f7 fbdf 	bl	80006fe <_isatty>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_isatty_r+0x1a>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_isatty_r+0x1a>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	20001f34 	.word	0x20001f34

08008f50 <_sbrk_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d06      	ldr	r5, [pc, #24]	@ (8008f6c <_sbrk_r+0x1c>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f7 fbe8 	bl	8000730 <_sbrk>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_sbrk_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_sbrk_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	20001f34 	.word	0x20001f34

08008f70 <memcpy>:
 8008f70:	440a      	add	r2, r1
 8008f72:	4291      	cmp	r1, r2
 8008f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f78:	d100      	bne.n	8008f7c <memcpy+0xc>
 8008f7a:	4770      	bx	lr
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f86:	4291      	cmp	r1, r2
 8008f88:	d1f9      	bne.n	8008f7e <memcpy+0xe>
 8008f8a:	bd10      	pop	{r4, pc}

08008f8c <_realloc_r>:
 8008f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4680      	mov	r8, r0
 8008f92:	4615      	mov	r5, r2
 8008f94:	460c      	mov	r4, r1
 8008f96:	b921      	cbnz	r1, 8008fa2 <_realloc_r+0x16>
 8008f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	f7ff bb1b 	b.w	80085d8 <_malloc_r>
 8008fa2:	b92a      	cbnz	r2, 8008fb0 <_realloc_r+0x24>
 8008fa4:	f7ff faac 	bl	8008500 <_free_r>
 8008fa8:	2400      	movs	r4, #0
 8008faa:	4620      	mov	r0, r4
 8008fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb0:	f000 f81a 	bl	8008fe8 <_malloc_usable_size_r>
 8008fb4:	4285      	cmp	r5, r0
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	d802      	bhi.n	8008fc0 <_realloc_r+0x34>
 8008fba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fbe:	d8f4      	bhi.n	8008faa <_realloc_r+0x1e>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f7ff fb08 	bl	80085d8 <_malloc_r>
 8008fc8:	4607      	mov	r7, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d0ec      	beq.n	8008fa8 <_realloc_r+0x1c>
 8008fce:	42b5      	cmp	r5, r6
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	bf28      	it	cs
 8008fd6:	4632      	movcs	r2, r6
 8008fd8:	f7ff ffca 	bl	8008f70 <memcpy>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4640      	mov	r0, r8
 8008fe0:	f7ff fa8e 	bl	8008500 <_free_r>
 8008fe4:	463c      	mov	r4, r7
 8008fe6:	e7e0      	b.n	8008faa <_realloc_r+0x1e>

08008fe8 <_malloc_usable_size_r>:
 8008fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fec:	1f18      	subs	r0, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfbc      	itt	lt
 8008ff2:	580b      	ldrlt	r3, [r1, r0]
 8008ff4:	18c0      	addlt	r0, r0, r3
 8008ff6:	4770      	bx	lr

08008ff8 <_init>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	bf00      	nop
 8008ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffe:	bc08      	pop	{r3}
 8009000:	469e      	mov	lr, r3
 8009002:	4770      	bx	lr

08009004 <_fini>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	bf00      	nop
 8009008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900a:	bc08      	pop	{r3}
 800900c:	469e      	mov	lr, r3
 800900e:	4770      	bx	lr

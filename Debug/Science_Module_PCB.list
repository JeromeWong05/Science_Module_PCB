
Science_Module_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac84  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800ae44  0800ae44  0000be44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0e4  0800b0e4  0000d168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0e4  0800b0e4  0000c0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0ec  0800b0ec  0000d168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0ec  0800b0ec  0000c0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0f0  0800b0f0  0000c0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800b0f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e54  20000168  0800b25c  0000d168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fbc  0800b25c  0000dfbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c2c  00000000  00000000  0000d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399f  00000000  00000000  00023dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00027768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe5  00000000  00000000  00028c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f056  00000000  00000000  00029c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001910b  00000000  00000000  00058c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110b91  00000000  00000000  00071d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a4  00000000  00000000  0018296c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00188d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000168 	.word	0x20000168
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ae2c 	.word	0x0800ae2c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000016c 	.word	0x2000016c
 80001fc:	0800ae2c 	.word	0x0800ae2c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	@ 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2uiz>:
 800089c:	004a      	lsls	r2, r1, #1
 800089e:	d211      	bcs.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008a4:	d211      	bcs.n	80008ca <__aeabi_d2uiz+0x2e>
 80008a6:	d50d      	bpl.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b0:	d40e      	bmi.n	80008d0 <__aeabi_d2uiz+0x34>
 80008b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008be:	fa23 f002 	lsr.w	r0, r3, r2
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ce:	d102      	bne.n	80008d6 <__aeabi_d2uiz+0x3a>
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	4770      	bx	lr
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	4770      	bx	lr

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fccb 	bl	800127a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f846 	bl	8000974 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f8c8 	bl	8000a7c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008ec:	f007 fc90 	bl	8008210 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80008f0:	f000 f88e 	bl	8000a10 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  DWT_DelayInit();
 80008f4:	f000 f9d0 	bl	8000c98 <DWT_DelayInit>
  HAL_Delay(1000);
 80008f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008fc:	f000 fd32 	bl	8001364 <HAL_Delay>
  printf("> ");
 8000900:	4815      	ldr	r0, [pc, #84]	@ (8000958 <main+0x7c>)
 8000902:	f008 fd4b 	bl	800939c <iprintf>

  // begin timer6 ISR
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <main+0x80>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f06f 0201 	mvn.w	r2, #1
 800090e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8000910:	4812      	ldr	r0, [pc, #72]	@ (800095c <main+0x80>)
 8000912:	f003 ff2b 	bl	800476c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // too lazy so just set the LED flags to turn on and off 
    Update_LED();
 8000916:	f000 f965 	bl	8000be4 <Update_LED>
    CheckPumps();
 800091a:	f000 f9f9 	bl	8000d10 <CheckPumps>

    if (Timer6_flag)
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <main+0x84>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f7      	beq.n	8000916 <main+0x3a>
    {
      tim6_val = Get_timer6_us();
 8000926:	f000 f989 	bl	8000c3c <Get_timer6_us>
 800092a:	4603      	mov	r3, r0
 800092c:	4a0d      	ldr	r2, [pc, #52]	@ (8000964 <main+0x88>)
 800092e:	6013      	str	r3, [r2, #0]
      while(Get_timer6_us() - tim6_val < 10e6);
 8000930:	bf00      	nop
 8000932:	f000 f983 	bl	8000c3c <Get_timer6_us>
 8000936:	4602      	mov	r2, r0
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <main+0x88>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <main+0x8c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d3f6      	bcc.n	8000932 <main+0x56>
      printf("10 seconds reached\r\n");
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <main+0x90>)
 8000946:	f008 fd91 	bl	800946c <puts>
      LED2 = 1; 
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <main+0x94>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
      Timer6_flag = 0; 
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <main+0x84>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
    Update_LED();
 8000956:	e7de      	b.n	8000916 <main+0x3a>
 8000958:	0800ae44 	.word	0x0800ae44
 800095c:	20000184 	.word	0x20000184
 8000960:	200001d2 	.word	0x200001d2
 8000964:	200001d4 	.word	0x200001d4
 8000968:	00989680 	.word	0x00989680
 800096c:	0800ae48 	.word	0x0800ae48
 8000970:	200001d1 	.word	0x200001d1

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b098      	sub	sp, #96	@ 0x60
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0318 	add.w	r3, r7, #24
 800097e:	2248      	movs	r2, #72	@ 0x48
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f008 fe9e 	bl	80096c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000996:	2000      	movs	r0, #0
 8000998:	f002 f97a 	bl	8002c90 <HAL_PWREx_ControlVoltageScaling>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80009a2:	f000 fb13 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b4:	2303      	movs	r3, #3
 80009b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 80009bc:	231e      	movs	r3, #30
 80009be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fa11 	bl	8002df8 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009dc:	f000 faf6 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e0:	230f      	movs	r3, #15
 80009e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2303      	movs	r3, #3
 80009e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2105      	movs	r1, #5
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fe79 	bl	80036f0 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a04:	f000 fae2 	bl	8000fcc <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3760      	adds	r7, #96	@ 0x60
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_TIM6_Init+0x64>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <MX_TIM6_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_TIM6_Init+0x64>)
 8000a28:	2277      	movs	r2, #119	@ 0x77
 8000a2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_TIM6_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_TIM6_Init+0x64>)
 8000a34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_TIM6_Init+0x64>)
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <MX_TIM6_Init+0x64>)
 8000a42:	f003 fe3b 	bl	80046bc <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a4c:	f000 fabe 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_TIM6_Init+0x64>)
 8000a5e:	f004 f8cb 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 fab0 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000184 	.word	0x20000184
 8000a78:	40001000 	.word	0x40001000

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b48      	ldr	r3, [pc, #288]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4a47      	ldr	r2, [pc, #284]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4b45      	ldr	r3, [pc, #276]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4b42      	ldr	r3, [pc, #264]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a41      	ldr	r2, [pc, #260]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a35      	ldr	r2, [pc, #212]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b33      	ldr	r3, [pc, #204]	@ (8000bb4 <MX_GPIO_Init+0x138>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VAL3_Pin|VAL2_Pin|VAL1_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000af8:	482f      	ldr	r0, [pc, #188]	@ (8000bb8 <MX_GPIO_Init+0x13c>)
 8000afa:	f000 fefb 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SM_EN_Pin|SM_DIR_Pin|SM_PUL_Pin|AM_EN_Pin
 8000afe:	2200      	movs	r2, #0
 8000b00:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b08:	f000 fef4 	bl	80018f4 <HAL_GPIO_WritePin>
                          |VM_EN_Pin|P1_LS_RL_Pin|P1_LS_LR_Pin|P1_HS_LR_Pin
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_HS_RL_Pin|P2_HS_RL_Pin|P2_HS_LR_Pin|P2_LS_RL_Pin
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f64f 017f 	movw	r1, #63615	@ 0xf87f
 8000b12:	482a      	ldr	r0, [pc, #168]	@ (8000bbc <MX_GPIO_Init+0x140>)
 8000b14:	f000 feee 	bl	80018f4 <HAL_GPIO_WritePin>
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|VAL6_Pin|VAL5_Pin|VAL4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VAL3_Pin VAL2_Pin VAL1_Pin */
  GPIO_InitStruct.Pin = VAL3_Pin|VAL2_Pin|VAL1_Pin;
 8000b18:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4821      	ldr	r0, [pc, #132]	@ (8000bb8 <MX_GPIO_Init+0x13c>)
 8000b32:	f000 fd4d 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM_EN_Pin SM_DIR_Pin SM_PUL_Pin AM_EN_Pin
                           VM_EN_Pin P1_LS_RL_Pin P1_LS_LR_Pin P1_HS_LR_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = SM_EN_Pin|SM_DIR_Pin|SM_PUL_Pin|AM_EN_Pin
 8000b36:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000b3a:	617b      	str	r3, [r7, #20]
                          |VM_EN_Pin|P1_LS_RL_Pin|P1_LS_LR_Pin|P1_HS_LR_Pin
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f000 fd3d 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_HS_RL_Pin P2_HS_RL_Pin P2_HS_LR_Pin P2_LS_RL_Pin
                           P3_LS_RL_Pin P3_LS_LR_Pin P3_HS_LR_Pin P3_HS_RL_Pin
                           LED2_Pin VAL6_Pin VAL5_Pin VAL4_Pin */
  GPIO_InitStruct.Pin = P1_HS_RL_Pin|P2_HS_RL_Pin|P2_HS_LR_Pin|P2_LS_RL_Pin
 8000b56:	f64f 037f 	movw	r3, #63615	@ 0xf87f
 8000b5a:	617b      	str	r3, [r7, #20]
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|VAL6_Pin|VAL5_Pin|VAL4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4813      	ldr	r0, [pc, #76]	@ (8000bbc <MX_GPIO_Init+0x140>)
 8000b70:	f000 fd2e 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : P2_LS_LR_Pin */
  GPIO_InitStruct.Pin = P2_LS_LR_Pin;
 8000b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(P2_LS_LR_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <MX_GPIO_Init+0x140>)
 8000b8c:	f000 fd20 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLOW3_Pin FLOW2_Pin FLOW1_Pin */
  GPIO_InitStruct.Pin = FLOW3_Pin|FLOW2_Pin|FLOW1_Pin;
 8000b90:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_GPIO_Init+0x140>)
 8000ba6:	f000 fd13 	bl	80015d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) 
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	68b8      	ldr	r0, [r7, #8]
 8000bd4:	f007 fd82 	bl	80086dc <CDC_Transmit_FS>
  return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <Update_LED>:

void Update_LED(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  if (LED1) HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <Update_LED+0x4c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d007      	beq.n	8000c00 <Update_LED+0x1c>
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfa:	f000 fe7b 	bl	80018f4 <HAL_GPIO_WritePin>
 8000bfe:	e006      	b.n	8000c0e <Update_LED+0x2a>
  else HAL_GPIO_WritePin(GPIOA, LED1_Pin, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0a:	f000 fe73 	bl	80018f4 <HAL_GPIO_WritePin>
  if (LED2) HAL_GPIO_WritePin(GPIOB, LED2_Pin, 1);
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <Update_LED+0x50>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <Update_LED+0x3e>
 8000c16:	2201      	movs	r2, #1
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <Update_LED+0x54>)
 8000c1c:	f000 fe6a 	bl	80018f4 <HAL_GPIO_WritePin>
  else HAL_GPIO_WritePin(GPIOB, LED2_Pin, 0);
}
 8000c20:	e004      	b.n	8000c2c <Update_LED+0x48>
  else HAL_GPIO_WritePin(GPIOB, LED2_Pin, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2108      	movs	r1, #8
 8000c26:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <Update_LED+0x54>)
 8000c28:	f000 fe64 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200001d0 	.word	0x200001d0
 8000c34:	200001d1 	.word	0x200001d1
 8000c38:	48000400 	.word	0x48000400

08000c3c <Get_timer6_us>:

uint32_t Get_timer6_us(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  int temp = __HAL_TIM_GET_COUNTER(&htim6);
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <Get_timer6_us+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c48:	607b      	str	r3, [r7, #4]
  return tim6_overflow * 65536 + temp;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <Get_timer6_us+0x28>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	041a      	lsls	r2, r3, #16
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4413      	add	r3, r2
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	20000184 	.word	0x20000184
 8000c64:	200001d8 	.word	0x200001d8

08000c68 <HAL_TIM_PeriodElapsedCallback>:

// INTERRUPT CALLBACKS
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) //check if timer6 IT flag
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d104      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    tim6_overflow++;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c80:	6013      	str	r3, [r2, #0]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000184 	.word	0x20000184
 8000c94:	200001d8 	.word	0x200001d8

08000c98 <DWT_DelayInit>:

static void DWT_DelayInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <DWT_DelayInit+0x28>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <DWT_DelayInit+0x28>)
 8000ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ca6:	60d3      	str	r3, [r2, #12]
    DWT->CTRL         |= DWT_CTRL_CYCCNTENA_Msk;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <DWT_DelayInit+0x2c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <DWT_DelayInit+0x2c>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000edf0 	.word	0xe000edf0
 8000cc4:	e0001000 	.word	0xe0001000

08000cc8 <Delay_us>:

// Delay in microseconds
static inline void Delay_us(uint32_t us)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <Delay_us+0x40>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (HAL_RCC_GetHCLKFreq()/1000000);
 8000cd6:	f002 fed1 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <Delay_us+0x44>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9a      	lsrs	r2, r3, #18
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000cec:	bf00      	nop
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Delay_us+0x40>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f8      	bhi.n	8000cee <Delay_us+0x26>
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e0001000 	.word	0xe0001000
 8000d0c:	431bde83 	.word	0x431bde83

08000d10 <CheckPumps>:

void CheckPumps(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  if (pump1.status)
 8000d14:	4b3f      	ldr	r3, [pc, #252]	@ (8000e14 <CheckPumps+0x104>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d025      	beq.n	8000d68 <CheckPumps+0x58>
  {
    if (Get_timer6_us() - pump1.start_us < pump1.duration_us)
 8000d1c:	f7ff ff8e 	bl	8000c3c <Get_timer6_us>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b3c      	ldr	r3, [pc, #240]	@ (8000e14 <CheckPumps+0x104>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <CheckPumps+0x104>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d206      	bcs.n	8000d3e <CheckPumps+0x2e>
    {
      PumpCtrl(3);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f87f 	bl	8000e34 <PumpCtrl>
      LED1 = 1; 
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <CheckPumps+0x108>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e014      	b.n	8000d68 <CheckPumps+0x58>
    }
    else 
    {
      LED1 = 0; 
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <CheckPumps+0x108>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
      LED2 = 1; 
 8000d44:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <CheckPumps+0x10c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
      pump1.status = 0; 
 8000d4a:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <CheckPumps+0x104>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
      pump1.start_us = 0; 
 8000d50:	4b30      	ldr	r3, [pc, #192]	@ (8000e14 <CheckPumps+0x104>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
      pump1.duration_us = 0; 
 8000d56:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <CheckPumps+0x104>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
      Pumpoff(3);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f8d7 	bl	8000f10 <Pumpoff>
      printf("Pump 1 done!\r\n");
 8000d62:	482f      	ldr	r0, [pc, #188]	@ (8000e20 <CheckPumps+0x110>)
 8000d64:	f008 fb82 	bl	800946c <puts>
    }
  }

  if (pump2.status)
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <CheckPumps+0x114>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d025      	beq.n	8000dbc <CheckPumps+0xac>
  {
    if (Get_timer6_us() - pump2.start_us < pump2.duration_us)
 8000d70:	f7ff ff64 	bl	8000c3c <Get_timer6_us>
 8000d74:	4602      	mov	r2, r0
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <CheckPumps+0x114>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	1ad2      	subs	r2, r2, r3
 8000d7c:	4b29      	ldr	r3, [pc, #164]	@ (8000e24 <CheckPumps+0x114>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d206      	bcs.n	8000d92 <CheckPumps+0x82>
    {
      PumpCtrl(3);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f855 	bl	8000e34 <PumpCtrl>
      LED1 = 1; 
 8000d8a:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <CheckPumps+0x108>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e014      	b.n	8000dbc <CheckPumps+0xac>
    }
    else 
    {
      LED1 = 0; 
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <CheckPumps+0x108>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
      LED2 = 1; 
 8000d98:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <CheckPumps+0x10c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
      pump2.status = 0; 
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <CheckPumps+0x114>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
      pump2.start_us = 0; 
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <CheckPumps+0x114>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
      pump2.duration_us = 0; 
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <CheckPumps+0x114>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
      Pumpoff(3);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f8ad 	bl	8000f10 <Pumpoff>
      printf("Pump 2 done!\r\n");
 8000db6:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <CheckPumps+0x118>)
 8000db8:	f008 fb58 	bl	800946c <puts>
    }
  }
  
  if (pump3.status)
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <CheckPumps+0x11c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d025      	beq.n	8000e10 <CheckPumps+0x100>
  {
    if (Get_timer6_us() - pump3.start_us < pump3.duration_us)
 8000dc4:	f7ff ff3a 	bl	8000c3c <Get_timer6_us>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <CheckPumps+0x11c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	1ad2      	subs	r2, r2, r3
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <CheckPumps+0x11c>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d206      	bcs.n	8000de6 <CheckPumps+0xd6>
    {
      PumpCtrl(3);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f82b 	bl	8000e34 <PumpCtrl>
      LED1 = 1; 
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <CheckPumps+0x108>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
      pump3.duration_us = 0; 
      Pumpoff(3);
      printf("Pump 3 done!\r\n");
    }
  }
}
 8000de4:	e014      	b.n	8000e10 <CheckPumps+0x100>
      LED1 = 0; 
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <CheckPumps+0x108>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
      LED2 = 1; 
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <CheckPumps+0x10c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
      pump3.status = 0; 
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <CheckPumps+0x11c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
      pump3.start_us = 0; 
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <CheckPumps+0x11c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
      pump3.duration_us = 0; 
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <CheckPumps+0x11c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
      Pumpoff(3);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f883 	bl	8000f10 <Pumpoff>
      printf("Pump 3 done!\r\n");
 8000e0a:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <CheckPumps+0x120>)
 8000e0c:	f008 fb2e 	bl	800946c <puts>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200001dc 	.word	0x200001dc
 8000e18:	200001d0 	.word	0x200001d0
 8000e1c:	200001d1 	.word	0x200001d1
 8000e20:	0800ae5c 	.word	0x0800ae5c
 8000e24:	200001e8 	.word	0x200001e8
 8000e28:	0800ae6c 	.word	0x0800ae6c
 8000e2c:	200001f4 	.word	0x200001f4
 8000e30:	0800ae7c 	.word	0x0800ae7c

08000e34 <PumpCtrl>:

void PumpCtrl(uint8_t pumpnum)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  switch(pumpnum)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d005      	beq.n	8000e50 <PumpCtrl+0x1c>
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	dc31      	bgt.n	8000eac <PumpCtrl+0x78>
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d02e      	beq.n	8000eaa <PumpCtrl+0x76>
 8000e4c:	2b02      	cmp	r3, #2
      //pump 1 
      break; 

    case 2: 
      //pump 2
      break; 
 8000e4e:	e02d      	b.n	8000eac <PumpCtrl+0x78>

    case 3: 
      // Precharging bootstrap capacitor 
      Pumpoff(3);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f85d 	bl	8000f10 <Pumpoff>
      BootstrapCharge(3,pump3.dir); 
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <PumpCtrl+0x80>)
 8000e58:	785b      	ldrb	r3, [r3, #1]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f82d 	bl	8000ebc <BootstrapCharge>
      Delay_us(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff ff30 	bl	8000cc8 <Delay_us>
      Pumpoff(3);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f851 	bl	8000f10 <Pumpoff>

      if (pump3.dir) // 1 is LR
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <PumpCtrl+0x80>)
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00c      	beq.n	8000e90 <PumpCtrl+0x5c>
      {
        HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 1);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7c:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <PumpCtrl+0x84>)
 8000e7e:	f000 fd39 	bl	80018f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e88:	480b      	ldr	r0, [pc, #44]	@ (8000eb8 <PumpCtrl+0x84>)
 8000e8a:	f000 fd33 	bl	80018f4 <HAL_GPIO_WritePin>
      else 
      {
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 1);
      }
      break; 
 8000e8e:	e00d      	b.n	8000eac <PumpCtrl+0x78>
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e96:	4808      	ldr	r0, [pc, #32]	@ (8000eb8 <PumpCtrl+0x84>)
 8000e98:	f000 fd2c 	bl	80018f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <PumpCtrl+0x84>)
 8000ea4:	f000 fd26 	bl	80018f4 <HAL_GPIO_WritePin>
      break; 
 8000ea8:	e000      	b.n	8000eac <PumpCtrl+0x78>
      break; 
 8000eaa:	bf00      	nop
  }
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001f4 	.word	0x200001f4
 8000eb8:	48000400 	.word	0x48000400

08000ebc <BootstrapCharge>:

void BootstrapCharge(uint8_t pumpnum, uint8_t dir)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
  switch(pumpnum)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d005      	beq.n	8000ede <BootstrapCharge+0x22>
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	dc15      	bgt.n	8000f02 <BootstrapCharge+0x46>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d012      	beq.n	8000f00 <BootstrapCharge+0x44>
 8000eda:	2b02      	cmp	r3, #2
  {
    case 1: 
      break;
    case 2: 
      break; 
 8000edc:	e011      	b.n	8000f02 <BootstrapCharge+0x46>
    case 3:
      if (dir) HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 1);
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <BootstrapCharge+0x36>
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eea:	4808      	ldr	r0, [pc, #32]	@ (8000f0c <BootstrapCharge+0x50>)
 8000eec:	f000 fd02 	bl	80018f4 <HAL_GPIO_WritePin>
      else HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
      break;
 8000ef0:	e007      	b.n	8000f02 <BootstrapCharge+0x46>
      else HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <BootstrapCharge+0x50>)
 8000efa:	f000 fcfb 	bl	80018f4 <HAL_GPIO_WritePin>
      break;
 8000efe:	e000      	b.n	8000f02 <BootstrapCharge+0x46>
      break;
 8000f00:	bf00      	nop
  }
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	48000400 	.word	0x48000400

08000f10 <Pumpoff>:

void Pumpoff(uint8_t pumpnum)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  switch(pumpnum)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d035      	beq.n	8000f8c <Pumpoff+0x7c>
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	dc4c      	bgt.n	8000fbe <Pumpoff+0xae>
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d002      	beq.n	8000f2e <Pumpoff+0x1e>
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d018      	beq.n	8000f5e <Pumpoff+0x4e>
      HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 0);
      HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, 0);
      HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 0);
      break; 
  }
}
 8000f2c:	e047      	b.n	8000fbe <Pumpoff+0xae>
      HAL_GPIO_WritePin(GPIOA, P1_LS_RL_Pin, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f36:	f000 fcdd 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, P1_LS_LR_Pin, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2140      	movs	r1, #64	@ 0x40
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f000 fcd7 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, P1_HS_LR_Pin, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4e:	f000 fcd1 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P1_HS_RL_Pin, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2101      	movs	r1, #1
 8000f56:	481c      	ldr	r0, [pc, #112]	@ (8000fc8 <Pumpoff+0xb8>)
 8000f58:	f000 fccc 	bl	80018f4 <HAL_GPIO_WritePin>
      break; 
 8000f5c:	e02f      	b.n	8000fbe <Pumpoff+0xae>
      HAL_GPIO_WritePin(GPIOB, P2_LS_RL_Pin, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f64:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <Pumpoff+0xb8>)
 8000f66:	f000 fcc5 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P2_LS_LR_Pin, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f70:	4815      	ldr	r0, [pc, #84]	@ (8000fc8 <Pumpoff+0xb8>)
 8000f72:	f000 fcbf 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P2_HS_LR_Pin, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <Pumpoff+0xb8>)
 8000f7c:	f000 fcba 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P2_HS_RL_Pin, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	4810      	ldr	r0, [pc, #64]	@ (8000fc8 <Pumpoff+0xb8>)
 8000f86:	f000 fcb5 	bl	80018f4 <HAL_GPIO_WritePin>
      break; 
 8000f8a:	e018      	b.n	8000fbe <Pumpoff+0xae>
      HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <Pumpoff+0xb8>)
 8000f94:	f000 fcae 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9e:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <Pumpoff+0xb8>)
 8000fa0:	f000 fca8 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000faa:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <Pumpoff+0xb8>)
 8000fac:	f000 fca2 	bl	80018f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb6:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <Pumpoff+0xb8>)
 8000fb8:	f000 fc9c 	bl	80018f4 <HAL_GPIO_WritePin>
      break; 
 8000fbc:	bf00      	nop
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	48000400 	.word	0x48000400

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <Error_Handler+0x8>

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	@ 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <HAL_TIM_Base_MspInit+0x44>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d113      	bne.n	800105a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	6593      	str	r3, [r2, #88]	@ 0x58
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2036      	movs	r0, #54	@ 0x36
 8001050:	f000 fa87 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001054:	2036      	movs	r0, #54	@ 0x36
 8001056:	f000 faa0 	bl	800159a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40001000 	.word	0x40001000
 8001068:	40021000 	.word	0x40021000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <NMI_Handler+0x4>

08001074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <MemManage_Handler+0x4>

08001084 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <UsageFault_Handler+0x4>

08001094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c2:	f000 f92f 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <TIM6_DAC_IRQHandler+0x10>)
 80010d2:	f003 fbbb 	bl	800484c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000184 	.word	0x20000184

080010e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <OTG_FS_IRQHandler+0x10>)
 80010e6:	f000 fd5b 	bl	8001ba0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000176c 	.word	0x2000176c

080010f4 <_read>:
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e00a      	b.n	800111c <_read+0x28>
 8001106:	f3af 8000 	nop.w
 800110a:	4601      	mov	r1, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf0      	blt.n	8001106 <_read+0x12>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_close>:
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_fstat>:
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	2300      	movs	r3, #0
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_isatty>:
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	2301      	movs	r3, #1
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_lseek>:
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	2300      	movs	r3, #0
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_sbrk>:
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
 80011c8:	f008 faca 	bl	8009760 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20050000 	.word	0x20050000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000200 	.word	0x20000200
 8001200:	20001fc0 	.word	0x20001fc0

08001204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001260 <LoopForever+0x2>
 800122c:	f7ff ffea 	bl	8001204 <SystemInit>
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <LoopForever+0x6>)
 8001232:	490d      	ldr	r1, [pc, #52]	@ (8001268 <LoopForever+0xa>)
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <LoopForever+0xe>)
 8001236:	2300      	movs	r3, #0
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:
 800123a:	58d4      	ldr	r4, [r2, r3]
 800123c:	50c4      	str	r4, [r0, r3]
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:
 8001240:	18c4      	adds	r4, r0, r3
 8001242:	428c      	cmp	r4, r1
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <LoopForever+0x12>)
 8001248:	4c0a      	ldr	r4, [pc, #40]	@ (8001274 <LoopForever+0x16>)
 800124a:	2300      	movs	r3, #0
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:
 8001252:	42a2      	cmp	r2, r4
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>
 8001256:	f008 fa89 	bl	800976c <__libc_init_array>
 800125a:	f7ff fb3f 	bl	80008dc <main>

0800125e <LoopForever>:
 800125e:	e7fe      	b.n	800125e <LoopForever>
 8001260:	20050000 	.word	0x20050000
 8001264:	20000000 	.word	0x20000000
 8001268:	20000168 	.word	0x20000168
 800126c:	0800b0f4 	.word	0x0800b0f4
 8001270:	20000168 	.word	0x20000168
 8001274:	20001fbc 	.word	0x20001fbc

08001278 <ADC1_2_IRQHandler>:
 8001278:	e7fe      	b.n	8001278 <ADC1_2_IRQHandler>

0800127a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f961 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128a:	200f      	movs	r0, #15
 800128c:	f000 f80e 	bl	80012ac <HAL_InitTick>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	e001      	b.n	80012a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800129c:	f7ff fe9c 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <HAL_InitTick+0x6c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d023      	beq.n	8001308 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <HAL_InitTick+0x70>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_InitTick+0x6c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f96d 	bl	80015b6 <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d809      	bhi.n	80012fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f937 	bl	8001562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_InitTick+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e007      	b.n	800130c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e004      	b.n	800130c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e001      	b.n	800130c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008
 8001348:	20000204 	.word	0x20000204

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000204 	.word	0x20000204

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_Delay+0x44>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	@ (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	@ (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff29 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff3e 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff8e 	bl	80014a0 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff31 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e166      	b.n	80018ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8158 	beq.w	80018a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80b2 	beq.w	80018a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001744:	4b61      	ldr	r3, [pc, #388]	@ (80018cc <HAL_GPIO_Init+0x2fc>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001748:	4a60      	ldr	r2, [pc, #384]	@ (80018cc <HAL_GPIO_Init+0x2fc>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001750:	4b5e      	ldr	r3, [pc, #376]	@ (80018cc <HAL_GPIO_Init+0x2fc>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800175c:	4a5c      	ldr	r2, [pc, #368]	@ (80018d0 <HAL_GPIO_Init+0x300>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001786:	d02b      	beq.n	80017e0 <HAL_GPIO_Init+0x210>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a52      	ldr	r2, [pc, #328]	@ (80018d4 <HAL_GPIO_Init+0x304>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d025      	beq.n	80017dc <HAL_GPIO_Init+0x20c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a51      	ldr	r2, [pc, #324]	@ (80018d8 <HAL_GPIO_Init+0x308>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d01f      	beq.n	80017d8 <HAL_GPIO_Init+0x208>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a50      	ldr	r2, [pc, #320]	@ (80018dc <HAL_GPIO_Init+0x30c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d019      	beq.n	80017d4 <HAL_GPIO_Init+0x204>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a4f      	ldr	r2, [pc, #316]	@ (80018e0 <HAL_GPIO_Init+0x310>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_Init+0x200>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a4e      	ldr	r2, [pc, #312]	@ (80018e4 <HAL_GPIO_Init+0x314>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1fc>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a4d      	ldr	r2, [pc, #308]	@ (80018e8 <HAL_GPIO_Init+0x318>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1f8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a4c      	ldr	r2, [pc, #304]	@ (80018ec <HAL_GPIO_Init+0x31c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1f4>
 80017c0:	2307      	movs	r3, #7
 80017c2:	e00e      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017c4:	2308      	movs	r3, #8
 80017c6:	e00c      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017c8:	2306      	movs	r3, #6
 80017ca:	e00a      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017cc:	2305      	movs	r3, #5
 80017ce:	e008      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017d0:	2304      	movs	r3, #4
 80017d2:	e006      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e004      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017d8:	2302      	movs	r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_GPIO_Init+0x212>
 80017e0:	2300      	movs	r3, #0
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	f002 0203 	and.w	r2, r2, #3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f2:	4937      	ldr	r1, [pc, #220]	@ (80018d0 <HAL_GPIO_Init+0x300>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001800:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001824:	4a32      	ldr	r2, [pc, #200]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800182a:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800184e:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001854:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001878:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a2:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f ae91 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48001000 	.word	0x48001000
 80018e4:	48001400 	.word	0x48001400
 80018e8:	48001800 	.word	0x48001800
 80018ec:	48001c00 	.word	0x48001c00
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001910:	e002      	b.n	8001918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e101      	b.n	8001b3a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f007 f820 	bl	8008990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2203      	movs	r2, #3
 8001954:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fac9 	bl	8004efa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7c1a      	ldrb	r2, [r3, #16]
 8001970:	f88d 2000 	strb.w	r2, [sp]
 8001974:	3304      	adds	r3, #4
 8001976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001978:	f003 f9e4 	bl	8004d44 <USB_CoreInit>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2202      	movs	r2, #2
 8001986:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0d5      	b.n	8001b3a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fac1 	bl	8004f1c <USB_SetCurrentMode>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0c6      	b.n	8001b3a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e04a      	b.n	8001a48 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	3315      	adds	r3, #21
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3314      	adds	r3, #20
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	b298      	uxth	r0, r3
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	332e      	adds	r3, #46	@ 0x2e
 80019ee:	4602      	mov	r2, r0
 80019f0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3318      	adds	r3, #24
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	331c      	adds	r3, #28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3320      	adds	r3, #32
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3324      	adds	r3, #36	@ 0x24
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3af      	bcc.n	80019b2 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e044      	b.n	8001ae2 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3b5      	bcc.n	8001a58 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7c1a      	ldrb	r2, [r3, #16]
 8001af4:	f88d 2000 	strb.w	r2, [sp]
 8001af8:	3304      	adds	r3, #4
 8001afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afc:	f003 fa5a 	bl	8004fb4 <USB_DevInit>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e013      	b.n	8001b3a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7b1b      	ldrb	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f001 f86d 	bl	8002c08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fa11 	bl	8005f5a <USB_DevDisconnect>

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_PCD_Start+0x1c>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e01c      	b.n	8001b98 <HAL_PCD_Start+0x56>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7b5b      	ldrb	r3, [r3, #13]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d105      	bne.n	8001b7a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 f9aa 	bl	8004ed8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 f9c5 	bl	8005f18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b08d      	sub	sp, #52	@ 0x34
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fa83 	bl	80060c2 <USB_GetMode>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8481 	bne.w	80024c6 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 f9e7 	bl	8005f9c <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8477 	beq.w	80024c4 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 f9d4 	bl	8005f9c <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d107      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f002 0202 	and.w	r2, r2, #2
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f9c2 	bl	8005f9c <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d161      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0210 	bic.w	r2, r2, #16
 8001c30:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f003 020f 	and.w	r2, r3, #15
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3304      	adds	r3, #4
 8001c50:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	0c5b      	lsrs	r3, r3, #17
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d124      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d035      	beq.n	8001cd6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6a38      	ldr	r0, [r7, #32]
 8001c7e:	f003 fff9 	bl	8005c74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c8e:	441a      	add	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ca0:	441a      	add	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	e016      	b.n	8001cd6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	0c5b      	lsrs	r3, r3, #17
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	2b06      	cmp	r3, #6
 8001cb2:	d110      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001cba:	2208      	movs	r2, #8
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6a38      	ldr	r0, [r7, #32]
 8001cc0:	f003 ffd8 	bl	8005c74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd0:	441a      	add	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0210 	orr.w	r2, r2, #16
 8001ce4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 f956 	bl	8005f9c <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cf6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001cfa:	f040 80a7 	bne.w	8001e4c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 f95b 	bl	8005fc2 <USB_ReadDevAllOutEpInterrupt>
 8001d0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001d0e:	e099      	b.n	8001e44 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 808e 	beq.w	8001e38 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 f97f 	bl	800602a <USB_ReadDevOutEPInterrupt>
 8001d2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00c      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d44:	461a      	mov	r2, r3
 8001d46:	2301      	movs	r3, #1
 8001d48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fe81 	bl	8002a54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00c      	beq.n	8001d76 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 febd 	bl	8002af0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2310      	movs	r3, #16
 8001d90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d030      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da4:	2b80      	cmp	r3, #128	@ 0x80
 8001da6:	d109      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f006 ff26 	bl	8008c38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e14:	461a      	mov	r2, r3
 8001e16:	2320      	movs	r3, #32
 8001e18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e30:	461a      	mov	r2, r3
 8001e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e36:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f47f af62 	bne.w	8001d10 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 f8a3 	bl	8005f9c <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e60:	f040 80a4 	bne.w	8001fac <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 f8c4 	bl	8005ff6 <USB_ReadDevAllInEpInterrupt>
 8001e6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001e74:	e096      	b.n	8001fa4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 808b 	beq.w	8001f98 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 f8ea 	bl	8006066 <USB_ReadDevInEPInterrupt>
 8001e92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d020      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69f9      	ldr	r1, [r7, #28]
 8001eba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f006 fe17 	bl	8008b0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2308      	movs	r3, #8
 8001efa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f12:	461a      	mov	r2, r3
 8001f14:	2310      	movs	r3, #16
 8001f16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2340      	movs	r3, #64	@ 0x40
 8001f32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d023      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f40:	6a38      	ldr	r0, [r7, #32]
 8001f42:	f003 f97f 	bl	8005244 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	3310      	adds	r3, #16
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	78db      	ldrb	r3, [r3, #3]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2200      	movs	r2, #0
 8001f66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f006 fe74 	bl	8008c5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f80:	461a      	mov	r2, r3
 8001f82:	2302      	movs	r3, #2
 8001f84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fcd6 	bl	8002944 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f47f af65 	bne.w	8001e76 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fff3 	bl	8005f9c <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fc0:	d122      	bne.n	8002008 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f007 f8a8 	bl	8009140 <HAL_PCDEx_LPM_Callback>
 8001ff0:	e002      	b.n	8001ff8 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f006 fdf8 	bl	8008be8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f003 ffc5 	bl	8005f9c <USB_ReadInterrupts>
 8002012:	4603      	mov	r3, r0
 8002014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800201c:	d112      	bne.n	8002044 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f006 fdb4 	bl	8008b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002042:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 ffa7 	bl	8005f9c <USB_ReadInterrupts>
 800204e:	4603      	mov	r3, r0
 8002050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002058:	d121      	bne.n	800209e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002068:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800208e:	2101      	movs	r1, #1
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f007 f855 	bl	8009140 <HAL_PCDEx_LPM_Callback>
 8002096:	e002      	b.n	800209e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f006 fd7f 	bl	8008b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 ff7a 	bl	8005f9c <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020b2:	f040 80b6 	bne.w	8002222 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2110      	movs	r1, #16
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 f8b7 	bl	8005244 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020da:	e046      	b.n	800216a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020e8:	461a      	mov	r2, r3
 80020ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80020ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002100:	0151      	lsls	r1, r2, #5
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	440a      	add	r2, r1
 8002106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800210a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800210e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800211c:	461a      	mov	r2, r3
 800211e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002122:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002134:	0151      	lsls	r1, r2, #5
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	440a      	add	r2, r1
 800213a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800213e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002142:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	4413      	add	r3, r2
 800214c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002154:	0151      	lsls	r1, r2, #5
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	440a      	add	r2, r1
 800215a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800215e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002162:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002166:	3301      	adds	r3, #1
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002172:	4293      	cmp	r3, r2
 8002174:	d3b2      	bcc.n	80020dc <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002184:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002188:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7bdb      	ldrb	r3, [r3, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021a2:	f043 030b 	orr.w	r3, r3, #11
 80021a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021b8:	f043 030b 	orr.w	r3, r3, #11
 80021bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021be:	e015      	b.n	80021ec <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021d2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80021d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021e6:	f043 030b 	orr.w	r3, r3, #11
 80021ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80021fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f003 ff89 	bl	8006124 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 feb8 	bl	8005f9c <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002236:	d123      	bne.n	8002280 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 ff4e 	bl	80060de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f003 f875 	bl	8005336 <USB_GetDevSpeed>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681c      	ldr	r4, [r3, #0]
 8002258:	f001 fc10 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 800225c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002262:	461a      	mov	r2, r3
 8002264:	4620      	mov	r0, r4
 8002266:	f002 fd9b 	bl	8004da0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f006 fc77 	bl	8008b5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800227e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fe89 	bl	8005f9c <USB_ReadInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d10a      	bne.n	80022aa <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f006 fc54 	bl	8008b42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 0208 	and.w	r2, r2, #8
 80022a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 fe74 	bl	8005f9c <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ba:	2b80      	cmp	r3, #128	@ 0x80
 80022bc:	d123      	bne.n	8002306 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022ca:	2301      	movs	r3, #1
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ce:	e014      	b.n	80022fa <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 faf7 	bl	80028e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	3301      	adds	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	791b      	ldrb	r3, [r3, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	4293      	cmp	r3, r2
 8002304:	d3e4      	bcc.n	80022d0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fe46 	bl	8005f9c <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800231a:	d13c      	bne.n	8002396 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800231c:	2301      	movs	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002320:	e02b      	b.n	800237a <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3318      	adds	r3, #24
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d115      	bne.n	8002374 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002348:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	da12      	bge.n	8002374 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3317      	adds	r3, #23
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fab7 	bl	80028e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	3301      	adds	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	4293      	cmp	r3, r2
 8002384:	d3cd      	bcc.n	8002322 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fdfe 	bl	8005f9c <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023aa:	d156      	bne.n	800245a <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ac:	2301      	movs	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b0:	e045      	b.n	800243e <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d12e      	bne.n	8002438 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da2b      	bge.n	8002438 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80023ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d121      	bne.n	8002438 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002430:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002434:	6053      	str	r3, [r2, #4]
            break;
 8002436:	e008      	b.n	800244a <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	3301      	adds	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	791b      	ldrb	r3, [r3, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	4293      	cmp	r3, r2
 8002448:	d3b3      	bcc.n	80023b2 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fd9c 	bl	8005f9c <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246e:	d10a      	bne.n	8002486 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f006 fc05 	bl	8008c80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fd86 	bl	8005f9c <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d115      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f006 fbf5 	bl	8008c9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	e000      	b.n	80024c6 <HAL_PCD_IRQHandler+0x926>
      return;
 80024c4:	bf00      	nop
    }
  }
}
 80024c6:	3734      	adds	r7, #52	@ 0x34
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_PCD_SetAddress+0x1a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e012      	b.n	800250c <HAL_PCD_SetAddress+0x40>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fce5 	bl	8005ecc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4603      	mov	r3, r0
 8002524:	70fb      	strb	r3, [r7, #3]
 8002526:	460b      	mov	r3, r1
 8002528:	803b      	strh	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002536:	2b00      	cmp	r3, #0
 8002538:	da0f      	bge.n	800255a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 020f 	and.w	r2, r3, #15
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	3310      	adds	r3, #16
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	705a      	strb	r2, [r3, #1]
 8002558:	e00f      	b.n	800257a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002586:	883b      	ldrh	r3, [r7, #0]
 8002588:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	78ba      	ldrb	r2, [r7, #2]
 8002594:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025a8:	78bb      	ldrb	r3, [r7, #2]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d102      	bne.n	80025b4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_PCD_EP_Open+0xae>
 80025be:	2302      	movs	r3, #2
 80025c0:	e00e      	b.n	80025e0 <HAL_PCD_EP_Open+0xcc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fecf 	bl	8005374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80025de:	7afb      	ldrb	r3, [r7, #11]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da0f      	bge.n	800261c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	f003 020f 	and.w	r2, r3, #15
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	3310      	adds	r3, #16
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	705a      	strb	r2, [r3, #1]
 800261a:	e00f      	b.n	800263c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 020f 	and.w	r2, r3, #15
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	3304      	adds	r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_PCD_EP_Close+0x6e>
 8002652:	2302      	movs	r3, #2
 8002654:	e00e      	b.n	8002674 <HAL_PCD_EP_Close+0x8c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 ff0d 	bl	8005484 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2200      	movs	r2, #0
 80026bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026be:	7afb      	ldrb	r3, [r7, #11]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6979      	ldr	r1, [r7, #20]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 ffb3 	bl	800563c <USB_EPStartXfer>

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 020f 	and.w	r2, r3, #15
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	460b      	mov	r3, r1
 800271e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	f003 020f 	and.w	r2, r3, #15
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	3310      	adds	r3, #16
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2200      	movs	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2201      	movs	r2, #1
 800274e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	b2da      	uxtb	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 ff6a 	bl	800563c <USB_EPStartXfer>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	7912      	ldrb	r2, [r2, #4]
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e04e      	b.n	800282e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da0f      	bge.n	80027b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	3310      	adds	r3, #16
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	3304      	adds	r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	705a      	strb	r2, [r3, #1]
 80027b6:	e00d      	b.n	80027d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_EP_SetStall+0x82>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e01c      	b.n	800282e <HAL_PCD_EP_SetStall+0xbc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fa8e 	bl	8005d24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f003 fc80 	bl	8006124 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	7912      	ldrb	r2, [r2, #4]
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e042      	b.n	80028da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002858:	2b00      	cmp	r3, #0
 800285a:	da0f      	bge.n	800287c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 020f 	and.w	r2, r3, #15
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	3310      	adds	r3, #16
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	705a      	strb	r2, [r3, #1]
 800287a:	e00f      	b.n	800289c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f003 020f 	and.w	r2, r3, #15
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_PCD_EP_ClrStall+0x86>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e00e      	b.n	80028da <HAL_PCD_EP_ClrStall+0xa4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fa98 	bl	8005e00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da0c      	bge.n	8002910 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3310      	adds	r3, #16
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e00c      	b.n	800292a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 020f 	and.w	r2, r3, #15
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	3304      	adds	r3, #4
 8002928:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	f003 f8bb 	bl	8005aac <USB_EPStopXfer>
 8002936:	4603      	mov	r3, r0
 8002938:	72fb      	strb	r3, [r7, #11]

  return ret;
 800293a:	7afb      	ldrb	r3, [r7, #11]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	3310      	adds	r3, #16
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	429a      	cmp	r2, r3
 8002976:	d901      	bls.n	800297c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e067      	b.n	8002a4c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	429a      	cmp	r2, r3
 8002990:	d902      	bls.n	8002998 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	3303      	adds	r3, #3
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029a0:	e026      	b.n	80029f0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d902      	bls.n	80029be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3303      	adds	r3, #3
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68d9      	ldr	r1, [r3, #12]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f003 f914 	bl	8005c00 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	441a      	add	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	441a      	add	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d809      	bhi.n	8002a1a <PCD_WriteEmptyTxFifo+0xd6>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d203      	bcs.n	8002a1a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1c3      	bne.n	80029a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d811      	bhi.n	8002a4a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a46:	4013      	ands	r3, r2
 8002a48:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	333c      	adds	r3, #60	@ 0x3c
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a19      	ldr	r2, [pc, #100]	@ (8002aec <PCD_EP_OutXfrComplete_int+0x98>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d124      	bne.n	8002ad4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aa6:	6093      	str	r3, [r2, #8]
 8002aa8:	e01a      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f006 f803 	bl	8008ad8 <HAL_PCD_DataOutStageCallback>
 8002ad2:	e005      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f005 fffc 	bl	8008ad8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	4f54310a 	.word	0x4f54310a

08002af0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	333c      	adds	r3, #60	@ 0x3c
 8002b08:	3304      	adds	r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <PCD_EP_OutSetupPacket_int+0x64>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d90e      	bls.n	8002b44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f005 ffb5 	bl	8008ab4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	4f54300a 	.word	0x4f54300a

08002b58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
 8002b64:	4613      	mov	r3, r2
 8002b66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b76:	883b      	ldrh	r3, [r7, #0]
 8002b78:	0419      	lsls	r1, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b84:	e028      	b.n	8002bd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e00d      	b.n	8002bb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3340      	adds	r3, #64	@ 0x40
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4413      	add	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3ec      	bcc.n	8002b9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bc0:	883b      	ldrh	r3, [r7, #0]
 8002bc2:	0418      	lsls	r0, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	4302      	orrs	r2, r0
 8002bd0:	3340      	adds	r3, #64	@ 0x40
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	f043 0303 	orr.w	r3, r3, #3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c54:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c60:	d102      	bne.n	8002c68 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c66:	e00b      	b.n	8002c80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c76:	d102      	bne.n	8002c7e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c7c:	e000      	b.n	8002c80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002c7e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d141      	bne.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	d131      	bne.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cac:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cb2:	4a46      	ldr	r2, [pc, #280]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbc:	4b43      	ldr	r3, [pc, #268]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cc4:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ccc:	4b40      	ldr	r3, [pc, #256]	@ (8002dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2232      	movs	r2, #50	@ 0x32
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	0c9b      	lsrs	r3, r3, #18
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce2:	e002      	b.n	8002cea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cea:	4b38      	ldr	r3, [pc, #224]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf6:	d102      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f2      	bne.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cfe:	4b33      	ldr	r3, [pc, #204]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d0a:	d158      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e057      	b.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d10:	4b2e      	ldr	r3, [pc, #184]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d16:	4a2d      	ldr	r2, [pc, #180]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d20:	e04d      	b.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d28:	d141      	bne.n	8002dae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d2a:	4b28      	ldr	r3, [pc, #160]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d36:	d131      	bne.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d38:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3e:	4a23      	ldr	r2, [pc, #140]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d48:	4b20      	ldr	r3, [pc, #128]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d50:	4a1e      	ldr	r2, [pc, #120]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2232      	movs	r2, #50	@ 0x32
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d6e:	e002      	b.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d76:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d82:	d102      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f2      	bne.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d8a:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d96:	d112      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e011      	b.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002da2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002dac:	e007      	b.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002db6:	4a05      	ldr	r2, [pc, #20]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dbc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	431bde83 	.word	0x431bde83

08002dd8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a04      	ldr	r2, [pc, #16]	@ (8002df4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de6:	6053      	str	r3, [r2, #4]
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40007000 	.word	0x40007000

08002df8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f000 bc68 	b.w	80036dc <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0c:	4b97      	ldr	r3, [pc, #604]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e16:	4b95      	ldr	r3, [pc, #596]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80e6 	beq.w	8002ffa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4c>
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	f040 808d 	bne.w	8002f56 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	f040 8089 	bne.w	8002f56 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e44:	4b89      	ldr	r3, [pc, #548]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <HAL_RCC_OscConfig+0x66>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f000 bc3f 	b.w	80036dc <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e62:	4b82      	ldr	r3, [pc, #520]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_RCC_OscConfig+0x80>
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e76:	e005      	b.n	8002e84 <HAL_RCC_OscConfig+0x8c>
 8002e78:	4b7c      	ldr	r3, [pc, #496]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d224      	bcs.n	8002ed2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fe01 	bl	8003a94 <RCC_SetFlashLatencyFromMSIRange>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f000 bc1f 	b.w	80036dc <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9e:	4b73      	ldr	r3, [pc, #460]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a72      	ldr	r2, [pc, #456]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b70      	ldr	r3, [pc, #448]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	496d      	ldr	r1, [pc, #436]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	4968      	ldr	r1, [pc, #416]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	e025      	b.n	8002f1e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed2:	4b66      	ldr	r3, [pc, #408]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a65      	ldr	r2, [pc, #404]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b63      	ldr	r3, [pc, #396]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	4960      	ldr	r1, [pc, #384]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	495b      	ldr	r1, [pc, #364]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fdc0 	bl	8003a94 <RCC_SetFlashLatencyFromMSIRange>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e3de      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f1e:	f000 fd21 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b51      	ldr	r3, [pc, #324]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4950      	ldr	r1, [pc, #320]	@ (8003070 <HAL_RCC_OscConfig+0x278>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	4a4e      	ldr	r2, [pc, #312]	@ (8003074 <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe f9b2 	bl	80012ac <HAL_InitTick>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d052      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	e3c2      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d032      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f5e:	4b43      	ldr	r3, [pc, #268]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a42      	ldr	r2, [pc, #264]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe f9ef 	bl	800134c <HAL_GetTick>
 8002f6e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f72:	f7fe f9eb 	bl	800134c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e3ab      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f84:	4b39      	ldr	r3, [pc, #228]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f90:	4b36      	ldr	r3, [pc, #216]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a35      	ldr	r2, [pc, #212]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f96:	f043 0308 	orr.w	r3, r3, #8
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b33      	ldr	r3, [pc, #204]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	4930      	ldr	r1, [pc, #192]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fae:	4b2f      	ldr	r3, [pc, #188]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	492b      	ldr	r1, [pc, #172]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
 8002fc2:	e01a      	b.n	8002ffa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc4:	4b29      	ldr	r3, [pc, #164]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a28      	ldr	r2, [pc, #160]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f9bc 	bl	800134c <HAL_GetTick>
 8002fd4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd8:	f7fe f9b8 	bl	800134c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e378      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fea:	4b20      	ldr	r3, [pc, #128]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x1e0>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d073      	beq.n	80030ee <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d005      	beq.n	8003018 <HAL_RCC_OscConfig+0x220>
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d10e      	bne.n	8003030 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d10b      	bne.n	8003030 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	4b14      	ldr	r3, [pc, #80]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d063      	beq.n	80030ec <HAL_RCC_OscConfig+0x2f4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d15f      	bne.n	80030ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e355      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003038:	d106      	bne.n	8003048 <HAL_RCC_OscConfig+0x250>
 800303a:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a0b      	ldr	r2, [pc, #44]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e025      	b.n	8003094 <HAL_RCC_OscConfig+0x29c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003050:	d114      	bne.n	800307c <HAL_RCC_OscConfig+0x284>
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a05      	ldr	r2, [pc, #20]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b03      	ldr	r3, [pc, #12]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a02      	ldr	r2, [pc, #8]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e013      	b.n	8003094 <HAL_RCC_OscConfig+0x29c>
 800306c:	40021000 	.word	0x40021000
 8003070:	0800af54 	.word	0x0800af54
 8003074:	20000000 	.word	0x20000000
 8003078:	20000004 	.word	0x20000004
 800307c:	4b8f      	ldr	r3, [pc, #572]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a8e      	ldr	r2, [pc, #568]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b8c      	ldr	r3, [pc, #560]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a8b      	ldr	r2, [pc, #556]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe f956 	bl	800134c <HAL_GetTick>
 80030a0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe f952 	bl	800134c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	@ 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e312      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b6:	4b81      	ldr	r3, [pc, #516]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2ac>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe f942 	bl	800134c <HAL_GetTick>
 80030c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe f93e 	bl	800134c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e2fe      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030de:	4b77      	ldr	r3, [pc, #476]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x2d4>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d060      	beq.n	80031bc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x314>
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d119      	bne.n	800313a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d116      	bne.n	800313a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	4b6b      	ldr	r3, [pc, #428]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_OscConfig+0x32c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e2db      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b65      	ldr	r3, [pc, #404]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	4962      	ldr	r1, [pc, #392]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003138:	e040      	b.n	80031bc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d023      	beq.n	800318a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003142:	4b5e      	ldr	r3, [pc, #376]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5d      	ldr	r2, [pc, #372]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fe f8fd 	bl	800134c <HAL_GetTick>
 8003152:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7fe f8f9 	bl	800134c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e2b9      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003168:	4b54      	ldr	r3, [pc, #336]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003174:	4b51      	ldr	r3, [pc, #324]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	494e      	ldr	r1, [pc, #312]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
 8003188:	e018      	b.n	80031bc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318a:	4b4c      	ldr	r3, [pc, #304]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a4b      	ldr	r2, [pc, #300]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe f8d9 	bl	800134c <HAL_GetTick>
 800319a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe f8d5 	bl	800134c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e295      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b0:	4b42      	ldr	r3, [pc, #264]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8082 	beq.w	80032ce <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d05f      	beq.n	8003292 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80031d2:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d037      	beq.n	8003258 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e26d      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01b      	beq.n	8003242 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800320a:	4b2c      	ldr	r3, [pc, #176]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003210:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800321a:	f7fe f897 	bl	800134c <HAL_GetTick>
 800321e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe f893 	bl	800134c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b11      	cmp	r3, #17
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e253      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003242:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003244:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003248:	f023 0210 	bic.w	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	491a      	ldr	r1, [pc, #104]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003258:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	4a17      	ldr	r2, [pc, #92]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f870 	bl	800134c <HAL_GetTick>
 800326c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7fe f86c 	bl	800134c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b11      	cmp	r3, #17
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e22c      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003282:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x478>
 8003290:	e01d      	b.n	80032ce <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003298:	4a08      	ldr	r2, [pc, #32]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe f853 	bl	800134c <HAL_GetTick>
 80032a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fe f84f 	bl	800134c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b11      	cmp	r3, #17
 80032b6:	d903      	bls.n	80032c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e20f      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
 80032bc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c0:	4b83      	ldr	r3, [pc, #524]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1ed      	bne.n	80032aa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80bd 	beq.w	8003456 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032e2:	4b7b      	ldr	r3, [pc, #492]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10e      	bne.n	800330c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	4b78      	ldr	r3, [pc, #480]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f2:	4a77      	ldr	r2, [pc, #476]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fa:	4b75      	ldr	r3, [pc, #468]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330c:	4b71      	ldr	r3, [pc, #452]	@ (80034d4 <HAL_RCC_OscConfig+0x6dc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d118      	bne.n	800334a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003318:	4b6e      	ldr	r3, [pc, #440]	@ (80034d4 <HAL_RCC_OscConfig+0x6dc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6d      	ldr	r2, [pc, #436]	@ (80034d4 <HAL_RCC_OscConfig+0x6dc>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003324:	f7fe f812 	bl	800134c <HAL_GetTick>
 8003328:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332c:	f7fe f80e 	bl	800134c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1ce      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333e:	4b65      	ldr	r3, [pc, #404]	@ (80034d4 <HAL_RCC_OscConfig+0x6dc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003356:	4b5e      	ldr	r3, [pc, #376]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	4959      	ldr	r1, [pc, #356]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800337c:	4b54      	ldr	r3, [pc, #336]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	4a53      	ldr	r2, [pc, #332]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800338c:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	4a4f      	ldr	r2, [pc, #316]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800339c:	e018      	b.n	80033d0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800339e:	4b4c      	ldr	r3, [pc, #304]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a4:	4a4a      	ldr	r2, [pc, #296]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ae:	e00f      	b.n	80033d0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033b0:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	4a46      	ldr	r2, [pc, #280]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033c0:	4b43      	ldr	r3, [pc, #268]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	4a42      	ldr	r2, [pc, #264]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fd ffb8 	bl	800134c <HAL_GetTick>
 80033dc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fd ffb4 	bl	800134c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e172      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	4b36      	ldr	r3, [pc, #216]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ed      	beq.n	80033e0 <HAL_RCC_OscConfig+0x5e8>
 8003404:	e01d      	b.n	8003442 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fd ffa1 	bl	800134c <HAL_GetTick>
 800340a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fd ff9d 	bl	800134c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e15b      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003424:	4b2a      	ldr	r3, [pc, #168]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ed      	bne.n	800340e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003432:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003438:	4a25      	ldr	r2, [pc, #148]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 800343a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003446:	2b01      	cmp	r3, #1
 8003448:	d105      	bne.n	8003456 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344a:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344e:	4a20      	ldr	r2, [pc, #128]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d041      	beq.n	80034e6 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800346a:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 800346c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fd ff67 	bl	800134c <HAL_GetTick>
 800347e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003482:	f7fd ff63 	bl	800134c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e123      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003494:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 8003496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ef      	beq.n	8003482 <HAL_RCC_OscConfig+0x68a>
 80034a2:	e020      	b.n	80034e6 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034a4:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80034a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034aa:	4a09      	ldr	r2, [pc, #36]	@ (80034d0 <HAL_RCC_OscConfig+0x6d8>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fd ff4a 	bl	800134c <HAL_GetTick>
 80034b8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034ba:	e00d      	b.n	80034d8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034bc:	f7fd ff46 	bl	800134c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d906      	bls.n	80034d8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e106      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d8:	4b82      	ldr	r3, [pc, #520]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80034da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ea      	bne.n	80034bc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80f5 	beq.w	80036da <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f040 80cb 	bne.w	8003690 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034fa:	4b7a      	ldr	r3, [pc, #488]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0203 	and.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	429a      	cmp	r2, r3
 800350c:	d12c      	bne.n	8003568 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003518:	3b01      	subs	r3, #1
 800351a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d123      	bne.n	8003568 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d11b      	bne.n	8003568 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d113      	bne.n	8003568 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d109      	bne.n	8003568 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d06d      	beq.n	8003644 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d068      	beq.n	8003640 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800356e:	4b5d      	ldr	r3, [pc, #372]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800357a:	4b5a      	ldr	r3, [pc, #360]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0a8      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800358a:	4b56      	ldr	r3, [pc, #344]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a55      	ldr	r2, [pc, #340]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003590:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003594:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003596:	f7fd fed9 	bl	800134c <HAL_GetTick>
 800359a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fd fed5 	bl	800134c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e095      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b0:	4b4c      	ldr	r3, [pc, #304]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	4b49      	ldr	r3, [pc, #292]	@ (80036e8 <HAL_RCC_OscConfig+0x8f0>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035cc:	3a01      	subs	r2, #1
 80035ce:	0112      	lsls	r2, r2, #4
 80035d0:	4311      	orrs	r1, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035d6:	0212      	lsls	r2, r2, #8
 80035d8:	4311      	orrs	r1, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035de:	0852      	lsrs	r2, r2, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0552      	lsls	r2, r2, #21
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0652      	lsls	r2, r2, #25
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f6:	06d2      	lsls	r2, r2, #27
 80035f8:	430a      	orrs	r2, r1
 80035fa:	493a      	ldr	r1, [pc, #232]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003600:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a37      	ldr	r2, [pc, #220]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800360c:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a34      	ldr	r2, [pc, #208]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003616:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003618:	f7fd fe98 	bl	800134c <HAL_GetTick>
 800361c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd fe94 	bl	800134c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e054      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	4b2c      	ldr	r3, [pc, #176]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800363e:	e04c      	b.n	80036da <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e04b      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003644:	4b27      	ldr	r3, [pc, #156]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d144      	bne.n	80036da <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003650:	4b24      	ldr	r3, [pc, #144]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800365c:	4b21      	ldr	r3, [pc, #132]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a20      	ldr	r2, [pc, #128]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003668:	f7fd fe70 	bl	800134c <HAL_GetTick>
 800366c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fe6c 	bl	800134c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e02c      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x878>
 800368e:	e024      	b.n	80036da <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d01f      	beq.n	80036d6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b13      	ldr	r3, [pc, #76]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 800369c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fd fe53 	bl	800134c <HAL_GetTick>
 80036a6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fd fe4f 	bl	800134c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e00f      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036c8:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4905      	ldr	r1, [pc, #20]	@ (80036e4 <HAL_RCC_OscConfig+0x8ec>)
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <HAL_RCC_OscConfig+0x8f4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	60cb      	str	r3, [r1, #12]
 80036d4:	e001      	b.n	80036da <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3728      	adds	r7, #40	@ 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	019d800c 	.word	0x019d800c
 80036ec:	feeefffc 	.word	0xfeeefffc

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e11d      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b90      	ldr	r3, [pc, #576]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d910      	bls.n	8003738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b8d      	ldr	r3, [pc, #564]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 020f 	bic.w	r2, r3, #15
 800371e:	498b      	ldr	r1, [pc, #556]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b89      	ldr	r3, [pc, #548]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e105      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	4b81      	ldr	r3, [pc, #516]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003750:	429a      	cmp	r2, r3
 8003752:	d908      	bls.n	8003766 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003754:	4b7e      	ldr	r3, [pc, #504]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	497b      	ldr	r1, [pc, #492]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d079      	beq.n	8003866 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d11e      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b75      	ldr	r3, [pc, #468]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0dc      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800378a:	f000 f9dd 	bl	8003b48 <RCC_GetSysClockFreqFromPLLSource>
 800378e:	4603      	mov	r3, r0
 8003790:	4a70      	ldr	r2, [pc, #448]	@ (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d946      	bls.n	8003824 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003796:	4b6e      	ldr	r3, [pc, #440]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d140      	bne.n	8003824 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037aa:	4a69      	ldr	r2, [pc, #420]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80037ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e035      	b.n	8003824 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c0:	4b63      	ldr	r3, [pc, #396]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d115      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b9      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0ad      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e8:	4b59      	ldr	r3, [pc, #356]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0a5      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80037f8:	f000 f8b4 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 80037fc:	4603      	mov	r3, r0
 80037fe:	4a55      	ldr	r2, [pc, #340]	@ (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d90f      	bls.n	8003824 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003804:	4b52      	ldr	r3, [pc, #328]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003810:	4b4f      	ldr	r3, [pc, #316]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003818:	4a4d      	ldr	r2, [pc, #308]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 800381a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800381e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003824:	4b4a      	ldr	r3, [pc, #296]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 0203 	bic.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4947      	ldr	r1, [pc, #284]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003836:	f7fd fd89 	bl	800134c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383c:	e00a      	b.n	8003854 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383e:	f7fd fd85 	bl	800134c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e077      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003854:	4b3e      	ldr	r3, [pc, #248]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 020c 	and.w	r2, r3, #12
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	429a      	cmp	r2, r3
 8003864:	d1eb      	bne.n	800383e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b80      	cmp	r3, #128	@ 0x80
 800386a:	d105      	bne.n	8003878 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800386c:	4b38      	ldr	r3, [pc, #224]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a37      	ldr	r2, [pc, #220]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003876:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	4b31      	ldr	r3, [pc, #196]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003890:	429a      	cmp	r2, r3
 8003892:	d208      	bcs.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	492b      	ldr	r1, [pc, #172]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a6:	4b29      	ldr	r3, [pc, #164]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d210      	bcs.n	80038d6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 020f 	bic.w	r2, r3, #15
 80038bc:	4923      	ldr	r1, [pc, #140]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c4:	4b21      	ldr	r3, [pc, #132]	@ (800394c <HAL_RCC_ClockConfig+0x25c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e036      	b.n	8003944 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	4918      	ldr	r1, [pc, #96]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003900:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4910      	ldr	r1, [pc, #64]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003914:	f000 f826 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <HAL_RCC_ClockConfig+0x260>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	490c      	ldr	r1, [pc, #48]	@ (8003958 <HAL_RCC_ClockConfig+0x268>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <HAL_RCC_ClockConfig+0x26c>)
 8003932:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003934:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <HAL_RCC_ClockConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fcb7 	bl	80012ac <HAL_InitTick>
 800393e:	4603      	mov	r3, r0
 8003940:	73fb      	strb	r3, [r7, #15]

  return status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40022000 	.word	0x40022000
 8003950:	40021000 	.word	0x40021000
 8003954:	04c4b400 	.word	0x04c4b400
 8003958:	0800af54 	.word	0x0800af54
 800395c:	20000000 	.word	0x20000000
 8003960:	20000004 	.word	0x20000004

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	@ 0x24
 8003968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	4b3e      	ldr	r3, [pc, #248]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x34>
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d121      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d11e      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003998:	4b34      	ldr	r3, [pc, #208]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039a4:	4b31      	ldr	r3, [pc, #196]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80039a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e005      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039b4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10d      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d102      	bne.n	80039e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039dc:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x110>)
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e004      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039e8:	4b23      	ldr	r3, [pc, #140]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d134      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039f2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d003      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0xac>
 8003a08:	e005      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a0c:	617b      	str	r3, [r7, #20]
      break;
 8003a0e:	e005      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a12:	617b      	str	r3, [r7, #20]
      break;
 8003a14:	e002      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	617b      	str	r3, [r7, #20]
      break;
 8003a1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a1c:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3301      	adds	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a42:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	0e5b      	lsrs	r3, r3, #25
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	@ 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	0800af64 	.word	0x0800af64
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	007a1200 	.word	0x007a1200

08003a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000

08003a94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aa0:	4b27      	ldr	r3, [pc, #156]	@ (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aac:	f7ff f8d0 	bl	8002c50 <HAL_PWREx_GetVoltageRange>
 8003ab0:	6178      	str	r0, [r7, #20]
 8003ab2:	e014      	b.n	8003ade <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	4a21      	ldr	r2, [pc, #132]	@ (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003acc:	f7ff f8c0 	bl	8002c50 <HAL_PWREx_GetVoltageRange>
 8003ad0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae4:	d10b      	bne.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	@ 0x80
 8003aea:	d913      	bls.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2ba0      	cmp	r3, #160	@ 0xa0
 8003af0:	d902      	bls.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af2:	2302      	movs	r3, #2
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	e00d      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af8:	2301      	movs	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e00a      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b02:	d902      	bls.n	8003b0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b04:	2302      	movs	r3, #2
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e004      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b70      	cmp	r3, #112	@ 0x70
 8003b0e:	d101      	bne.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b10:	2301      	movs	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 020f 	bic.w	r2, r3, #15
 8003b1c:	4909      	ldr	r1, [pc, #36]	@ (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d001      	beq.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40022000 	.word	0x40022000

08003b48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d00b      	beq.n	8003b76 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d825      	bhi.n	8003bb0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d008      	beq.n	8003b7c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d11f      	bne.n	8003bb0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003b70:	4b25      	ldr	r3, [pc, #148]	@ (8003c08 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b72:	613b      	str	r3, [r7, #16]
    break;
 8003b74:	e01f      	b.n	8003bb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b76:	4b25      	ldr	r3, [pc, #148]	@ (8003c0c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003b78:	613b      	str	r3, [r7, #16]
    break;
 8003b7a:	e01c      	b.n	8003bb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b7c:	4b21      	ldr	r3, [pc, #132]	@ (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b88:	4b1e      	ldr	r3, [pc, #120]	@ (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e005      	b.n	8003ba4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c10 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bac:	613b      	str	r3, [r7, #16]
    break;
 8003bae:	e002      	b.n	8003bb6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
    break;
 8003bb4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	fb03 f202 	mul.w	r2, r3, r2
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0e5b      	lsrs	r3, r3, #25
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003bf6:	683b      	ldr	r3, [r7, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40021000 	.word	0x40021000
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200
 8003c10:	0800af64 	.word	0x0800af64

08003c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c20:	2300      	movs	r3, #0
 8003c22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d040      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c34:	2b80      	cmp	r3, #128	@ 0x80
 8003c36:	d02a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c38:	2b80      	cmp	r3, #128	@ 0x80
 8003c3a:	d825      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c3c:	2b60      	cmp	r3, #96	@ 0x60
 8003c3e:	d026      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c40:	2b60      	cmp	r3, #96	@ 0x60
 8003c42:	d821      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d006      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d81d      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d010      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003c54:	e018      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c56:	4b89      	ldr	r3, [pc, #548]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4a88      	ldr	r2, [pc, #544]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c60:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c62:	e015      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fb3e 	bl	80042ec <RCCEx_PLLSAI1_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c74:	e00c      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3320      	adds	r3, #32
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fc29 	bl	80044d4 <RCCEx_PLLSAI2_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	74fb      	strb	r3, [r7, #19]
      break;
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c96:	4b79      	ldr	r3, [pc, #484]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c9c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca4:	4975      	ldr	r1, [pc, #468]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003cac:	e001      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d047      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc6:	d030      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ccc:	d82a      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd2:	d02a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd8:	d824      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce4:	d81e      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cee:	d010      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cf0:	e018      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cf2:	4b62      	ldr	r3, [pc, #392]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4a61      	ldr	r2, [pc, #388]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cfe:	e015      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 faf0 	bl	80042ec <RCCEx_PLLSAI1_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d10:	e00c      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3320      	adds	r3, #32
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fbdb 	bl	80044d4 <RCCEx_PLLSAI2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	74fb      	strb	r3, [r7, #19]
      break;
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d32:	4b52      	ldr	r3, [pc, #328]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d40:	494e      	ldr	r1, [pc, #312]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003d48:	e001      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 809f 	beq.w	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d60:	4b46      	ldr	r3, [pc, #280]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d70:	2300      	movs	r3, #0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	4a40      	ldr	r2, [pc, #256]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d82:	4b3e      	ldr	r3, [pc, #248]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d92:	4b3b      	ldr	r3, [pc, #236]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3a      	ldr	r2, [pc, #232]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d9e:	f7fd fad5 	bl	800134c <HAL_GetTick>
 8003da2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003da4:	e009      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da6:	f7fd fad1 	bl	800134c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d902      	bls.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	74fb      	strb	r3, [r7, #19]
        break;
 8003db8:	e005      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dba:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ef      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d15b      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01f      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d019      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dea:	4b24      	ldr	r3, [pc, #144]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003df6:	4b21      	ldr	r3, [pc, #132]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e06:	4b1d      	ldr	r3, [pc, #116]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e16:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd fa90 	bl	800134c <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd fa8c 	bl	800134c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d902      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	74fb      	strb	r3, [r7, #19]
            break;
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e48:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ec      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10c      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5c:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6c:	4903      	ldr	r1, [pc, #12]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e74:	e008      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
 8003e7a:	e005      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e88:	7c7b      	ldrb	r3, [r7, #17]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4ba0      	ldr	r3, [pc, #640]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	4a9f      	ldr	r2, [pc, #636]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea6:	4b9a      	ldr	r3, [pc, #616]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	f023 0203 	bic.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb4:	4996      	ldr	r1, [pc, #600]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec8:	4b91      	ldr	r3, [pc, #580]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f023 020c 	bic.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	498e      	ldr	r1, [pc, #568]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eea:	4b89      	ldr	r3, [pc, #548]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	4985      	ldr	r1, [pc, #532]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f0c:	4b80      	ldr	r3, [pc, #512]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1a:	497d      	ldr	r1, [pc, #500]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f2e:	4b78      	ldr	r3, [pc, #480]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3c:	4974      	ldr	r1, [pc, #464]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f50:	4b6f      	ldr	r3, [pc, #444]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5e:	496c      	ldr	r1, [pc, #432]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f72:	4b67      	ldr	r3, [pc, #412]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f80:	4963      	ldr	r1, [pc, #396]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f94:	4b5e      	ldr	r3, [pc, #376]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fa2:	495b      	ldr	r1, [pc, #364]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb6:	4b56      	ldr	r3, [pc, #344]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	4952      	ldr	r1, [pc, #328]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe6:	494a      	ldr	r1, [pc, #296]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ffa:	4b45      	ldr	r3, [pc, #276]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004008:	4941      	ldr	r1, [pc, #260]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800401c:	4b3c      	ldr	r3, [pc, #240]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800401e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402a:	4939      	ldr	r1, [pc, #228]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d028      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800403e:	4b34      	ldr	r3, [pc, #208]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004044:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404c:	4930      	ldr	r1, [pc, #192]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800405c:	d106      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800405e:	4b2c      	ldr	r3, [pc, #176]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a2b      	ldr	r2, [pc, #172]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004064:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004068:	60d3      	str	r3, [r2, #12]
 800406a:	e011      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f935 	bl	80042ec <RCCEx_PLLSAI1_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d04d      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040a4:	d108      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80040a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ac:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80040b6:	e012      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80040b8:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040be:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040d6:	490e      	ldr	r1, [pc, #56]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040e6:	d106      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e8:	4b09      	ldr	r3, [pc, #36]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a08      	ldr	r2, [pc, #32]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040f2:	60d3      	str	r3, [r2, #12]
 80040f4:	e020      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040fe:	d109      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004100:	4b03      	ldr	r3, [pc, #12]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a02      	ldr	r2, [pc, #8]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410a:	60d3      	str	r3, [r2, #12]
 800410c:	e014      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004118:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800411c:	d10c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f8e1 	bl	80042ec <RCCEx_PLLSAI1_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d028      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004144:	4b68      	ldr	r3, [pc, #416]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004152:	4965      	ldr	r1, [pc, #404]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800415e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004162:	d106      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004164:	4b60      	ldr	r3, [pc, #384]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a5f      	ldr	r2, [pc, #380]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800416a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416e:	60d3      	str	r3, [r2, #12]
 8004170:	e011      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004176:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800417a:	d10c      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f8b2 	bl	80042ec <RCCEx_PLLSAI1_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800418c:	7cfb      	ldrb	r3, [r7, #19]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a2:	4b51      	ldr	r3, [pc, #324]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b2:	494d      	ldr	r1, [pc, #308]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f88d 	bl	80042ec <RCCEx_PLLSAI1_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ec:	4b3e      	ldr	r3, [pc, #248]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041f2:	f023 0204 	bic.w	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041fc:	493a      	ldr	r1, [pc, #232]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00b      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004212:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004216:	f023 0218 	bic.w	r2, r3, #24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	4931      	ldr	r1, [pc, #196]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d035      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004234:	4b2c      	ldr	r3, [pc, #176]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800423a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fd f884 	bl	800134c <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004246:	e009      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004248:	f7fd f880 	bl	800134c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d902      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	74fb      	strb	r3, [r7, #19]
        break;
 800425a:	e005      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1ef      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d113      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800426e:	4b1e      	ldr	r3, [pc, #120]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004274:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800427e:	491a      	ldr	r1, [pc, #104]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3320      	adds	r3, #32
 800428a:	2102      	movs	r1, #2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f921 	bl	80044d4 <RCCEx_PLLSAI2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d017      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042ac:	4b0e      	ldr	r3, [pc, #56]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042bc:	490a      	ldr	r1, [pc, #40]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ce:	d105      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a04      	ldr	r2, [pc, #16]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000

080042ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042fa:	4b72      	ldr	r3, [pc, #456]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00e      	beq.n	8004324 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004306:	4b6f      	ldr	r3, [pc, #444]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d103      	bne.n	800431e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
       ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d142      	bne.n	80043a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e03f      	b.n	80043a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d018      	beq.n	800435e <RCCEx_PLLSAI1_Config+0x72>
 800432c:	2b03      	cmp	r3, #3
 800432e:	d825      	bhi.n	800437c <RCCEx_PLLSAI1_Config+0x90>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d002      	beq.n	800433a <RCCEx_PLLSAI1_Config+0x4e>
 8004334:	2b02      	cmp	r3, #2
 8004336:	d009      	beq.n	800434c <RCCEx_PLLSAI1_Config+0x60>
 8004338:	e020      	b.n	800437c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800433a:	4b62      	ldr	r3, [pc, #392]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434a:	e01a      	b.n	8004382 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800434c:	4b5d      	ldr	r3, [pc, #372]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e013      	b.n	8004386 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800435e:	4b59      	ldr	r3, [pc, #356]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800436a:	4b56      	ldr	r3, [pc, #344]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800437a:	e006      	b.n	800438a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      break;
 8004380:	e004      	b.n	800438c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800438a:	bf00      	nop
    }

    if(status == HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004392:	4b4c      	ldr	r3, [pc, #304]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 0203 	bic.w	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4949      	ldr	r1, [pc, #292]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 8086 	bne.w	80044b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043ac:	4b45      	ldr	r3, [pc, #276]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a44      	ldr	r2, [pc, #272]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b8:	f7fc ffc8 	bl	800134c <HAL_GetTick>
 80043bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043be:	e009      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c0:	f7fc ffc4 	bl	800134c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d902      	bls.n	80043d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	73fb      	strb	r3, [r7, #15]
        break;
 80043d2:	e005      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043d4:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ef      	bne.n	80043c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d168      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d113      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ec:	4b35      	ldr	r3, [pc, #212]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6892      	ldr	r2, [r2, #8]
 80043f8:	0211      	lsls	r1, r2, #8
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	06d2      	lsls	r2, r2, #27
 8004400:	4311      	orrs	r1, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6852      	ldr	r2, [r2, #4]
 8004406:	3a01      	subs	r2, #1
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	430a      	orrs	r2, r1
 800440c:	492d      	ldr	r1, [pc, #180]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	610b      	str	r3, [r1, #16]
 8004412:	e02d      	b.n	8004470 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d115      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441a:	4b2a      	ldr	r3, [pc, #168]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	4b2b      	ldr	r3, [pc, #172]	@ (80044cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	0211      	lsls	r1, r2, #8
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6912      	ldr	r2, [r2, #16]
 800442c:	0852      	lsrs	r2, r2, #1
 800442e:	3a01      	subs	r2, #1
 8004430:	0552      	lsls	r2, r2, #21
 8004432:	4311      	orrs	r1, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6852      	ldr	r2, [r2, #4]
 8004438:	3a01      	subs	r2, #1
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	430a      	orrs	r2, r1
 800443e:	4921      	ldr	r1, [pc, #132]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	610b      	str	r3, [r1, #16]
 8004444:	e014      	b.n	8004470 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004446:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	4b21      	ldr	r3, [pc, #132]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6892      	ldr	r2, [r2, #8]
 8004452:	0211      	lsls	r1, r2, #8
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6952      	ldr	r2, [r2, #20]
 8004458:	0852      	lsrs	r2, r2, #1
 800445a:	3a01      	subs	r2, #1
 800445c:	0652      	lsls	r2, r2, #25
 800445e:	4311      	orrs	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6852      	ldr	r2, [r2, #4]
 8004464:	3a01      	subs	r2, #1
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	430a      	orrs	r2, r1
 800446a:	4916      	ldr	r1, [pc, #88]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004470:	4b14      	ldr	r3, [pc, #80]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a13      	ldr	r2, [pc, #76]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800447a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fc ff66 	bl	800134c <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004482:	e009      	b.n	8004498 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004484:	f7fc ff62 	bl	800134c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	73fb      	strb	r3, [r7, #15]
          break;
 8004496:	e005      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004498:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ef      	beq.n	8004484 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	4904      	ldr	r1, [pc, #16]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	07ff800f 	.word	0x07ff800f
 80044cc:	ff9f800f 	.word	0xff9f800f
 80044d0:	f9ff800f 	.word	0xf9ff800f

080044d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044e2:	4b72      	ldr	r3, [pc, #456]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044ee:	4b6f      	ldr	r3, [pc, #444]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0203 	and.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d103      	bne.n	8004506 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
       ||
 8004502:	2b00      	cmp	r3, #0
 8004504:	d142      	bne.n	800458c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	e03f      	b.n	800458c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d018      	beq.n	8004546 <RCCEx_PLLSAI2_Config+0x72>
 8004514:	2b03      	cmp	r3, #3
 8004516:	d825      	bhi.n	8004564 <RCCEx_PLLSAI2_Config+0x90>
 8004518:	2b01      	cmp	r3, #1
 800451a:	d002      	beq.n	8004522 <RCCEx_PLLSAI2_Config+0x4e>
 800451c:	2b02      	cmp	r3, #2
 800451e:	d009      	beq.n	8004534 <RCCEx_PLLSAI2_Config+0x60>
 8004520:	e020      	b.n	8004564 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004522:	4b62      	ldr	r3, [pc, #392]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d11d      	bne.n	800456a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004532:	e01a      	b.n	800456a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004534:	4b5d      	ldr	r3, [pc, #372]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d116      	bne.n	800456e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e013      	b.n	800456e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004546:	4b59      	ldr	r3, [pc, #356]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004552:	4b56      	ldr	r3, [pc, #344]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004562:	e006      	b.n	8004572 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e004      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004572:	bf00      	nop
    }

    if(status == HAL_OK)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800457a:	4b4c      	ldr	r3, [pc, #304]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4949      	ldr	r1, [pc, #292]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004588:	4313      	orrs	r3, r2
 800458a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 8086 	bne.w	80046a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004594:	4b45      	ldr	r3, [pc, #276]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a44      	ldr	r2, [pc, #272]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fc fed4 	bl	800134c <HAL_GetTick>
 80045a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045a6:	e009      	b.n	80045bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a8:	f7fc fed0 	bl	800134c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d902      	bls.n	80045bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	73fb      	strb	r3, [r7, #15]
        break;
 80045ba:	e005      	b.n	80045c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045bc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ef      	bne.n	80045a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d168      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d113      	bne.n	80045fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045d4:	4b35      	ldr	r3, [pc, #212]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	4b35      	ldr	r3, [pc, #212]	@ (80046b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80045da:	4013      	ands	r3, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6892      	ldr	r2, [r2, #8]
 80045e0:	0211      	lsls	r1, r2, #8
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68d2      	ldr	r2, [r2, #12]
 80045e6:	06d2      	lsls	r2, r2, #27
 80045e8:	4311      	orrs	r1, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6852      	ldr	r2, [r2, #4]
 80045ee:	3a01      	subs	r2, #1
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	430a      	orrs	r2, r1
 80045f4:	492d      	ldr	r1, [pc, #180]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	614b      	str	r3, [r1, #20]
 80045fa:	e02d      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d115      	bne.n	800462e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004602:	4b2a      	ldr	r3, [pc, #168]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	4b2b      	ldr	r3, [pc, #172]	@ (80046b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6892      	ldr	r2, [r2, #8]
 800460e:	0211      	lsls	r1, r2, #8
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6912      	ldr	r2, [r2, #16]
 8004614:	0852      	lsrs	r2, r2, #1
 8004616:	3a01      	subs	r2, #1
 8004618:	0552      	lsls	r2, r2, #21
 800461a:	4311      	orrs	r1, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6852      	ldr	r2, [r2, #4]
 8004620:	3a01      	subs	r2, #1
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	430a      	orrs	r2, r1
 8004626:	4921      	ldr	r1, [pc, #132]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	614b      	str	r3, [r1, #20]
 800462c:	e014      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800462e:	4b1f      	ldr	r3, [pc, #124]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	4b21      	ldr	r3, [pc, #132]	@ (80046b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	0211      	lsls	r1, r2, #8
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6952      	ldr	r2, [r2, #20]
 8004640:	0852      	lsrs	r2, r2, #1
 8004642:	3a01      	subs	r2, #1
 8004644:	0652      	lsls	r2, r2, #25
 8004646:	4311      	orrs	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6852      	ldr	r2, [r2, #4]
 800464c:	3a01      	subs	r2, #1
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	430a      	orrs	r2, r1
 8004652:	4916      	ldr	r1, [pc, #88]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004658:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004662:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fc fe72 	bl	800134c <HAL_GetTick>
 8004668:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800466a:	e009      	b.n	8004680 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800466c:	f7fc fe6e 	bl	800134c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d902      	bls.n	8004680 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	73fb      	strb	r3, [r7, #15]
          break;
 800467e:	e005      	b.n	800468c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004680:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ef      	beq.n	800466c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	4904      	ldr	r1, [pc, #16]	@ (80046ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800469c:	4313      	orrs	r3, r2
 800469e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	07ff800f 	.word	0x07ff800f
 80046b4:	ff9f800f 	.word	0xff9f800f
 80046b8:	f9ff800f 	.word	0xf9ff800f

080046bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e049      	b.n	8004762 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fc9c 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f000 f9d6 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d001      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e04f      	b.n	8004824 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <HAL_TIM_Base_Start_IT+0xc4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x76>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ae:	d018      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x76>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004834 <HAL_TIM_Base_Start_IT+0xc8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x76>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1e      	ldr	r2, [pc, #120]	@ (8004838 <HAL_TIM_Base_Start_IT+0xcc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x76>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1c      	ldr	r2, [pc, #112]	@ (800483c <HAL_TIM_Base_Start_IT+0xd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x76>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <HAL_TIM_Base_Start_IT+0xd4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x76>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a19      	ldr	r2, [pc, #100]	@ (8004844 <HAL_TIM_Base_Start_IT+0xd8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d115      	bne.n	800480e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <HAL_TIM_Base_Start_IT+0xdc>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d015      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0xb4>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fa:	d011      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480c:	e008      	b.n	8004820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e000      	b.n	8004822 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004820:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	00010007 	.word	0x00010007

0800484c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d020      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0202 	mvn.w	r2, #2
 8004880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8e9 	bl	8004a6e <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8db 	bl	8004a5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f8ec 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d020      	beq.n	80048fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01b      	beq.n	80048fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0204 	mvn.w	r2, #4
 80048cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8c3 	bl	8004a6e <HAL_TIM_IC_CaptureCallback>
 80048e8:	e005      	b.n	80048f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8b5 	bl	8004a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8c6 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d020      	beq.n	8004948 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0208 	mvn.w	r2, #8
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2204      	movs	r2, #4
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f89d 	bl	8004a6e <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f88f 	bl	8004a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f8a0 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0210 	mvn.w	r2, #16
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2208      	movs	r2, #8
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f877 	bl	8004a6e <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f869 	bl	8004a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f87a 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0201 	mvn.w	r2, #1
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fc f958 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f99b 	bl	8004d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00c      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f993 	bl	8004d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00c      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f834 	bl	8004a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00c      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f06f 0220 	mvn.w	r2, #32
 8004a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f95b 	bl	8004d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
	...

08004aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a46      	ldr	r2, [pc, #280]	@ (8004bd8 <TIM_Base_SetConfig+0x12c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aca:	d00f      	beq.n	8004aec <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a43      	ldr	r2, [pc, #268]	@ (8004bdc <TIM_Base_SetConfig+0x130>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a42      	ldr	r2, [pc, #264]	@ (8004be0 <TIM_Base_SetConfig+0x134>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a41      	ldr	r2, [pc, #260]	@ (8004be4 <TIM_Base_SetConfig+0x138>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_Base_SetConfig+0x40>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a40      	ldr	r2, [pc, #256]	@ (8004be8 <TIM_Base_SetConfig+0x13c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d108      	bne.n	8004afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a35      	ldr	r2, [pc, #212]	@ (8004bd8 <TIM_Base_SetConfig+0x12c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01f      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0c:	d01b      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a32      	ldr	r2, [pc, #200]	@ (8004bdc <TIM_Base_SetConfig+0x130>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d017      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a31      	ldr	r2, [pc, #196]	@ (8004be0 <TIM_Base_SetConfig+0x134>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a30      	ldr	r2, [pc, #192]	@ (8004be4 <TIM_Base_SetConfig+0x138>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00f      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2f      	ldr	r2, [pc, #188]	@ (8004be8 <TIM_Base_SetConfig+0x13c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	@ (8004bec <TIM_Base_SetConfig+0x140>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf0 <TIM_Base_SetConfig+0x144>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_Base_SetConfig+0x9a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf4 <TIM_Base_SetConfig+0x148>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d108      	bne.n	8004b58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <TIM_Base_SetConfig+0x12c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00f      	beq.n	8004ba4 <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a18      	ldr	r2, [pc, #96]	@ (8004be8 <TIM_Base_SetConfig+0x13c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <TIM_Base_SetConfig+0x140>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_Base_SetConfig+0xf8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a16      	ldr	r2, [pc, #88]	@ (8004bf0 <TIM_Base_SetConfig+0x144>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_Base_SetConfig+0xf8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <TIM_Base_SetConfig+0x148>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d103      	bne.n	8004bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40013400 	.word	0x40013400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e068      	b.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01d      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c82:	d018      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1a      	ldr	r2, [pc, #104]	@ (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a18      	ldr	r2, [pc, #96]	@ (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a13      	ldr	r2, [pc, #76]	@ (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a14      	ldr	r2, [pc, #80]	@ (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40013400 	.word	0x40013400
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40014000 	.word	0x40014000

08004d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d44:	b084      	sub	sp, #16
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	f107 001c 	add.w	r0, r7, #28
 8004d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fa26 	bl	80061b4 <USB_CoreReset>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004d6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d80:	e005      	b.n	8004d8e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d9a:	b004      	add	sp, #16
 8004d9c:	4770      	bx	lr
	...

08004da0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d165      	bne.n	8004e80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb0 <USB_SetTurnaroundTime+0x110>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d906      	bls.n	8004dca <USB_SetTurnaroundTime+0x2a>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb4 <USB_SetTurnaroundTime+0x114>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d202      	bcs.n	8004dca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dc4:	230f      	movs	r3, #15
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e05c      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a39      	ldr	r2, [pc, #228]	@ (8004eb4 <USB_SetTurnaroundTime+0x114>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d306      	bcc.n	8004de0 <USB_SetTurnaroundTime+0x40>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a38      	ldr	r2, [pc, #224]	@ (8004eb8 <USB_SetTurnaroundTime+0x118>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d202      	bcs.n	8004de0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004dda:	230e      	movs	r3, #14
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e051      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a35      	ldr	r2, [pc, #212]	@ (8004eb8 <USB_SetTurnaroundTime+0x118>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d306      	bcc.n	8004df6 <USB_SetTurnaroundTime+0x56>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a34      	ldr	r2, [pc, #208]	@ (8004ebc <USB_SetTurnaroundTime+0x11c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d202      	bcs.n	8004df6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004df0:	230d      	movs	r3, #13
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e046      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a30      	ldr	r2, [pc, #192]	@ (8004ebc <USB_SetTurnaroundTime+0x11c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d306      	bcc.n	8004e0c <USB_SetTurnaroundTime+0x6c>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec0 <USB_SetTurnaroundTime+0x120>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d802      	bhi.n	8004e0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e06:	230c      	movs	r3, #12
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e03b      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec0 <USB_SetTurnaroundTime+0x120>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d906      	bls.n	8004e22 <USB_SetTurnaroundTime+0x82>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <USB_SetTurnaroundTime+0x124>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d802      	bhi.n	8004e22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e1c:	230b      	movs	r3, #11
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e030      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4a27      	ldr	r2, [pc, #156]	@ (8004ec4 <USB_SetTurnaroundTime+0x124>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d906      	bls.n	8004e38 <USB_SetTurnaroundTime+0x98>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <USB_SetTurnaroundTime+0x128>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d802      	bhi.n	8004e38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e32:	230a      	movs	r3, #10
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e025      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a23      	ldr	r2, [pc, #140]	@ (8004ec8 <USB_SetTurnaroundTime+0x128>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d906      	bls.n	8004e4e <USB_SetTurnaroundTime+0xae>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <USB_SetTurnaroundTime+0x12c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d202      	bcs.n	8004e4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e48:	2309      	movs	r3, #9
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e01a      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <USB_SetTurnaroundTime+0x12c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d306      	bcc.n	8004e64 <USB_SetTurnaroundTime+0xc4>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed0 <USB_SetTurnaroundTime+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d802      	bhi.n	8004e64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e5e:	2308      	movs	r3, #8
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e00f      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed0 <USB_SetTurnaroundTime+0x130>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d906      	bls.n	8004e7a <USB_SetTurnaroundTime+0xda>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <USB_SetTurnaroundTime+0x134>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d202      	bcs.n	8004e7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e74:	2307      	movs	r3, #7
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e004      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e7a:	2306      	movs	r3, #6
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	e001      	b.n	8004e84 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e80:	2309      	movs	r3, #9
 8004e82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	029b      	lsls	r3, r3, #10
 8004e98:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	00d8acbf 	.word	0x00d8acbf
 8004eb4:	00e4e1c0 	.word	0x00e4e1c0
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	01067380 	.word	0x01067380
 8004ec0:	011a499f 	.word	0x011a499f
 8004ec4:	01312cff 	.word	0x01312cff
 8004ec8:	014ca43f 	.word	0x014ca43f
 8004ecc:	016e3600 	.word	0x016e3600
 8004ed0:	01a6ab1f 	.word	0x01a6ab1f
 8004ed4:	01e84800 	.word	0x01e84800

08004ed8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f043 0201 	orr.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 0201 	bic.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d115      	bne.n	8004f6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f4a:	200a      	movs	r0, #10
 8004f4c:	f7fc fa0a 	bl	8001364 <HAL_Delay>
      ms += 10U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	330a      	adds	r3, #10
 8004f54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 f8b3 	bl	80060c2 <USB_GetMode>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d01e      	beq.n	8004fa0 <USB_SetCurrentMode+0x84>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f66:	d9f0      	bls.n	8004f4a <USB_SetCurrentMode+0x2e>
 8004f68:	e01a      	b.n	8004fa0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d115      	bne.n	8004f9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f7c:	200a      	movs	r0, #10
 8004f7e:	f7fc f9f1 	bl	8001364 <HAL_Delay>
      ms += 10U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	330a      	adds	r3, #10
 8004f86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f001 f89a 	bl	80060c2 <USB_GetMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <USB_SetCurrentMode+0x84>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f98:	d9f0      	bls.n	8004f7c <USB_SetCurrentMode+0x60>
 8004f9a:	e001      	b.n	8004fa0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e005      	b.n	8004fac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fa4:	d101      	bne.n	8004faa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e009      	b.n	8004fe8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3340      	adds	r3, #64	@ 0x40
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b0e      	cmp	r3, #14
 8004fec:	d9f2      	bls.n	8004fd4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11c      	bne.n	8005030 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e005      	b.n	800503c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005034:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005042:	461a      	mov	r2, r3
 8005044:	2300      	movs	r3, #0
 8005046:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005048:	2103      	movs	r1, #3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f95a 	bl	8005304 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005050:	2110      	movs	r1, #16
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8f6 	bl	8005244 <USB_FlushTxFifo>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f920 	bl	80052a8 <USB_FlushRxFifo>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005078:	461a      	mov	r2, r3
 800507a:	2300      	movs	r3, #0
 800507c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005084:	461a      	mov	r2, r3
 8005086:	2300      	movs	r3, #0
 8005088:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005090:	461a      	mov	r2, r3
 8005092:	2300      	movs	r3, #0
 8005094:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e043      	b.n	8005124 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050b2:	d118      	bne.n	80050e6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c6:	461a      	mov	r2, r3
 80050c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e013      	b.n	80050f8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	461a      	mov	r2, r3
 80050de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e008      	b.n	80050f8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f2:	461a      	mov	r2, r3
 80050f4:	2300      	movs	r3, #0
 80050f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005104:	461a      	mov	r2, r3
 8005106:	2300      	movs	r3, #0
 8005108:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005116:	461a      	mov	r2, r3
 8005118:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800511c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005128:	461a      	mov	r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4293      	cmp	r3, r2
 800512e:	d3b5      	bcc.n	800509c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e043      	b.n	80051be <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800514c:	d118      	bne.n	8005180 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005160:	461a      	mov	r2, r3
 8005162:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e013      	b.n	8005192 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005176:	461a      	mov	r2, r3
 8005178:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e008      	b.n	8005192 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518c:	461a      	mov	r2, r3
 800518e:	2300      	movs	r3, #0
 8005190:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b0:	461a      	mov	r2, r3
 80051b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	3301      	adds	r3, #1
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051c2:	461a      	mov	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d3b5      	bcc.n	8005136 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f043 0210 	orr.w	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <USB_DevInit+0x28c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005204:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f043 0208 	orr.w	r2, r3, #8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005218:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800521c:	2b01      	cmp	r3, #1
 800521e:	d107      	bne.n	8005230 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005228:	f043 0304 	orr.w	r3, r3, #4
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523c:	b004      	add	sp, #16
 800523e:	4770      	bx	lr
 8005240:	803c3800 	.word	0x803c3800

08005244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800525e:	d901      	bls.n	8005264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e01b      	b.n	800529c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	daf2      	bge.n	8005252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	019b      	lsls	r3, r3, #6
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005288:	d901      	bls.n	800528e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e006      	b.n	800529c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b20      	cmp	r3, #32
 8005298:	d0f0      	beq.n	800527c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052c0:	d901      	bls.n	80052c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e018      	b.n	80052f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	daf2      	bge.n	80052b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2210      	movs	r2, #16
 80052d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052e4:	d901      	bls.n	80052ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e006      	b.n	80052f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d0f0      	beq.n	80052d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005324:	4313      	orrs	r3, r2
 8005326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005336:	b480      	push	{r7}
 8005338:	b087      	sub	sp, #28
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0306 	and.w	r3, r3, #6
 800534e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d002      	beq.n	800535c <USB_GetDevSpeed+0x26>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d102      	bne.n	8005362 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800535c:	2302      	movs	r3, #2
 800535e:	75fb      	strb	r3, [r7, #23]
 8005360:	e001      	b.n	8005366 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005362:	230f      	movs	r3, #15
 8005364:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005366:	7dfb      	ldrb	r3, [r7, #23]
}
 8005368:	4618      	mov	r0, r3
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d13a      	bne.n	8005406 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	2101      	movs	r1, #1
 80053a2:	fa01 f303 	lsl.w	r3, r1, r3
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d155      	bne.n	8005474 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	791b      	ldrb	r3, [r3, #4]
 80053e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	059b      	lsls	r3, r3, #22
 80053ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053ec:	4313      	orrs	r3, r2
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	e036      	b.n	8005474 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	2101      	movs	r1, #1
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005424:	4313      	orrs	r3, r2
 8005426:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d11a      	bne.n	8005474 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	791b      	ldrb	r3, [r3, #4]
 8005458:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800545a:	430b      	orrs	r3, r1
 800545c:	4313      	orrs	r3, r2
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800546a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005472:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d161      	bne.n	8005564 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054b6:	d11f      	bne.n	80054f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	2101      	movs	r1, #1
 800550a:	fa01 f303 	lsl.w	r3, r1, r3
 800550e:	b29b      	uxth	r3, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005518:	4013      	ands	r3, r2
 800551a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	2101      	movs	r1, #1
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	b29b      	uxth	r3, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800553c:	4013      	ands	r3, r2
 800553e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	0159      	lsls	r1, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	440b      	add	r3, r1
 8005556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555a:	4619      	mov	r1, r3
 800555c:	4b35      	ldr	r3, [pc, #212]	@ (8005634 <USB_DeactivateEndpoint+0x1b0>)
 800555e:	4013      	ands	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
 8005562:	e060      	b.n	8005626 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800557a:	d11f      	bne.n	80055bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005596:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800559a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f303 	lsl.w	r3, r1, r3
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	43db      	mvns	r3, r3
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055dc:	4013      	ands	r3, r2
 80055de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	43db      	mvns	r3, r3
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005600:	4013      	ands	r3, r2
 8005602:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	0159      	lsls	r1, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	440b      	add	r3, r1
 800561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561e:	4619      	mov	r1, r3
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <USB_DeactivateEndpoint+0x1b4>)
 8005622:	4013      	ands	r3, r2
 8005624:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	ec337800 	.word	0xec337800
 8005638:	eff37800 	.word	0xeff37800

0800563c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	2b01      	cmp	r3, #1
 8005656:	f040 812d 	bne.w	80058b4 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d132      	bne.n	80056c8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800567c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005680:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c0:	0cdb      	lsrs	r3, r3, #19
 80056c2:	04db      	lsls	r3, r3, #19
 80056c4:	6113      	str	r3, [r2, #16]
 80056c6:	e097      	b.n	80057f8 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e2:	0cdb      	lsrs	r3, r3, #19
 80056e4:	04db      	lsls	r3, r3, #19
 80056e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005702:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005706:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800570a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	d903      	bls.n	8005726 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005744:	6113      	str	r3, [r2, #16]
 8005746:	e044      	b.n	80057d2 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4413      	add	r3, r2
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	04d9      	lsls	r1, r3, #19
 8005770:	4b8f      	ldr	r3, [pc, #572]	@ (80059b0 <USB_EPStartXfer+0x374>)
 8005772:	400b      	ands	r3, r1
 8005774:	6939      	ldr	r1, [r7, #16]
 8005776:	0148      	lsls	r0, r1, #5
 8005778:	6979      	ldr	r1, [r7, #20]
 800577a:	4401      	add	r1, r0
 800577c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d122      	bne.n	80057d2 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	89fb      	ldrh	r3, [r7, #14]
 80057bc:	075b      	lsls	r3, r3, #29
 80057be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80057c2:	6939      	ldr	r1, [r7, #16]
 80057c4:	0148      	lsls	r0, r1, #5
 80057c6:	6979      	ldr	r1, [r7, #20]
 80057c8:	4401      	add	r1, r0
 80057ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057ce:	4313      	orrs	r3, r2
 80057d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e8:	6939      	ldr	r1, [r7, #16]
 80057ea:	0148      	lsls	r0, r1, #5
 80057ec:	6979      	ldr	r1, [r7, #20]
 80057ee:	4401      	add	r1, r0
 80057f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057f4:	4313      	orrs	r3, r2
 80057f6:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005812:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005816:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	791b      	ldrb	r3, [r3, #4]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d015      	beq.n	800584c <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 813a 	beq.w	8005a9e <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	2101      	movs	r1, #1
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	6979      	ldr	r1, [r7, #20]
 8005842:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005846:	4313      	orrs	r3, r2
 8005848:	634b      	str	r3, [r1, #52]	@ 0x34
 800584a:	e128      	b.n	8005a9e <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d110      	bne.n	800587e <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005876:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e00f      	b.n	800589e <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589c:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68d9      	ldr	r1, [r3, #12]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9a7 	bl	8005c00 <USB_WritePacket>
 80058b2:	e0f4      	b.n	8005a9e <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ce:	0cdb      	lsrs	r3, r3, #19
 80058d0:	04db      	lsls	r3, r3, #19
 80058d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d12f      	bne.n	800595e <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592c:	6939      	ldr	r1, [r7, #16]
 800592e:	0148      	lsls	r0, r1, #5
 8005930:	6979      	ldr	r1, [r7, #20]
 8005932:	4401      	add	r1, r0
 8005934:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005938:	4313      	orrs	r3, r2
 800593a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005956:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800595a:	6113      	str	r3, [r2, #16]
 800595c:	e062      	b.n	8005a24 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d126      	bne.n	80059b4 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800597c:	6939      	ldr	r1, [r7, #16]
 800597e:	0148      	lsls	r0, r1, #5
 8005980:	6979      	ldr	r1, [r7, #20]
 8005982:	4401      	add	r1, r0
 8005984:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005988:	4313      	orrs	r3, r2
 800598a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059aa:	6113      	str	r3, [r2, #16]
 80059ac:	e03a      	b.n	8005a24 <USB_EPStartXfer+0x3e8>
 80059ae:	bf00      	nop
 80059b0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	89fa      	ldrh	r2, [r7, #14]
 80059d0:	fb03 f202 	mul.w	r2, r3, r2
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	89fb      	ldrh	r3, [r7, #14]
 80059e8:	04d9      	lsls	r1, r3, #19
 80059ea:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa8 <USB_EPStartXfer+0x46c>)
 80059ec:	400b      	ands	r3, r1
 80059ee:	6939      	ldr	r1, [r7, #16]
 80059f0:	0148      	lsls	r0, r1, #5
 80059f2:	6979      	ldr	r1, [r7, #20]
 80059f4:	4401      	add	r1, r0
 80059f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059fa:	4313      	orrs	r3, r2
 80059fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a14:	6939      	ldr	r1, [r7, #16]
 8005a16:	0148      	lsls	r0, r1, #5
 8005a18:	6979      	ldr	r1, [r7, #20]
 8005a1a:	4401      	add	r1, r0
 8005a1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a20:	4313      	orrs	r3, r2
 8005a22:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	791b      	ldrb	r3, [r3, #4]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d128      	bne.n	8005a7e <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d110      	bne.n	8005a5e <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	e00f      	b.n	8005a7e <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	1ff80000 	.word	0x1ff80000

08005aac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d14a      	bne.n	8005b60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ade:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ae2:	f040 8086 	bne.w	8005bf2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d902      	bls.n	8005b44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
          break;
 8005b42:	e056      	b.n	8005bf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b5c:	d0e7      	beq.n	8005b2e <USB_EPStopXfer+0x82>
 8005b5e:	e048      	b.n	8005bf2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b78:	d13b      	bne.n	8005bf2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	7812      	ldrb	r2, [r2, #0]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d902      	bls.n	8005bd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd6:	e00c      	b.n	8005bf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bf0:	d0e7      	beq.n	8005bc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b089      	sub	sp, #36	@ 0x24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	460b      	mov	r3, r1
 8005c10:	71fb      	strb	r3, [r7, #7]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005c1e:	88bb      	ldrh	r3, [r7, #4]
 8005c20:	3303      	adds	r3, #3
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e018      	b.n	8005c5e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	031a      	lsls	r2, r3, #12
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c38:	461a      	mov	r2, r3
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d3e2      	bcc.n	8005c2c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3724      	adds	r7, #36	@ 0x24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b08b      	sub	sp, #44	@ 0x2c
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	e014      	b.n	8005cca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	3301      	adds	r3, #1
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	3301      	adds	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	623b      	str	r3, [r7, #32]
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d3e6      	bcc.n	8005ca0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cd2:	8bfb      	ldrh	r3, [r7, #30]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01e      	beq.n	8005d16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f107 0310 	add.w	r3, r7, #16
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	701a      	strb	r2, [r3, #0]
      i++;
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	3301      	adds	r3, #1
 8005d02:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	3301      	adds	r3, #1
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d0a:	8bfb      	ldrh	r3, [r7, #30]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d10:	8bfb      	ldrh	r3, [r7, #30]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ea      	bne.n	8005cec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	372c      	adds	r7, #44	@ 0x2c
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d12c      	bne.n	8005d9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	db12      	blt.n	8005d78 <USB_EPSetStall+0x54>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00f      	beq.n	8005d78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e02b      	b.n	8005df2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db12      	blt.n	8005dd2 <USB_EPSetStall+0xae>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00f      	beq.n	8005dd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005dd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005df0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d128      	bne.n	8005e6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d003      	beq.n	8005e4c <USB_EPClearStall+0x4c>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	791b      	ldrb	r3, [r3, #4]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d138      	bne.n	8005ebe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e027      	b.n	8005ebe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d003      	beq.n	8005e9e <USB_EPClearStall+0x9e>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	791b      	ldrb	r3, [r3, #4]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d10f      	bne.n	8005ebe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ebc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005eee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f46:	f023 0302 	bic.w	r3, r3, #2
 8005f4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f74:	f023 0303 	bic.w	r3, r3, #3
 8005f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f88:	f043 0302 	orr.w	r3, r3, #2
 8005f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	b29b      	uxth	r3, r3
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	4013      	ands	r3, r2
 8006056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006058:	68bb      	ldr	r3, [r7, #8]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006066:	b480      	push	{r7}
 8006068:	b087      	sub	sp, #28
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006088:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	fa22 f303 	lsr.w	r3, r2, r3
 8006096:	01db      	lsls	r3, r3, #7
 8006098:	b2db      	uxtb	r3, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4013      	ands	r3, r2
 80060b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060b4:	68bb      	ldr	r3, [r7, #8]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0301 	and.w	r3, r3, #1
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	333c      	adds	r3, #60	@ 0x3c
 8006136:	3304      	adds	r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4a1c      	ldr	r2, [pc, #112]	@ (80061b0 <USB_EP0_OutStart+0x8c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d90a      	bls.n	800615a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006154:	d101      	bne.n	800615a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e024      	b.n	80061a4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006160:	461a      	mov	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006174:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006188:	f043 0318 	orr.w	r3, r3, #24
 800618c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80061a0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	4f54300a 	.word	0x4f54300a

080061b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061cc:	d901      	bls.n	80061d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e01b      	b.n	800620a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	daf2      	bge.n	80061c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f043 0201 	orr.w	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061f6:	d901      	bls.n	80061fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e006      	b.n	800620a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b01      	cmp	r3, #1
 8006206:	d0f0      	beq.n	80061ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006224:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006228:	f002 ffd8 	bl	80091dc <USBD_static_malloc>
 800622c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	32b0      	adds	r2, #176	@ 0xb0
 800623e:	2100      	movs	r1, #0
 8006240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006244:	2302      	movs	r3, #2
 8006246:	e0d4      	b.n	80063f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006248:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800624c:	2100      	movs	r1, #0
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f003 fa38 	bl	80096c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	32b0      	adds	r2, #176	@ 0xb0
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	32b0      	adds	r2, #176	@ 0xb0
 800626e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	7c1b      	ldrb	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d138      	bne.n	80062f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006280:	4b5e      	ldr	r3, [pc, #376]	@ (80063fc <USBD_CDC_Init+0x1e4>)
 8006282:	7819      	ldrb	r1, [r3, #0]
 8006284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006288:	2202      	movs	r2, #2
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f002 fd92 	bl	8008db4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006290:	4b5a      	ldr	r3, [pc, #360]	@ (80063fc <USBD_CDC_Init+0x1e4>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	3324      	adds	r3, #36	@ 0x24
 80062a6:	2201      	movs	r2, #1
 80062a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062aa:	4b55      	ldr	r3, [pc, #340]	@ (8006400 <USBD_CDC_Init+0x1e8>)
 80062ac:	7819      	ldrb	r1, [r3, #0]
 80062ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062b2:	2202      	movs	r2, #2
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f002 fd7d 	bl	8008db4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062ba:	4b51      	ldr	r3, [pc, #324]	@ (8006400 <USBD_CDC_Init+0x1e8>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f003 020f 	and.w	r2, r3, #15
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062d2:	2201      	movs	r2, #1
 80062d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006404 <USBD_CDC_Init+0x1ec>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	3326      	adds	r3, #38	@ 0x26
 80062ec:	2210      	movs	r2, #16
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	e035      	b.n	800635e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062f2:	4b42      	ldr	r3, [pc, #264]	@ (80063fc <USBD_CDC_Init+0x1e4>)
 80062f4:	7819      	ldrb	r1, [r3, #0]
 80062f6:	2340      	movs	r3, #64	@ 0x40
 80062f8:	2202      	movs	r2, #2
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 fd5a 	bl	8008db4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006300:	4b3e      	ldr	r3, [pc, #248]	@ (80063fc <USBD_CDC_Init+0x1e4>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 020f 	and.w	r2, r3, #15
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3324      	adds	r3, #36	@ 0x24
 8006316:	2201      	movs	r2, #1
 8006318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800631a:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <USBD_CDC_Init+0x1e8>)
 800631c:	7819      	ldrb	r1, [r3, #0]
 800631e:	2340      	movs	r3, #64	@ 0x40
 8006320:	2202      	movs	r2, #2
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f002 fd46 	bl	8008db4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006328:	4b35      	ldr	r3, [pc, #212]	@ (8006400 <USBD_CDC_Init+0x1e8>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 020f 	and.w	r2, r3, #15
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006340:	2201      	movs	r2, #1
 8006342:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006344:	4b2f      	ldr	r3, [pc, #188]	@ (8006404 <USBD_CDC_Init+0x1ec>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3326      	adds	r3, #38	@ 0x26
 800635a:	2210      	movs	r2, #16
 800635c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800635e:	4b29      	ldr	r3, [pc, #164]	@ (8006404 <USBD_CDC_Init+0x1ec>)
 8006360:	7819      	ldrb	r1, [r3, #0]
 8006362:	2308      	movs	r3, #8
 8006364:	2203      	movs	r2, #3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 fd24 	bl	8008db4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800636c:	4b25      	ldr	r3, [pc, #148]	@ (8006404 <USBD_CDC_Init+0x1ec>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 020f 	and.w	r2, r3, #15
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	3324      	adds	r3, #36	@ 0x24
 8006382:	2201      	movs	r2, #1
 8006384:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	33b0      	adds	r3, #176	@ 0xb0
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80063bc:	2302      	movs	r3, #2
 80063be:	e018      	b.n	80063f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7c1b      	ldrb	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <USBD_CDC_Init+0x1e8>)
 80063ca:	7819      	ldrb	r1, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80063d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f002 fe66 	bl	80090a8 <USBD_LL_PrepareReceive>
 80063dc:	e008      	b.n	80063f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063de:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <USBD_CDC_Init+0x1e8>)
 80063e0:	7819      	ldrb	r1, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80063e8:	2340      	movs	r3, #64	@ 0x40
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f002 fe5c 	bl	80090a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000093 	.word	0x20000093
 8006400:	20000094 	.word	0x20000094
 8006404:	20000095 	.word	0x20000095

08006408 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006414:	4b3a      	ldr	r3, [pc, #232]	@ (8006500 <USBD_CDC_DeInit+0xf8>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f002 fd08 	bl	8008e30 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006420:	4b37      	ldr	r3, [pc, #220]	@ (8006500 <USBD_CDC_DeInit+0xf8>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3324      	adds	r3, #36	@ 0x24
 8006436:	2200      	movs	r2, #0
 8006438:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800643a:	4b32      	ldr	r3, [pc, #200]	@ (8006504 <USBD_CDC_DeInit+0xfc>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 fcf5 	bl	8008e30 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006446:	4b2f      	ldr	r3, [pc, #188]	@ (8006504 <USBD_CDC_DeInit+0xfc>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f003 020f 	and.w	r2, r3, #15
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800645e:	2200      	movs	r2, #0
 8006460:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006462:	4b29      	ldr	r3, [pc, #164]	@ (8006508 <USBD_CDC_DeInit+0x100>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f002 fce1 	bl	8008e30 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800646e:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <USBD_CDC_DeInit+0x100>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	3324      	adds	r3, #36	@ 0x24
 8006484:	2200      	movs	r2, #0
 8006486:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006488:	4b1f      	ldr	r3, [pc, #124]	@ (8006508 <USBD_CDC_DeInit+0x100>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3326      	adds	r3, #38	@ 0x26
 800649e:	2200      	movs	r2, #0
 80064a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	32b0      	adds	r2, #176	@ 0xb0
 80064ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01f      	beq.n	80064f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	33b0      	adds	r3, #176	@ 0xb0
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	32b0      	adds	r2, #176	@ 0xb0
 80064d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f002 fe8e 	bl	80091f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	32b0      	adds	r2, #176	@ 0xb0
 80064e6:	2100      	movs	r1, #0
 80064e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000093 	.word	0x20000093
 8006504:	20000094 	.word	0x20000094
 8006508:	20000095 	.word	0x20000095

0800650c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	32b0      	adds	r2, #176	@ 0xb0
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006538:	2303      	movs	r3, #3
 800653a:	e0bf      	b.n	80066bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006544:	2b00      	cmp	r3, #0
 8006546:	d050      	beq.n	80065ea <USBD_CDC_Setup+0xde>
 8006548:	2b20      	cmp	r3, #32
 800654a:	f040 80af 	bne.w	80066ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	88db      	ldrh	r3, [r3, #6]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d03a      	beq.n	80065cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b25b      	sxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	da1b      	bge.n	8006598 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	33b0      	adds	r3, #176	@ 0xb0
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006576:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	88d2      	ldrh	r2, [r2, #6]
 800657c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	2b07      	cmp	r3, #7
 8006584:	bf28      	it	cs
 8006586:	2307      	movcs	r3, #7
 8006588:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	89fa      	ldrh	r2, [r7, #14]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fdbd 	bl	8008110 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006596:	e090      	b.n	80066ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	785a      	ldrb	r2, [r3, #1]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	88db      	ldrh	r3, [r3, #6]
 80065a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80065a8:	d803      	bhi.n	80065b2 <USBD_CDC_Setup+0xa6>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	88db      	ldrh	r3, [r3, #6]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	e000      	b.n	80065b4 <USBD_CDC_Setup+0xa8>
 80065b2:	2240      	movs	r2, #64	@ 0x40
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80065ba:	6939      	ldr	r1, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80065c2:	461a      	mov	r2, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fdcf 	bl	8008168 <USBD_CtlPrepareRx>
      break;
 80065ca:	e076      	b.n	80066ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	33b0      	adds	r3, #176	@ 0xb0
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	7850      	ldrb	r0, [r2, #1]
 80065e2:	2200      	movs	r2, #0
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	4798      	blx	r3
      break;
 80065e8:	e067      	b.n	80066ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	785b      	ldrb	r3, [r3, #1]
 80065ee:	2b0b      	cmp	r3, #11
 80065f0:	d851      	bhi.n	8006696 <USBD_CDC_Setup+0x18a>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <USBD_CDC_Setup+0xec>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006629 	.word	0x08006629
 80065fc:	080066a5 	.word	0x080066a5
 8006600:	08006697 	.word	0x08006697
 8006604:	08006697 	.word	0x08006697
 8006608:	08006697 	.word	0x08006697
 800660c:	08006697 	.word	0x08006697
 8006610:	08006697 	.word	0x08006697
 8006614:	08006697 	.word	0x08006697
 8006618:	08006697 	.word	0x08006697
 800661c:	08006697 	.word	0x08006697
 8006620:	08006653 	.word	0x08006653
 8006624:	0800667d 	.word	0x0800667d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b03      	cmp	r3, #3
 8006632:	d107      	bne.n	8006644 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006634:	f107 030a 	add.w	r3, r7, #10
 8006638:	2202      	movs	r2, #2
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 fd67 	bl	8008110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006642:	e032      	b.n	80066aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fce5 	bl	8008016 <USBD_CtlError>
            ret = USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	75fb      	strb	r3, [r7, #23]
          break;
 8006650:	e02b      	b.n	80066aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d107      	bne.n	800666e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800665e:	f107 030d 	add.w	r3, r7, #13
 8006662:	2201      	movs	r2, #1
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 fd52 	bl	8008110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800666c:	e01d      	b.n	80066aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 fcd0 	bl	8008016 <USBD_CtlError>
            ret = USBD_FAIL;
 8006676:	2303      	movs	r3, #3
 8006678:	75fb      	strb	r3, [r7, #23]
          break;
 800667a:	e016      	b.n	80066aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b03      	cmp	r3, #3
 8006686:	d00f      	beq.n	80066a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fcc3 	bl	8008016 <USBD_CtlError>
            ret = USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006694:	e008      	b.n	80066a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fcbc 	bl	8008016 <USBD_CtlError>
          ret = USBD_FAIL;
 800669e:	2303      	movs	r3, #3
 80066a0:	75fb      	strb	r3, [r7, #23]
          break;
 80066a2:	e002      	b.n	80066aa <USBD_CDC_Setup+0x19e>
          break;
 80066a4:	bf00      	nop
 80066a6:	e008      	b.n	80066ba <USBD_CDC_Setup+0x1ae>
          break;
 80066a8:	bf00      	nop
      }
      break;
 80066aa:	e006      	b.n	80066ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 fcb1 	bl	8008016 <USBD_CtlError>
      ret = USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	75fb      	strb	r3, [r7, #23]
      break;
 80066b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80066d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32b0      	adds	r2, #176	@ 0xb0
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e065      	b.n	80067ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	32b0      	adds	r2, #176	@ 0xb0
 80066f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	3318      	adds	r3, #24
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d02f      	beq.n	8006778 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	f003 020f 	and.w	r2, r3, #15
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	440b      	add	r3, r1
 800672a:	3318      	adds	r3, #24
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	f003 010f 	and.w	r1, r3, #15
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	460b      	mov	r3, r1
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	440b      	add	r3, r1
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4403      	add	r3, r0
 8006740:	331c      	adds	r3, #28
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	fbb2 f1f3 	udiv	r1, r2, r3
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800674e:	2b00      	cmp	r3, #0
 8006750:	d112      	bne.n	8006778 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	f003 020f 	and.w	r2, r3, #15
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	3318      	adds	r3, #24
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800676a:	78f9      	ldrb	r1, [r7, #3]
 800676c:	2300      	movs	r3, #0
 800676e:	2200      	movs	r2, #0
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f002 fc61 	bl	8009038 <USBD_LL_Transmit>
 8006776:	e01f      	b.n	80067b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	33b0      	adds	r3, #176	@ 0xb0
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d010      	beq.n	80067b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	33b0      	adds	r3, #176	@ 0xb0
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32b0      	adds	r2, #176	@ 0xb0
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	32b0      	adds	r2, #176	@ 0xb0
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e01a      	b.n	800682a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f002 fc8d 	bl	8009118 <USBD_LL_GetRxDataSize>
 80067fe:	4602      	mov	r2, r0
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	33b0      	adds	r3, #176	@ 0xb0
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006824:	4611      	mov	r1, r2
 8006826:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	32b0      	adds	r2, #176	@ 0xb0
 8006844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	e024      	b.n	800689e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	33b0      	adds	r3, #176	@ 0xb0
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d019      	beq.n	800689c <USBD_CDC_EP0_RxReady+0x6a>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800686e:	2bff      	cmp	r3, #255	@ 0xff
 8006870:	d014      	beq.n	800689c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	33b0      	adds	r3, #176	@ 0xb0
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800688a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006892:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	22ff      	movs	r2, #255	@ 0xff
 8006898:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068b0:	2182      	movs	r1, #130	@ 0x82
 80068b2:	4818      	ldr	r0, [pc, #96]	@ (8006914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068b4:	f000 fd4f 	bl	8007356 <USBD_GetEpDesc>
 80068b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068ba:	2101      	movs	r1, #1
 80068bc:	4815      	ldr	r0, [pc, #84]	@ (8006914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068be:	f000 fd4a 	bl	8007356 <USBD_GetEpDesc>
 80068c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068c4:	2181      	movs	r1, #129	@ 0x81
 80068c6:	4813      	ldr	r0, [pc, #76]	@ (8006914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068c8:	f000 fd45 	bl	8007356 <USBD_GetEpDesc>
 80068cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2210      	movs	r2, #16
 80068d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068e8:	711a      	strb	r2, [r3, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d006      	beq.n	8006902 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068fc:	711a      	strb	r2, [r3, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2243      	movs	r2, #67	@ 0x43
 8006906:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006908:	4b02      	ldr	r3, [pc, #8]	@ (8006914 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000050 	.word	0x20000050

08006918 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006920:	2182      	movs	r1, #130	@ 0x82
 8006922:	4818      	ldr	r0, [pc, #96]	@ (8006984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006924:	f000 fd17 	bl	8007356 <USBD_GetEpDesc>
 8006928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800692a:	2101      	movs	r1, #1
 800692c:	4815      	ldr	r0, [pc, #84]	@ (8006984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800692e:	f000 fd12 	bl	8007356 <USBD_GetEpDesc>
 8006932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006934:	2181      	movs	r1, #129	@ 0x81
 8006936:	4813      	ldr	r0, [pc, #76]	@ (8006984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006938:	f000 fd0d 	bl	8007356 <USBD_GetEpDesc>
 800693c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2210      	movs	r2, #16
 8006948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2200      	movs	r2, #0
 8006954:	711a      	strb	r2, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f042 0202 	orr.w	r2, r2, #2
 800695c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d006      	beq.n	8006972 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	711a      	strb	r2, [r3, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f042 0202 	orr.w	r2, r2, #2
 8006970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2243      	movs	r2, #67	@ 0x43
 8006976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006978:	4b02      	ldr	r3, [pc, #8]	@ (8006984 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000050 	.word	0x20000050

08006988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006990:	2182      	movs	r1, #130	@ 0x82
 8006992:	4818      	ldr	r0, [pc, #96]	@ (80069f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006994:	f000 fcdf 	bl	8007356 <USBD_GetEpDesc>
 8006998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800699a:	2101      	movs	r1, #1
 800699c:	4815      	ldr	r0, [pc, #84]	@ (80069f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800699e:	f000 fcda 	bl	8007356 <USBD_GetEpDesc>
 80069a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069a4:	2181      	movs	r1, #129	@ 0x81
 80069a6:	4813      	ldr	r0, [pc, #76]	@ (80069f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069a8:	f000 fcd5 	bl	8007356 <USBD_GetEpDesc>
 80069ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2210      	movs	r2, #16
 80069b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069c8:	711a      	strb	r2, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069dc:	711a      	strb	r2, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2243      	movs	r2, #67	@ 0x43
 80069e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069e8:	4b02      	ldr	r3, [pc, #8]	@ (80069f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000050 	.word	0x20000050

080069f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	220a      	movs	r2, #10
 8006a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a06:	4b03      	ldr	r3, [pc, #12]	@ (8006a14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	2000000c 	.word	0x2000000c

08006a18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e009      	b.n	8006a40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	33b0      	adds	r3, #176	@ 0xb0
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	32b0      	adds	r2, #176	@ 0xb0
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e008      	b.n	8006a84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	32b0      	adds	r2, #176	@ 0xb0
 8006aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e004      	b.n	8006abe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
	...

08006acc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	32b0      	adds	r2, #176	@ 0xb0
 8006ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e025      	b.n	8006b3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d11f      	bne.n	8006b3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b04:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <USBD_CDC_TransmitPacket+0x7c>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	f003 020f 	and.w	r2, r3, #15
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4403      	add	r3, r0
 8006b1e:	3318      	adds	r3, #24
 8006b20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b22:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <USBD_CDC_TransmitPacket+0x7c>)
 8006b24:	7819      	ldrb	r1, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 fa80 	bl	8009038 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000093 	.word	0x20000093

08006b4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	32b0      	adds	r2, #176	@ 0xb0
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32b0      	adds	r2, #176	@ 0xb0
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e018      	b.n	8006bac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	7c1b      	ldrb	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b82:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb4 <USBD_CDC_ReceivePacket+0x68>)
 8006b84:	7819      	ldrb	r1, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f002 fa89 	bl	80090a8 <USBD_LL_PrepareReceive>
 8006b96:	e008      	b.n	8006baa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b98:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <USBD_CDC_ReceivePacket+0x68>)
 8006b9a:	7819      	ldrb	r1, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ba2:	2340      	movs	r3, #64	@ 0x40
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 fa7f 	bl	80090a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000094 	.word	0x20000094

08006bb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e01f      	b.n	8006c10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	79fa      	ldrb	r2, [r7, #7]
 8006c02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f002 f857 	bl	8008cb8 <USBD_LL_Init>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e025      	b.n	8006c7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	32ae      	adds	r2, #174	@ 0xae
 8006c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00f      	beq.n	8006c6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	32ae      	adds	r2, #174	@ 0xae
 8006c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	f107 020e 	add.w	r2, r7, #14
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f002 f85f 	bl	8008d50 <USBD_LL_Start>
 8006c92:	4603      	mov	r3, r0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	4611      	mov	r1, r2
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 f936 	bl	8007fa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006d44:	461a      	mov	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d01a      	beq.n	8006d90 <USBD_LL_SetupStage+0x72>
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d822      	bhi.n	8006da4 <USBD_LL_SetupStage+0x86>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <USBD_LL_SetupStage+0x4a>
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d00a      	beq.n	8006d7c <USBD_LL_SetupStage+0x5e>
 8006d66:	e01d      	b.n	8006da4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fb63 	bl	800743c <USBD_StdDevReq>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7a:	e020      	b.n	8006dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fbcb 	bl	8007520 <USBD_StdItfReq>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8e:	e016      	b.n	8006dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fc2d 	bl	80075f8 <USBD_StdEPReq>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73fb      	strb	r3, [r7, #15]
      break;
 8006da2:	e00c      	b.n	8006dbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006daa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f002 f872 	bl	8008e9c <USBD_LL_StallEP>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]
      break;
 8006dbc:	bf00      	nop
  }

  return ret;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d16e      	bne.n	8006ebe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006de6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	f040 8098 	bne.w	8006f24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d913      	bls.n	8006e28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	4293      	cmp	r3, r2
 8006e18:	bf28      	it	cs
 8006e1a:	4613      	movcs	r3, r2
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f001 f9be 	bl	80081a2 <USBD_CtlContinueRx>
 8006e26:	e07d      	b.n	8006f24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d014      	beq.n	8006e60 <USBD_LL_DataOutStage+0x98>
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d81d      	bhi.n	8006e76 <USBD_LL_DataOutStage+0xae>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <USBD_LL_DataOutStage+0x7c>
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d003      	beq.n	8006e4a <USBD_LL_DataOutStage+0x82>
 8006e42:	e018      	b.n	8006e76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	75bb      	strb	r3, [r7, #22]
            break;
 8006e48:	e018      	b.n	8006e7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fa64 	bl	8007322 <USBD_CoreFindIF>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e5e:	e00d      	b.n	8006e7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 fa66 	bl	800733c <USBD_CoreFindEP>
 8006e70:	4603      	mov	r3, r0
 8006e72:	75bb      	strb	r3, [r7, #22]
            break;
 8006e74:	e002      	b.n	8006e7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75bb      	strb	r3, [r7, #22]
            break;
 8006e7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e7c:	7dbb      	ldrb	r3, [r7, #22]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d119      	bne.n	8006eb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d113      	bne.n	8006eb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e8e:	7dba      	ldrb	r2, [r7, #22]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	32ae      	adds	r2, #174	@ 0xae
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00b      	beq.n	8006eb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e9e:	7dba      	ldrb	r2, [r7, #22]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ea6:	7dba      	ldrb	r2, [r7, #22]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	32ae      	adds	r2, #174	@ 0xae
 8006eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f001 f984 	bl	80081c4 <USBD_CtlSendStatus>
 8006ebc:	e032      	b.n	8006f24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ebe:	7afb      	ldrb	r3, [r7, #11]
 8006ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fa37 	bl	800733c <USBD_CoreFindEP>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ed2:	7dbb      	ldrb	r3, [r7, #22]
 8006ed4:	2bff      	cmp	r3, #255	@ 0xff
 8006ed6:	d025      	beq.n	8006f24 <USBD_LL_DataOutStage+0x15c>
 8006ed8:	7dbb      	ldrb	r3, [r7, #22]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d122      	bne.n	8006f24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d117      	bne.n	8006f1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006eea:	7dba      	ldrb	r2, [r7, #22]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	32ae      	adds	r2, #174	@ 0xae
 8006ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00f      	beq.n	8006f1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006efa:	7dba      	ldrb	r2, [r7, #22]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f02:	7dba      	ldrb	r2, [r7, #22]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	32ae      	adds	r2, #174	@ 0xae
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	7afa      	ldrb	r2, [r7, #11]
 8006f10:	4611      	mov	r1, r2
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	e000      	b.n	8006f26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	460b      	mov	r3, r1
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f3c:	7afb      	ldrb	r3, [r7, #11]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d16f      	bne.n	8007022 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3314      	adds	r3, #20
 8006f46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d15a      	bne.n	8007008 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d914      	bls.n	8006f88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f001 f8e6 	bl	8008146 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f002 f891 	bl	80090a8 <USBD_LL_PrepareReceive>
 8006f86:	e03f      	b.n	8007008 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d11c      	bne.n	8006fce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d316      	bcc.n	8006fce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d20f      	bcs.n	8006fce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f001 f8c7 	bl	8008146 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f002 f86e 	bl	80090a8 <USBD_LL_PrepareReceive>
 8006fcc:	e01c      	b.n	8007008 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d10f      	bne.n	8006ffa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ffa:	2180      	movs	r1, #128	@ 0x80
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 ff4d 	bl	8008e9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f001 f8f1 	bl	80081ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d03a      	beq.n	8007088 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff fe42 	bl	8006c9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007020:	e032      	b.n	8007088 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007028:	b2db      	uxtb	r3, r3
 800702a:	4619      	mov	r1, r3
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f985 	bl	800733c <USBD_CoreFindEP>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	2bff      	cmp	r3, #255	@ 0xff
 800703a:	d025      	beq.n	8007088 <USBD_LL_DataInStage+0x15a>
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d122      	bne.n	8007088 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b03      	cmp	r3, #3
 800704c:	d11c      	bne.n	8007088 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800704e:	7dfa      	ldrb	r2, [r7, #23]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	32ae      	adds	r2, #174	@ 0xae
 8007054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d014      	beq.n	8007088 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800705e:	7dfa      	ldrb	r2, [r7, #23]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007066:	7dfa      	ldrb	r2, [r7, #23]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	32ae      	adds	r2, #174	@ 0xae
 800706c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	7afa      	ldrb	r2, [r7, #11]
 8007074:	4611      	mov	r1, r2
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800707e:	7dbb      	ldrb	r3, [r7, #22]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007084:	7dbb      	ldrb	r3, [r7, #22]
 8007086:	e000      	b.n	800708a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d014      	beq.n	80070f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00e      	beq.n	80070f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6852      	ldr	r2, [r2, #4]
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	4611      	mov	r1, r2
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070f8:	2340      	movs	r3, #64	@ 0x40
 80070fa:	2200      	movs	r2, #0
 80070fc:	2100      	movs	r1, #0
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 fe58 	bl	8008db4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2240      	movs	r2, #64	@ 0x40
 8007110:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007114:	2340      	movs	r3, #64	@ 0x40
 8007116:	2200      	movs	r2, #0
 8007118:	2180      	movs	r1, #128	@ 0x80
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fe4a 	bl	8008db4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2240      	movs	r2, #64	@ 0x40
 800712a:	621a      	str	r2, [r3, #32]

  return ret;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b04      	cmp	r3, #4
 8007168:	d006      	beq.n	8007178 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007170:	b2da      	uxtb	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2204      	movs	r2, #4
 800717c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d106      	bne.n	80071b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d110      	bne.n	80071f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32ae      	adds	r2, #174	@ 0xae
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e01c      	b.n	800725a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d115      	bne.n	8007258 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32ae      	adds	r2, #174	@ 0xae
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	32ae      	adds	r2, #174	@ 0xae
 800724a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	4611      	mov	r1, r2
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	32ae      	adds	r2, #174	@ 0xae
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	e01c      	b.n	80072be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b03      	cmp	r3, #3
 800728e:	d115      	bne.n	80072bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	32ae      	adds	r2, #174	@ 0xae
 800729a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32ae      	adds	r2, #174	@ 0xae
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	78fa      	ldrb	r2, [r7, #3]
 80072b6:	4611      	mov	r1, r2
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00e      	beq.n	8007318 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6852      	ldr	r2, [r2, #4]
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	4611      	mov	r1, r2
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800732e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007348:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	885b      	ldrh	r3, [r3, #2]
 8007372:	b29b      	uxth	r3, r3
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	7812      	ldrb	r2, [r2, #0]
 8007378:	4293      	cmp	r3, r2
 800737a:	d91f      	bls.n	80073bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007382:	e013      	b.n	80073ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007384:	f107 030a 	add.w	r3, r7, #10
 8007388:	4619      	mov	r1, r3
 800738a:	6978      	ldr	r0, [r7, #20]
 800738c:	f000 f81b 	bl	80073c6 <USBD_GetNextDesc>
 8007390:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b05      	cmp	r3, #5
 8007398:	d108      	bne.n	80073ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	789b      	ldrb	r3, [r3, #2]
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d008      	beq.n	80073ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	885b      	ldrh	r3, [r3, #2]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	897b      	ldrh	r3, [r7, #10]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d8e5      	bhi.n	8007384 <USBD_GetEpDesc+0x2e>
 80073b8:	e000      	b.n	80073bc <USBD_GetEpDesc+0x66>
          break;
 80073ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073bc:	693b      	ldr	r3, [r7, #16]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	7812      	ldrb	r2, [r2, #0]
 80073dc:	4413      	add	r3, r2
 80073de:	b29a      	uxth	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073fe:	b480      	push	{r7}
 8007400:	b087      	sub	sp, #28
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	3301      	adds	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800741c:	8a3b      	ldrh	r3, [r7, #16]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	b21a      	sxth	r2, r3
 8007422:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007426:	4313      	orrs	r3, r2
 8007428:	b21b      	sxth	r3, r3
 800742a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800742c:	89fb      	ldrh	r3, [r7, #14]
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007452:	2b40      	cmp	r3, #64	@ 0x40
 8007454:	d005      	beq.n	8007462 <USBD_StdDevReq+0x26>
 8007456:	2b40      	cmp	r3, #64	@ 0x40
 8007458:	d857      	bhi.n	800750a <USBD_StdDevReq+0xce>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00f      	beq.n	800747e <USBD_StdDevReq+0x42>
 800745e:	2b20      	cmp	r3, #32
 8007460:	d153      	bne.n	800750a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	32ae      	adds	r2, #174	@ 0xae
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]
      break;
 800747c:	e04a      	b.n	8007514 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b09      	cmp	r3, #9
 8007484:	d83b      	bhi.n	80074fe <USBD_StdDevReq+0xc2>
 8007486:	a201      	add	r2, pc, #4	@ (adr r2, 800748c <USBD_StdDevReq+0x50>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074e1 	.word	0x080074e1
 8007490:	080074f5 	.word	0x080074f5
 8007494:	080074ff 	.word	0x080074ff
 8007498:	080074eb 	.word	0x080074eb
 800749c:	080074ff 	.word	0x080074ff
 80074a0:	080074bf 	.word	0x080074bf
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074ff 	.word	0x080074ff
 80074ac:	080074d7 	.word	0x080074d7
 80074b0:	080074c9 	.word	0x080074c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa3c 	bl	8007934 <USBD_GetDescriptor>
          break;
 80074bc:	e024      	b.n	8007508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fbcb 	bl	8007c5c <USBD_SetAddress>
          break;
 80074c6:	e01f      	b.n	8007508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fc0a 	bl	8007ce4 <USBD_SetConfig>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]
          break;
 80074d4:	e018      	b.n	8007508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fcad 	bl	8007e38 <USBD_GetConfig>
          break;
 80074de:	e013      	b.n	8007508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fcde 	bl	8007ea4 <USBD_GetStatus>
          break;
 80074e8:	e00e      	b.n	8007508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fd0d 	bl	8007f0c <USBD_SetFeature>
          break;
 80074f2:	e009      	b.n	8007508 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fd31 	bl	8007f5e <USBD_ClrFeature>
          break;
 80074fc:	e004      	b.n	8007508 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fd88 	bl	8008016 <USBD_CtlError>
          break;
 8007506:	bf00      	nop
      }
      break;
 8007508:	e004      	b.n	8007514 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fd82 	bl	8008016 <USBD_CtlError>
      break;
 8007512:	bf00      	nop
  }

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop

08007520 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007536:	2b40      	cmp	r3, #64	@ 0x40
 8007538:	d005      	beq.n	8007546 <USBD_StdItfReq+0x26>
 800753a:	2b40      	cmp	r3, #64	@ 0x40
 800753c:	d852      	bhi.n	80075e4 <USBD_StdItfReq+0xc4>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <USBD_StdItfReq+0x26>
 8007542:	2b20      	cmp	r3, #32
 8007544:	d14e      	bne.n	80075e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800754c:	b2db      	uxtb	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	2b02      	cmp	r3, #2
 8007552:	d840      	bhi.n	80075d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	889b      	ldrh	r3, [r3, #4]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d836      	bhi.n	80075cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	889b      	ldrh	r3, [r3, #4]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fedb 	bl	8007322 <USBD_CoreFindIF>
 800756c:	4603      	mov	r3, r0
 800756e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2bff      	cmp	r3, #255	@ 0xff
 8007574:	d01d      	beq.n	80075b2 <USBD_StdItfReq+0x92>
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11a      	bne.n	80075b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800757c:	7bba      	ldrb	r2, [r7, #14]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	32ae      	adds	r2, #174	@ 0xae
 8007582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00f      	beq.n	80075ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800758c:	7bba      	ldrb	r2, [r7, #14]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007594:	7bba      	ldrb	r2, [r7, #14]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32ae      	adds	r2, #174	@ 0xae
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075aa:	e004      	b.n	80075b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075b0:	e001      	b.n	80075b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075b2:	2303      	movs	r3, #3
 80075b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	88db      	ldrh	r3, [r3, #6]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d110      	bne.n	80075e0 <USBD_StdItfReq+0xc0>
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fdfd 	bl	80081c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ca:	e009      	b.n	80075e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fd21 	bl	8008016 <USBD_CtlError>
          break;
 80075d4:	e004      	b.n	80075e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fd1c 	bl	8008016 <USBD_CtlError>
          break;
 80075de:	e000      	b.n	80075e2 <USBD_StdItfReq+0xc2>
          break;
 80075e0:	bf00      	nop
      }
      break;
 80075e2:	e004      	b.n	80075ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fd15 	bl	8008016 <USBD_CtlError>
      break;
 80075ec:	bf00      	nop
  }

  return ret;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	889b      	ldrh	r3, [r3, #4]
 800760a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007614:	2b40      	cmp	r3, #64	@ 0x40
 8007616:	d007      	beq.n	8007628 <USBD_StdEPReq+0x30>
 8007618:	2b40      	cmp	r3, #64	@ 0x40
 800761a:	f200 817f 	bhi.w	800791c <USBD_StdEPReq+0x324>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02a      	beq.n	8007678 <USBD_StdEPReq+0x80>
 8007622:	2b20      	cmp	r3, #32
 8007624:	f040 817a 	bne.w	800791c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff fe85 	bl	800733c <USBD_CoreFindEP>
 8007632:	4603      	mov	r3, r0
 8007634:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007636:	7b7b      	ldrb	r3, [r7, #13]
 8007638:	2bff      	cmp	r3, #255	@ 0xff
 800763a:	f000 8174 	beq.w	8007926 <USBD_StdEPReq+0x32e>
 800763e:	7b7b      	ldrb	r3, [r7, #13]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 8170 	bne.w	8007926 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007646:	7b7a      	ldrb	r2, [r7, #13]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800764e:	7b7a      	ldrb	r2, [r7, #13]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	32ae      	adds	r2, #174	@ 0xae
 8007654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8163 	beq.w	8007926 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007660:	7b7a      	ldrb	r2, [r7, #13]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	32ae      	adds	r2, #174	@ 0xae
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007676:	e156      	b.n	8007926 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d008      	beq.n	8007692 <USBD_StdEPReq+0x9a>
 8007680:	2b03      	cmp	r3, #3
 8007682:	f300 8145 	bgt.w	8007910 <USBD_StdEPReq+0x318>
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 809b 	beq.w	80077c2 <USBD_StdEPReq+0x1ca>
 800768c:	2b01      	cmp	r3, #1
 800768e:	d03c      	beq.n	800770a <USBD_StdEPReq+0x112>
 8007690:	e13e      	b.n	8007910 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d002      	beq.n	80076a4 <USBD_StdEPReq+0xac>
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d016      	beq.n	80076d0 <USBD_StdEPReq+0xd8>
 80076a2:	e02c      	b.n	80076fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00d      	beq.n	80076c6 <USBD_StdEPReq+0xce>
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b80      	cmp	r3, #128	@ 0x80
 80076ae:	d00a      	beq.n	80076c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fbf1 	bl	8008e9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ba:	2180      	movs	r1, #128	@ 0x80
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fbed 	bl	8008e9c <USBD_LL_StallEP>
 80076c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076c4:	e020      	b.n	8007708 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fca4 	bl	8008016 <USBD_CtlError>
              break;
 80076ce:	e01b      	b.n	8007708 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	885b      	ldrh	r3, [r3, #2]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10e      	bne.n	80076f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00b      	beq.n	80076f6 <USBD_StdEPReq+0xfe>
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b80      	cmp	r3, #128	@ 0x80
 80076e2:	d008      	beq.n	80076f6 <USBD_StdEPReq+0xfe>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	88db      	ldrh	r3, [r3, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fbd3 	bl	8008e9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fd64 	bl	80081c4 <USBD_CtlSendStatus>

              break;
 80076fc:	e004      	b.n	8007708 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc88 	bl	8008016 <USBD_CtlError>
              break;
 8007706:	bf00      	nop
          }
          break;
 8007708:	e107      	b.n	800791a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d002      	beq.n	800771c <USBD_StdEPReq+0x124>
 8007716:	2b03      	cmp	r3, #3
 8007718:	d016      	beq.n	8007748 <USBD_StdEPReq+0x150>
 800771a:	e04b      	b.n	80077b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00d      	beq.n	800773e <USBD_StdEPReq+0x146>
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	2b80      	cmp	r3, #128	@ 0x80
 8007726:	d00a      	beq.n	800773e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fbb5 	bl	8008e9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007732:	2180      	movs	r1, #128	@ 0x80
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 fbb1 	bl	8008e9c <USBD_LL_StallEP>
 800773a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800773c:	e040      	b.n	80077c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc68 	bl	8008016 <USBD_CtlError>
              break;
 8007746:	e03b      	b.n	80077c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	885b      	ldrh	r3, [r3, #2]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d136      	bne.n	80077be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fbd2 	bl	8008f08 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fd2d 	bl	80081c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fde4 	bl	800733c <USBD_CoreFindEP>
 8007774:	4603      	mov	r3, r0
 8007776:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007778:	7b7b      	ldrb	r3, [r7, #13]
 800777a:	2bff      	cmp	r3, #255	@ 0xff
 800777c:	d01f      	beq.n	80077be <USBD_StdEPReq+0x1c6>
 800777e:	7b7b      	ldrb	r3, [r7, #13]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d11c      	bne.n	80077be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007784:	7b7a      	ldrb	r2, [r7, #13]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800778c:	7b7a      	ldrb	r2, [r7, #13]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32ae      	adds	r2, #174	@ 0xae
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800779c:	7b7a      	ldrb	r2, [r7, #13]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	32ae      	adds	r2, #174	@ 0xae
 80077a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077b2:	e004      	b.n	80077be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fc2d 	bl	8008016 <USBD_CtlError>
              break;
 80077bc:	e000      	b.n	80077c0 <USBD_StdEPReq+0x1c8>
              break;
 80077be:	bf00      	nop
          }
          break;
 80077c0:	e0ab      	b.n	800791a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d002      	beq.n	80077d4 <USBD_StdEPReq+0x1dc>
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d032      	beq.n	8007838 <USBD_StdEPReq+0x240>
 80077d2:	e097      	b.n	8007904 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <USBD_StdEPReq+0x1f2>
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b80      	cmp	r3, #128	@ 0x80
 80077de:	d004      	beq.n	80077ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fc17 	bl	8008016 <USBD_CtlError>
                break;
 80077e8:	e091      	b.n	800790e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da0b      	bge.n	800780a <USBD_StdEPReq+0x212>
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	3310      	adds	r3, #16
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4413      	add	r3, r2
 8007806:	3304      	adds	r3, #4
 8007808:	e00b      	b.n	8007822 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	3304      	adds	r3, #4
 8007822:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2202      	movs	r2, #2
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc6d 	bl	8008110 <USBD_CtlSendData>
              break;
 8007836:	e06a      	b.n	800790e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800783c:	2b00      	cmp	r3, #0
 800783e:	da11      	bge.n	8007864 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	f003 020f 	and.w	r2, r3, #15
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	3324      	adds	r3, #36	@ 0x24
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d117      	bne.n	800788a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fbda 	bl	8008016 <USBD_CtlError>
                  break;
 8007862:	e054      	b.n	800790e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	f003 020f 	and.w	r2, r3, #15
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fbc7 	bl	8008016 <USBD_CtlError>
                  break;
 8007888:	e041      	b.n	800790e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800788a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	da0b      	bge.n	80078aa <USBD_StdEPReq+0x2b2>
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	3310      	adds	r3, #16
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	4413      	add	r3, r2
 80078a6:	3304      	adds	r3, #4
 80078a8:	e00b      	b.n	80078c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	3304      	adds	r3, #4
 80078c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <USBD_StdEPReq+0x2d8>
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b80      	cmp	r3, #128	@ 0x80
 80078ce:	d103      	bne.n	80078d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e00e      	b.n	80078f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fb49 	bl	8008f74 <USBD_LL_IsStallEP>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2201      	movs	r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e002      	b.n	80078f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2202      	movs	r2, #2
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc07 	bl	8008110 <USBD_CtlSendData>
              break;
 8007902:	e004      	b.n	800790e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fb85 	bl	8008016 <USBD_CtlError>
              break;
 800790c:	bf00      	nop
          }
          break;
 800790e:	e004      	b.n	800791a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fb7f 	bl	8008016 <USBD_CtlError>
          break;
 8007918:	bf00      	nop
      }
      break;
 800791a:	e005      	b.n	8007928 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fb79 	bl	8008016 <USBD_CtlError>
      break;
 8007924:	e000      	b.n	8007928 <USBD_StdEPReq+0x330>
      break;
 8007926:	bf00      	nop
  }

  return ret;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	2b0e      	cmp	r3, #14
 8007956:	f200 8152 	bhi.w	8007bfe <USBD_GetDescriptor+0x2ca>
 800795a:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <USBD_GetDescriptor+0x2c>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	080079d1 	.word	0x080079d1
 8007964:	080079e9 	.word	0x080079e9
 8007968:	08007a29 	.word	0x08007a29
 800796c:	08007bff 	.word	0x08007bff
 8007970:	08007bff 	.word	0x08007bff
 8007974:	08007b9f 	.word	0x08007b9f
 8007978:	08007bcb 	.word	0x08007bcb
 800797c:	08007bff 	.word	0x08007bff
 8007980:	08007bff 	.word	0x08007bff
 8007984:	08007bff 	.word	0x08007bff
 8007988:	08007bff 	.word	0x08007bff
 800798c:	08007bff 	.word	0x08007bff
 8007990:	08007bff 	.word	0x08007bff
 8007994:	08007bff 	.word	0x08007bff
 8007998:	0800799d 	.word	0x0800799d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079be:	e126      	b.n	8007c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fb27 	bl	8008016 <USBD_CtlError>
        err++;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	3301      	adds	r3, #1
 80079cc:	72fb      	strb	r3, [r7, #11]
      break;
 80079ce:	e11e      	b.n	8007c0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	7c12      	ldrb	r2, [r2, #16]
 80079dc:	f107 0108 	add.w	r1, r7, #8
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
 80079e4:	60f8      	str	r0, [r7, #12]
      break;
 80079e6:	e112      	b.n	8007c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	7c1b      	ldrb	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10d      	bne.n	8007a0c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	f107 0208 	add.w	r2, r7, #8
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	2202      	movs	r2, #2
 8007a08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a0a:	e100      	b.n	8007c0e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a14:	f107 0208 	add.w	r2, r7, #8
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	2202      	movs	r2, #2
 8007a24:	701a      	strb	r2, [r3, #0]
      break;
 8007a26:	e0f2      	b.n	8007c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	885b      	ldrh	r3, [r3, #2]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	f200 80ac 	bhi.w	8007b8c <USBD_GetDescriptor+0x258>
 8007a34:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <USBD_GetDescriptor+0x108>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a55 	.word	0x08007a55
 8007a40:	08007a89 	.word	0x08007a89
 8007a44:	08007abd 	.word	0x08007abd
 8007a48:	08007af1 	.word	0x08007af1
 8007a4c:	08007b25 	.word	0x08007b25
 8007a50:	08007b59 	.word	0x08007b59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	7c12      	ldrb	r2, [r2, #16]
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	4610      	mov	r0, r2
 8007a72:	4798      	blx	r3
 8007a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a76:	e091      	b.n	8007b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 facb 	bl	8008016 <USBD_CtlError>
            err++;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	3301      	adds	r3, #1
 8007a84:	72fb      	strb	r3, [r7, #11]
          break;
 8007a86:	e089      	b.n	8007b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aaa:	e077      	b.n	8007b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fab1 	bl	8008016 <USBD_CtlError>
            err++;
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aba:	e06f      	b.n	8007b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7c12      	ldrb	r2, [r2, #16]
 8007ad4:	f107 0108 	add.w	r1, r7, #8
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
 8007adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ade:	e05d      	b.n	8007b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa97 	bl	8008016 <USBD_CtlError>
            err++;
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	3301      	adds	r3, #1
 8007aec:	72fb      	strb	r3, [r7, #11]
          break;
 8007aee:	e055      	b.n	8007b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	7c12      	ldrb	r2, [r2, #16]
 8007b08:	f107 0108 	add.w	r1, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b12:	e043      	b.n	8007b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa7d 	bl	8008016 <USBD_CtlError>
            err++;
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	72fb      	strb	r3, [r7, #11]
          break;
 8007b22:	e03b      	b.n	8007b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 0108 	add.w	r1, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b46:	e029      	b.n	8007b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa63 	bl	8008016 <USBD_CtlError>
            err++;
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	3301      	adds	r3, #1
 8007b54:	72fb      	strb	r3, [r7, #11]
          break;
 8007b56:	e021      	b.n	8007b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	7c12      	ldrb	r2, [r2, #16]
 8007b70:	f107 0108 	add.w	r1, r7, #8
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7a:	e00f      	b.n	8007b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa49 	bl	8008016 <USBD_CtlError>
            err++;
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	3301      	adds	r3, #1
 8007b88:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8a:	e007      	b.n	8007b9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa41 	bl	8008016 <USBD_CtlError>
          err++;
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	3301      	adds	r3, #1
 8007b98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b9a:	bf00      	nop
      }
      break;
 8007b9c:	e037      	b.n	8007c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7c1b      	ldrb	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bae:	f107 0208 	add.w	r2, r7, #8
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4798      	blx	r3
 8007bb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bb8:	e029      	b.n	8007c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fa2a 	bl	8008016 <USBD_CtlError>
        err++;
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc8:	e021      	b.n	8007c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7c1b      	ldrb	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10d      	bne.n	8007bee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bda:	f107 0208 	add.w	r2, r7, #8
 8007bde:	4610      	mov	r0, r2
 8007be0:	4798      	blx	r3
 8007be2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3301      	adds	r3, #1
 8007be8:	2207      	movs	r2, #7
 8007bea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bec:	e00f      	b.n	8007c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa10 	bl	8008016 <USBD_CtlError>
        err++;
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8007bfc:	e007      	b.n	8007c0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fa08 	bl	8008016 <USBD_CtlError>
      err++;
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c0c:	bf00      	nop
  }

  if (err != 0U)
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d11e      	bne.n	8007c52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	88db      	ldrh	r3, [r3, #6]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d016      	beq.n	8007c4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007c1c:	893b      	ldrh	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00e      	beq.n	8007c40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	88da      	ldrh	r2, [r3, #6]
 8007c26:	893b      	ldrh	r3, [r7, #8]
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	bf28      	it	cs
 8007c2c:	4613      	movcs	r3, r2
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c32:	893b      	ldrh	r3, [r7, #8]
 8007c34:	461a      	mov	r2, r3
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa69 	bl	8008110 <USBD_CtlSendData>
 8007c3e:	e009      	b.n	8007c54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9e7 	bl	8008016 <USBD_CtlError>
 8007c48:	e004      	b.n	8007c54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 faba 	bl	80081c4 <USBD_CtlSendStatus>
 8007c50:	e000      	b.n	8007c54 <USBD_GetDescriptor+0x320>
    return;
 8007c52:	bf00      	nop
  }
}
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop

08007c5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	889b      	ldrh	r3, [r3, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d131      	bne.n	8007cd2 <USBD_SetAddress+0x76>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	88db      	ldrh	r3, [r3, #6]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d12d      	bne.n	8007cd2 <USBD_SetAddress+0x76>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c7c:	d829      	bhi.n	8007cd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d104      	bne.n	8007ca0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f9bc 	bl	8008016 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9e:	e01d      	b.n	8007cdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	7bfa      	ldrb	r2, [r7, #15]
 8007ca4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 f98d 	bl	8008fcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa86 	bl	80081c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc6:	e009      	b.n	8007cdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	e004      	b.n	8007cdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f99e 	bl	8008016 <USBD_CtlError>
  }
}
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007cfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d905      	bls.n	8007d10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f985 	bl	8008016 <USBD_CtlError>
    return USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e08c      	b.n	8007e2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d002      	beq.n	8007d22 <USBD_SetConfig+0x3e>
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d029      	beq.n	8007d74 <USBD_SetConfig+0x90>
 8007d20:	e075      	b.n	8007e0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d22:	4b44      	ldr	r3, [pc, #272]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d020      	beq.n	8007d6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d2a:	4b42      	ldr	r3, [pc, #264]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d34:	4b3f      	ldr	r3, [pc, #252]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fe ffb9 	bl	8006cb2 <USBD_SetClassConfig>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f962 	bl	8008016 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d5a:	e065      	b.n	8007e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa31 	bl	80081c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2203      	movs	r2, #3
 8007d66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d6a:	e05d      	b.n	8007e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa29 	bl	80081c4 <USBD_CtlSendStatus>
      break;
 8007d72:	e059      	b.n	8007e28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d74:	4b2f      	ldr	r3, [pc, #188]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d112      	bne.n	8007da2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007d84:	4b2b      	ldr	r3, [pc, #172]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d8e:	4b29      	ldr	r3, [pc, #164]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7fe ffa8 	bl	8006cea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa12 	bl	80081c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007da0:	e042      	b.n	8007e28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007da2:	4b24      	ldr	r3, [pc, #144]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d02a      	beq.n	8007e06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fe ff96 	bl	8006cea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7fe ff6f 	bl	8006cb2 <USBD_SetClassConfig>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00f      	beq.n	8007dfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f918 	bl	8008016 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fe ff7b 	bl	8006cea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007dfc:	e014      	b.n	8007e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f9e0 	bl	80081c4 <USBD_CtlSendStatus>
      break;
 8007e04:	e010      	b.n	8007e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f9dc 	bl	80081c4 <USBD_CtlSendStatus>
      break;
 8007e0c:	e00c      	b.n	8007e28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f900 	bl	8008016 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e16:	4b07      	ldr	r3, [pc, #28]	@ (8007e34 <USBD_SetConfig+0x150>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7fe ff64 	bl	8006cea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	73fb      	strb	r3, [r7, #15]
      break;
 8007e26:	bf00      	nop
  }

  return ret;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000208 	.word	0x20000208

08007e38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d004      	beq.n	8007e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f8e2 	bl	8008016 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e52:	e023      	b.n	8007e9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	dc02      	bgt.n	8007e66 <USBD_GetConfig+0x2e>
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dc03      	bgt.n	8007e6c <USBD_GetConfig+0x34>
 8007e64:	e015      	b.n	8007e92 <USBD_GetConfig+0x5a>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d00b      	beq.n	8007e82 <USBD_GetConfig+0x4a>
 8007e6a:	e012      	b.n	8007e92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3308      	adds	r3, #8
 8007e76:	2201      	movs	r2, #1
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f948 	bl	8008110 <USBD_CtlSendData>
        break;
 8007e80:	e00c      	b.n	8007e9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3304      	adds	r3, #4
 8007e86:	2201      	movs	r2, #1
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f940 	bl	8008110 <USBD_CtlSendData>
        break;
 8007e90:	e004      	b.n	8007e9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8be 	bl	8008016 <USBD_CtlError>
        break;
 8007e9a:	bf00      	nop
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d81e      	bhi.n	8007efa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	88db      	ldrh	r3, [r3, #6]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d004      	beq.n	8007ece <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8a5 	bl	8008016 <USBD_CtlError>
        break;
 8007ecc:	e01a      	b.n	8007f04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f043 0202 	orr.w	r2, r3, #2
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	330c      	adds	r3, #12
 8007eee:	2202      	movs	r2, #2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f90c 	bl	8008110 <USBD_CtlSendData>
      break;
 8007ef8:	e004      	b.n	8007f04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f88a 	bl	8008016 <USBD_CtlError>
      break;
 8007f02:	bf00      	nop
  }
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d107      	bne.n	8007f2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f94c 	bl	80081c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f2c:	e013      	b.n	8007f56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d10b      	bne.n	8007f4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	889b      	ldrh	r3, [r3, #4]
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f93c 	bl	80081c4 <USBD_CtlSendStatus>
}
 8007f4c:	e003      	b.n	8007f56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f860 	bl	8008016 <USBD_CtlError>
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	3b01      	subs	r3, #1
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d80b      	bhi.n	8007f8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	885b      	ldrh	r3, [r3, #2]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d10c      	bne.n	8007f98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f91c 	bl	80081c4 <USBD_CtlSendStatus>
      }
      break;
 8007f8c:	e004      	b.n	8007f98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f840 	bl	8008016 <USBD_CtlError>
      break;
 8007f96:	e000      	b.n	8007f9a <USBD_ClrFeature+0x3c>
      break;
 8007f98:	bf00      	nop
  }
}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	781a      	ldrb	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fa16 	bl	80073fe <SWAPBYTE>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fa09 	bl	80073fe <SWAPBYTE>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff f9fc 	bl	80073fe <SWAPBYTE>
 8008006:	4603      	mov	r3, r0
 8008008:	461a      	mov	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	80da      	strh	r2, [r3, #6]
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008020:	2180      	movs	r1, #128	@ 0x80
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 ff3a 	bl	8008e9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008028:	2100      	movs	r1, #0
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 ff36 	bl	8008e9c <USBD_LL_StallEP>
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d042      	beq.n	80080d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008052:	6938      	ldr	r0, [r7, #16]
 8008054:	f000 f842 	bl	80080dc <USBD_GetLen>
 8008058:	4603      	mov	r3, r0
 800805a:	3301      	adds	r3, #1
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008062:	d808      	bhi.n	8008076 <USBD_GetString+0x3e>
 8008064:	6938      	ldr	r0, [r7, #16]
 8008066:	f000 f839 	bl	80080dc <USBD_GetLen>
 800806a:	4603      	mov	r3, r0
 800806c:	3301      	adds	r3, #1
 800806e:	b29b      	uxth	r3, r3
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	e001      	b.n	800807a <USBD_GetString+0x42>
 8008076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	4413      	add	r3, r2
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	7812      	ldrb	r2, [r2, #0]
 8008088:	701a      	strb	r2, [r3, #0]
  idx++;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	3301      	adds	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	4413      	add	r3, r2
 8008096:	2203      	movs	r2, #3
 8008098:	701a      	strb	r2, [r3, #0]
  idx++;
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	3301      	adds	r3, #1
 800809e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080a0:	e013      	b.n	80080ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	4413      	add	r3, r2
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	7812      	ldrb	r2, [r2, #0]
 80080ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3301      	adds	r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
    idx++;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	3301      	adds	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	4413      	add	r3, r2
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	3301      	adds	r3, #1
 80080c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e7      	bne.n	80080a2 <USBD_GetString+0x6a>
 80080d2:	e000      	b.n	80080d6 <USBD_GetString+0x9e>
    return;
 80080d4:	bf00      	nop
  }
}
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080ec:	e005      	b.n	80080fa <USBD_GetLen+0x1e>
  {
    len++;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	3301      	adds	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1f5      	bne.n	80080ee <USBD_GetLen+0x12>
  }

  return len;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2202      	movs	r2, #2
 8008120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	2100      	movs	r1, #0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 ff7e 	bl	8009038 <USBD_LL_Transmit>

  return USBD_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	2100      	movs	r1, #0
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 ff6d 	bl	8009038 <USBD_LL_Transmit>

  return USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2203      	movs	r2, #3
 8008178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 ff88 	bl	80090a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	2100      	movs	r1, #0
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 ff77 	bl	80090a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2204      	movs	r2, #4
 80081d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 ff2c 	bl	8009038 <USBD_LL_Transmit>

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2205      	movs	r2, #5
 80081f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081fa:	2300      	movs	r3, #0
 80081fc:	2200      	movs	r2, #0
 80081fe:	2100      	movs	r1, #0
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 ff51 	bl	80090a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008214:	2200      	movs	r2, #0
 8008216:	4912      	ldr	r1, [pc, #72]	@ (8008260 <MX_USB_DEVICE_Init+0x50>)
 8008218:	4812      	ldr	r0, [pc, #72]	@ (8008264 <MX_USB_DEVICE_Init+0x54>)
 800821a:	f7fe fccd 	bl	8006bb8 <USBD_Init>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008224:	f7f8 fed2 	bl	8000fcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008228:	490f      	ldr	r1, [pc, #60]	@ (8008268 <MX_USB_DEVICE_Init+0x58>)
 800822a:	480e      	ldr	r0, [pc, #56]	@ (8008264 <MX_USB_DEVICE_Init+0x54>)
 800822c:	f7fe fcf4 	bl	8006c18 <USBD_RegisterClass>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008236:	f7f8 fec9 	bl	8000fcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800823a:	490c      	ldr	r1, [pc, #48]	@ (800826c <MX_USB_DEVICE_Init+0x5c>)
 800823c:	4809      	ldr	r0, [pc, #36]	@ (8008264 <MX_USB_DEVICE_Init+0x54>)
 800823e:	f7fe fbeb 	bl	8006a18 <USBD_CDC_RegisterInterface>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008248:	f7f8 fec0 	bl	8000fcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800824c:	4805      	ldr	r0, [pc, #20]	@ (8008264 <MX_USB_DEVICE_Init+0x54>)
 800824e:	f7fe fd19 	bl	8006c84 <USBD_Start>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008258:	f7f8 feb8 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800825c:	bf00      	nop
 800825e:	bd80      	pop	{r7, pc}
 8008260:	200000ac 	.word	0x200000ac
 8008264:	2000020c 	.word	0x2000020c
 8008268:	20000018 	.word	0x20000018
 800826c:	20000098 	.word	0x20000098

08008270 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008274:	2200      	movs	r2, #0
 8008276:	4907      	ldr	r1, [pc, #28]	@ (8008294 <CDC_Init_FS+0x24>)
 8008278:	4807      	ldr	r0, [pc, #28]	@ (8008298 <CDC_Init_FS+0x28>)
 800827a:	f7fe fbe7 	bl	8006a4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800827e:	4907      	ldr	r1, [pc, #28]	@ (800829c <CDC_Init_FS+0x2c>)
 8008280:	4805      	ldr	r0, [pc, #20]	@ (8008298 <CDC_Init_FS+0x28>)
 8008282:	f7fe fc05 	bl	8006a90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008286:	4804      	ldr	r0, [pc, #16]	@ (8008298 <CDC_Init_FS+0x28>)
 8008288:	f7fe fc60 	bl	8006b4c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800828c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800828e:	4618      	mov	r0, r3
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000d6c 	.word	0x20000d6c
 8008298:	2000020c 	.word	0x2000020c
 800829c:	2000056c 	.word	0x2000056c

080082a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
 80082bc:	4613      	mov	r3, r2
 80082be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	2b23      	cmp	r3, #35	@ 0x23
 80082c4:	d84a      	bhi.n	800835c <CDC_Control_FS+0xac>
 80082c6:	a201      	add	r2, pc, #4	@ (adr r2, 80082cc <CDC_Control_FS+0x1c>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	0800835d 	.word	0x0800835d
 80082d0:	0800835d 	.word	0x0800835d
 80082d4:	0800835d 	.word	0x0800835d
 80082d8:	0800835d 	.word	0x0800835d
 80082dc:	0800835d 	.word	0x0800835d
 80082e0:	0800835d 	.word	0x0800835d
 80082e4:	0800835d 	.word	0x0800835d
 80082e8:	0800835d 	.word	0x0800835d
 80082ec:	0800835d 	.word	0x0800835d
 80082f0:	0800835d 	.word	0x0800835d
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	0800835d 	.word	0x0800835d
 80082fc:	0800835d 	.word	0x0800835d
 8008300:	0800835d 	.word	0x0800835d
 8008304:	0800835d 	.word	0x0800835d
 8008308:	0800835d 	.word	0x0800835d
 800830c:	0800835d 	.word	0x0800835d
 8008310:	0800835d 	.word	0x0800835d
 8008314:	0800835d 	.word	0x0800835d
 8008318:	0800835d 	.word	0x0800835d
 800831c:	0800835d 	.word	0x0800835d
 8008320:	0800835d 	.word	0x0800835d
 8008324:	0800835d 	.word	0x0800835d
 8008328:	0800835d 	.word	0x0800835d
 800832c:	0800835d 	.word	0x0800835d
 8008330:	0800835d 	.word	0x0800835d
 8008334:	0800835d 	.word	0x0800835d
 8008338:	0800835d 	.word	0x0800835d
 800833c:	0800835d 	.word	0x0800835d
 8008340:	0800835d 	.word	0x0800835d
 8008344:	0800835d 	.word	0x0800835d
 8008348:	0800835d 	.word	0x0800835d
 800834c:	0800835d 	.word	0x0800835d
 8008350:	0800835d 	.word	0x0800835d
 8008354:	0800835d 	.word	0x0800835d
 8008358:	0800835d 	.word	0x0800835d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800835c:	bf00      	nop
  }

  return (USBD_OK);
 800835e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	0000      	movs	r0, r0
	...

08008370 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b0cc      	sub	sp, #304	@ 0x130
 8008374:	af02      	add	r7, sp, #8
 8008376:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800837a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800837e:	6018      	str	r0, [r3, #0]
 8008380:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008384:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008388:	6019      	str	r1, [r3, #0]
  /* USER CODE BEGIN 6 */

    char temp[CMD_BUFFER_SIZE*2];
    uint8_t valid = 0; 
 800838a:	2300      	movs	r3, #0
 800838c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    int pumpnum, status, direction, duration; 
  
      for (uint32_t i = 0; i < *Len; i++) {
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8008396:	e15e      	b.n	8008656 <CDC_Receive_FS+0x2e6>
          char c = (char)Buf[i];
 8008398:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800839c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80083a6:	4413      	add	r3, r2
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          uint8_t u = (uint8_t)c;
 80083ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80083b2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80083b6:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80083ba:	701a      	strb	r2, [r3, #0]
  
          // Echo every char back
          if (c != '\r' && c != '\n') {
 80083bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083c0:	2b0d      	cmp	r3, #13
 80083c2:	d01a      	beq.n	80083fa <CDC_Receive_FS+0x8a>
 80083c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083c8:	2b0a      	cmp	r3, #10
 80083ca:	d016      	beq.n	80083fa <CDC_Receive_FS+0x8a>
              // block until endpoint is free
              CDC_Transmit_FS(&u, 1);
 80083cc:	f107 030b 	add.w	r3, r7, #11
 80083d0:	2101      	movs	r1, #1
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f982 	bl	80086dc <CDC_Transmit_FS>
              
              if (command_index < CMD_BUFFER_SIZE - 1) {
 80083d8:	4baf      	ldr	r3, [pc, #700]	@ (8008698 <CDC_Receive_FS+0x328>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80083de:	f200 8134 	bhi.w	800864a <CDC_Receive_FS+0x2da>
                  command_buffer[command_index++] = c;
 80083e2:	4bad      	ldr	r3, [pc, #692]	@ (8008698 <CDC_Receive_FS+0x328>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	b2d1      	uxtb	r1, r2
 80083ea:	4aab      	ldr	r2, [pc, #684]	@ (8008698 <CDC_Receive_FS+0x328>)
 80083ec:	7011      	strb	r1, [r2, #0]
 80083ee:	4619      	mov	r1, r3
 80083f0:	4aaa      	ldr	r2, [pc, #680]	@ (800869c <CDC_Receive_FS+0x32c>)
 80083f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083f6:	5453      	strb	r3, [r2, r1]
 80083f8:	e128      	b.n	800864c <CDC_Receive_FS+0x2dc>
              }
              continue;
          }
          
          // Terminate command
          command_buffer[command_index] = '\0';
 80083fa:	4ba7      	ldr	r3, [pc, #668]	@ (8008698 <CDC_Receive_FS+0x328>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	4ba6      	ldr	r3, [pc, #664]	@ (800869c <CDC_Receive_FS+0x32c>)
 8008402:	2100      	movs	r1, #0
 8008404:	5499      	strb	r1, [r3, r2]
  
          if (command_index > 0) {
 8008406:	4ba4      	ldr	r3, [pc, #656]	@ (8008698 <CDC_Receive_FS+0x328>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 811e 	beq.w	800864c <CDC_Receive_FS+0x2dc>
              // your command logic
              if (strcmp(command_buffer, "LED2 on") == 0) {
 8008410:	49a3      	ldr	r1, [pc, #652]	@ (80086a0 <CDC_Receive_FS+0x330>)
 8008412:	48a2      	ldr	r0, [pc, #648]	@ (800869c <CDC_Receive_FS+0x32c>)
 8008414:	f7f7 fef4 	bl	8000200 <strcmp>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <CDC_Receive_FS+0xbc>
                LED2 = 1;
 800841e:	4ba1      	ldr	r3, [pc, #644]	@ (80086a4 <CDC_Receive_FS+0x334>)
 8008420:	2201      	movs	r2, #1
 8008422:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800842a:	e00c      	b.n	8008446 <CDC_Receive_FS+0xd6>
              }
              else if (strcmp(command_buffer, "LED2 off") == 0) {
 800842c:	499e      	ldr	r1, [pc, #632]	@ (80086a8 <CDC_Receive_FS+0x338>)
 800842e:	489b      	ldr	r0, [pc, #620]	@ (800869c <CDC_Receive_FS+0x32c>)
 8008430:	f7f7 fee6 	bl	8000200 <strcmp>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <CDC_Receive_FS+0xd6>
                LED2 = 0;
 800843a:	4b9a      	ldr	r3, [pc, #616]	@ (80086a4 <CDC_Receive_FS+0x334>)
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
              }
              
              if (strcmp(command_buffer, "LED1 on") == 0) {
 8008446:	4999      	ldr	r1, [pc, #612]	@ (80086ac <CDC_Receive_FS+0x33c>)
 8008448:	4894      	ldr	r0, [pc, #592]	@ (800869c <CDC_Receive_FS+0x32c>)
 800844a:	f7f7 fed9 	bl	8000200 <strcmp>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <CDC_Receive_FS+0xf2>
                LED1 = 1;
 8008454:	4b96      	ldr	r3, [pc, #600]	@ (80086b0 <CDC_Receive_FS+0x340>)
 8008456:	2201      	movs	r2, #1
 8008458:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 800845a:	2301      	movs	r3, #1
 800845c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8008460:	e00c      	b.n	800847c <CDC_Receive_FS+0x10c>
              }
              else if (strcmp(command_buffer, "LED1 off") == 0) {
 8008462:	4994      	ldr	r1, [pc, #592]	@ (80086b4 <CDC_Receive_FS+0x344>)
 8008464:	488d      	ldr	r0, [pc, #564]	@ (800869c <CDC_Receive_FS+0x32c>)
 8008466:	f7f7 fecb 	bl	8000200 <strcmp>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <CDC_Receive_FS+0x10c>
                LED1 = 0;
 8008470:	4b8f      	ldr	r3, [pc, #572]	@ (80086b0 <CDC_Receive_FS+0x340>)
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8008476:	2301      	movs	r3, #1
 8008478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
              }
              // Format is "pump 1 1 1 200", "pump pumpnum status direction duration"
              if (sscanf(command_buffer, "pump %d %d %d %d", &pumpnum, &status, &direction, &duration) == 4)
 800847c:	f107 0114 	add.w	r1, r7, #20
 8008480:	f107 0218 	add.w	r2, r7, #24
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	f107 0310 	add.w	r3, r7, #16
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	460b      	mov	r3, r1
 8008492:	4989      	ldr	r1, [pc, #548]	@ (80086b8 <CDC_Receive_FS+0x348>)
 8008494:	4881      	ldr	r0, [pc, #516]	@ (800869c <CDC_Receive_FS+0x32c>)
 8008496:	f001 f811 	bl	80094bc <siscanf>
 800849a:	4603      	mov	r3, r0
 800849c:	2b04      	cmp	r3, #4
 800849e:	f040 8096 	bne.w	80085ce <CDC_Receive_FS+0x25e>
              {
                valid = 1; 
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
                switch(pumpnum)
 80084a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d05f      	beq.n	8008576 <CDC_Receive_FS+0x206>
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	f300 8089 	bgt.w	80085ce <CDC_Receive_FS+0x25e>
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d002      	beq.n	80084c6 <CDC_Receive_FS+0x156>
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d02c      	beq.n	800851e <CDC_Receive_FS+0x1ae>
 80084c4:	e083      	b.n	80085ce <CDC_Receive_FS+0x25e>
                {
                  case 1: 
                    pump1.status = status; 
 80084c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	4b7a      	ldr	r3, [pc, #488]	@ (80086bc <CDC_Receive_FS+0x34c>)
 80084d4:	701a      	strb	r2, [r3, #0]
                    pump1.dir = direction; 
 80084d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	4b76      	ldr	r3, [pc, #472]	@ (80086bc <CDC_Receive_FS+0x34c>)
 80084e4:	705a      	strb	r2, [r3, #1]
                    pump1.duration_us = (uint32_t)duration * 1e6; // duration prompted in seconds -> convert to us
 80084e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7f8 f959 	bl	80007a8 <__aeabi_ui2d>
 80084f6:	a366      	add	r3, pc, #408	@ (adr r3, 8008690 <CDC_Receive_FS+0x320>)
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f7f7 fee8 	bl	80002d0 <__aeabi_dmul>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4610      	mov	r0, r2
 8008506:	4619      	mov	r1, r3
 8008508:	f7f8 f9c8 	bl	800089c <__aeabi_d2uiz>
 800850c:	4603      	mov	r3, r0
 800850e:	4a6b      	ldr	r2, [pc, #428]	@ (80086bc <CDC_Receive_FS+0x34c>)
 8008510:	6093      	str	r3, [r2, #8]
                    pump1.start_us = Get_timer6_us();
 8008512:	f7f8 fb93 	bl	8000c3c <Get_timer6_us>
 8008516:	4603      	mov	r3, r0
 8008518:	4a68      	ldr	r2, [pc, #416]	@ (80086bc <CDC_Receive_FS+0x34c>)
 800851a:	6053      	str	r3, [r2, #4]
                    break; 
 800851c:	e057      	b.n	80085ce <CDC_Receive_FS+0x25e>
                  case 2: 
                    pump2.status = status; 
 800851e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008522:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	b2da      	uxtb	r2, r3
 800852a:	4b65      	ldr	r3, [pc, #404]	@ (80086c0 <CDC_Receive_FS+0x350>)
 800852c:	701a      	strb	r2, [r3, #0]
                    pump2.dir = direction; 
 800852e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008532:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	b2da      	uxtb	r2, r3
 800853a:	4b61      	ldr	r3, [pc, #388]	@ (80086c0 <CDC_Receive_FS+0x350>)
 800853c:	705a      	strb	r2, [r3, #1]
                    pump2.duration_us = (uint32_t)duration * 1e6; // duration prompted in seconds -> convert to us
 800853e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008542:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f7f8 f92d 	bl	80007a8 <__aeabi_ui2d>
 800854e:	a350      	add	r3, pc, #320	@ (adr r3, 8008690 <CDC_Receive_FS+0x320>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f7f7 febc 	bl	80002d0 <__aeabi_dmul>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4610      	mov	r0, r2
 800855e:	4619      	mov	r1, r3
 8008560:	f7f8 f99c 	bl	800089c <__aeabi_d2uiz>
 8008564:	4603      	mov	r3, r0
 8008566:	4a56      	ldr	r2, [pc, #344]	@ (80086c0 <CDC_Receive_FS+0x350>)
 8008568:	6093      	str	r3, [r2, #8]
                    pump2.start_us = Get_timer6_us();
 800856a:	f7f8 fb67 	bl	8000c3c <Get_timer6_us>
 800856e:	4603      	mov	r3, r0
 8008570:	4a53      	ldr	r2, [pc, #332]	@ (80086c0 <CDC_Receive_FS+0x350>)
 8008572:	6053      	str	r3, [r2, #4]
                    break; 
 8008574:	e02b      	b.n	80085ce <CDC_Receive_FS+0x25e>
                  case 3: 
                    pump3.status = status; 
 8008576:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800857a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	b2da      	uxtb	r2, r3
 8008582:	4b50      	ldr	r3, [pc, #320]	@ (80086c4 <CDC_Receive_FS+0x354>)
 8008584:	701a      	strb	r2, [r3, #0]
                    pump3.dir = direction; 
 8008586:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800858a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	4b4c      	ldr	r3, [pc, #304]	@ (80086c4 <CDC_Receive_FS+0x354>)
 8008594:	705a      	strb	r2, [r3, #1]
                    pump3.duration_us = (uint32_t)duration * 1e6; // duration prompted in seconds -> convert to us
 8008596:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800859a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7f8 f901 	bl	80007a8 <__aeabi_ui2d>
 80085a6:	a33a      	add	r3, pc, #232	@ (adr r3, 8008690 <CDC_Receive_FS+0x320>)
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	f7f7 fe90 	bl	80002d0 <__aeabi_dmul>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4610      	mov	r0, r2
 80085b6:	4619      	mov	r1, r3
 80085b8:	f7f8 f970 	bl	800089c <__aeabi_d2uiz>
 80085bc:	4603      	mov	r3, r0
 80085be:	4a41      	ldr	r2, [pc, #260]	@ (80086c4 <CDC_Receive_FS+0x354>)
 80085c0:	6093      	str	r3, [r2, #8]
                    pump3.start_us = Get_timer6_us();
 80085c2:	f7f8 fb3b 	bl	8000c3c <Get_timer6_us>
 80085c6:	4603      	mov	r3, r0
 80085c8:	4a3e      	ldr	r2, [pc, #248]	@ (80086c4 <CDC_Receive_FS+0x354>)
 80085ca:	6053      	str	r3, [r2, #4]
                    break; 
 80085cc:	bf00      	nop
                }
              }

              // timer test 
              if (strcmp(command_buffer, "Timer on") == 0){
 80085ce:	493e      	ldr	r1, [pc, #248]	@ (80086c8 <CDC_Receive_FS+0x358>)
 80085d0:	4832      	ldr	r0, [pc, #200]	@ (800869c <CDC_Receive_FS+0x32c>)
 80085d2:	f7f7 fe15 	bl	8000200 <strcmp>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <CDC_Receive_FS+0x278>
                Timer6_flag = 1; 
 80085dc:	4b3b      	ldr	r3, [pc, #236]	@ (80086cc <CDC_Receive_FS+0x35c>)
 80085de:	2201      	movs	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
              }
  
              if (valid)
 80085e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d014      	beq.n	800861a <CDC_Receive_FS+0x2aa>
              {
                sprintf(temp, "\r\nReceieved: %s\r\n> ", command_buffer);
 80085f0:	f107 031c 	add.w	r3, r7, #28
 80085f4:	4a29      	ldr	r2, [pc, #164]	@ (800869c <CDC_Receive_FS+0x32c>)
 80085f6:	4936      	ldr	r1, [pc, #216]	@ (80086d0 <CDC_Receive_FS+0x360>)
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 ff3f 	bl	800947c <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 80085fe:	f107 031c 	add.w	r3, r7, #28
 8008602:	4618      	mov	r0, r3
 8008604:	f7f7 fe06 	bl	8000214 <strlen>
 8008608:	4603      	mov	r3, r0
 800860a:	b29a      	uxth	r2, r3
 800860c:	f107 031c 	add.w	r3, r7, #28
 8008610:	4611      	mov	r1, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f862 	bl	80086dc <CDC_Transmit_FS>
 8008618:	e013      	b.n	8008642 <CDC_Receive_FS+0x2d2>
              }
              else 
              {
                sprintf(temp, "\r\nError Commaand:%s\r\n> ", command_buffer);
 800861a:	f107 031c 	add.w	r3, r7, #28
 800861e:	4a1f      	ldr	r2, [pc, #124]	@ (800869c <CDC_Receive_FS+0x32c>)
 8008620:	492c      	ldr	r1, [pc, #176]	@ (80086d4 <CDC_Receive_FS+0x364>)
 8008622:	4618      	mov	r0, r3
 8008624:	f000 ff2a 	bl	800947c <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8008628:	f107 031c 	add.w	r3, r7, #28
 800862c:	4618      	mov	r0, r3
 800862e:	f7f7 fdf1 	bl	8000214 <strlen>
 8008632:	4603      	mov	r3, r0
 8008634:	b29a      	uxth	r2, r3
 8008636:	f107 031c 	add.w	r3, r7, #28
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f84d 	bl	80086dc <CDC_Transmit_FS>
              }
              command_index = 0;
 8008642:	4b15      	ldr	r3, [pc, #84]	@ (8008698 <CDC_Receive_FS+0x328>)
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	e000      	b.n	800864c <CDC_Receive_FS+0x2dc>
              continue;
 800864a:	bf00      	nop
      for (uint32_t i = 0; i < *Len; i++) {
 800864c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008650:	3301      	adds	r3, #1
 8008652:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8008656:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800865a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8008666:	429a      	cmp	r2, r3
 8008668:	f4ff ae96 	bcc.w	8008398 <CDC_Receive_FS+0x28>
          }
  
      }
  
      // 4) re-arm USB to receive more
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 800866c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008670:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8008674:	6819      	ldr	r1, [r3, #0]
 8008676:	4818      	ldr	r0, [pc, #96]	@ (80086d8 <CDC_Receive_FS+0x368>)
 8008678:	f7fe fa0a 	bl	8006a90 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800867c:	4816      	ldr	r0, [pc, #88]	@ (80086d8 <CDC_Receive_FS+0x368>)
 800867e:	f7fe fa65 	bl	8006b4c <USBD_CDC_ReceivePacket>
      return USBD_OK;
 8008682:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008684:	4618      	mov	r0, r3
 8008686:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	00000000 	.word	0x00000000
 8008694:	412e8480 	.word	0x412e8480
 8008698:	20000568 	.word	0x20000568
 800869c:	200004e8 	.word	0x200004e8
 80086a0:	0800ae8c 	.word	0x0800ae8c
 80086a4:	200001d1 	.word	0x200001d1
 80086a8:	0800ae94 	.word	0x0800ae94
 80086ac:	0800aea0 	.word	0x0800aea0
 80086b0:	200001d0 	.word	0x200001d0
 80086b4:	0800aea8 	.word	0x0800aea8
 80086b8:	0800aeb4 	.word	0x0800aeb4
 80086bc:	200001dc 	.word	0x200001dc
 80086c0:	200001e8 	.word	0x200001e8
 80086c4:	200001f4 	.word	0x200001f4
 80086c8:	0800aec8 	.word	0x0800aec8
 80086cc:	200001d2 	.word	0x200001d2
 80086d0:	0800aed4 	.word	0x0800aed4
 80086d4:	0800aee8 	.word	0x0800aee8
 80086d8:	2000020c 	.word	0x2000020c

080086dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008724 <CDC_Transmit_FS+0x48>)
 80086ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086fe:	2301      	movs	r3, #1
 8008700:	e00b      	b.n	800871a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008702:	887b      	ldrh	r3, [r7, #2]
 8008704:	461a      	mov	r2, r3
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4806      	ldr	r0, [pc, #24]	@ (8008724 <CDC_Transmit_FS+0x48>)
 800870a:	f7fe f99f 	bl	8006a4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800870e:	4805      	ldr	r0, [pc, #20]	@ (8008724 <CDC_Transmit_FS+0x48>)
 8008710:	f7fe f9dc 	bl	8006acc <USBD_CDC_TransmitPacket>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	2000020c 	.word	0x2000020c

08008728 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	4613      	mov	r3, r2
 8008734:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800873a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	6039      	str	r1, [r7, #0]
 8008756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2212      	movs	r2, #18
 800875c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	@ (800876c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	200000cc 	.word	0x200000cc

08008770 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2204      	movs	r2, #4
 8008780:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008782:	4b03      	ldr	r3, [pc, #12]	@ (8008790 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	200000ec 	.word	0x200000ec

08008794 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	6039      	str	r1, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d105      	bne.n	80087b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	4907      	ldr	r1, [pc, #28]	@ (80087c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80087aa:	4808      	ldr	r0, [pc, #32]	@ (80087cc <USBD_FS_ProductStrDescriptor+0x38>)
 80087ac:	f7ff fc44 	bl	8008038 <USBD_GetString>
 80087b0:	e004      	b.n	80087bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	4904      	ldr	r1, [pc, #16]	@ (80087c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80087b6:	4805      	ldr	r0, [pc, #20]	@ (80087cc <USBD_FS_ProductStrDescriptor+0x38>)
 80087b8:	f7ff fc3e 	bl	8008038 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087bc:	4b02      	ldr	r3, [pc, #8]	@ (80087c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	2000156c 	.word	0x2000156c
 80087cc:	0800af00 	.word	0x0800af00

080087d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	4904      	ldr	r1, [pc, #16]	@ (80087f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087e0:	4804      	ldr	r0, [pc, #16]	@ (80087f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087e2:	f7ff fc29 	bl	8008038 <USBD_GetString>
  return USBD_StrDesc;
 80087e6:	4b02      	ldr	r3, [pc, #8]	@ (80087f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	2000156c 	.word	0x2000156c
 80087f4:	0800af18 	.word	0x0800af18

080087f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	221a      	movs	r2, #26
 8008808:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800880a:	f000 f855 	bl	80088b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800880e:	4b02      	ldr	r3, [pc, #8]	@ (8008818 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200000f0 	.word	0x200000f0

0800881c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d105      	bne.n	800883a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	4907      	ldr	r1, [pc, #28]	@ (8008850 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008832:	4808      	ldr	r0, [pc, #32]	@ (8008854 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008834:	f7ff fc00 	bl	8008038 <USBD_GetString>
 8008838:	e004      	b.n	8008844 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4904      	ldr	r1, [pc, #16]	@ (8008850 <USBD_FS_ConfigStrDescriptor+0x34>)
 800883e:	4805      	ldr	r0, [pc, #20]	@ (8008854 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008840:	f7ff fbfa 	bl	8008038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008844:	4b02      	ldr	r3, [pc, #8]	@ (8008850 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	2000156c 	.word	0x2000156c
 8008854:	0800af2c 	.word	0x0800af2c

08008858 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d105      	bne.n	8008876 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	4907      	ldr	r1, [pc, #28]	@ (800888c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800886e:	4808      	ldr	r0, [pc, #32]	@ (8008890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008870:	f7ff fbe2 	bl	8008038 <USBD_GetString>
 8008874:	e004      	b.n	8008880 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	4904      	ldr	r1, [pc, #16]	@ (800888c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800887a:	4805      	ldr	r0, [pc, #20]	@ (8008890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800887c:	f7ff fbdc 	bl	8008038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008880:	4b02      	ldr	r3, [pc, #8]	@ (800888c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	2000156c 	.word	0x2000156c
 8008890:	0800af38 	.word	0x0800af38

08008894 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	220c      	movs	r2, #12
 80088a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80088a6:	4b03      	ldr	r3, [pc, #12]	@ (80088b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	200000e0 	.word	0x200000e0

080088b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088be:	4b0f      	ldr	r3, [pc, #60]	@ (80088fc <Get_SerialNum+0x44>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008900 <Get_SerialNum+0x48>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008904 <Get_SerialNum+0x4c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088de:	2208      	movs	r2, #8
 80088e0:	4909      	ldr	r1, [pc, #36]	@ (8008908 <Get_SerialNum+0x50>)
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f814 	bl	8008910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088e8:	2204      	movs	r2, #4
 80088ea:	4908      	ldr	r1, [pc, #32]	@ (800890c <Get_SerialNum+0x54>)
 80088ec:	68b8      	ldr	r0, [r7, #8]
 80088ee:	f000 f80f 	bl	8008910 <IntToUnicode>
  }
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	1fff7590 	.word	0x1fff7590
 8008900:	1fff7594 	.word	0x1fff7594
 8008904:	1fff7598 	.word	0x1fff7598
 8008908:	200000f2 	.word	0x200000f2
 800890c:	20000102 	.word	0x20000102

08008910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
 8008926:	e027      	b.n	8008978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	0f1b      	lsrs	r3, r3, #28
 800892c:	2b09      	cmp	r3, #9
 800892e:	d80b      	bhi.n	8008948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	0f1b      	lsrs	r3, r3, #28
 8008934:	b2da      	uxtb	r2, r3
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4619      	mov	r1, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	440b      	add	r3, r1
 8008940:	3230      	adds	r2, #48	@ 0x30
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	e00a      	b.n	800895e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	0f1b      	lsrs	r3, r3, #28
 800894c:	b2da      	uxtb	r2, r3
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	4619      	mov	r1, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	440b      	add	r3, r1
 8008958:	3237      	adds	r2, #55	@ 0x37
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	3301      	adds	r3, #1
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	4413      	add	r3, r2
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	3301      	adds	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
 8008978:	7dfa      	ldrb	r2, [r7, #23]
 800897a:	79fb      	ldrb	r3, [r7, #7]
 800897c:	429a      	cmp	r2, r3
 800897e:	d3d3      	bcc.n	8008928 <IntToUnicode+0x18>
  }
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b0b0      	sub	sp, #192	@ 0xc0
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008998:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	609a      	str	r2, [r3, #8]
 80089a4:	60da      	str	r2, [r3, #12]
 80089a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	2298      	movs	r2, #152	@ 0x98
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fe87 	bl	80096c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089be:	d173      	bne.n	8008aa8 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80089c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80089c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80089ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80089ce:	2303      	movs	r3, #3
 80089d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80089d2:	2301      	movs	r3, #1
 80089d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80089d6:	230c      	movs	r3, #12
 80089d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80089da:	2302      	movs	r3, #2
 80089dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80089de:	2302      	movs	r3, #2
 80089e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80089e2:	2302      	movs	r3, #2
 80089e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80089e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80089ea:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fb f90f 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80089fc:	f7f8 fae6 	bl	8000fcc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a00:	4b2b      	ldr	r3, [pc, #172]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a04:	4a2a      	ldr	r2, [pc, #168]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a0c:	4b28      	ldr	r3, [pc, #160]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a18:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a20:	2302      	movs	r3, #2
 8008a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a32:	230a      	movs	r3, #10
 8008a34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a42:	f7f8 fdc5 	bl	80015d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a46:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4a:	4a19      	ldr	r2, [pc, #100]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a52:	4b17      	ldr	r3, [pc, #92]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a5e:	4b14      	ldr	r3, [pc, #80]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d114      	bne.n	8008a94 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a6a:	4b11      	ldr	r3, [pc, #68]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6e:	4a10      	ldr	r2, [pc, #64]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a76:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a7e:	60bb      	str	r3, [r7, #8]
 8008a80:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008a82:	f7fa f9a9 	bl	8002dd8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a86:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8a:	4a09      	ldr	r2, [pc, #36]	@ (8008ab0 <HAL_PCD_MspInit+0x120>)
 8008a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a92:	e001      	b.n	8008a98 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008a94:	f7fa f9a0 	bl	8002dd8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	2043      	movs	r0, #67	@ 0x43
 8008a9e:	f7f8 fd60 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008aa2:	2043      	movs	r0, #67	@ 0x43
 8008aa4:	f7f8 fd79 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	37c0      	adds	r7, #192	@ 0xc0
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	40021000 	.word	0x40021000

08008ab4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7fe f927 	bl	8006d1e <USBD_LL_SetupStage>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	440b      	add	r3, r1
 8008af8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	4619      	mov	r1, r3
 8008b02:	f7fe f961 	bl	8006dc8 <USBD_LL_DataOutStage>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3320      	adds	r3, #32
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	4619      	mov	r1, r3
 8008b36:	f7fe f9fa 	bl	8006f2e <USBD_LL_DataInStage>
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fb34 	bl	80071be <USBD_LL_SOF>
}
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b66:	2301      	movs	r3, #1
 8008b68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	79db      	ldrb	r3, [r3, #7]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d001      	beq.n	8008b76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b72:	f7f8 fa2b 	bl	8000fcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b7c:	7bfa      	ldrb	r2, [r7, #15]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe fad8 	bl	8007136 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe fa80 	bl	8007092 <USBD_LL_Reset>
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fac7 	bl	8007156 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	7adb      	ldrb	r3, [r3, #11]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bd0:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <HAL_PCD_SuspendCallback+0x48>)
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	4a03      	ldr	r2, [pc, #12]	@ (8008be4 <HAL_PCD_SuspendCallback+0x48>)
 8008bd6:	f043 0306 	orr.w	r3, r3, #6
 8008bda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	e000ed00 	.word	0xe000ed00

08008be8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c02:	f023 0301 	bic.w	r3, r3, #1
 8008c06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7adb      	ldrb	r3, [r3, #11]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c10:	4b08      	ldr	r3, [pc, #32]	@ (8008c34 <HAL_PCD_ResumeCallback+0x4c>)
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	4a07      	ldr	r2, [pc, #28]	@ (8008c34 <HAL_PCD_ResumeCallback+0x4c>)
 8008c16:	f023 0306 	bic.w	r3, r3, #6
 8008c1a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008c1c:	f000 faf6 	bl	800920c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fab1 	bl	800718e <USBD_LL_Resume>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	e000ed00 	.word	0xe000ed00

08008c38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fb07 	bl	8007262 <USBD_LL_IsoOUTIncomplete>
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fac3 	bl	80071fe <USBD_LL_IsoINIncomplete>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe fb19 	bl	80072c6 <USBD_LL_DevConnected>
}
 8008c94:	bf00      	nop
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe fb16 	bl	80072dc <USBD_LL_DevDisconnected>
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d13c      	bne.n	8008d42 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cc8:	4a20      	ldr	r2, [pc, #128]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008cd4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008cda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008cde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008ce2:	2206      	movs	r2, #6
 8008ce4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ce6:	4b19      	ldr	r3, [pc, #100]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008ce8:	2202      	movs	r2, #2
 8008cea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cec:	4b17      	ldr	r3, [pc, #92]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008cee:	2202      	movs	r2, #2
 8008cf0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cf2:	4b16      	ldr	r3, [pc, #88]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cf8:	4b14      	ldr	r3, [pc, #80]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cfe:	4b13      	ldr	r3, [pc, #76]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008d04:	4b11      	ldr	r3, [pc, #68]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d0a:	4b10      	ldr	r3, [pc, #64]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d10:	4b0e      	ldr	r3, [pc, #56]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d16:	480d      	ldr	r0, [pc, #52]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d18:	f7f8 fe04 	bl	8001924 <HAL_PCD_Init>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d22:	f7f8 f953 	bl	8000fcc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d26:	2180      	movs	r1, #128	@ 0x80
 8008d28:	4808      	ldr	r0, [pc, #32]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d2a:	f7f9 ff5c 	bl	8002be6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d2e:	2240      	movs	r2, #64	@ 0x40
 8008d30:	2100      	movs	r1, #0
 8008d32:	4806      	ldr	r0, [pc, #24]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d34:	f7f9 ff10 	bl	8002b58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d38:	2280      	movs	r2, #128	@ 0x80
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	4803      	ldr	r0, [pc, #12]	@ (8008d4c <USBD_LL_Init+0x94>)
 8008d3e:	f7f9 ff0b 	bl	8002b58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	2000176c 	.word	0x2000176c

08008d50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f8 feeb 	bl	8001b42 <HAL_PCD_Start>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d816      	bhi.n	8008da4 <USBD_LL_Start+0x54>
 8008d76:	a201      	add	r2, pc, #4	@ (adr r2, 8008d7c <USBD_LL_Start+0x2c>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008d8d 	.word	0x08008d8d
 8008d80:	08008d93 	.word	0x08008d93
 8008d84:	08008d99 	.word	0x08008d99
 8008d88:	08008d9f 	.word	0x08008d9f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d90:	e00b      	b.n	8008daa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d92:	2303      	movs	r3, #3
 8008d94:	73fb      	strb	r3, [r7, #15]
    break;
 8008d96:	e008      	b.n	8008daa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9c:	e005      	b.n	8008daa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	73fb      	strb	r3, [r7, #15]
    break;
 8008da2:	e002      	b.n	8008daa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	73fb      	strb	r3, [r7, #15]
    break;
 8008da8:	bf00      	nop
  }
  return usb_status;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	70fb      	strb	r3, [r7, #3]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70bb      	strb	r3, [r7, #2]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ddc:	78bb      	ldrb	r3, [r7, #2]
 8008dde:	883a      	ldrh	r2, [r7, #0]
 8008de0:	78f9      	ldrb	r1, [r7, #3]
 8008de2:	f7f9 fb97 	bl	8002514 <HAL_PCD_EP_Open>
 8008de6:	4603      	mov	r3, r0
 8008de8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d817      	bhi.n	8008e20 <USBD_LL_OpenEP+0x6c>
 8008df0:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <USBD_LL_OpenEP+0x44>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e09 	.word	0x08008e09
 8008dfc:	08008e0f 	.word	0x08008e0f
 8008e00:	08008e15 	.word	0x08008e15
 8008e04:	08008e1b 	.word	0x08008e1b
    case HAL_OK :
      usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0c:	e00b      	b.n	8008e26 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	73fb      	strb	r3, [r7, #15]
    break;
 8008e12:	e008      	b.n	8008e26 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
    break;
 8008e18:	e005      	b.n	8008e26 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1e:	e002      	b.n	8008e26 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008e20:	2303      	movs	r3, #3
 8008e22:	73fb      	strb	r3, [r7, #15]
    break;
 8008e24:	bf00      	nop
  }
  return usb_status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f9 fbca 	bl	80025e8 <HAL_PCD_EP_Close>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d816      	bhi.n	8008e8c <USBD_LL_CloseEP+0x5c>
 8008e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e64 <USBD_LL_CloseEP+0x34>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e75 	.word	0x08008e75
 8008e68:	08008e7b 	.word	0x08008e7b
 8008e6c:	08008e81 	.word	0x08008e81
 8008e70:	08008e87 	.word	0x08008e87
    case HAL_OK :
      usb_status = USBD_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
    break;
 8008e78:	e00b      	b.n	8008e92 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7e:	e008      	b.n	8008e92 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
    break;
 8008e84:	e005      	b.n	8008e92 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e86:	2303      	movs	r3, #3
 8008e88:	73fb      	strb	r3, [r7, #15]
    break;
 8008e8a:	e002      	b.n	8008e92 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e90:	bf00      	nop
  }
  return usb_status;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f9 fc59 	bl	8002772 <HAL_PCD_EP_SetStall>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d816      	bhi.n	8008ef8 <USBD_LL_StallEP+0x5c>
 8008eca:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed0 <USBD_LL_StallEP+0x34>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008ee1 	.word	0x08008ee1
 8008ed4:	08008ee7 	.word	0x08008ee7
 8008ed8:	08008eed 	.word	0x08008eed
 8008edc:	08008ef3 	.word	0x08008ef3
    case HAL_OK :
      usb_status = USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee4:	e00b      	b.n	8008efe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eea:	e008      	b.n	8008efe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef0:	e005      	b.n	8008efe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef6:	e002      	b.n	8008efe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	73fb      	strb	r3, [r7, #15]
    break;
 8008efc:	bf00      	nop
  }
  return usb_status;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f9 fc85 	bl	8002836 <HAL_PCD_EP_ClrStall>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d816      	bhi.n	8008f64 <USBD_LL_ClearStallEP+0x5c>
 8008f36:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <USBD_LL_ClearStallEP+0x34>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f4d 	.word	0x08008f4d
 8008f40:	08008f53 	.word	0x08008f53
 8008f44:	08008f59 	.word	0x08008f59
 8008f48:	08008f5f 	.word	0x08008f5f
    case HAL_OK :
      usb_status = USBD_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f50:	e00b      	b.n	8008f6a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	73fb      	strb	r3, [r7, #15]
    break;
 8008f56:	e008      	b.n	8008f6a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5c:	e005      	b.n	8008f6a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	73fb      	strb	r3, [r7, #15]
    break;
 8008f62:	e002      	b.n	8008f6a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f64:	2303      	movs	r3, #3
 8008f66:	73fb      	strb	r3, [r7, #15]
    break;
 8008f68:	bf00      	nop
  }
  return usb_status;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da0b      	bge.n	8008fa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3316      	adds	r3, #22
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	e00b      	b.n	8008fc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fae:	68f9      	ldr	r1, [r7, #12]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008fbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fe6:	78fa      	ldrb	r2, [r7, #3]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f9 fa6e 	bl	80024cc <HAL_PCD_SetAddress>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d816      	bhi.n	8009028 <USBD_LL_SetUSBAddress+0x5c>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <USBD_LL_SetUSBAddress+0x34>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009011 	.word	0x08009011
 8009004:	08009017 	.word	0x08009017
 8009008:	0800901d 	.word	0x0800901d
 800900c:	08009023 	.word	0x08009023
    case HAL_OK :
      usb_status = USBD_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
    break;
 8009014:	e00b      	b.n	800902e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009016:	2303      	movs	r3, #3
 8009018:	73fb      	strb	r3, [r7, #15]
    break;
 800901a:	e008      	b.n	800902e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
    break;
 8009020:	e005      	b.n	800902e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009022:	2303      	movs	r3, #3
 8009024:	73fb      	strb	r3, [r7, #15]
    break;
 8009026:	e002      	b.n	800902e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	73fb      	strb	r3, [r7, #15]
    break;
 800902c:	bf00      	nop
  }
  return usb_status;
 800902e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	460b      	mov	r3, r1
 8009046:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009056:	7af9      	ldrb	r1, [r7, #11]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	f7f9 fb58 	bl	8002710 <HAL_PCD_EP_Transmit>
 8009060:	4603      	mov	r3, r0
 8009062:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009064:	7dbb      	ldrb	r3, [r7, #22]
 8009066:	2b03      	cmp	r3, #3
 8009068:	d816      	bhi.n	8009098 <USBD_LL_Transmit+0x60>
 800906a:	a201      	add	r2, pc, #4	@ (adr r2, 8009070 <USBD_LL_Transmit+0x38>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009081 	.word	0x08009081
 8009074:	08009087 	.word	0x08009087
 8009078:	0800908d 	.word	0x0800908d
 800907c:	08009093 	.word	0x08009093
    case HAL_OK :
      usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
    break;
 8009084:	e00b      	b.n	800909e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009086:	2303      	movs	r3, #3
 8009088:	75fb      	strb	r3, [r7, #23]
    break;
 800908a:	e008      	b.n	800909e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800908c:	2301      	movs	r3, #1
 800908e:	75fb      	strb	r3, [r7, #23]
    break;
 8009090:	e005      	b.n	800909e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009092:	2303      	movs	r3, #3
 8009094:	75fb      	strb	r3, [r7, #23]
    break;
 8009096:	e002      	b.n	800909e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009098:	2303      	movs	r3, #3
 800909a:	75fb      	strb	r3, [r7, #23]
    break;
 800909c:	bf00      	nop
  }
  return usb_status;
 800909e:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	460b      	mov	r3, r1
 80090b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80090c6:	7af9      	ldrb	r1, [r7, #11]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	f7f9 fad6 	bl	800267c <HAL_PCD_EP_Receive>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80090d4:	7dbb      	ldrb	r3, [r7, #22]
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d816      	bhi.n	8009108 <USBD_LL_PrepareReceive+0x60>
 80090da:	a201      	add	r2, pc, #4	@ (adr r2, 80090e0 <USBD_LL_PrepareReceive+0x38>)
 80090dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e0:	080090f1 	.word	0x080090f1
 80090e4:	080090f7 	.word	0x080090f7
 80090e8:	080090fd 	.word	0x080090fd
 80090ec:	08009103 	.word	0x08009103
    case HAL_OK :
      usb_status = USBD_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	75fb      	strb	r3, [r7, #23]
    break;
 80090f4:	e00b      	b.n	800910e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	75fb      	strb	r3, [r7, #23]
    break;
 80090fa:	e008      	b.n	800910e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090fc:	2301      	movs	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]
    break;
 8009100:	e005      	b.n	800910e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	75fb      	strb	r3, [r7, #23]
    break;
 8009106:	e002      	b.n	800910e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	75fb      	strb	r3, [r7, #23]
    break;
 800910c:	bf00      	nop
  }
  return usb_status;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f7f9 fad6 	bl	80026e0 <HAL_PCD_EP_GetRxCount>
 8009134:	4603      	mov	r3, r0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800914c:	78fb      	ldrb	r3, [r7, #3]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_PCDEx_LPM_Callback+0x18>
 8009152:	2b01      	cmp	r3, #1
 8009154:	d01f      	beq.n	8009196 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009156:	e03b      	b.n	80091d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7adb      	ldrb	r3, [r3, #11]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d007      	beq.n	8009170 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009160:	f000 f854 	bl	800920c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009164:	4b1c      	ldr	r3, [pc, #112]	@ (80091d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	4a1b      	ldr	r2, [pc, #108]	@ (80091d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800916a:	f023 0306 	bic.w	r3, r3, #6
 800916e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6812      	ldr	r2, [r2, #0]
 800917e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009182:	f023 0301 	bic.w	r3, r3, #1
 8009186:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800918e:	4618      	mov	r0, r3
 8009190:	f7fd fffd 	bl	800718e <USBD_LL_Resume>
    break;
 8009194:	e01c      	b.n	80091d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6812      	ldr	r2, [r2, #0]
 80091a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fd ffce 	bl	8007156 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	7adb      	ldrb	r3, [r3, #11]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d005      	beq.n	80091ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091c2:	4b05      	ldr	r3, [pc, #20]	@ (80091d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	4a04      	ldr	r2, [pc, #16]	@ (80091d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80091c8:	f043 0306 	orr.w	r3, r3, #6
 80091cc:	6113      	str	r3, [r2, #16]
    break;
 80091ce:	bf00      	nop
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	e000ed00 	.word	0xe000ed00

080091dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091e4:	4b03      	ldr	r3, [pc, #12]	@ (80091f4 <USBD_static_malloc+0x18>)
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20001c50 	.word	0x20001c50

080091f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]

}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009210:	f7f7 fbb0 	bl	8000974 <SystemClock_Config>
}
 8009214:	bf00      	nop
 8009216:	bd80      	pop	{r7, pc}

08009218 <std>:
 8009218:	2300      	movs	r3, #0
 800921a:	b510      	push	{r4, lr}
 800921c:	4604      	mov	r4, r0
 800921e:	e9c0 3300 	strd	r3, r3, [r0]
 8009222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009226:	6083      	str	r3, [r0, #8]
 8009228:	8181      	strh	r1, [r0, #12]
 800922a:	6643      	str	r3, [r0, #100]	@ 0x64
 800922c:	81c2      	strh	r2, [r0, #14]
 800922e:	6183      	str	r3, [r0, #24]
 8009230:	4619      	mov	r1, r3
 8009232:	2208      	movs	r2, #8
 8009234:	305c      	adds	r0, #92	@ 0x5c
 8009236:	f000 fa45 	bl	80096c4 <memset>
 800923a:	4b0d      	ldr	r3, [pc, #52]	@ (8009270 <std+0x58>)
 800923c:	6263      	str	r3, [r4, #36]	@ 0x24
 800923e:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <std+0x5c>)
 8009240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009242:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <std+0x60>)
 8009244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009246:	4b0d      	ldr	r3, [pc, #52]	@ (800927c <std+0x64>)
 8009248:	6323      	str	r3, [r4, #48]	@ 0x30
 800924a:	4b0d      	ldr	r3, [pc, #52]	@ (8009280 <std+0x68>)
 800924c:	6224      	str	r4, [r4, #32]
 800924e:	429c      	cmp	r4, r3
 8009250:	d006      	beq.n	8009260 <std+0x48>
 8009252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009256:	4294      	cmp	r4, r2
 8009258:	d002      	beq.n	8009260 <std+0x48>
 800925a:	33d0      	adds	r3, #208	@ 0xd0
 800925c:	429c      	cmp	r4, r3
 800925e:	d105      	bne.n	800926c <std+0x54>
 8009260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009268:	f000 baa4 	b.w	80097b4 <__retarget_lock_init_recursive>
 800926c:	bd10      	pop	{r4, pc}
 800926e:	bf00      	nop
 8009270:	08009511 	.word	0x08009511
 8009274:	08009537 	.word	0x08009537
 8009278:	0800956f 	.word	0x0800956f
 800927c:	08009593 	.word	0x08009593
 8009280:	20001e70 	.word	0x20001e70

08009284 <stdio_exit_handler>:
 8009284:	4a02      	ldr	r2, [pc, #8]	@ (8009290 <stdio_exit_handler+0xc>)
 8009286:	4903      	ldr	r1, [pc, #12]	@ (8009294 <stdio_exit_handler+0x10>)
 8009288:	4803      	ldr	r0, [pc, #12]	@ (8009298 <stdio_exit_handler+0x14>)
 800928a:	f000 b869 	b.w	8009360 <_fwalk_sglue>
 800928e:	bf00      	nop
 8009290:	2000010c 	.word	0x2000010c
 8009294:	0800a939 	.word	0x0800a939
 8009298:	2000011c 	.word	0x2000011c

0800929c <cleanup_stdio>:
 800929c:	6841      	ldr	r1, [r0, #4]
 800929e:	4b0c      	ldr	r3, [pc, #48]	@ (80092d0 <cleanup_stdio+0x34>)
 80092a0:	4299      	cmp	r1, r3
 80092a2:	b510      	push	{r4, lr}
 80092a4:	4604      	mov	r4, r0
 80092a6:	d001      	beq.n	80092ac <cleanup_stdio+0x10>
 80092a8:	f001 fb46 	bl	800a938 <_fflush_r>
 80092ac:	68a1      	ldr	r1, [r4, #8]
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <cleanup_stdio+0x38>)
 80092b0:	4299      	cmp	r1, r3
 80092b2:	d002      	beq.n	80092ba <cleanup_stdio+0x1e>
 80092b4:	4620      	mov	r0, r4
 80092b6:	f001 fb3f 	bl	800a938 <_fflush_r>
 80092ba:	68e1      	ldr	r1, [r4, #12]
 80092bc:	4b06      	ldr	r3, [pc, #24]	@ (80092d8 <cleanup_stdio+0x3c>)
 80092be:	4299      	cmp	r1, r3
 80092c0:	d004      	beq.n	80092cc <cleanup_stdio+0x30>
 80092c2:	4620      	mov	r0, r4
 80092c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c8:	f001 bb36 	b.w	800a938 <_fflush_r>
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	20001e70 	.word	0x20001e70
 80092d4:	20001ed8 	.word	0x20001ed8
 80092d8:	20001f40 	.word	0x20001f40

080092dc <global_stdio_init.part.0>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	4b0b      	ldr	r3, [pc, #44]	@ (800930c <global_stdio_init.part.0+0x30>)
 80092e0:	4c0b      	ldr	r4, [pc, #44]	@ (8009310 <global_stdio_init.part.0+0x34>)
 80092e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009314 <global_stdio_init.part.0+0x38>)
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	4620      	mov	r0, r4
 80092e8:	2200      	movs	r2, #0
 80092ea:	2104      	movs	r1, #4
 80092ec:	f7ff ff94 	bl	8009218 <std>
 80092f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092f4:	2201      	movs	r2, #1
 80092f6:	2109      	movs	r1, #9
 80092f8:	f7ff ff8e 	bl	8009218 <std>
 80092fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009300:	2202      	movs	r2, #2
 8009302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009306:	2112      	movs	r1, #18
 8009308:	f7ff bf86 	b.w	8009218 <std>
 800930c:	20001fa8 	.word	0x20001fa8
 8009310:	20001e70 	.word	0x20001e70
 8009314:	08009285 	.word	0x08009285

08009318 <__sfp_lock_acquire>:
 8009318:	4801      	ldr	r0, [pc, #4]	@ (8009320 <__sfp_lock_acquire+0x8>)
 800931a:	f000 ba4c 	b.w	80097b6 <__retarget_lock_acquire_recursive>
 800931e:	bf00      	nop
 8009320:	20001fb1 	.word	0x20001fb1

08009324 <__sfp_lock_release>:
 8009324:	4801      	ldr	r0, [pc, #4]	@ (800932c <__sfp_lock_release+0x8>)
 8009326:	f000 ba47 	b.w	80097b8 <__retarget_lock_release_recursive>
 800932a:	bf00      	nop
 800932c:	20001fb1 	.word	0x20001fb1

08009330 <__sinit>:
 8009330:	b510      	push	{r4, lr}
 8009332:	4604      	mov	r4, r0
 8009334:	f7ff fff0 	bl	8009318 <__sfp_lock_acquire>
 8009338:	6a23      	ldr	r3, [r4, #32]
 800933a:	b11b      	cbz	r3, 8009344 <__sinit+0x14>
 800933c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009340:	f7ff bff0 	b.w	8009324 <__sfp_lock_release>
 8009344:	4b04      	ldr	r3, [pc, #16]	@ (8009358 <__sinit+0x28>)
 8009346:	6223      	str	r3, [r4, #32]
 8009348:	4b04      	ldr	r3, [pc, #16]	@ (800935c <__sinit+0x2c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f5      	bne.n	800933c <__sinit+0xc>
 8009350:	f7ff ffc4 	bl	80092dc <global_stdio_init.part.0>
 8009354:	e7f2      	b.n	800933c <__sinit+0xc>
 8009356:	bf00      	nop
 8009358:	0800929d 	.word	0x0800929d
 800935c:	20001fa8 	.word	0x20001fa8

08009360 <_fwalk_sglue>:
 8009360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009364:	4607      	mov	r7, r0
 8009366:	4688      	mov	r8, r1
 8009368:	4614      	mov	r4, r2
 800936a:	2600      	movs	r6, #0
 800936c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009370:	f1b9 0901 	subs.w	r9, r9, #1
 8009374:	d505      	bpl.n	8009382 <_fwalk_sglue+0x22>
 8009376:	6824      	ldr	r4, [r4, #0]
 8009378:	2c00      	cmp	r4, #0
 800937a:	d1f7      	bne.n	800936c <_fwalk_sglue+0xc>
 800937c:	4630      	mov	r0, r6
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d907      	bls.n	8009398 <_fwalk_sglue+0x38>
 8009388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800938c:	3301      	adds	r3, #1
 800938e:	d003      	beq.n	8009398 <_fwalk_sglue+0x38>
 8009390:	4629      	mov	r1, r5
 8009392:	4638      	mov	r0, r7
 8009394:	47c0      	blx	r8
 8009396:	4306      	orrs	r6, r0
 8009398:	3568      	adds	r5, #104	@ 0x68
 800939a:	e7e9      	b.n	8009370 <_fwalk_sglue+0x10>

0800939c <iprintf>:
 800939c:	b40f      	push	{r0, r1, r2, r3}
 800939e:	b507      	push	{r0, r1, r2, lr}
 80093a0:	4906      	ldr	r1, [pc, #24]	@ (80093bc <iprintf+0x20>)
 80093a2:	ab04      	add	r3, sp, #16
 80093a4:	6808      	ldr	r0, [r1, #0]
 80093a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093aa:	6881      	ldr	r1, [r0, #8]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	f000 fe4b 	bl	800a048 <_vfiprintf_r>
 80093b2:	b003      	add	sp, #12
 80093b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b8:	b004      	add	sp, #16
 80093ba:	4770      	bx	lr
 80093bc:	20000118 	.word	0x20000118

080093c0 <_puts_r>:
 80093c0:	6a03      	ldr	r3, [r0, #32]
 80093c2:	b570      	push	{r4, r5, r6, lr}
 80093c4:	6884      	ldr	r4, [r0, #8]
 80093c6:	4605      	mov	r5, r0
 80093c8:	460e      	mov	r6, r1
 80093ca:	b90b      	cbnz	r3, 80093d0 <_puts_r+0x10>
 80093cc:	f7ff ffb0 	bl	8009330 <__sinit>
 80093d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093d2:	07db      	lsls	r3, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_puts_r+0x22>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	0598      	lsls	r0, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_puts_r+0x22>
 80093dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093de:	f000 f9ea 	bl	80097b6 <__retarget_lock_acquire_recursive>
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	0719      	lsls	r1, r3, #28
 80093e6:	d502      	bpl.n	80093ee <_puts_r+0x2e>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d135      	bne.n	800945a <_puts_r+0x9a>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4628      	mov	r0, r5
 80093f2:	f000 f911 	bl	8009618 <__swsetup_r>
 80093f6:	b380      	cbz	r0, 800945a <_puts_r+0x9a>
 80093f8:	f04f 35ff 	mov.w	r5, #4294967295
 80093fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d405      	bmi.n	800940e <_puts_r+0x4e>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	059b      	lsls	r3, r3, #22
 8009406:	d402      	bmi.n	800940e <_puts_r+0x4e>
 8009408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800940a:	f000 f9d5 	bl	80097b8 <__retarget_lock_release_recursive>
 800940e:	4628      	mov	r0, r5
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	2b00      	cmp	r3, #0
 8009414:	da04      	bge.n	8009420 <_puts_r+0x60>
 8009416:	69a2      	ldr	r2, [r4, #24]
 8009418:	429a      	cmp	r2, r3
 800941a:	dc17      	bgt.n	800944c <_puts_r+0x8c>
 800941c:	290a      	cmp	r1, #10
 800941e:	d015      	beq.n	800944c <_puts_r+0x8c>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	7019      	strb	r1, [r3, #0]
 8009428:	68a3      	ldr	r3, [r4, #8]
 800942a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800942e:	3b01      	subs	r3, #1
 8009430:	60a3      	str	r3, [r4, #8]
 8009432:	2900      	cmp	r1, #0
 8009434:	d1ed      	bne.n	8009412 <_puts_r+0x52>
 8009436:	2b00      	cmp	r3, #0
 8009438:	da11      	bge.n	800945e <_puts_r+0x9e>
 800943a:	4622      	mov	r2, r4
 800943c:	210a      	movs	r1, #10
 800943e:	4628      	mov	r0, r5
 8009440:	f000 f8ab 	bl	800959a <__swbuf_r>
 8009444:	3001      	adds	r0, #1
 8009446:	d0d7      	beq.n	80093f8 <_puts_r+0x38>
 8009448:	250a      	movs	r5, #10
 800944a:	e7d7      	b.n	80093fc <_puts_r+0x3c>
 800944c:	4622      	mov	r2, r4
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f8a3 	bl	800959a <__swbuf_r>
 8009454:	3001      	adds	r0, #1
 8009456:	d1e7      	bne.n	8009428 <_puts_r+0x68>
 8009458:	e7ce      	b.n	80093f8 <_puts_r+0x38>
 800945a:	3e01      	subs	r6, #1
 800945c:	e7e4      	b.n	8009428 <_puts_r+0x68>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	220a      	movs	r2, #10
 8009466:	701a      	strb	r2, [r3, #0]
 8009468:	e7ee      	b.n	8009448 <_puts_r+0x88>
	...

0800946c <puts>:
 800946c:	4b02      	ldr	r3, [pc, #8]	@ (8009478 <puts+0xc>)
 800946e:	4601      	mov	r1, r0
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	f7ff bfa5 	b.w	80093c0 <_puts_r>
 8009476:	bf00      	nop
 8009478:	20000118 	.word	0x20000118

0800947c <siprintf>:
 800947c:	b40e      	push	{r1, r2, r3}
 800947e:	b500      	push	{lr}
 8009480:	b09c      	sub	sp, #112	@ 0x70
 8009482:	ab1d      	add	r3, sp, #116	@ 0x74
 8009484:	9002      	str	r0, [sp, #8]
 8009486:	9006      	str	r0, [sp, #24]
 8009488:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800948c:	4809      	ldr	r0, [pc, #36]	@ (80094b4 <siprintf+0x38>)
 800948e:	9107      	str	r1, [sp, #28]
 8009490:	9104      	str	r1, [sp, #16]
 8009492:	4909      	ldr	r1, [pc, #36]	@ (80094b8 <siprintf+0x3c>)
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	9105      	str	r1, [sp, #20]
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	a902      	add	r1, sp, #8
 80094a0:	f000 fae0 	bl	8009a64 <_svfiprintf_r>
 80094a4:	9b02      	ldr	r3, [sp, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	b01c      	add	sp, #112	@ 0x70
 80094ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b0:	b003      	add	sp, #12
 80094b2:	4770      	bx	lr
 80094b4:	20000118 	.word	0x20000118
 80094b8:	ffff0208 	.word	0xffff0208

080094bc <siscanf>:
 80094bc:	b40e      	push	{r1, r2, r3}
 80094be:	b530      	push	{r4, r5, lr}
 80094c0:	b09c      	sub	sp, #112	@ 0x70
 80094c2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80094c4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80094c8:	f854 5b04 	ldr.w	r5, [r4], #4
 80094cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80094d0:	9002      	str	r0, [sp, #8]
 80094d2:	9006      	str	r0, [sp, #24]
 80094d4:	f7f6 fe9e 	bl	8000214 <strlen>
 80094d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009508 <siscanf+0x4c>)
 80094da:	9003      	str	r0, [sp, #12]
 80094dc:	9007      	str	r0, [sp, #28]
 80094de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094e0:	480a      	ldr	r0, [pc, #40]	@ (800950c <siscanf+0x50>)
 80094e2:	9401      	str	r4, [sp, #4]
 80094e4:	2300      	movs	r3, #0
 80094e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094e8:	9314      	str	r3, [sp, #80]	@ 0x50
 80094ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80094ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094f2:	462a      	mov	r2, r5
 80094f4:	4623      	mov	r3, r4
 80094f6:	a902      	add	r1, sp, #8
 80094f8:	6800      	ldr	r0, [r0, #0]
 80094fa:	f000 fc07 	bl	8009d0c <__ssvfiscanf_r>
 80094fe:	b01c      	add	sp, #112	@ 0x70
 8009500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009504:	b003      	add	sp, #12
 8009506:	4770      	bx	lr
 8009508:	08009533 	.word	0x08009533
 800950c:	20000118 	.word	0x20000118

08009510 <__sread>:
 8009510:	b510      	push	{r4, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	f000 f8fe 	bl	8009718 <_read_r>
 800951c:	2800      	cmp	r0, #0
 800951e:	bfab      	itete	ge
 8009520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009522:	89a3      	ldrhlt	r3, [r4, #12]
 8009524:	181b      	addge	r3, r3, r0
 8009526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800952a:	bfac      	ite	ge
 800952c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800952e:	81a3      	strhlt	r3, [r4, #12]
 8009530:	bd10      	pop	{r4, pc}

08009532 <__seofread>:
 8009532:	2000      	movs	r0, #0
 8009534:	4770      	bx	lr

08009536 <__swrite>:
 8009536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953a:	461f      	mov	r7, r3
 800953c:	898b      	ldrh	r3, [r1, #12]
 800953e:	05db      	lsls	r3, r3, #23
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	4616      	mov	r6, r2
 8009546:	d505      	bpl.n	8009554 <__swrite+0x1e>
 8009548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954c:	2302      	movs	r3, #2
 800954e:	2200      	movs	r2, #0
 8009550:	f000 f8d0 	bl	80096f4 <_lseek_r>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800955a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	4632      	mov	r2, r6
 8009562:	463b      	mov	r3, r7
 8009564:	4628      	mov	r0, r5
 8009566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800956a:	f000 b8e7 	b.w	800973c <_write_r>

0800956e <__sseek>:
 800956e:	b510      	push	{r4, lr}
 8009570:	460c      	mov	r4, r1
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 f8bd 	bl	80096f4 <_lseek_r>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	bf15      	itete	ne
 8009580:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800958a:	81a3      	strheq	r3, [r4, #12]
 800958c:	bf18      	it	ne
 800958e:	81a3      	strhne	r3, [r4, #12]
 8009590:	bd10      	pop	{r4, pc}

08009592 <__sclose>:
 8009592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009596:	f000 b89d 	b.w	80096d4 <_close_r>

0800959a <__swbuf_r>:
 800959a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959c:	460e      	mov	r6, r1
 800959e:	4614      	mov	r4, r2
 80095a0:	4605      	mov	r5, r0
 80095a2:	b118      	cbz	r0, 80095ac <__swbuf_r+0x12>
 80095a4:	6a03      	ldr	r3, [r0, #32]
 80095a6:	b90b      	cbnz	r3, 80095ac <__swbuf_r+0x12>
 80095a8:	f7ff fec2 	bl	8009330 <__sinit>
 80095ac:	69a3      	ldr	r3, [r4, #24]
 80095ae:	60a3      	str	r3, [r4, #8]
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	071a      	lsls	r2, r3, #28
 80095b4:	d501      	bpl.n	80095ba <__swbuf_r+0x20>
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	b943      	cbnz	r3, 80095cc <__swbuf_r+0x32>
 80095ba:	4621      	mov	r1, r4
 80095bc:	4628      	mov	r0, r5
 80095be:	f000 f82b 	bl	8009618 <__swsetup_r>
 80095c2:	b118      	cbz	r0, 80095cc <__swbuf_r+0x32>
 80095c4:	f04f 37ff 	mov.w	r7, #4294967295
 80095c8:	4638      	mov	r0, r7
 80095ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	6922      	ldr	r2, [r4, #16]
 80095d0:	1a98      	subs	r0, r3, r2
 80095d2:	6963      	ldr	r3, [r4, #20]
 80095d4:	b2f6      	uxtb	r6, r6
 80095d6:	4283      	cmp	r3, r0
 80095d8:	4637      	mov	r7, r6
 80095da:	dc05      	bgt.n	80095e8 <__swbuf_r+0x4e>
 80095dc:	4621      	mov	r1, r4
 80095de:	4628      	mov	r0, r5
 80095e0:	f001 f9aa 	bl	800a938 <_fflush_r>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d1ed      	bne.n	80095c4 <__swbuf_r+0x2a>
 80095e8:	68a3      	ldr	r3, [r4, #8]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	60a3      	str	r3, [r4, #8]
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	701e      	strb	r6, [r3, #0]
 80095f6:	6962      	ldr	r2, [r4, #20]
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d004      	beq.n	8009608 <__swbuf_r+0x6e>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	07db      	lsls	r3, r3, #31
 8009602:	d5e1      	bpl.n	80095c8 <__swbuf_r+0x2e>
 8009604:	2e0a      	cmp	r6, #10
 8009606:	d1df      	bne.n	80095c8 <__swbuf_r+0x2e>
 8009608:	4621      	mov	r1, r4
 800960a:	4628      	mov	r0, r5
 800960c:	f001 f994 	bl	800a938 <_fflush_r>
 8009610:	2800      	cmp	r0, #0
 8009612:	d0d9      	beq.n	80095c8 <__swbuf_r+0x2e>
 8009614:	e7d6      	b.n	80095c4 <__swbuf_r+0x2a>
	...

08009618 <__swsetup_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4b29      	ldr	r3, [pc, #164]	@ (80096c0 <__swsetup_r+0xa8>)
 800961c:	4605      	mov	r5, r0
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	460c      	mov	r4, r1
 8009622:	b118      	cbz	r0, 800962c <__swsetup_r+0x14>
 8009624:	6a03      	ldr	r3, [r0, #32]
 8009626:	b90b      	cbnz	r3, 800962c <__swsetup_r+0x14>
 8009628:	f7ff fe82 	bl	8009330 <__sinit>
 800962c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009630:	0719      	lsls	r1, r3, #28
 8009632:	d422      	bmi.n	800967a <__swsetup_r+0x62>
 8009634:	06da      	lsls	r2, r3, #27
 8009636:	d407      	bmi.n	8009648 <__swsetup_r+0x30>
 8009638:	2209      	movs	r2, #9
 800963a:	602a      	str	r2, [r5, #0]
 800963c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	f04f 30ff 	mov.w	r0, #4294967295
 8009646:	e033      	b.n	80096b0 <__swsetup_r+0x98>
 8009648:	0758      	lsls	r0, r3, #29
 800964a:	d512      	bpl.n	8009672 <__swsetup_r+0x5a>
 800964c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800964e:	b141      	cbz	r1, 8009662 <__swsetup_r+0x4a>
 8009650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009654:	4299      	cmp	r1, r3
 8009656:	d002      	beq.n	800965e <__swsetup_r+0x46>
 8009658:	4628      	mov	r0, r5
 800965a:	f000 f8af 	bl	80097bc <_free_r>
 800965e:	2300      	movs	r3, #0
 8009660:	6363      	str	r3, [r4, #52]	@ 0x34
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	2300      	movs	r3, #0
 800966c:	6063      	str	r3, [r4, #4]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f043 0308 	orr.w	r3, r3, #8
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	b94b      	cbnz	r3, 8009692 <__swsetup_r+0x7a>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009688:	d003      	beq.n	8009692 <__swsetup_r+0x7a>
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	f001 f9a1 	bl	800a9d4 <__smakebuf_r>
 8009692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009696:	f013 0201 	ands.w	r2, r3, #1
 800969a:	d00a      	beq.n	80096b2 <__swsetup_r+0x9a>
 800969c:	2200      	movs	r2, #0
 800969e:	60a2      	str	r2, [r4, #8]
 80096a0:	6962      	ldr	r2, [r4, #20]
 80096a2:	4252      	negs	r2, r2
 80096a4:	61a2      	str	r2, [r4, #24]
 80096a6:	6922      	ldr	r2, [r4, #16]
 80096a8:	b942      	cbnz	r2, 80096bc <__swsetup_r+0xa4>
 80096aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096ae:	d1c5      	bne.n	800963c <__swsetup_r+0x24>
 80096b0:	bd38      	pop	{r3, r4, r5, pc}
 80096b2:	0799      	lsls	r1, r3, #30
 80096b4:	bf58      	it	pl
 80096b6:	6962      	ldrpl	r2, [r4, #20]
 80096b8:	60a2      	str	r2, [r4, #8]
 80096ba:	e7f4      	b.n	80096a6 <__swsetup_r+0x8e>
 80096bc:	2000      	movs	r0, #0
 80096be:	e7f7      	b.n	80096b0 <__swsetup_r+0x98>
 80096c0:	20000118 	.word	0x20000118

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <_close_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d06      	ldr	r5, [pc, #24]	@ (80096f0 <_close_r+0x1c>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7f7 fd25 	bl	800112e <_close>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_close_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_close_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20001fac 	.word	0x20001fac

080096f4 <_lseek_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d07      	ldr	r5, [pc, #28]	@ (8009714 <_lseek_r+0x20>)
 80096f8:	4604      	mov	r4, r0
 80096fa:	4608      	mov	r0, r1
 80096fc:	4611      	mov	r1, r2
 80096fe:	2200      	movs	r2, #0
 8009700:	602a      	str	r2, [r5, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	f7f7 fd3a 	bl	800117c <_lseek>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_lseek_r+0x1e>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_lseek_r+0x1e>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20001fac 	.word	0x20001fac

08009718 <_read_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d07      	ldr	r5, [pc, #28]	@ (8009738 <_read_r+0x20>)
 800971c:	4604      	mov	r4, r0
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f7f7 fce4 	bl	80010f4 <_read>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_read_r+0x1e>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_read_r+0x1e>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	20001fac 	.word	0x20001fac

0800973c <_write_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	@ (800975c <_write_r+0x20>)
 8009740:	4604      	mov	r4, r0
 8009742:	4608      	mov	r0, r1
 8009744:	4611      	mov	r1, r2
 8009746:	2200      	movs	r2, #0
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f7 fa38 	bl	8000bc0 <_write>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_write_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_write_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20001fac 	.word	0x20001fac

08009760 <__errno>:
 8009760:	4b01      	ldr	r3, [pc, #4]	@ (8009768 <__errno+0x8>)
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000118 	.word	0x20000118

0800976c <__libc_init_array>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	4d0d      	ldr	r5, [pc, #52]	@ (80097a4 <__libc_init_array+0x38>)
 8009770:	4c0d      	ldr	r4, [pc, #52]	@ (80097a8 <__libc_init_array+0x3c>)
 8009772:	1b64      	subs	r4, r4, r5
 8009774:	10a4      	asrs	r4, r4, #2
 8009776:	2600      	movs	r6, #0
 8009778:	42a6      	cmp	r6, r4
 800977a:	d109      	bne.n	8009790 <__libc_init_array+0x24>
 800977c:	4d0b      	ldr	r5, [pc, #44]	@ (80097ac <__libc_init_array+0x40>)
 800977e:	4c0c      	ldr	r4, [pc, #48]	@ (80097b0 <__libc_init_array+0x44>)
 8009780:	f001 fb54 	bl	800ae2c <_init>
 8009784:	1b64      	subs	r4, r4, r5
 8009786:	10a4      	asrs	r4, r4, #2
 8009788:	2600      	movs	r6, #0
 800978a:	42a6      	cmp	r6, r4
 800978c:	d105      	bne.n	800979a <__libc_init_array+0x2e>
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	f855 3b04 	ldr.w	r3, [r5], #4
 8009794:	4798      	blx	r3
 8009796:	3601      	adds	r6, #1
 8009798:	e7ee      	b.n	8009778 <__libc_init_array+0xc>
 800979a:	f855 3b04 	ldr.w	r3, [r5], #4
 800979e:	4798      	blx	r3
 80097a0:	3601      	adds	r6, #1
 80097a2:	e7f2      	b.n	800978a <__libc_init_array+0x1e>
 80097a4:	0800b0ec 	.word	0x0800b0ec
 80097a8:	0800b0ec 	.word	0x0800b0ec
 80097ac:	0800b0ec 	.word	0x0800b0ec
 80097b0:	0800b0f0 	.word	0x0800b0f0

080097b4 <__retarget_lock_init_recursive>:
 80097b4:	4770      	bx	lr

080097b6 <__retarget_lock_acquire_recursive>:
 80097b6:	4770      	bx	lr

080097b8 <__retarget_lock_release_recursive>:
 80097b8:	4770      	bx	lr
	...

080097bc <_free_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4605      	mov	r5, r0
 80097c0:	2900      	cmp	r1, #0
 80097c2:	d041      	beq.n	8009848 <_free_r+0x8c>
 80097c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097c8:	1f0c      	subs	r4, r1, #4
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfb8      	it	lt
 80097ce:	18e4      	addlt	r4, r4, r3
 80097d0:	f000 f8e0 	bl	8009994 <__malloc_lock>
 80097d4:	4a1d      	ldr	r2, [pc, #116]	@ (800984c <_free_r+0x90>)
 80097d6:	6813      	ldr	r3, [r2, #0]
 80097d8:	b933      	cbnz	r3, 80097e8 <_free_r+0x2c>
 80097da:	6063      	str	r3, [r4, #4]
 80097dc:	6014      	str	r4, [r2, #0]
 80097de:	4628      	mov	r0, r5
 80097e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097e4:	f000 b8dc 	b.w	80099a0 <__malloc_unlock>
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	d908      	bls.n	80097fe <_free_r+0x42>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	1821      	adds	r1, r4, r0
 80097f0:	428b      	cmp	r3, r1
 80097f2:	bf01      	itttt	eq
 80097f4:	6819      	ldreq	r1, [r3, #0]
 80097f6:	685b      	ldreq	r3, [r3, #4]
 80097f8:	1809      	addeq	r1, r1, r0
 80097fa:	6021      	streq	r1, [r4, #0]
 80097fc:	e7ed      	b.n	80097da <_free_r+0x1e>
 80097fe:	461a      	mov	r2, r3
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	b10b      	cbz	r3, 8009808 <_free_r+0x4c>
 8009804:	42a3      	cmp	r3, r4
 8009806:	d9fa      	bls.n	80097fe <_free_r+0x42>
 8009808:	6811      	ldr	r1, [r2, #0]
 800980a:	1850      	adds	r0, r2, r1
 800980c:	42a0      	cmp	r0, r4
 800980e:	d10b      	bne.n	8009828 <_free_r+0x6c>
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	4401      	add	r1, r0
 8009814:	1850      	adds	r0, r2, r1
 8009816:	4283      	cmp	r3, r0
 8009818:	6011      	str	r1, [r2, #0]
 800981a:	d1e0      	bne.n	80097de <_free_r+0x22>
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	6053      	str	r3, [r2, #4]
 8009822:	4408      	add	r0, r1
 8009824:	6010      	str	r0, [r2, #0]
 8009826:	e7da      	b.n	80097de <_free_r+0x22>
 8009828:	d902      	bls.n	8009830 <_free_r+0x74>
 800982a:	230c      	movs	r3, #12
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	e7d6      	b.n	80097de <_free_r+0x22>
 8009830:	6820      	ldr	r0, [r4, #0]
 8009832:	1821      	adds	r1, r4, r0
 8009834:	428b      	cmp	r3, r1
 8009836:	bf04      	itt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	bf04      	itt	eq
 8009840:	1809      	addeq	r1, r1, r0
 8009842:	6021      	streq	r1, [r4, #0]
 8009844:	6054      	str	r4, [r2, #4]
 8009846:	e7ca      	b.n	80097de <_free_r+0x22>
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	20001fb8 	.word	0x20001fb8

08009850 <sbrk_aligned>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	4e0f      	ldr	r6, [pc, #60]	@ (8009890 <sbrk_aligned+0x40>)
 8009854:	460c      	mov	r4, r1
 8009856:	6831      	ldr	r1, [r6, #0]
 8009858:	4605      	mov	r5, r0
 800985a:	b911      	cbnz	r1, 8009862 <sbrk_aligned+0x12>
 800985c:	f001 f9a6 	bl	800abac <_sbrk_r>
 8009860:	6030      	str	r0, [r6, #0]
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f001 f9a1 	bl	800abac <_sbrk_r>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d103      	bne.n	8009876 <sbrk_aligned+0x26>
 800986e:	f04f 34ff 	mov.w	r4, #4294967295
 8009872:	4620      	mov	r0, r4
 8009874:	bd70      	pop	{r4, r5, r6, pc}
 8009876:	1cc4      	adds	r4, r0, #3
 8009878:	f024 0403 	bic.w	r4, r4, #3
 800987c:	42a0      	cmp	r0, r4
 800987e:	d0f8      	beq.n	8009872 <sbrk_aligned+0x22>
 8009880:	1a21      	subs	r1, r4, r0
 8009882:	4628      	mov	r0, r5
 8009884:	f001 f992 	bl	800abac <_sbrk_r>
 8009888:	3001      	adds	r0, #1
 800988a:	d1f2      	bne.n	8009872 <sbrk_aligned+0x22>
 800988c:	e7ef      	b.n	800986e <sbrk_aligned+0x1e>
 800988e:	bf00      	nop
 8009890:	20001fb4 	.word	0x20001fb4

08009894 <_malloc_r>:
 8009894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009898:	1ccd      	adds	r5, r1, #3
 800989a:	f025 0503 	bic.w	r5, r5, #3
 800989e:	3508      	adds	r5, #8
 80098a0:	2d0c      	cmp	r5, #12
 80098a2:	bf38      	it	cc
 80098a4:	250c      	movcc	r5, #12
 80098a6:	2d00      	cmp	r5, #0
 80098a8:	4606      	mov	r6, r0
 80098aa:	db01      	blt.n	80098b0 <_malloc_r+0x1c>
 80098ac:	42a9      	cmp	r1, r5
 80098ae:	d904      	bls.n	80098ba <_malloc_r+0x26>
 80098b0:	230c      	movs	r3, #12
 80098b2:	6033      	str	r3, [r6, #0]
 80098b4:	2000      	movs	r0, #0
 80098b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009990 <_malloc_r+0xfc>
 80098be:	f000 f869 	bl	8009994 <__malloc_lock>
 80098c2:	f8d8 3000 	ldr.w	r3, [r8]
 80098c6:	461c      	mov	r4, r3
 80098c8:	bb44      	cbnz	r4, 800991c <_malloc_r+0x88>
 80098ca:	4629      	mov	r1, r5
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff ffbf 	bl	8009850 <sbrk_aligned>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	4604      	mov	r4, r0
 80098d6:	d158      	bne.n	800998a <_malloc_r+0xf6>
 80098d8:	f8d8 4000 	ldr.w	r4, [r8]
 80098dc:	4627      	mov	r7, r4
 80098de:	2f00      	cmp	r7, #0
 80098e0:	d143      	bne.n	800996a <_malloc_r+0xd6>
 80098e2:	2c00      	cmp	r4, #0
 80098e4:	d04b      	beq.n	800997e <_malloc_r+0xea>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	4639      	mov	r1, r7
 80098ea:	4630      	mov	r0, r6
 80098ec:	eb04 0903 	add.w	r9, r4, r3
 80098f0:	f001 f95c 	bl	800abac <_sbrk_r>
 80098f4:	4581      	cmp	r9, r0
 80098f6:	d142      	bne.n	800997e <_malloc_r+0xea>
 80098f8:	6821      	ldr	r1, [r4, #0]
 80098fa:	1a6d      	subs	r5, r5, r1
 80098fc:	4629      	mov	r1, r5
 80098fe:	4630      	mov	r0, r6
 8009900:	f7ff ffa6 	bl	8009850 <sbrk_aligned>
 8009904:	3001      	adds	r0, #1
 8009906:	d03a      	beq.n	800997e <_malloc_r+0xea>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	442b      	add	r3, r5
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	f8d8 3000 	ldr.w	r3, [r8]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	bb62      	cbnz	r2, 8009970 <_malloc_r+0xdc>
 8009916:	f8c8 7000 	str.w	r7, [r8]
 800991a:	e00f      	b.n	800993c <_malloc_r+0xa8>
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	1b52      	subs	r2, r2, r5
 8009920:	d420      	bmi.n	8009964 <_malloc_r+0xd0>
 8009922:	2a0b      	cmp	r2, #11
 8009924:	d917      	bls.n	8009956 <_malloc_r+0xc2>
 8009926:	1961      	adds	r1, r4, r5
 8009928:	42a3      	cmp	r3, r4
 800992a:	6025      	str	r5, [r4, #0]
 800992c:	bf18      	it	ne
 800992e:	6059      	strne	r1, [r3, #4]
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	bf08      	it	eq
 8009934:	f8c8 1000 	streq.w	r1, [r8]
 8009938:	5162      	str	r2, [r4, r5]
 800993a:	604b      	str	r3, [r1, #4]
 800993c:	4630      	mov	r0, r6
 800993e:	f000 f82f 	bl	80099a0 <__malloc_unlock>
 8009942:	f104 000b 	add.w	r0, r4, #11
 8009946:	1d23      	adds	r3, r4, #4
 8009948:	f020 0007 	bic.w	r0, r0, #7
 800994c:	1ac2      	subs	r2, r0, r3
 800994e:	bf1c      	itt	ne
 8009950:	1a1b      	subne	r3, r3, r0
 8009952:	50a3      	strne	r3, [r4, r2]
 8009954:	e7af      	b.n	80098b6 <_malloc_r+0x22>
 8009956:	6862      	ldr	r2, [r4, #4]
 8009958:	42a3      	cmp	r3, r4
 800995a:	bf0c      	ite	eq
 800995c:	f8c8 2000 	streq.w	r2, [r8]
 8009960:	605a      	strne	r2, [r3, #4]
 8009962:	e7eb      	b.n	800993c <_malloc_r+0xa8>
 8009964:	4623      	mov	r3, r4
 8009966:	6864      	ldr	r4, [r4, #4]
 8009968:	e7ae      	b.n	80098c8 <_malloc_r+0x34>
 800996a:	463c      	mov	r4, r7
 800996c:	687f      	ldr	r7, [r7, #4]
 800996e:	e7b6      	b.n	80098de <_malloc_r+0x4a>
 8009970:	461a      	mov	r2, r3
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	42a3      	cmp	r3, r4
 8009976:	d1fb      	bne.n	8009970 <_malloc_r+0xdc>
 8009978:	2300      	movs	r3, #0
 800997a:	6053      	str	r3, [r2, #4]
 800997c:	e7de      	b.n	800993c <_malloc_r+0xa8>
 800997e:	230c      	movs	r3, #12
 8009980:	6033      	str	r3, [r6, #0]
 8009982:	4630      	mov	r0, r6
 8009984:	f000 f80c 	bl	80099a0 <__malloc_unlock>
 8009988:	e794      	b.n	80098b4 <_malloc_r+0x20>
 800998a:	6005      	str	r5, [r0, #0]
 800998c:	e7d6      	b.n	800993c <_malloc_r+0xa8>
 800998e:	bf00      	nop
 8009990:	20001fb8 	.word	0x20001fb8

08009994 <__malloc_lock>:
 8009994:	4801      	ldr	r0, [pc, #4]	@ (800999c <__malloc_lock+0x8>)
 8009996:	f7ff bf0e 	b.w	80097b6 <__retarget_lock_acquire_recursive>
 800999a:	bf00      	nop
 800999c:	20001fb0 	.word	0x20001fb0

080099a0 <__malloc_unlock>:
 80099a0:	4801      	ldr	r0, [pc, #4]	@ (80099a8 <__malloc_unlock+0x8>)
 80099a2:	f7ff bf09 	b.w	80097b8 <__retarget_lock_release_recursive>
 80099a6:	bf00      	nop
 80099a8:	20001fb0 	.word	0x20001fb0

080099ac <__ssputs_r>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	688e      	ldr	r6, [r1, #8]
 80099b2:	461f      	mov	r7, r3
 80099b4:	42be      	cmp	r6, r7
 80099b6:	680b      	ldr	r3, [r1, #0]
 80099b8:	4682      	mov	sl, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4690      	mov	r8, r2
 80099be:	d82d      	bhi.n	8009a1c <__ssputs_r+0x70>
 80099c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099c8:	d026      	beq.n	8009a18 <__ssputs_r+0x6c>
 80099ca:	6965      	ldr	r5, [r4, #20]
 80099cc:	6909      	ldr	r1, [r1, #16]
 80099ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099d2:	eba3 0901 	sub.w	r9, r3, r1
 80099d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099da:	1c7b      	adds	r3, r7, #1
 80099dc:	444b      	add	r3, r9
 80099de:	106d      	asrs	r5, r5, #1
 80099e0:	429d      	cmp	r5, r3
 80099e2:	bf38      	it	cc
 80099e4:	461d      	movcc	r5, r3
 80099e6:	0553      	lsls	r3, r2, #21
 80099e8:	d527      	bpl.n	8009a3a <__ssputs_r+0x8e>
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7ff ff52 	bl	8009894 <_malloc_r>
 80099f0:	4606      	mov	r6, r0
 80099f2:	b360      	cbz	r0, 8009a4e <__ssputs_r+0xa2>
 80099f4:	6921      	ldr	r1, [r4, #16]
 80099f6:	464a      	mov	r2, r9
 80099f8:	f001 f8e8 	bl	800abcc <memcpy>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	6126      	str	r6, [r4, #16]
 8009a0a:	6165      	str	r5, [r4, #20]
 8009a0c:	444e      	add	r6, r9
 8009a0e:	eba5 0509 	sub.w	r5, r5, r9
 8009a12:	6026      	str	r6, [r4, #0]
 8009a14:	60a5      	str	r5, [r4, #8]
 8009a16:	463e      	mov	r6, r7
 8009a18:	42be      	cmp	r6, r7
 8009a1a:	d900      	bls.n	8009a1e <__ssputs_r+0x72>
 8009a1c:	463e      	mov	r6, r7
 8009a1e:	6820      	ldr	r0, [r4, #0]
 8009a20:	4632      	mov	r2, r6
 8009a22:	4641      	mov	r1, r8
 8009a24:	f001 f885 	bl	800ab32 <memmove>
 8009a28:	68a3      	ldr	r3, [r4, #8]
 8009a2a:	1b9b      	subs	r3, r3, r6
 8009a2c:	60a3      	str	r3, [r4, #8]
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	4433      	add	r3, r6
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	2000      	movs	r0, #0
 8009a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3a:	462a      	mov	r2, r5
 8009a3c:	f001 f8d4 	bl	800abe8 <_realloc_r>
 8009a40:	4606      	mov	r6, r0
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d1e0      	bne.n	8009a08 <__ssputs_r+0x5c>
 8009a46:	6921      	ldr	r1, [r4, #16]
 8009a48:	4650      	mov	r0, sl
 8009a4a:	f7ff feb7 	bl	80097bc <_free_r>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	f8ca 3000 	str.w	r3, [sl]
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e7e9      	b.n	8009a36 <__ssputs_r+0x8a>
	...

08009a64 <_svfiprintf_r>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	4698      	mov	r8, r3
 8009a6a:	898b      	ldrh	r3, [r1, #12]
 8009a6c:	061b      	lsls	r3, r3, #24
 8009a6e:	b09d      	sub	sp, #116	@ 0x74
 8009a70:	4607      	mov	r7, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	4614      	mov	r4, r2
 8009a76:	d510      	bpl.n	8009a9a <_svfiprintf_r+0x36>
 8009a78:	690b      	ldr	r3, [r1, #16]
 8009a7a:	b973      	cbnz	r3, 8009a9a <_svfiprintf_r+0x36>
 8009a7c:	2140      	movs	r1, #64	@ 0x40
 8009a7e:	f7ff ff09 	bl	8009894 <_malloc_r>
 8009a82:	6028      	str	r0, [r5, #0]
 8009a84:	6128      	str	r0, [r5, #16]
 8009a86:	b930      	cbnz	r0, 8009a96 <_svfiprintf_r+0x32>
 8009a88:	230c      	movs	r3, #12
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a90:	b01d      	add	sp, #116	@ 0x74
 8009a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a96:	2340      	movs	r3, #64	@ 0x40
 8009a98:	616b      	str	r3, [r5, #20]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9e:	2320      	movs	r3, #32
 8009aa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa8:	2330      	movs	r3, #48	@ 0x30
 8009aaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c48 <_svfiprintf_r+0x1e4>
 8009aae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ab2:	f04f 0901 	mov.w	r9, #1
 8009ab6:	4623      	mov	r3, r4
 8009ab8:	469a      	mov	sl, r3
 8009aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009abe:	b10a      	cbz	r2, 8009ac4 <_svfiprintf_r+0x60>
 8009ac0:	2a25      	cmp	r2, #37	@ 0x25
 8009ac2:	d1f9      	bne.n	8009ab8 <_svfiprintf_r+0x54>
 8009ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac8:	d00b      	beq.n	8009ae2 <_svfiprintf_r+0x7e>
 8009aca:	465b      	mov	r3, fp
 8009acc:	4622      	mov	r2, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff ff6b 	bl	80099ac <__ssputs_r>
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	f000 80a7 	beq.w	8009c2a <_svfiprintf_r+0x1c6>
 8009adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ade:	445a      	add	r2, fp
 8009ae0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 809f 	beq.w	8009c2a <_svfiprintf_r+0x1c6>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295
 8009af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af6:	f10a 0a01 	add.w	sl, sl, #1
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	9307      	str	r3, [sp, #28]
 8009afe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b02:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b04:	4654      	mov	r4, sl
 8009b06:	2205      	movs	r2, #5
 8009b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0c:	484e      	ldr	r0, [pc, #312]	@ (8009c48 <_svfiprintf_r+0x1e4>)
 8009b0e:	f7f6 fb8f 	bl	8000230 <memchr>
 8009b12:	9a04      	ldr	r2, [sp, #16]
 8009b14:	b9d8      	cbnz	r0, 8009b4e <_svfiprintf_r+0xea>
 8009b16:	06d0      	lsls	r0, r2, #27
 8009b18:	bf44      	itt	mi
 8009b1a:	2320      	movmi	r3, #32
 8009b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b20:	0711      	lsls	r1, r2, #28
 8009b22:	bf44      	itt	mi
 8009b24:	232b      	movmi	r3, #43	@ 0x2b
 8009b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b30:	d015      	beq.n	8009b5e <_svfiprintf_r+0xfa>
 8009b32:	9a07      	ldr	r2, [sp, #28]
 8009b34:	4654      	mov	r4, sl
 8009b36:	2000      	movs	r0, #0
 8009b38:	f04f 0c0a 	mov.w	ip, #10
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b42:	3b30      	subs	r3, #48	@ 0x30
 8009b44:	2b09      	cmp	r3, #9
 8009b46:	d94b      	bls.n	8009be0 <_svfiprintf_r+0x17c>
 8009b48:	b1b0      	cbz	r0, 8009b78 <_svfiprintf_r+0x114>
 8009b4a:	9207      	str	r2, [sp, #28]
 8009b4c:	e014      	b.n	8009b78 <_svfiprintf_r+0x114>
 8009b4e:	eba0 0308 	sub.w	r3, r0, r8
 8009b52:	fa09 f303 	lsl.w	r3, r9, r3
 8009b56:	4313      	orrs	r3, r2
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	46a2      	mov	sl, r4
 8009b5c:	e7d2      	b.n	8009b04 <_svfiprintf_r+0xa0>
 8009b5e:	9b03      	ldr	r3, [sp, #12]
 8009b60:	1d19      	adds	r1, r3, #4
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	9103      	str	r1, [sp, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfbb      	ittet	lt
 8009b6a:	425b      	neglt	r3, r3
 8009b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b70:	9307      	strge	r3, [sp, #28]
 8009b72:	9307      	strlt	r3, [sp, #28]
 8009b74:	bfb8      	it	lt
 8009b76:	9204      	strlt	r2, [sp, #16]
 8009b78:	7823      	ldrb	r3, [r4, #0]
 8009b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b7c:	d10a      	bne.n	8009b94 <_svfiprintf_r+0x130>
 8009b7e:	7863      	ldrb	r3, [r4, #1]
 8009b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b82:	d132      	bne.n	8009bea <_svfiprintf_r+0x186>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	9203      	str	r2, [sp, #12]
 8009b8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b90:	3402      	adds	r4, #2
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c58 <_svfiprintf_r+0x1f4>
 8009b98:	7821      	ldrb	r1, [r4, #0]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	f7f6 fb47 	bl	8000230 <memchr>
 8009ba2:	b138      	cbz	r0, 8009bb4 <_svfiprintf_r+0x150>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	eba0 000a 	sub.w	r0, r0, sl
 8009baa:	2240      	movs	r2, #64	@ 0x40
 8009bac:	4082      	lsls	r2, r0
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	3401      	adds	r4, #1
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb8:	4824      	ldr	r0, [pc, #144]	@ (8009c4c <_svfiprintf_r+0x1e8>)
 8009bba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bbe:	2206      	movs	r2, #6
 8009bc0:	f7f6 fb36 	bl	8000230 <memchr>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d036      	beq.n	8009c36 <_svfiprintf_r+0x1d2>
 8009bc8:	4b21      	ldr	r3, [pc, #132]	@ (8009c50 <_svfiprintf_r+0x1ec>)
 8009bca:	bb1b      	cbnz	r3, 8009c14 <_svfiprintf_r+0x1b0>
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	3307      	adds	r3, #7
 8009bd0:	f023 0307 	bic.w	r3, r3, #7
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bda:	4433      	add	r3, r6
 8009bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bde:	e76a      	b.n	8009ab6 <_svfiprintf_r+0x52>
 8009be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be4:	460c      	mov	r4, r1
 8009be6:	2001      	movs	r0, #1
 8009be8:	e7a8      	b.n	8009b3c <_svfiprintf_r+0xd8>
 8009bea:	2300      	movs	r3, #0
 8009bec:	3401      	adds	r4, #1
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f04f 0c0a 	mov.w	ip, #10
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bfc:	3a30      	subs	r2, #48	@ 0x30
 8009bfe:	2a09      	cmp	r2, #9
 8009c00:	d903      	bls.n	8009c0a <_svfiprintf_r+0x1a6>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0c6      	beq.n	8009b94 <_svfiprintf_r+0x130>
 8009c06:	9105      	str	r1, [sp, #20]
 8009c08:	e7c4      	b.n	8009b94 <_svfiprintf_r+0x130>
 8009c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c0e:	4604      	mov	r4, r0
 8009c10:	2301      	movs	r3, #1
 8009c12:	e7f0      	b.n	8009bf6 <_svfiprintf_r+0x192>
 8009c14:	ab03      	add	r3, sp, #12
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	462a      	mov	r2, r5
 8009c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009c54 <_svfiprintf_r+0x1f0>)
 8009c1c:	a904      	add	r1, sp, #16
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f3af 8000 	nop.w
 8009c24:	1c42      	adds	r2, r0, #1
 8009c26:	4606      	mov	r6, r0
 8009c28:	d1d6      	bne.n	8009bd8 <_svfiprintf_r+0x174>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	065b      	lsls	r3, r3, #25
 8009c2e:	f53f af2d 	bmi.w	8009a8c <_svfiprintf_r+0x28>
 8009c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c34:	e72c      	b.n	8009a90 <_svfiprintf_r+0x2c>
 8009c36:	ab03      	add	r3, sp, #12
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	4b05      	ldr	r3, [pc, #20]	@ (8009c54 <_svfiprintf_r+0x1f0>)
 8009c3e:	a904      	add	r1, sp, #16
 8009c40:	4638      	mov	r0, r7
 8009c42:	f000 fb87 	bl	800a354 <_printf_i>
 8009c46:	e7ed      	b.n	8009c24 <_svfiprintf_r+0x1c0>
 8009c48:	0800af94 	.word	0x0800af94
 8009c4c:	0800af9e 	.word	0x0800af9e
 8009c50:	00000000 	.word	0x00000000
 8009c54:	080099ad 	.word	0x080099ad
 8009c58:	0800af9a 	.word	0x0800af9a

08009c5c <_sungetc_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	1c4b      	adds	r3, r1, #1
 8009c60:	4614      	mov	r4, r2
 8009c62:	d103      	bne.n	8009c6c <_sungetc_r+0x10>
 8009c64:	f04f 35ff 	mov.w	r5, #4294967295
 8009c68:	4628      	mov	r0, r5
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	8993      	ldrh	r3, [r2, #12]
 8009c6e:	f023 0320 	bic.w	r3, r3, #32
 8009c72:	8193      	strh	r3, [r2, #12]
 8009c74:	6853      	ldr	r3, [r2, #4]
 8009c76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009c78:	b2cd      	uxtb	r5, r1
 8009c7a:	b18a      	cbz	r2, 8009ca0 <_sungetc_r+0x44>
 8009c7c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	dd08      	ble.n	8009c94 <_sungetc_r+0x38>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	1e5a      	subs	r2, r3, #1
 8009c86:	6022      	str	r2, [r4, #0]
 8009c88:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009c8c:	6863      	ldr	r3, [r4, #4]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	6063      	str	r3, [r4, #4]
 8009c92:	e7e9      	b.n	8009c68 <_sungetc_r+0xc>
 8009c94:	4621      	mov	r1, r4
 8009c96:	f000 ff12 	bl	800aabe <__submore>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d0f1      	beq.n	8009c82 <_sungetc_r+0x26>
 8009c9e:	e7e1      	b.n	8009c64 <_sungetc_r+0x8>
 8009ca0:	6921      	ldr	r1, [r4, #16]
 8009ca2:	6822      	ldr	r2, [r4, #0]
 8009ca4:	b141      	cbz	r1, 8009cb8 <_sungetc_r+0x5c>
 8009ca6:	4291      	cmp	r1, r2
 8009ca8:	d206      	bcs.n	8009cb8 <_sungetc_r+0x5c>
 8009caa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009cae:	42a9      	cmp	r1, r5
 8009cb0:	d102      	bne.n	8009cb8 <_sungetc_r+0x5c>
 8009cb2:	3a01      	subs	r2, #1
 8009cb4:	6022      	str	r2, [r4, #0]
 8009cb6:	e7ea      	b.n	8009c8e <_sungetc_r+0x32>
 8009cb8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009cbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009cc6:	4623      	mov	r3, r4
 8009cc8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e7de      	b.n	8009c90 <_sungetc_r+0x34>

08009cd2 <__ssrefill_r>:
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009cd8:	b169      	cbz	r1, 8009cf6 <__ssrefill_r+0x24>
 8009cda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	d001      	beq.n	8009ce6 <__ssrefill_r+0x14>
 8009ce2:	f7ff fd6b 	bl	80097bc <_free_r>
 8009ce6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ce8:	6063      	str	r3, [r4, #4]
 8009cea:	2000      	movs	r0, #0
 8009cec:	6360      	str	r0, [r4, #52]	@ 0x34
 8009cee:	b113      	cbz	r3, 8009cf6 <__ssrefill_r+0x24>
 8009cf0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	bd10      	pop	{r4, pc}
 8009cf6:	6923      	ldr	r3, [r4, #16]
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	f043 0320 	orr.w	r3, r3, #32
 8009d04:	81a3      	strh	r3, [r4, #12]
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0a:	e7f3      	b.n	8009cf4 <__ssrefill_r+0x22>

08009d0c <__ssvfiscanf_r>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	460c      	mov	r4, r1
 8009d12:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009d16:	2100      	movs	r1, #0
 8009d18:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009d1c:	49a5      	ldr	r1, [pc, #660]	@ (8009fb4 <__ssvfiscanf_r+0x2a8>)
 8009d1e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009d20:	f10d 0804 	add.w	r8, sp, #4
 8009d24:	49a4      	ldr	r1, [pc, #656]	@ (8009fb8 <__ssvfiscanf_r+0x2ac>)
 8009d26:	4fa5      	ldr	r7, [pc, #660]	@ (8009fbc <__ssvfiscanf_r+0x2b0>)
 8009d28:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	7813      	ldrb	r3, [r2, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8158 	beq.w	8009fea <__ssvfiscanf_r+0x2de>
 8009d3a:	5cf9      	ldrb	r1, [r7, r3]
 8009d3c:	f011 0108 	ands.w	r1, r1, #8
 8009d40:	f102 0501 	add.w	r5, r2, #1
 8009d44:	d019      	beq.n	8009d7a <__ssvfiscanf_r+0x6e>
 8009d46:	6863      	ldr	r3, [r4, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	dd0f      	ble.n	8009d6c <__ssvfiscanf_r+0x60>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	781a      	ldrb	r2, [r3, #0]
 8009d50:	5cba      	ldrb	r2, [r7, r2]
 8009d52:	0712      	lsls	r2, r2, #28
 8009d54:	d401      	bmi.n	8009d5a <__ssvfiscanf_r+0x4e>
 8009d56:	462a      	mov	r2, r5
 8009d58:	e7eb      	b.n	8009d32 <__ssvfiscanf_r+0x26>
 8009d5a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009d5c:	3201      	adds	r2, #1
 8009d5e:	9245      	str	r2, [sp, #276]	@ 0x114
 8009d60:	6862      	ldr	r2, [r4, #4]
 8009d62:	3301      	adds	r3, #1
 8009d64:	3a01      	subs	r2, #1
 8009d66:	6062      	str	r2, [r4, #4]
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	e7ec      	b.n	8009d46 <__ssvfiscanf_r+0x3a>
 8009d6c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4630      	mov	r0, r6
 8009d72:	4798      	blx	r3
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d0e9      	beq.n	8009d4c <__ssvfiscanf_r+0x40>
 8009d78:	e7ed      	b.n	8009d56 <__ssvfiscanf_r+0x4a>
 8009d7a:	2b25      	cmp	r3, #37	@ 0x25
 8009d7c:	d012      	beq.n	8009da4 <__ssvfiscanf_r+0x98>
 8009d7e:	4699      	mov	r9, r3
 8009d80:	6863      	ldr	r3, [r4, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f340 8093 	ble.w	8009eae <__ssvfiscanf_r+0x1a2>
 8009d88:	6822      	ldr	r2, [r4, #0]
 8009d8a:	7813      	ldrb	r3, [r2, #0]
 8009d8c:	454b      	cmp	r3, r9
 8009d8e:	f040 812c 	bne.w	8009fea <__ssvfiscanf_r+0x2de>
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	6063      	str	r3, [r4, #4]
 8009d98:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009d9a:	3201      	adds	r2, #1
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	6022      	str	r2, [r4, #0]
 8009da0:	9345      	str	r3, [sp, #276]	@ 0x114
 8009da2:	e7d8      	b.n	8009d56 <__ssvfiscanf_r+0x4a>
 8009da4:	9141      	str	r1, [sp, #260]	@ 0x104
 8009da6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009da8:	7853      	ldrb	r3, [r2, #1]
 8009daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dac:	bf02      	ittt	eq
 8009dae:	2310      	moveq	r3, #16
 8009db0:	1c95      	addeq	r5, r2, #2
 8009db2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009db4:	220a      	movs	r2, #10
 8009db6:	46a9      	mov	r9, r5
 8009db8:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009dbc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d91e      	bls.n	8009e02 <__ssvfiscanf_r+0xf6>
 8009dc4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009fc0 <__ssvfiscanf_r+0x2b4>
 8009dc8:	2203      	movs	r2, #3
 8009dca:	4650      	mov	r0, sl
 8009dcc:	f7f6 fa30 	bl	8000230 <memchr>
 8009dd0:	b138      	cbz	r0, 8009de2 <__ssvfiscanf_r+0xd6>
 8009dd2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009dd4:	eba0 000a 	sub.w	r0, r0, sl
 8009dd8:	2301      	movs	r3, #1
 8009dda:	4083      	lsls	r3, r0
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	9341      	str	r3, [sp, #260]	@ 0x104
 8009de0:	464d      	mov	r5, r9
 8009de2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009de6:	2b78      	cmp	r3, #120	@ 0x78
 8009de8:	d806      	bhi.n	8009df8 <__ssvfiscanf_r+0xec>
 8009dea:	2b57      	cmp	r3, #87	@ 0x57
 8009dec:	d810      	bhi.n	8009e10 <__ssvfiscanf_r+0x104>
 8009dee:	2b25      	cmp	r3, #37	@ 0x25
 8009df0:	d0c5      	beq.n	8009d7e <__ssvfiscanf_r+0x72>
 8009df2:	d857      	bhi.n	8009ea4 <__ssvfiscanf_r+0x198>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d065      	beq.n	8009ec4 <__ssvfiscanf_r+0x1b8>
 8009df8:	2303      	movs	r3, #3
 8009dfa:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009dfc:	230a      	movs	r3, #10
 8009dfe:	9342      	str	r3, [sp, #264]	@ 0x108
 8009e00:	e078      	b.n	8009ef4 <__ssvfiscanf_r+0x1e8>
 8009e02:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009e04:	fb02 1103 	mla	r1, r2, r3, r1
 8009e08:	3930      	subs	r1, #48	@ 0x30
 8009e0a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009e0c:	464d      	mov	r5, r9
 8009e0e:	e7d2      	b.n	8009db6 <__ssvfiscanf_r+0xaa>
 8009e10:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009e14:	2a20      	cmp	r2, #32
 8009e16:	d8ef      	bhi.n	8009df8 <__ssvfiscanf_r+0xec>
 8009e18:	a101      	add	r1, pc, #4	@ (adr r1, 8009e20 <__ssvfiscanf_r+0x114>)
 8009e1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e1e:	bf00      	nop
 8009e20:	08009ed3 	.word	0x08009ed3
 8009e24:	08009df9 	.word	0x08009df9
 8009e28:	08009df9 	.word	0x08009df9
 8009e2c:	08009f2d 	.word	0x08009f2d
 8009e30:	08009df9 	.word	0x08009df9
 8009e34:	08009df9 	.word	0x08009df9
 8009e38:	08009df9 	.word	0x08009df9
 8009e3c:	08009df9 	.word	0x08009df9
 8009e40:	08009df9 	.word	0x08009df9
 8009e44:	08009df9 	.word	0x08009df9
 8009e48:	08009df9 	.word	0x08009df9
 8009e4c:	08009f43 	.word	0x08009f43
 8009e50:	08009f29 	.word	0x08009f29
 8009e54:	08009eab 	.word	0x08009eab
 8009e58:	08009eab 	.word	0x08009eab
 8009e5c:	08009eab 	.word	0x08009eab
 8009e60:	08009df9 	.word	0x08009df9
 8009e64:	08009ee5 	.word	0x08009ee5
 8009e68:	08009df9 	.word	0x08009df9
 8009e6c:	08009df9 	.word	0x08009df9
 8009e70:	08009df9 	.word	0x08009df9
 8009e74:	08009df9 	.word	0x08009df9
 8009e78:	08009f53 	.word	0x08009f53
 8009e7c:	08009eed 	.word	0x08009eed
 8009e80:	08009ecb 	.word	0x08009ecb
 8009e84:	08009df9 	.word	0x08009df9
 8009e88:	08009df9 	.word	0x08009df9
 8009e8c:	08009f4f 	.word	0x08009f4f
 8009e90:	08009df9 	.word	0x08009df9
 8009e94:	08009f29 	.word	0x08009f29
 8009e98:	08009df9 	.word	0x08009df9
 8009e9c:	08009df9 	.word	0x08009df9
 8009ea0:	08009ed3 	.word	0x08009ed3
 8009ea4:	3b45      	subs	r3, #69	@ 0x45
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d8a6      	bhi.n	8009df8 <__ssvfiscanf_r+0xec>
 8009eaa:	2305      	movs	r3, #5
 8009eac:	e021      	b.n	8009ef2 <__ssvfiscanf_r+0x1e6>
 8009eae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	4798      	blx	r3
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f af66 	beq.w	8009d88 <__ssvfiscanf_r+0x7c>
 8009ebc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 808b 	bne.w	8009fda <__ssvfiscanf_r+0x2ce>
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	e08b      	b.n	8009fe2 <__ssvfiscanf_r+0x2d6>
 8009eca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ecc:	f042 0220 	orr.w	r2, r2, #32
 8009ed0:	9241      	str	r2, [sp, #260]	@ 0x104
 8009ed2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ed8:	9241      	str	r2, [sp, #260]	@ 0x104
 8009eda:	2210      	movs	r2, #16
 8009edc:	2b6e      	cmp	r3, #110	@ 0x6e
 8009ede:	9242      	str	r2, [sp, #264]	@ 0x108
 8009ee0:	d902      	bls.n	8009ee8 <__ssvfiscanf_r+0x1dc>
 8009ee2:	e005      	b.n	8009ef0 <__ssvfiscanf_r+0x1e4>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	9342      	str	r3, [sp, #264]	@ 0x108
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e002      	b.n	8009ef2 <__ssvfiscanf_r+0x1e6>
 8009eec:	2308      	movs	r3, #8
 8009eee:	9342      	str	r3, [sp, #264]	@ 0x108
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009ef4:	6863      	ldr	r3, [r4, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dd39      	ble.n	8009f6e <__ssvfiscanf_r+0x262>
 8009efa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009efc:	0659      	lsls	r1, r3, #25
 8009efe:	d404      	bmi.n	8009f0a <__ssvfiscanf_r+0x1fe>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	781a      	ldrb	r2, [r3, #0]
 8009f04:	5cba      	ldrb	r2, [r7, r2]
 8009f06:	0712      	lsls	r2, r2, #28
 8009f08:	d438      	bmi.n	8009f7c <__ssvfiscanf_r+0x270>
 8009f0a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	dc47      	bgt.n	8009fa0 <__ssvfiscanf_r+0x294>
 8009f10:	466b      	mov	r3, sp
 8009f12:	4622      	mov	r2, r4
 8009f14:	a941      	add	r1, sp, #260	@ 0x104
 8009f16:	4630      	mov	r0, r6
 8009f18:	f000 fb3c 	bl	800a594 <_scanf_chars>
 8009f1c:	2801      	cmp	r0, #1
 8009f1e:	d064      	beq.n	8009fea <__ssvfiscanf_r+0x2de>
 8009f20:	2802      	cmp	r0, #2
 8009f22:	f47f af18 	bne.w	8009d56 <__ssvfiscanf_r+0x4a>
 8009f26:	e7c9      	b.n	8009ebc <__ssvfiscanf_r+0x1b0>
 8009f28:	220a      	movs	r2, #10
 8009f2a:	e7d7      	b.n	8009edc <__ssvfiscanf_r+0x1d0>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4640      	mov	r0, r8
 8009f30:	f000 fd8c 	bl	800aa4c <__sccl>
 8009f34:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f3a:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e7d7      	b.n	8009ef2 <__ssvfiscanf_r+0x1e6>
 8009f42:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f48:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e7d1      	b.n	8009ef2 <__ssvfiscanf_r+0x1e6>
 8009f4e:	2302      	movs	r3, #2
 8009f50:	e7cf      	b.n	8009ef2 <__ssvfiscanf_r+0x1e6>
 8009f52:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009f54:	06c3      	lsls	r3, r0, #27
 8009f56:	f53f aefe 	bmi.w	8009d56 <__ssvfiscanf_r+0x4a>
 8009f5a:	9b00      	ldr	r3, [sp, #0]
 8009f5c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f5e:	1d19      	adds	r1, r3, #4
 8009f60:	9100      	str	r1, [sp, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	07c0      	lsls	r0, r0, #31
 8009f66:	bf4c      	ite	mi
 8009f68:	801a      	strhmi	r2, [r3, #0]
 8009f6a:	601a      	strpl	r2, [r3, #0]
 8009f6c:	e6f3      	b.n	8009d56 <__ssvfiscanf_r+0x4a>
 8009f6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009f70:	4621      	mov	r1, r4
 8009f72:	4630      	mov	r0, r6
 8009f74:	4798      	blx	r3
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0bf      	beq.n	8009efa <__ssvfiscanf_r+0x1ee>
 8009f7a:	e79f      	b.n	8009ebc <__ssvfiscanf_r+0x1b0>
 8009f7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f7e:	3201      	adds	r2, #1
 8009f80:	9245      	str	r2, [sp, #276]	@ 0x114
 8009f82:	6862      	ldr	r2, [r4, #4]
 8009f84:	3a01      	subs	r2, #1
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	6062      	str	r2, [r4, #4]
 8009f8a:	dd02      	ble.n	8009f92 <__ssvfiscanf_r+0x286>
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	6023      	str	r3, [r4, #0]
 8009f90:	e7b6      	b.n	8009f00 <__ssvfiscanf_r+0x1f4>
 8009f92:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009f94:	4621      	mov	r1, r4
 8009f96:	4630      	mov	r0, r6
 8009f98:	4798      	blx	r3
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d0b0      	beq.n	8009f00 <__ssvfiscanf_r+0x1f4>
 8009f9e:	e78d      	b.n	8009ebc <__ssvfiscanf_r+0x1b0>
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	dc0f      	bgt.n	8009fc4 <__ssvfiscanf_r+0x2b8>
 8009fa4:	466b      	mov	r3, sp
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	a941      	add	r1, sp, #260	@ 0x104
 8009faa:	4630      	mov	r0, r6
 8009fac:	f000 fb4c 	bl	800a648 <_scanf_i>
 8009fb0:	e7b4      	b.n	8009f1c <__ssvfiscanf_r+0x210>
 8009fb2:	bf00      	nop
 8009fb4:	08009c5d 	.word	0x08009c5d
 8009fb8:	08009cd3 	.word	0x08009cd3
 8009fbc:	0800afe3 	.word	0x0800afe3
 8009fc0:	0800af9a 	.word	0x0800af9a
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff0 <__ssvfiscanf_r+0x2e4>)
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f43f aec5 	beq.w	8009d56 <__ssvfiscanf_r+0x4a>
 8009fcc:	466b      	mov	r3, sp
 8009fce:	4622      	mov	r2, r4
 8009fd0:	a941      	add	r1, sp, #260	@ 0x104
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f3af 8000 	nop.w
 8009fd8:	e7a0      	b.n	8009f1c <__ssvfiscanf_r+0x210>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	065b      	lsls	r3, r3, #25
 8009fde:	f53f af71 	bmi.w	8009ec4 <__ssvfiscanf_r+0x1b8>
 8009fe2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009fec:	e7f9      	b.n	8009fe2 <__ssvfiscanf_r+0x2d6>
 8009fee:	bf00      	nop
 8009ff0:	00000000 	.word	0x00000000

08009ff4 <__sfputc_r>:
 8009ff4:	6893      	ldr	r3, [r2, #8]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	b410      	push	{r4}
 8009ffc:	6093      	str	r3, [r2, #8]
 8009ffe:	da08      	bge.n	800a012 <__sfputc_r+0x1e>
 800a000:	6994      	ldr	r4, [r2, #24]
 800a002:	42a3      	cmp	r3, r4
 800a004:	db01      	blt.n	800a00a <__sfputc_r+0x16>
 800a006:	290a      	cmp	r1, #10
 800a008:	d103      	bne.n	800a012 <__sfputc_r+0x1e>
 800a00a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a00e:	f7ff bac4 	b.w	800959a <__swbuf_r>
 800a012:	6813      	ldr	r3, [r2, #0]
 800a014:	1c58      	adds	r0, r3, #1
 800a016:	6010      	str	r0, [r2, #0]
 800a018:	7019      	strb	r1, [r3, #0]
 800a01a:	4608      	mov	r0, r1
 800a01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <__sfputs_r>:
 800a022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	4614      	mov	r4, r2
 800a02a:	18d5      	adds	r5, r2, r3
 800a02c:	42ac      	cmp	r4, r5
 800a02e:	d101      	bne.n	800a034 <__sfputs_r+0x12>
 800a030:	2000      	movs	r0, #0
 800a032:	e007      	b.n	800a044 <__sfputs_r+0x22>
 800a034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a038:	463a      	mov	r2, r7
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffda 	bl	8009ff4 <__sfputc_r>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d1f3      	bne.n	800a02c <__sfputs_r+0xa>
 800a044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a048 <_vfiprintf_r>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	460d      	mov	r5, r1
 800a04e:	b09d      	sub	sp, #116	@ 0x74
 800a050:	4614      	mov	r4, r2
 800a052:	4698      	mov	r8, r3
 800a054:	4606      	mov	r6, r0
 800a056:	b118      	cbz	r0, 800a060 <_vfiprintf_r+0x18>
 800a058:	6a03      	ldr	r3, [r0, #32]
 800a05a:	b90b      	cbnz	r3, 800a060 <_vfiprintf_r+0x18>
 800a05c:	f7ff f968 	bl	8009330 <__sinit>
 800a060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a062:	07d9      	lsls	r1, r3, #31
 800a064:	d405      	bmi.n	800a072 <_vfiprintf_r+0x2a>
 800a066:	89ab      	ldrh	r3, [r5, #12]
 800a068:	059a      	lsls	r2, r3, #22
 800a06a:	d402      	bmi.n	800a072 <_vfiprintf_r+0x2a>
 800a06c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a06e:	f7ff fba2 	bl	80097b6 <__retarget_lock_acquire_recursive>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	071b      	lsls	r3, r3, #28
 800a076:	d501      	bpl.n	800a07c <_vfiprintf_r+0x34>
 800a078:	692b      	ldr	r3, [r5, #16]
 800a07a:	b99b      	cbnz	r3, 800a0a4 <_vfiprintf_r+0x5c>
 800a07c:	4629      	mov	r1, r5
 800a07e:	4630      	mov	r0, r6
 800a080:	f7ff faca 	bl	8009618 <__swsetup_r>
 800a084:	b170      	cbz	r0, 800a0a4 <_vfiprintf_r+0x5c>
 800a086:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a088:	07dc      	lsls	r4, r3, #31
 800a08a:	d504      	bpl.n	800a096 <_vfiprintf_r+0x4e>
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295
 800a090:	b01d      	add	sp, #116	@ 0x74
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	89ab      	ldrh	r3, [r5, #12]
 800a098:	0598      	lsls	r0, r3, #22
 800a09a:	d4f7      	bmi.n	800a08c <_vfiprintf_r+0x44>
 800a09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a09e:	f7ff fb8b 	bl	80097b8 <__retarget_lock_release_recursive>
 800a0a2:	e7f3      	b.n	800a08c <_vfiprintf_r+0x44>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a8:	2320      	movs	r3, #32
 800a0aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0b2:	2330      	movs	r3, #48	@ 0x30
 800a0b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a264 <_vfiprintf_r+0x21c>
 800a0b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0bc:	f04f 0901 	mov.w	r9, #1
 800a0c0:	4623      	mov	r3, r4
 800a0c2:	469a      	mov	sl, r3
 800a0c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c8:	b10a      	cbz	r2, 800a0ce <_vfiprintf_r+0x86>
 800a0ca:	2a25      	cmp	r2, #37	@ 0x25
 800a0cc:	d1f9      	bne.n	800a0c2 <_vfiprintf_r+0x7a>
 800a0ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a0d2:	d00b      	beq.n	800a0ec <_vfiprintf_r+0xa4>
 800a0d4:	465b      	mov	r3, fp
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f7ff ffa1 	bl	800a022 <__sfputs_r>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	f000 80a7 	beq.w	800a234 <_vfiprintf_r+0x1ec>
 800a0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0e8:	445a      	add	r2, fp
 800a0ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 809f 	beq.w	800a234 <_vfiprintf_r+0x1ec>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a100:	f10a 0a01 	add.w	sl, sl, #1
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	9307      	str	r3, [sp, #28]
 800a108:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a10c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a10e:	4654      	mov	r4, sl
 800a110:	2205      	movs	r2, #5
 800a112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a116:	4853      	ldr	r0, [pc, #332]	@ (800a264 <_vfiprintf_r+0x21c>)
 800a118:	f7f6 f88a 	bl	8000230 <memchr>
 800a11c:	9a04      	ldr	r2, [sp, #16]
 800a11e:	b9d8      	cbnz	r0, 800a158 <_vfiprintf_r+0x110>
 800a120:	06d1      	lsls	r1, r2, #27
 800a122:	bf44      	itt	mi
 800a124:	2320      	movmi	r3, #32
 800a126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a12a:	0713      	lsls	r3, r2, #28
 800a12c:	bf44      	itt	mi
 800a12e:	232b      	movmi	r3, #43	@ 0x2b
 800a130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a134:	f89a 3000 	ldrb.w	r3, [sl]
 800a138:	2b2a      	cmp	r3, #42	@ 0x2a
 800a13a:	d015      	beq.n	800a168 <_vfiprintf_r+0x120>
 800a13c:	9a07      	ldr	r2, [sp, #28]
 800a13e:	4654      	mov	r4, sl
 800a140:	2000      	movs	r0, #0
 800a142:	f04f 0c0a 	mov.w	ip, #10
 800a146:	4621      	mov	r1, r4
 800a148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a14c:	3b30      	subs	r3, #48	@ 0x30
 800a14e:	2b09      	cmp	r3, #9
 800a150:	d94b      	bls.n	800a1ea <_vfiprintf_r+0x1a2>
 800a152:	b1b0      	cbz	r0, 800a182 <_vfiprintf_r+0x13a>
 800a154:	9207      	str	r2, [sp, #28]
 800a156:	e014      	b.n	800a182 <_vfiprintf_r+0x13a>
 800a158:	eba0 0308 	sub.w	r3, r0, r8
 800a15c:	fa09 f303 	lsl.w	r3, r9, r3
 800a160:	4313      	orrs	r3, r2
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	46a2      	mov	sl, r4
 800a166:	e7d2      	b.n	800a10e <_vfiprintf_r+0xc6>
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	1d19      	adds	r1, r3, #4
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	9103      	str	r1, [sp, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	bfbb      	ittet	lt
 800a174:	425b      	neglt	r3, r3
 800a176:	f042 0202 	orrlt.w	r2, r2, #2
 800a17a:	9307      	strge	r3, [sp, #28]
 800a17c:	9307      	strlt	r3, [sp, #28]
 800a17e:	bfb8      	it	lt
 800a180:	9204      	strlt	r2, [sp, #16]
 800a182:	7823      	ldrb	r3, [r4, #0]
 800a184:	2b2e      	cmp	r3, #46	@ 0x2e
 800a186:	d10a      	bne.n	800a19e <_vfiprintf_r+0x156>
 800a188:	7863      	ldrb	r3, [r4, #1]
 800a18a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a18c:	d132      	bne.n	800a1f4 <_vfiprintf_r+0x1ac>
 800a18e:	9b03      	ldr	r3, [sp, #12]
 800a190:	1d1a      	adds	r2, r3, #4
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	9203      	str	r2, [sp, #12]
 800a196:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a19a:	3402      	adds	r4, #2
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a274 <_vfiprintf_r+0x22c>
 800a1a2:	7821      	ldrb	r1, [r4, #0]
 800a1a4:	2203      	movs	r2, #3
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	f7f6 f842 	bl	8000230 <memchr>
 800a1ac:	b138      	cbz	r0, 800a1be <_vfiprintf_r+0x176>
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	eba0 000a 	sub.w	r0, r0, sl
 800a1b4:	2240      	movs	r2, #64	@ 0x40
 800a1b6:	4082      	lsls	r2, r0
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	3401      	adds	r4, #1
 800a1bc:	9304      	str	r3, [sp, #16]
 800a1be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c2:	4829      	ldr	r0, [pc, #164]	@ (800a268 <_vfiprintf_r+0x220>)
 800a1c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1c8:	2206      	movs	r2, #6
 800a1ca:	f7f6 f831 	bl	8000230 <memchr>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d03f      	beq.n	800a252 <_vfiprintf_r+0x20a>
 800a1d2:	4b26      	ldr	r3, [pc, #152]	@ (800a26c <_vfiprintf_r+0x224>)
 800a1d4:	bb1b      	cbnz	r3, 800a21e <_vfiprintf_r+0x1d6>
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	3307      	adds	r3, #7
 800a1da:	f023 0307 	bic.w	r3, r3, #7
 800a1de:	3308      	adds	r3, #8
 800a1e0:	9303      	str	r3, [sp, #12]
 800a1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e4:	443b      	add	r3, r7
 800a1e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e8:	e76a      	b.n	800a0c0 <_vfiprintf_r+0x78>
 800a1ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	e7a8      	b.n	800a146 <_vfiprintf_r+0xfe>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	3401      	adds	r4, #1
 800a1f8:	9305      	str	r3, [sp, #20]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	f04f 0c0a 	mov.w	ip, #10
 800a200:	4620      	mov	r0, r4
 800a202:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a206:	3a30      	subs	r2, #48	@ 0x30
 800a208:	2a09      	cmp	r2, #9
 800a20a:	d903      	bls.n	800a214 <_vfiprintf_r+0x1cc>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0c6      	beq.n	800a19e <_vfiprintf_r+0x156>
 800a210:	9105      	str	r1, [sp, #20]
 800a212:	e7c4      	b.n	800a19e <_vfiprintf_r+0x156>
 800a214:	fb0c 2101 	mla	r1, ip, r1, r2
 800a218:	4604      	mov	r4, r0
 800a21a:	2301      	movs	r3, #1
 800a21c:	e7f0      	b.n	800a200 <_vfiprintf_r+0x1b8>
 800a21e:	ab03      	add	r3, sp, #12
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	462a      	mov	r2, r5
 800a224:	4b12      	ldr	r3, [pc, #72]	@ (800a270 <_vfiprintf_r+0x228>)
 800a226:	a904      	add	r1, sp, #16
 800a228:	4630      	mov	r0, r6
 800a22a:	f3af 8000 	nop.w
 800a22e:	4607      	mov	r7, r0
 800a230:	1c78      	adds	r0, r7, #1
 800a232:	d1d6      	bne.n	800a1e2 <_vfiprintf_r+0x19a>
 800a234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a236:	07d9      	lsls	r1, r3, #31
 800a238:	d405      	bmi.n	800a246 <_vfiprintf_r+0x1fe>
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	059a      	lsls	r2, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_vfiprintf_r+0x1fe>
 800a240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a242:	f7ff fab9 	bl	80097b8 <__retarget_lock_release_recursive>
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	065b      	lsls	r3, r3, #25
 800a24a:	f53f af1f 	bmi.w	800a08c <_vfiprintf_r+0x44>
 800a24e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a250:	e71e      	b.n	800a090 <_vfiprintf_r+0x48>
 800a252:	ab03      	add	r3, sp, #12
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	462a      	mov	r2, r5
 800a258:	4b05      	ldr	r3, [pc, #20]	@ (800a270 <_vfiprintf_r+0x228>)
 800a25a:	a904      	add	r1, sp, #16
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f879 	bl	800a354 <_printf_i>
 800a262:	e7e4      	b.n	800a22e <_vfiprintf_r+0x1e6>
 800a264:	0800af94 	.word	0x0800af94
 800a268:	0800af9e 	.word	0x0800af9e
 800a26c:	00000000 	.word	0x00000000
 800a270:	0800a023 	.word	0x0800a023
 800a274:	0800af9a 	.word	0x0800af9a

0800a278 <_printf_common>:
 800a278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	4616      	mov	r6, r2
 800a27e:	4698      	mov	r8, r3
 800a280:	688a      	ldr	r2, [r1, #8]
 800a282:	690b      	ldr	r3, [r1, #16]
 800a284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a288:	4293      	cmp	r3, r2
 800a28a:	bfb8      	it	lt
 800a28c:	4613      	movlt	r3, r2
 800a28e:	6033      	str	r3, [r6, #0]
 800a290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a294:	4607      	mov	r7, r0
 800a296:	460c      	mov	r4, r1
 800a298:	b10a      	cbz	r2, 800a29e <_printf_common+0x26>
 800a29a:	3301      	adds	r3, #1
 800a29c:	6033      	str	r3, [r6, #0]
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	0699      	lsls	r1, r3, #26
 800a2a2:	bf42      	ittt	mi
 800a2a4:	6833      	ldrmi	r3, [r6, #0]
 800a2a6:	3302      	addmi	r3, #2
 800a2a8:	6033      	strmi	r3, [r6, #0]
 800a2aa:	6825      	ldr	r5, [r4, #0]
 800a2ac:	f015 0506 	ands.w	r5, r5, #6
 800a2b0:	d106      	bne.n	800a2c0 <_printf_common+0x48>
 800a2b2:	f104 0a19 	add.w	sl, r4, #25
 800a2b6:	68e3      	ldr	r3, [r4, #12]
 800a2b8:	6832      	ldr	r2, [r6, #0]
 800a2ba:	1a9b      	subs	r3, r3, r2
 800a2bc:	42ab      	cmp	r3, r5
 800a2be:	dc26      	bgt.n	800a30e <_printf_common+0x96>
 800a2c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2c4:	6822      	ldr	r2, [r4, #0]
 800a2c6:	3b00      	subs	r3, #0
 800a2c8:	bf18      	it	ne
 800a2ca:	2301      	movne	r3, #1
 800a2cc:	0692      	lsls	r2, r2, #26
 800a2ce:	d42b      	bmi.n	800a328 <_printf_common+0xb0>
 800a2d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	47c8      	blx	r9
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d01e      	beq.n	800a31c <_printf_common+0xa4>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	6922      	ldr	r2, [r4, #16]
 800a2e2:	f003 0306 	and.w	r3, r3, #6
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	bf02      	ittt	eq
 800a2ea:	68e5      	ldreq	r5, [r4, #12]
 800a2ec:	6833      	ldreq	r3, [r6, #0]
 800a2ee:	1aed      	subeq	r5, r5, r3
 800a2f0:	68a3      	ldr	r3, [r4, #8]
 800a2f2:	bf0c      	ite	eq
 800a2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2f8:	2500      	movne	r5, #0
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	bfc4      	itt	gt
 800a2fe:	1a9b      	subgt	r3, r3, r2
 800a300:	18ed      	addgt	r5, r5, r3
 800a302:	2600      	movs	r6, #0
 800a304:	341a      	adds	r4, #26
 800a306:	42b5      	cmp	r5, r6
 800a308:	d11a      	bne.n	800a340 <_printf_common+0xc8>
 800a30a:	2000      	movs	r0, #0
 800a30c:	e008      	b.n	800a320 <_printf_common+0xa8>
 800a30e:	2301      	movs	r3, #1
 800a310:	4652      	mov	r2, sl
 800a312:	4641      	mov	r1, r8
 800a314:	4638      	mov	r0, r7
 800a316:	47c8      	blx	r9
 800a318:	3001      	adds	r0, #1
 800a31a:	d103      	bne.n	800a324 <_printf_common+0xac>
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a324:	3501      	adds	r5, #1
 800a326:	e7c6      	b.n	800a2b6 <_printf_common+0x3e>
 800a328:	18e1      	adds	r1, r4, r3
 800a32a:	1c5a      	adds	r2, r3, #1
 800a32c:	2030      	movs	r0, #48	@ 0x30
 800a32e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a332:	4422      	add	r2, r4
 800a334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a33c:	3302      	adds	r3, #2
 800a33e:	e7c7      	b.n	800a2d0 <_printf_common+0x58>
 800a340:	2301      	movs	r3, #1
 800a342:	4622      	mov	r2, r4
 800a344:	4641      	mov	r1, r8
 800a346:	4638      	mov	r0, r7
 800a348:	47c8      	blx	r9
 800a34a:	3001      	adds	r0, #1
 800a34c:	d0e6      	beq.n	800a31c <_printf_common+0xa4>
 800a34e:	3601      	adds	r6, #1
 800a350:	e7d9      	b.n	800a306 <_printf_common+0x8e>
	...

0800a354 <_printf_i>:
 800a354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	7e0f      	ldrb	r7, [r1, #24]
 800a35a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a35c:	2f78      	cmp	r7, #120	@ 0x78
 800a35e:	4691      	mov	r9, r2
 800a360:	4680      	mov	r8, r0
 800a362:	460c      	mov	r4, r1
 800a364:	469a      	mov	sl, r3
 800a366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a36a:	d807      	bhi.n	800a37c <_printf_i+0x28>
 800a36c:	2f62      	cmp	r7, #98	@ 0x62
 800a36e:	d80a      	bhi.n	800a386 <_printf_i+0x32>
 800a370:	2f00      	cmp	r7, #0
 800a372:	f000 80d2 	beq.w	800a51a <_printf_i+0x1c6>
 800a376:	2f58      	cmp	r7, #88	@ 0x58
 800a378:	f000 80b9 	beq.w	800a4ee <_printf_i+0x19a>
 800a37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a384:	e03a      	b.n	800a3fc <_printf_i+0xa8>
 800a386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a38a:	2b15      	cmp	r3, #21
 800a38c:	d8f6      	bhi.n	800a37c <_printf_i+0x28>
 800a38e:	a101      	add	r1, pc, #4	@ (adr r1, 800a394 <_printf_i+0x40>)
 800a390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a394:	0800a3ed 	.word	0x0800a3ed
 800a398:	0800a401 	.word	0x0800a401
 800a39c:	0800a37d 	.word	0x0800a37d
 800a3a0:	0800a37d 	.word	0x0800a37d
 800a3a4:	0800a37d 	.word	0x0800a37d
 800a3a8:	0800a37d 	.word	0x0800a37d
 800a3ac:	0800a401 	.word	0x0800a401
 800a3b0:	0800a37d 	.word	0x0800a37d
 800a3b4:	0800a37d 	.word	0x0800a37d
 800a3b8:	0800a37d 	.word	0x0800a37d
 800a3bc:	0800a37d 	.word	0x0800a37d
 800a3c0:	0800a501 	.word	0x0800a501
 800a3c4:	0800a42b 	.word	0x0800a42b
 800a3c8:	0800a4bb 	.word	0x0800a4bb
 800a3cc:	0800a37d 	.word	0x0800a37d
 800a3d0:	0800a37d 	.word	0x0800a37d
 800a3d4:	0800a523 	.word	0x0800a523
 800a3d8:	0800a37d 	.word	0x0800a37d
 800a3dc:	0800a42b 	.word	0x0800a42b
 800a3e0:	0800a37d 	.word	0x0800a37d
 800a3e4:	0800a37d 	.word	0x0800a37d
 800a3e8:	0800a4c3 	.word	0x0800a4c3
 800a3ec:	6833      	ldr	r3, [r6, #0]
 800a3ee:	1d1a      	adds	r2, r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6032      	str	r2, [r6, #0]
 800a3f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e09d      	b.n	800a53c <_printf_i+0x1e8>
 800a400:	6833      	ldr	r3, [r6, #0]
 800a402:	6820      	ldr	r0, [r4, #0]
 800a404:	1d19      	adds	r1, r3, #4
 800a406:	6031      	str	r1, [r6, #0]
 800a408:	0606      	lsls	r6, r0, #24
 800a40a:	d501      	bpl.n	800a410 <_printf_i+0xbc>
 800a40c:	681d      	ldr	r5, [r3, #0]
 800a40e:	e003      	b.n	800a418 <_printf_i+0xc4>
 800a410:	0645      	lsls	r5, r0, #25
 800a412:	d5fb      	bpl.n	800a40c <_printf_i+0xb8>
 800a414:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a418:	2d00      	cmp	r5, #0
 800a41a:	da03      	bge.n	800a424 <_printf_i+0xd0>
 800a41c:	232d      	movs	r3, #45	@ 0x2d
 800a41e:	426d      	negs	r5, r5
 800a420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a424:	4859      	ldr	r0, [pc, #356]	@ (800a58c <_printf_i+0x238>)
 800a426:	230a      	movs	r3, #10
 800a428:	e011      	b.n	800a44e <_printf_i+0xfa>
 800a42a:	6821      	ldr	r1, [r4, #0]
 800a42c:	6833      	ldr	r3, [r6, #0]
 800a42e:	0608      	lsls	r0, r1, #24
 800a430:	f853 5b04 	ldr.w	r5, [r3], #4
 800a434:	d402      	bmi.n	800a43c <_printf_i+0xe8>
 800a436:	0649      	lsls	r1, r1, #25
 800a438:	bf48      	it	mi
 800a43a:	b2ad      	uxthmi	r5, r5
 800a43c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a43e:	4853      	ldr	r0, [pc, #332]	@ (800a58c <_printf_i+0x238>)
 800a440:	6033      	str	r3, [r6, #0]
 800a442:	bf14      	ite	ne
 800a444:	230a      	movne	r3, #10
 800a446:	2308      	moveq	r3, #8
 800a448:	2100      	movs	r1, #0
 800a44a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a44e:	6866      	ldr	r6, [r4, #4]
 800a450:	60a6      	str	r6, [r4, #8]
 800a452:	2e00      	cmp	r6, #0
 800a454:	bfa2      	ittt	ge
 800a456:	6821      	ldrge	r1, [r4, #0]
 800a458:	f021 0104 	bicge.w	r1, r1, #4
 800a45c:	6021      	strge	r1, [r4, #0]
 800a45e:	b90d      	cbnz	r5, 800a464 <_printf_i+0x110>
 800a460:	2e00      	cmp	r6, #0
 800a462:	d04b      	beq.n	800a4fc <_printf_i+0x1a8>
 800a464:	4616      	mov	r6, r2
 800a466:	fbb5 f1f3 	udiv	r1, r5, r3
 800a46a:	fb03 5711 	mls	r7, r3, r1, r5
 800a46e:	5dc7      	ldrb	r7, [r0, r7]
 800a470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a474:	462f      	mov	r7, r5
 800a476:	42bb      	cmp	r3, r7
 800a478:	460d      	mov	r5, r1
 800a47a:	d9f4      	bls.n	800a466 <_printf_i+0x112>
 800a47c:	2b08      	cmp	r3, #8
 800a47e:	d10b      	bne.n	800a498 <_printf_i+0x144>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	07df      	lsls	r7, r3, #31
 800a484:	d508      	bpl.n	800a498 <_printf_i+0x144>
 800a486:	6923      	ldr	r3, [r4, #16]
 800a488:	6861      	ldr	r1, [r4, #4]
 800a48a:	4299      	cmp	r1, r3
 800a48c:	bfde      	ittt	le
 800a48e:	2330      	movle	r3, #48	@ 0x30
 800a490:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a494:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a498:	1b92      	subs	r2, r2, r6
 800a49a:	6122      	str	r2, [r4, #16]
 800a49c:	f8cd a000 	str.w	sl, [sp]
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	aa03      	add	r2, sp, #12
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	f7ff fee6 	bl	800a278 <_printf_common>
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d14a      	bne.n	800a546 <_printf_i+0x1f2>
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	b004      	add	sp, #16
 800a4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	f043 0320 	orr.w	r3, r3, #32
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	4833      	ldr	r0, [pc, #204]	@ (800a590 <_printf_i+0x23c>)
 800a4c4:	2778      	movs	r7, #120	@ 0x78
 800a4c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	6831      	ldr	r1, [r6, #0]
 800a4ce:	061f      	lsls	r7, r3, #24
 800a4d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4d4:	d402      	bmi.n	800a4dc <_printf_i+0x188>
 800a4d6:	065f      	lsls	r7, r3, #25
 800a4d8:	bf48      	it	mi
 800a4da:	b2ad      	uxthmi	r5, r5
 800a4dc:	6031      	str	r1, [r6, #0]
 800a4de:	07d9      	lsls	r1, r3, #31
 800a4e0:	bf44      	itt	mi
 800a4e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a4e6:	6023      	strmi	r3, [r4, #0]
 800a4e8:	b11d      	cbz	r5, 800a4f2 <_printf_i+0x19e>
 800a4ea:	2310      	movs	r3, #16
 800a4ec:	e7ac      	b.n	800a448 <_printf_i+0xf4>
 800a4ee:	4827      	ldr	r0, [pc, #156]	@ (800a58c <_printf_i+0x238>)
 800a4f0:	e7e9      	b.n	800a4c6 <_printf_i+0x172>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	f023 0320 	bic.w	r3, r3, #32
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	e7f6      	b.n	800a4ea <_printf_i+0x196>
 800a4fc:	4616      	mov	r6, r2
 800a4fe:	e7bd      	b.n	800a47c <_printf_i+0x128>
 800a500:	6833      	ldr	r3, [r6, #0]
 800a502:	6825      	ldr	r5, [r4, #0]
 800a504:	6961      	ldr	r1, [r4, #20]
 800a506:	1d18      	adds	r0, r3, #4
 800a508:	6030      	str	r0, [r6, #0]
 800a50a:	062e      	lsls	r6, r5, #24
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	d501      	bpl.n	800a514 <_printf_i+0x1c0>
 800a510:	6019      	str	r1, [r3, #0]
 800a512:	e002      	b.n	800a51a <_printf_i+0x1c6>
 800a514:	0668      	lsls	r0, r5, #25
 800a516:	d5fb      	bpl.n	800a510 <_printf_i+0x1bc>
 800a518:	8019      	strh	r1, [r3, #0]
 800a51a:	2300      	movs	r3, #0
 800a51c:	6123      	str	r3, [r4, #16]
 800a51e:	4616      	mov	r6, r2
 800a520:	e7bc      	b.n	800a49c <_printf_i+0x148>
 800a522:	6833      	ldr	r3, [r6, #0]
 800a524:	1d1a      	adds	r2, r3, #4
 800a526:	6032      	str	r2, [r6, #0]
 800a528:	681e      	ldr	r6, [r3, #0]
 800a52a:	6862      	ldr	r2, [r4, #4]
 800a52c:	2100      	movs	r1, #0
 800a52e:	4630      	mov	r0, r6
 800a530:	f7f5 fe7e 	bl	8000230 <memchr>
 800a534:	b108      	cbz	r0, 800a53a <_printf_i+0x1e6>
 800a536:	1b80      	subs	r0, r0, r6
 800a538:	6060      	str	r0, [r4, #4]
 800a53a:	6863      	ldr	r3, [r4, #4]
 800a53c:	6123      	str	r3, [r4, #16]
 800a53e:	2300      	movs	r3, #0
 800a540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a544:	e7aa      	b.n	800a49c <_printf_i+0x148>
 800a546:	6923      	ldr	r3, [r4, #16]
 800a548:	4632      	mov	r2, r6
 800a54a:	4649      	mov	r1, r9
 800a54c:	4640      	mov	r0, r8
 800a54e:	47d0      	blx	sl
 800a550:	3001      	adds	r0, #1
 800a552:	d0ad      	beq.n	800a4b0 <_printf_i+0x15c>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	079b      	lsls	r3, r3, #30
 800a558:	d413      	bmi.n	800a582 <_printf_i+0x22e>
 800a55a:	68e0      	ldr	r0, [r4, #12]
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	4298      	cmp	r0, r3
 800a560:	bfb8      	it	lt
 800a562:	4618      	movlt	r0, r3
 800a564:	e7a6      	b.n	800a4b4 <_printf_i+0x160>
 800a566:	2301      	movs	r3, #1
 800a568:	4632      	mov	r2, r6
 800a56a:	4649      	mov	r1, r9
 800a56c:	4640      	mov	r0, r8
 800a56e:	47d0      	blx	sl
 800a570:	3001      	adds	r0, #1
 800a572:	d09d      	beq.n	800a4b0 <_printf_i+0x15c>
 800a574:	3501      	adds	r5, #1
 800a576:	68e3      	ldr	r3, [r4, #12]
 800a578:	9903      	ldr	r1, [sp, #12]
 800a57a:	1a5b      	subs	r3, r3, r1
 800a57c:	42ab      	cmp	r3, r5
 800a57e:	dcf2      	bgt.n	800a566 <_printf_i+0x212>
 800a580:	e7eb      	b.n	800a55a <_printf_i+0x206>
 800a582:	2500      	movs	r5, #0
 800a584:	f104 0619 	add.w	r6, r4, #25
 800a588:	e7f5      	b.n	800a576 <_printf_i+0x222>
 800a58a:	bf00      	nop
 800a58c:	0800afa5 	.word	0x0800afa5
 800a590:	0800afb6 	.word	0x0800afb6

0800a594 <_scanf_chars>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	4615      	mov	r5, r2
 800a59a:	688a      	ldr	r2, [r1, #8]
 800a59c:	4680      	mov	r8, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	b932      	cbnz	r2, 800a5b0 <_scanf_chars+0x1c>
 800a5a2:	698a      	ldr	r2, [r1, #24]
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	bf14      	ite	ne
 800a5a8:	f04f 32ff 	movne.w	r2, #4294967295
 800a5ac:	2201      	moveq	r2, #1
 800a5ae:	608a      	str	r2, [r1, #8]
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a644 <_scanf_chars+0xb0>
 800a5b6:	06d1      	lsls	r1, r2, #27
 800a5b8:	bf5f      	itttt	pl
 800a5ba:	681a      	ldrpl	r2, [r3, #0]
 800a5bc:	1d11      	addpl	r1, r2, #4
 800a5be:	6019      	strpl	r1, [r3, #0]
 800a5c0:	6816      	ldrpl	r6, [r2, #0]
 800a5c2:	2700      	movs	r7, #0
 800a5c4:	69a0      	ldr	r0, [r4, #24]
 800a5c6:	b188      	cbz	r0, 800a5ec <_scanf_chars+0x58>
 800a5c8:	2801      	cmp	r0, #1
 800a5ca:	d107      	bne.n	800a5dc <_scanf_chars+0x48>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	781a      	ldrb	r2, [r3, #0]
 800a5d0:	6963      	ldr	r3, [r4, #20]
 800a5d2:	5c9b      	ldrb	r3, [r3, r2]
 800a5d4:	b953      	cbnz	r3, 800a5ec <_scanf_chars+0x58>
 800a5d6:	2f00      	cmp	r7, #0
 800a5d8:	d031      	beq.n	800a63e <_scanf_chars+0xaa>
 800a5da:	e022      	b.n	800a622 <_scanf_chars+0x8e>
 800a5dc:	2802      	cmp	r0, #2
 800a5de:	d120      	bne.n	800a622 <_scanf_chars+0x8e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a5e8:	071b      	lsls	r3, r3, #28
 800a5ea:	d41a      	bmi.n	800a622 <_scanf_chars+0x8e>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	06da      	lsls	r2, r3, #27
 800a5f0:	bf5e      	ittt	pl
 800a5f2:	682b      	ldrpl	r3, [r5, #0]
 800a5f4:	781b      	ldrbpl	r3, [r3, #0]
 800a5f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a5fa:	682a      	ldr	r2, [r5, #0]
 800a5fc:	686b      	ldr	r3, [r5, #4]
 800a5fe:	3201      	adds	r2, #1
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	68a2      	ldr	r2, [r4, #8]
 800a604:	3b01      	subs	r3, #1
 800a606:	3a01      	subs	r2, #1
 800a608:	606b      	str	r3, [r5, #4]
 800a60a:	3701      	adds	r7, #1
 800a60c:	60a2      	str	r2, [r4, #8]
 800a60e:	b142      	cbz	r2, 800a622 <_scanf_chars+0x8e>
 800a610:	2b00      	cmp	r3, #0
 800a612:	dcd7      	bgt.n	800a5c4 <_scanf_chars+0x30>
 800a614:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a618:	4629      	mov	r1, r5
 800a61a:	4640      	mov	r0, r8
 800a61c:	4798      	blx	r3
 800a61e:	2800      	cmp	r0, #0
 800a620:	d0d0      	beq.n	800a5c4 <_scanf_chars+0x30>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	f013 0310 	ands.w	r3, r3, #16
 800a628:	d105      	bne.n	800a636 <_scanf_chars+0xa2>
 800a62a:	68e2      	ldr	r2, [r4, #12]
 800a62c:	3201      	adds	r2, #1
 800a62e:	60e2      	str	r2, [r4, #12]
 800a630:	69a2      	ldr	r2, [r4, #24]
 800a632:	b102      	cbz	r2, 800a636 <_scanf_chars+0xa2>
 800a634:	7033      	strb	r3, [r6, #0]
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	443b      	add	r3, r7
 800a63a:	6123      	str	r3, [r4, #16]
 800a63c:	2000      	movs	r0, #0
 800a63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a642:	bf00      	nop
 800a644:	0800afe3 	.word	0x0800afe3

0800a648 <_scanf_i>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	4698      	mov	r8, r3
 800a64e:	4b74      	ldr	r3, [pc, #464]	@ (800a820 <_scanf_i+0x1d8>)
 800a650:	460c      	mov	r4, r1
 800a652:	4682      	mov	sl, r0
 800a654:	4616      	mov	r6, r2
 800a656:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a65a:	b087      	sub	sp, #28
 800a65c:	ab03      	add	r3, sp, #12
 800a65e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a662:	4b70      	ldr	r3, [pc, #448]	@ (800a824 <_scanf_i+0x1dc>)
 800a664:	69a1      	ldr	r1, [r4, #24]
 800a666:	4a70      	ldr	r2, [pc, #448]	@ (800a828 <_scanf_i+0x1e0>)
 800a668:	2903      	cmp	r1, #3
 800a66a:	bf08      	it	eq
 800a66c:	461a      	moveq	r2, r3
 800a66e:	68a3      	ldr	r3, [r4, #8]
 800a670:	9201      	str	r2, [sp, #4]
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a678:	bf88      	it	hi
 800a67a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a67e:	4627      	mov	r7, r4
 800a680:	bf82      	ittt	hi
 800a682:	eb03 0905 	addhi.w	r9, r3, r5
 800a686:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a68a:	60a3      	strhi	r3, [r4, #8]
 800a68c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a690:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a694:	bf98      	it	ls
 800a696:	f04f 0900 	movls.w	r9, #0
 800a69a:	6023      	str	r3, [r4, #0]
 800a69c:	463d      	mov	r5, r7
 800a69e:	f04f 0b00 	mov.w	fp, #0
 800a6a2:	6831      	ldr	r1, [r6, #0]
 800a6a4:	ab03      	add	r3, sp, #12
 800a6a6:	7809      	ldrb	r1, [r1, #0]
 800a6a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	f7f5 fdbf 	bl	8000230 <memchr>
 800a6b2:	b328      	cbz	r0, 800a700 <_scanf_i+0xb8>
 800a6b4:	f1bb 0f01 	cmp.w	fp, #1
 800a6b8:	d159      	bne.n	800a76e <_scanf_i+0x126>
 800a6ba:	6862      	ldr	r2, [r4, #4]
 800a6bc:	b92a      	cbnz	r2, 800a6ca <_scanf_i+0x82>
 800a6be:	6822      	ldr	r2, [r4, #0]
 800a6c0:	2108      	movs	r1, #8
 800a6c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6c6:	6061      	str	r1, [r4, #4]
 800a6c8:	6022      	str	r2, [r4, #0]
 800a6ca:	6822      	ldr	r2, [r4, #0]
 800a6cc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a6d0:	6022      	str	r2, [r4, #0]
 800a6d2:	68a2      	ldr	r2, [r4, #8]
 800a6d4:	1e51      	subs	r1, r2, #1
 800a6d6:	60a1      	str	r1, [r4, #8]
 800a6d8:	b192      	cbz	r2, 800a700 <_scanf_i+0xb8>
 800a6da:	6832      	ldr	r2, [r6, #0]
 800a6dc:	1c51      	adds	r1, r2, #1
 800a6de:	6031      	str	r1, [r6, #0]
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	f805 2b01 	strb.w	r2, [r5], #1
 800a6e6:	6872      	ldr	r2, [r6, #4]
 800a6e8:	3a01      	subs	r2, #1
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	6072      	str	r2, [r6, #4]
 800a6ee:	dc07      	bgt.n	800a700 <_scanf_i+0xb8>
 800a6f0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	4790      	blx	r2
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f040 8085 	bne.w	800a80a <_scanf_i+0x1c2>
 800a700:	f10b 0b01 	add.w	fp, fp, #1
 800a704:	f1bb 0f03 	cmp.w	fp, #3
 800a708:	d1cb      	bne.n	800a6a2 <_scanf_i+0x5a>
 800a70a:	6863      	ldr	r3, [r4, #4]
 800a70c:	b90b      	cbnz	r3, 800a712 <_scanf_i+0xca>
 800a70e:	230a      	movs	r3, #10
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	6863      	ldr	r3, [r4, #4]
 800a714:	4945      	ldr	r1, [pc, #276]	@ (800a82c <_scanf_i+0x1e4>)
 800a716:	6960      	ldr	r0, [r4, #20]
 800a718:	1ac9      	subs	r1, r1, r3
 800a71a:	f000 f997 	bl	800aa4c <__sccl>
 800a71e:	f04f 0b00 	mov.w	fp, #0
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	6822      	ldr	r2, [r4, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d03d      	beq.n	800a7a6 <_scanf_i+0x15e>
 800a72a:	6831      	ldr	r1, [r6, #0]
 800a72c:	6960      	ldr	r0, [r4, #20]
 800a72e:	f891 c000 	ldrb.w	ip, [r1]
 800a732:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a736:	2800      	cmp	r0, #0
 800a738:	d035      	beq.n	800a7a6 <_scanf_i+0x15e>
 800a73a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a73e:	d124      	bne.n	800a78a <_scanf_i+0x142>
 800a740:	0510      	lsls	r0, r2, #20
 800a742:	d522      	bpl.n	800a78a <_scanf_i+0x142>
 800a744:	f10b 0b01 	add.w	fp, fp, #1
 800a748:	f1b9 0f00 	cmp.w	r9, #0
 800a74c:	d003      	beq.n	800a756 <_scanf_i+0x10e>
 800a74e:	3301      	adds	r3, #1
 800a750:	f109 39ff 	add.w	r9, r9, #4294967295
 800a754:	60a3      	str	r3, [r4, #8]
 800a756:	6873      	ldr	r3, [r6, #4]
 800a758:	3b01      	subs	r3, #1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	6073      	str	r3, [r6, #4]
 800a75e:	dd1b      	ble.n	800a798 <_scanf_i+0x150>
 800a760:	6833      	ldr	r3, [r6, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	6033      	str	r3, [r6, #0]
 800a766:	68a3      	ldr	r3, [r4, #8]
 800a768:	3b01      	subs	r3, #1
 800a76a:	60a3      	str	r3, [r4, #8]
 800a76c:	e7d9      	b.n	800a722 <_scanf_i+0xda>
 800a76e:	f1bb 0f02 	cmp.w	fp, #2
 800a772:	d1ae      	bne.n	800a6d2 <_scanf_i+0x8a>
 800a774:	6822      	ldr	r2, [r4, #0]
 800a776:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a77a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a77e:	d1bf      	bne.n	800a700 <_scanf_i+0xb8>
 800a780:	2110      	movs	r1, #16
 800a782:	6061      	str	r1, [r4, #4]
 800a784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a788:	e7a2      	b.n	800a6d0 <_scanf_i+0x88>
 800a78a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a78e:	6022      	str	r2, [r4, #0]
 800a790:	780b      	ldrb	r3, [r1, #0]
 800a792:	f805 3b01 	strb.w	r3, [r5], #1
 800a796:	e7de      	b.n	800a756 <_scanf_i+0x10e>
 800a798:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a79c:	4631      	mov	r1, r6
 800a79e:	4650      	mov	r0, sl
 800a7a0:	4798      	blx	r3
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d0df      	beq.n	800a766 <_scanf_i+0x11e>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	05d9      	lsls	r1, r3, #23
 800a7aa:	d50d      	bpl.n	800a7c8 <_scanf_i+0x180>
 800a7ac:	42bd      	cmp	r5, r7
 800a7ae:	d909      	bls.n	800a7c4 <_scanf_i+0x17c>
 800a7b0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a7b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7b8:	4632      	mov	r2, r6
 800a7ba:	4650      	mov	r0, sl
 800a7bc:	4798      	blx	r3
 800a7be:	f105 39ff 	add.w	r9, r5, #4294967295
 800a7c2:	464d      	mov	r5, r9
 800a7c4:	42bd      	cmp	r5, r7
 800a7c6:	d028      	beq.n	800a81a <_scanf_i+0x1d2>
 800a7c8:	6822      	ldr	r2, [r4, #0]
 800a7ca:	f012 0210 	ands.w	r2, r2, #16
 800a7ce:	d113      	bne.n	800a7f8 <_scanf_i+0x1b0>
 800a7d0:	702a      	strb	r2, [r5, #0]
 800a7d2:	6863      	ldr	r3, [r4, #4]
 800a7d4:	9e01      	ldr	r6, [sp, #4]
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	4650      	mov	r0, sl
 800a7da:	47b0      	blx	r6
 800a7dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a7e0:	6821      	ldr	r1, [r4, #0]
 800a7e2:	1d1a      	adds	r2, r3, #4
 800a7e4:	f8c8 2000 	str.w	r2, [r8]
 800a7e8:	f011 0f20 	tst.w	r1, #32
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	d00f      	beq.n	800a810 <_scanf_i+0x1c8>
 800a7f0:	6018      	str	r0, [r3, #0]
 800a7f2:	68e3      	ldr	r3, [r4, #12]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	60e3      	str	r3, [r4, #12]
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	1bed      	subs	r5, r5, r7
 800a7fc:	445d      	add	r5, fp
 800a7fe:	442b      	add	r3, r5
 800a800:	6123      	str	r3, [r4, #16]
 800a802:	2000      	movs	r0, #0
 800a804:	b007      	add	sp, #28
 800a806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80a:	f04f 0b00 	mov.w	fp, #0
 800a80e:	e7ca      	b.n	800a7a6 <_scanf_i+0x15e>
 800a810:	07ca      	lsls	r2, r1, #31
 800a812:	bf4c      	ite	mi
 800a814:	8018      	strhmi	r0, [r3, #0]
 800a816:	6018      	strpl	r0, [r3, #0]
 800a818:	e7eb      	b.n	800a7f2 <_scanf_i+0x1aa>
 800a81a:	2001      	movs	r0, #1
 800a81c:	e7f2      	b.n	800a804 <_scanf_i+0x1bc>
 800a81e:	bf00      	nop
 800a820:	0800af48 	.word	0x0800af48
 800a824:	0800ad39 	.word	0x0800ad39
 800a828:	0800ae19 	.word	0x0800ae19
 800a82c:	0800afd7 	.word	0x0800afd7

0800a830 <__sflush_r>:
 800a830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a838:	0716      	lsls	r6, r2, #28
 800a83a:	4605      	mov	r5, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	d454      	bmi.n	800a8ea <__sflush_r+0xba>
 800a840:	684b      	ldr	r3, [r1, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	dc02      	bgt.n	800a84c <__sflush_r+0x1c>
 800a846:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	dd48      	ble.n	800a8de <__sflush_r+0xae>
 800a84c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a84e:	2e00      	cmp	r6, #0
 800a850:	d045      	beq.n	800a8de <__sflush_r+0xae>
 800a852:	2300      	movs	r3, #0
 800a854:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a858:	682f      	ldr	r7, [r5, #0]
 800a85a:	6a21      	ldr	r1, [r4, #32]
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	d030      	beq.n	800a8c2 <__sflush_r+0x92>
 800a860:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	0759      	lsls	r1, r3, #29
 800a866:	d505      	bpl.n	800a874 <__sflush_r+0x44>
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	1ad2      	subs	r2, r2, r3
 800a86c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a86e:	b10b      	cbz	r3, 800a874 <__sflush_r+0x44>
 800a870:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a872:	1ad2      	subs	r2, r2, r3
 800a874:	2300      	movs	r3, #0
 800a876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a878:	6a21      	ldr	r1, [r4, #32]
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b0      	blx	r6
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	d106      	bne.n	800a892 <__sflush_r+0x62>
 800a884:	6829      	ldr	r1, [r5, #0]
 800a886:	291d      	cmp	r1, #29
 800a888:	d82b      	bhi.n	800a8e2 <__sflush_r+0xb2>
 800a88a:	4a2a      	ldr	r2, [pc, #168]	@ (800a934 <__sflush_r+0x104>)
 800a88c:	410a      	asrs	r2, r1
 800a88e:	07d6      	lsls	r6, r2, #31
 800a890:	d427      	bmi.n	800a8e2 <__sflush_r+0xb2>
 800a892:	2200      	movs	r2, #0
 800a894:	6062      	str	r2, [r4, #4]
 800a896:	04d9      	lsls	r1, r3, #19
 800a898:	6922      	ldr	r2, [r4, #16]
 800a89a:	6022      	str	r2, [r4, #0]
 800a89c:	d504      	bpl.n	800a8a8 <__sflush_r+0x78>
 800a89e:	1c42      	adds	r2, r0, #1
 800a8a0:	d101      	bne.n	800a8a6 <__sflush_r+0x76>
 800a8a2:	682b      	ldr	r3, [r5, #0]
 800a8a4:	b903      	cbnz	r3, 800a8a8 <__sflush_r+0x78>
 800a8a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8aa:	602f      	str	r7, [r5, #0]
 800a8ac:	b1b9      	cbz	r1, 800a8de <__sflush_r+0xae>
 800a8ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8b2:	4299      	cmp	r1, r3
 800a8b4:	d002      	beq.n	800a8bc <__sflush_r+0x8c>
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f7fe ff80 	bl	80097bc <_free_r>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8c0:	e00d      	b.n	800a8de <__sflush_r+0xae>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b0      	blx	r6
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	1c50      	adds	r0, r2, #1
 800a8cc:	d1c9      	bne.n	800a862 <__sflush_r+0x32>
 800a8ce:	682b      	ldr	r3, [r5, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d0c6      	beq.n	800a862 <__sflush_r+0x32>
 800a8d4:	2b1d      	cmp	r3, #29
 800a8d6:	d001      	beq.n	800a8dc <__sflush_r+0xac>
 800a8d8:	2b16      	cmp	r3, #22
 800a8da:	d11e      	bne.n	800a91a <__sflush_r+0xea>
 800a8dc:	602f      	str	r7, [r5, #0]
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e022      	b.n	800a928 <__sflush_r+0xf8>
 800a8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e6:	b21b      	sxth	r3, r3
 800a8e8:	e01b      	b.n	800a922 <__sflush_r+0xf2>
 800a8ea:	690f      	ldr	r7, [r1, #16]
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	d0f6      	beq.n	800a8de <__sflush_r+0xae>
 800a8f0:	0793      	lsls	r3, r2, #30
 800a8f2:	680e      	ldr	r6, [r1, #0]
 800a8f4:	bf08      	it	eq
 800a8f6:	694b      	ldreq	r3, [r1, #20]
 800a8f8:	600f      	str	r7, [r1, #0]
 800a8fa:	bf18      	it	ne
 800a8fc:	2300      	movne	r3, #0
 800a8fe:	eba6 0807 	sub.w	r8, r6, r7
 800a902:	608b      	str	r3, [r1, #8]
 800a904:	f1b8 0f00 	cmp.w	r8, #0
 800a908:	dde9      	ble.n	800a8de <__sflush_r+0xae>
 800a90a:	6a21      	ldr	r1, [r4, #32]
 800a90c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a90e:	4643      	mov	r3, r8
 800a910:	463a      	mov	r2, r7
 800a912:	4628      	mov	r0, r5
 800a914:	47b0      	blx	r6
 800a916:	2800      	cmp	r0, #0
 800a918:	dc08      	bgt.n	800a92c <__sflush_r+0xfc>
 800a91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	f04f 30ff 	mov.w	r0, #4294967295
 800a928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a92c:	4407      	add	r7, r0
 800a92e:	eba8 0800 	sub.w	r8, r8, r0
 800a932:	e7e7      	b.n	800a904 <__sflush_r+0xd4>
 800a934:	dfbffffe 	.word	0xdfbffffe

0800a938 <_fflush_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	690b      	ldr	r3, [r1, #16]
 800a93c:	4605      	mov	r5, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	b913      	cbnz	r3, 800a948 <_fflush_r+0x10>
 800a942:	2500      	movs	r5, #0
 800a944:	4628      	mov	r0, r5
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	b118      	cbz	r0, 800a952 <_fflush_r+0x1a>
 800a94a:	6a03      	ldr	r3, [r0, #32]
 800a94c:	b90b      	cbnz	r3, 800a952 <_fflush_r+0x1a>
 800a94e:	f7fe fcef 	bl	8009330 <__sinit>
 800a952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0f3      	beq.n	800a942 <_fflush_r+0xa>
 800a95a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a95c:	07d0      	lsls	r0, r2, #31
 800a95e:	d404      	bmi.n	800a96a <_fflush_r+0x32>
 800a960:	0599      	lsls	r1, r3, #22
 800a962:	d402      	bmi.n	800a96a <_fflush_r+0x32>
 800a964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a966:	f7fe ff26 	bl	80097b6 <__retarget_lock_acquire_recursive>
 800a96a:	4628      	mov	r0, r5
 800a96c:	4621      	mov	r1, r4
 800a96e:	f7ff ff5f 	bl	800a830 <__sflush_r>
 800a972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a974:	07da      	lsls	r2, r3, #31
 800a976:	4605      	mov	r5, r0
 800a978:	d4e4      	bmi.n	800a944 <_fflush_r+0xc>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	059b      	lsls	r3, r3, #22
 800a97e:	d4e1      	bmi.n	800a944 <_fflush_r+0xc>
 800a980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a982:	f7fe ff19 	bl	80097b8 <__retarget_lock_release_recursive>
 800a986:	e7dd      	b.n	800a944 <_fflush_r+0xc>

0800a988 <__swhatbuf_r>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	460c      	mov	r4, r1
 800a98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a990:	2900      	cmp	r1, #0
 800a992:	b096      	sub	sp, #88	@ 0x58
 800a994:	4615      	mov	r5, r2
 800a996:	461e      	mov	r6, r3
 800a998:	da0d      	bge.n	800a9b6 <__swhatbuf_r+0x2e>
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9a0:	f04f 0100 	mov.w	r1, #0
 800a9a4:	bf14      	ite	ne
 800a9a6:	2340      	movne	r3, #64	@ 0x40
 800a9a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	6031      	str	r1, [r6, #0]
 800a9b0:	602b      	str	r3, [r5, #0]
 800a9b2:	b016      	add	sp, #88	@ 0x58
 800a9b4:	bd70      	pop	{r4, r5, r6, pc}
 800a9b6:	466a      	mov	r2, sp
 800a9b8:	f000 f8d6 	bl	800ab68 <_fstat_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	dbec      	blt.n	800a99a <__swhatbuf_r+0x12>
 800a9c0:	9901      	ldr	r1, [sp, #4]
 800a9c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9ca:	4259      	negs	r1, r3
 800a9cc:	4159      	adcs	r1, r3
 800a9ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9d2:	e7eb      	b.n	800a9ac <__swhatbuf_r+0x24>

0800a9d4 <__smakebuf_r>:
 800a9d4:	898b      	ldrh	r3, [r1, #12]
 800a9d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9d8:	079d      	lsls	r5, r3, #30
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460c      	mov	r4, r1
 800a9de:	d507      	bpl.n	800a9f0 <__smakebuf_r+0x1c>
 800a9e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	6123      	str	r3, [r4, #16]
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	6163      	str	r3, [r4, #20]
 800a9ec:	b003      	add	sp, #12
 800a9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f0:	ab01      	add	r3, sp, #4
 800a9f2:	466a      	mov	r2, sp
 800a9f4:	f7ff ffc8 	bl	800a988 <__swhatbuf_r>
 800a9f8:	9f00      	ldr	r7, [sp, #0]
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7fe ff48 	bl	8009894 <_malloc_r>
 800aa04:	b948      	cbnz	r0, 800aa1a <__smakebuf_r+0x46>
 800aa06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0a:	059a      	lsls	r2, r3, #22
 800aa0c:	d4ee      	bmi.n	800a9ec <__smakebuf_r+0x18>
 800aa0e:	f023 0303 	bic.w	r3, r3, #3
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	81a3      	strh	r3, [r4, #12]
 800aa18:	e7e2      	b.n	800a9e0 <__smakebuf_r+0xc>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	6020      	str	r0, [r4, #0]
 800aa1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	9b01      	ldr	r3, [sp, #4]
 800aa26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa2a:	b15b      	cbz	r3, 800aa44 <__smakebuf_r+0x70>
 800aa2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa30:	4630      	mov	r0, r6
 800aa32:	f000 f8ab 	bl	800ab8c <_isatty_r>
 800aa36:	b128      	cbz	r0, 800aa44 <__smakebuf_r+0x70>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f023 0303 	bic.w	r3, r3, #3
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	81a3      	strh	r3, [r4, #12]
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	431d      	orrs	r5, r3
 800aa48:	81a5      	strh	r5, [r4, #12]
 800aa4a:	e7cf      	b.n	800a9ec <__smakebuf_r+0x18>

0800aa4c <__sccl>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	780b      	ldrb	r3, [r1, #0]
 800aa50:	4604      	mov	r4, r0
 800aa52:	2b5e      	cmp	r3, #94	@ 0x5e
 800aa54:	bf0b      	itete	eq
 800aa56:	784b      	ldrbeq	r3, [r1, #1]
 800aa58:	1c4a      	addne	r2, r1, #1
 800aa5a:	1c8a      	addeq	r2, r1, #2
 800aa5c:	2100      	movne	r1, #0
 800aa5e:	bf08      	it	eq
 800aa60:	2101      	moveq	r1, #1
 800aa62:	3801      	subs	r0, #1
 800aa64:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800aa68:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aa6c:	42a8      	cmp	r0, r5
 800aa6e:	d1fb      	bne.n	800aa68 <__sccl+0x1c>
 800aa70:	b90b      	cbnz	r3, 800aa76 <__sccl+0x2a>
 800aa72:	1e50      	subs	r0, r2, #1
 800aa74:	bd70      	pop	{r4, r5, r6, pc}
 800aa76:	f081 0101 	eor.w	r1, r1, #1
 800aa7a:	54e1      	strb	r1, [r4, r3]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	4602      	mov	r2, r0
 800aa80:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aa84:	2d2d      	cmp	r5, #45	@ 0x2d
 800aa86:	d005      	beq.n	800aa94 <__sccl+0x48>
 800aa88:	2d5d      	cmp	r5, #93	@ 0x5d
 800aa8a:	d016      	beq.n	800aaba <__sccl+0x6e>
 800aa8c:	2d00      	cmp	r5, #0
 800aa8e:	d0f1      	beq.n	800aa74 <__sccl+0x28>
 800aa90:	462b      	mov	r3, r5
 800aa92:	e7f2      	b.n	800aa7a <__sccl+0x2e>
 800aa94:	7846      	ldrb	r6, [r0, #1]
 800aa96:	2e5d      	cmp	r6, #93	@ 0x5d
 800aa98:	d0fa      	beq.n	800aa90 <__sccl+0x44>
 800aa9a:	42b3      	cmp	r3, r6
 800aa9c:	dcf8      	bgt.n	800aa90 <__sccl+0x44>
 800aa9e:	3002      	adds	r0, #2
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	3201      	adds	r2, #1
 800aaa4:	4296      	cmp	r6, r2
 800aaa6:	54a1      	strb	r1, [r4, r2]
 800aaa8:	dcfb      	bgt.n	800aaa2 <__sccl+0x56>
 800aaaa:	1af2      	subs	r2, r6, r3
 800aaac:	3a01      	subs	r2, #1
 800aaae:	1c5d      	adds	r5, r3, #1
 800aab0:	42b3      	cmp	r3, r6
 800aab2:	bfa8      	it	ge
 800aab4:	2200      	movge	r2, #0
 800aab6:	18ab      	adds	r3, r5, r2
 800aab8:	e7e1      	b.n	800aa7e <__sccl+0x32>
 800aaba:	4610      	mov	r0, r2
 800aabc:	e7da      	b.n	800aa74 <__sccl+0x28>

0800aabe <__submore>:
 800aabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac2:	460c      	mov	r4, r1
 800aac4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800aac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaca:	4299      	cmp	r1, r3
 800aacc:	d11d      	bne.n	800ab0a <__submore+0x4c>
 800aace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aad2:	f7fe fedf 	bl	8009894 <_malloc_r>
 800aad6:	b918      	cbnz	r0, 800aae0 <__submore+0x22>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aae4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aae6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800aaea:	6360      	str	r0, [r4, #52]	@ 0x34
 800aaec:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800aaf0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800aaf4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800aaf8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800aafc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ab00:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ab04:	6020      	str	r0, [r4, #0]
 800ab06:	2000      	movs	r0, #0
 800ab08:	e7e8      	b.n	800aadc <__submore+0x1e>
 800ab0a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ab0c:	0077      	lsls	r7, r6, #1
 800ab0e:	463a      	mov	r2, r7
 800ab10:	f000 f86a 	bl	800abe8 <_realloc_r>
 800ab14:	4605      	mov	r5, r0
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d0de      	beq.n	800aad8 <__submore+0x1a>
 800ab1a:	eb00 0806 	add.w	r8, r0, r6
 800ab1e:	4601      	mov	r1, r0
 800ab20:	4632      	mov	r2, r6
 800ab22:	4640      	mov	r0, r8
 800ab24:	f000 f852 	bl	800abcc <memcpy>
 800ab28:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ab2c:	f8c4 8000 	str.w	r8, [r4]
 800ab30:	e7e9      	b.n	800ab06 <__submore+0x48>

0800ab32 <memmove>:
 800ab32:	4288      	cmp	r0, r1
 800ab34:	b510      	push	{r4, lr}
 800ab36:	eb01 0402 	add.w	r4, r1, r2
 800ab3a:	d902      	bls.n	800ab42 <memmove+0x10>
 800ab3c:	4284      	cmp	r4, r0
 800ab3e:	4623      	mov	r3, r4
 800ab40:	d807      	bhi.n	800ab52 <memmove+0x20>
 800ab42:	1e43      	subs	r3, r0, #1
 800ab44:	42a1      	cmp	r1, r4
 800ab46:	d008      	beq.n	800ab5a <memmove+0x28>
 800ab48:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab50:	e7f8      	b.n	800ab44 <memmove+0x12>
 800ab52:	4402      	add	r2, r0
 800ab54:	4601      	mov	r1, r0
 800ab56:	428a      	cmp	r2, r1
 800ab58:	d100      	bne.n	800ab5c <memmove+0x2a>
 800ab5a:	bd10      	pop	{r4, pc}
 800ab5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab64:	e7f7      	b.n	800ab56 <memmove+0x24>
	...

0800ab68 <_fstat_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4d07      	ldr	r5, [pc, #28]	@ (800ab88 <_fstat_r+0x20>)
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4604      	mov	r4, r0
 800ab70:	4608      	mov	r0, r1
 800ab72:	4611      	mov	r1, r2
 800ab74:	602b      	str	r3, [r5, #0]
 800ab76:	f7f6 fae6 	bl	8001146 <_fstat>
 800ab7a:	1c43      	adds	r3, r0, #1
 800ab7c:	d102      	bne.n	800ab84 <_fstat_r+0x1c>
 800ab7e:	682b      	ldr	r3, [r5, #0]
 800ab80:	b103      	cbz	r3, 800ab84 <_fstat_r+0x1c>
 800ab82:	6023      	str	r3, [r4, #0]
 800ab84:	bd38      	pop	{r3, r4, r5, pc}
 800ab86:	bf00      	nop
 800ab88:	20001fac 	.word	0x20001fac

0800ab8c <_isatty_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4d06      	ldr	r5, [pc, #24]	@ (800aba8 <_isatty_r+0x1c>)
 800ab90:	2300      	movs	r3, #0
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	602b      	str	r3, [r5, #0]
 800ab98:	f7f6 fae5 	bl	8001166 <_isatty>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_isatty_r+0x1a>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_isatty_r+0x1a>
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	20001fac 	.word	0x20001fac

0800abac <_sbrk_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4d06      	ldr	r5, [pc, #24]	@ (800abc8 <_sbrk_r+0x1c>)
 800abb0:	2300      	movs	r3, #0
 800abb2:	4604      	mov	r4, r0
 800abb4:	4608      	mov	r0, r1
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	f7f6 faee 	bl	8001198 <_sbrk>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_sbrk_r+0x1a>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_sbrk_r+0x1a>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20001fac 	.word	0x20001fac

0800abcc <memcpy>:
 800abcc:	440a      	add	r2, r1
 800abce:	4291      	cmp	r1, r2
 800abd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800abd4:	d100      	bne.n	800abd8 <memcpy+0xc>
 800abd6:	4770      	bx	lr
 800abd8:	b510      	push	{r4, lr}
 800abda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abe2:	4291      	cmp	r1, r2
 800abe4:	d1f9      	bne.n	800abda <memcpy+0xe>
 800abe6:	bd10      	pop	{r4, pc}

0800abe8 <_realloc_r>:
 800abe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abec:	4680      	mov	r8, r0
 800abee:	4615      	mov	r5, r2
 800abf0:	460c      	mov	r4, r1
 800abf2:	b921      	cbnz	r1, 800abfe <_realloc_r+0x16>
 800abf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abf8:	4611      	mov	r1, r2
 800abfa:	f7fe be4b 	b.w	8009894 <_malloc_r>
 800abfe:	b92a      	cbnz	r2, 800ac0c <_realloc_r+0x24>
 800ac00:	f7fe fddc 	bl	80097bc <_free_r>
 800ac04:	2400      	movs	r4, #0
 800ac06:	4620      	mov	r0, r4
 800ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0c:	f000 f906 	bl	800ae1c <_malloc_usable_size_r>
 800ac10:	4285      	cmp	r5, r0
 800ac12:	4606      	mov	r6, r0
 800ac14:	d802      	bhi.n	800ac1c <_realloc_r+0x34>
 800ac16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ac1a:	d8f4      	bhi.n	800ac06 <_realloc_r+0x1e>
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4640      	mov	r0, r8
 800ac20:	f7fe fe38 	bl	8009894 <_malloc_r>
 800ac24:	4607      	mov	r7, r0
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d0ec      	beq.n	800ac04 <_realloc_r+0x1c>
 800ac2a:	42b5      	cmp	r5, r6
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	4621      	mov	r1, r4
 800ac30:	bf28      	it	cs
 800ac32:	4632      	movcs	r2, r6
 800ac34:	f7ff ffca 	bl	800abcc <memcpy>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	f7fe fdbe 	bl	80097bc <_free_r>
 800ac40:	463c      	mov	r4, r7
 800ac42:	e7e0      	b.n	800ac06 <_realloc_r+0x1e>

0800ac44 <_strtol_l.constprop.0>:
 800ac44:	2b24      	cmp	r3, #36	@ 0x24
 800ac46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac4a:	4686      	mov	lr, r0
 800ac4c:	4690      	mov	r8, r2
 800ac4e:	d801      	bhi.n	800ac54 <_strtol_l.constprop.0+0x10>
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d106      	bne.n	800ac62 <_strtol_l.constprop.0+0x1e>
 800ac54:	f7fe fd84 	bl	8009760 <__errno>
 800ac58:	2316      	movs	r3, #22
 800ac5a:	6003      	str	r3, [r0, #0]
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac62:	4834      	ldr	r0, [pc, #208]	@ (800ad34 <_strtol_l.constprop.0+0xf0>)
 800ac64:	460d      	mov	r5, r1
 800ac66:	462a      	mov	r2, r5
 800ac68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac6c:	5d06      	ldrb	r6, [r0, r4]
 800ac6e:	f016 0608 	ands.w	r6, r6, #8
 800ac72:	d1f8      	bne.n	800ac66 <_strtol_l.constprop.0+0x22>
 800ac74:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac76:	d12d      	bne.n	800acd4 <_strtol_l.constprop.0+0x90>
 800ac78:	782c      	ldrb	r4, [r5, #0]
 800ac7a:	2601      	movs	r6, #1
 800ac7c:	1c95      	adds	r5, r2, #2
 800ac7e:	f033 0210 	bics.w	r2, r3, #16
 800ac82:	d109      	bne.n	800ac98 <_strtol_l.constprop.0+0x54>
 800ac84:	2c30      	cmp	r4, #48	@ 0x30
 800ac86:	d12a      	bne.n	800acde <_strtol_l.constprop.0+0x9a>
 800ac88:	782a      	ldrb	r2, [r5, #0]
 800ac8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac8e:	2a58      	cmp	r2, #88	@ 0x58
 800ac90:	d125      	bne.n	800acde <_strtol_l.constprop.0+0x9a>
 800ac92:	786c      	ldrb	r4, [r5, #1]
 800ac94:	2310      	movs	r3, #16
 800ac96:	3502      	adds	r5, #2
 800ac98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ac9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aca0:	2200      	movs	r2, #0
 800aca2:	fbbc f9f3 	udiv	r9, ip, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	fb03 ca19 	mls	sl, r3, r9, ip
 800acac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800acb0:	2f09      	cmp	r7, #9
 800acb2:	d81b      	bhi.n	800acec <_strtol_l.constprop.0+0xa8>
 800acb4:	463c      	mov	r4, r7
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	dd27      	ble.n	800ad0a <_strtol_l.constprop.0+0xc6>
 800acba:	1c57      	adds	r7, r2, #1
 800acbc:	d007      	beq.n	800acce <_strtol_l.constprop.0+0x8a>
 800acbe:	4581      	cmp	r9, r0
 800acc0:	d320      	bcc.n	800ad04 <_strtol_l.constprop.0+0xc0>
 800acc2:	d101      	bne.n	800acc8 <_strtol_l.constprop.0+0x84>
 800acc4:	45a2      	cmp	sl, r4
 800acc6:	db1d      	blt.n	800ad04 <_strtol_l.constprop.0+0xc0>
 800acc8:	fb00 4003 	mla	r0, r0, r3, r4
 800accc:	2201      	movs	r2, #1
 800acce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acd2:	e7eb      	b.n	800acac <_strtol_l.constprop.0+0x68>
 800acd4:	2c2b      	cmp	r4, #43	@ 0x2b
 800acd6:	bf04      	itt	eq
 800acd8:	782c      	ldrbeq	r4, [r5, #0]
 800acda:	1c95      	addeq	r5, r2, #2
 800acdc:	e7cf      	b.n	800ac7e <_strtol_l.constprop.0+0x3a>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1da      	bne.n	800ac98 <_strtol_l.constprop.0+0x54>
 800ace2:	2c30      	cmp	r4, #48	@ 0x30
 800ace4:	bf0c      	ite	eq
 800ace6:	2308      	moveq	r3, #8
 800ace8:	230a      	movne	r3, #10
 800acea:	e7d5      	b.n	800ac98 <_strtol_l.constprop.0+0x54>
 800acec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800acf0:	2f19      	cmp	r7, #25
 800acf2:	d801      	bhi.n	800acf8 <_strtol_l.constprop.0+0xb4>
 800acf4:	3c37      	subs	r4, #55	@ 0x37
 800acf6:	e7de      	b.n	800acb6 <_strtol_l.constprop.0+0x72>
 800acf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800acfc:	2f19      	cmp	r7, #25
 800acfe:	d804      	bhi.n	800ad0a <_strtol_l.constprop.0+0xc6>
 800ad00:	3c57      	subs	r4, #87	@ 0x57
 800ad02:	e7d8      	b.n	800acb6 <_strtol_l.constprop.0+0x72>
 800ad04:	f04f 32ff 	mov.w	r2, #4294967295
 800ad08:	e7e1      	b.n	800acce <_strtol_l.constprop.0+0x8a>
 800ad0a:	1c53      	adds	r3, r2, #1
 800ad0c:	d108      	bne.n	800ad20 <_strtol_l.constprop.0+0xdc>
 800ad0e:	2322      	movs	r3, #34	@ 0x22
 800ad10:	f8ce 3000 	str.w	r3, [lr]
 800ad14:	4660      	mov	r0, ip
 800ad16:	f1b8 0f00 	cmp.w	r8, #0
 800ad1a:	d0a0      	beq.n	800ac5e <_strtol_l.constprop.0+0x1a>
 800ad1c:	1e69      	subs	r1, r5, #1
 800ad1e:	e006      	b.n	800ad2e <_strtol_l.constprop.0+0xea>
 800ad20:	b106      	cbz	r6, 800ad24 <_strtol_l.constprop.0+0xe0>
 800ad22:	4240      	negs	r0, r0
 800ad24:	f1b8 0f00 	cmp.w	r8, #0
 800ad28:	d099      	beq.n	800ac5e <_strtol_l.constprop.0+0x1a>
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	d1f6      	bne.n	800ad1c <_strtol_l.constprop.0+0xd8>
 800ad2e:	f8c8 1000 	str.w	r1, [r8]
 800ad32:	e794      	b.n	800ac5e <_strtol_l.constprop.0+0x1a>
 800ad34:	0800afe3 	.word	0x0800afe3

0800ad38 <_strtol_r>:
 800ad38:	f7ff bf84 	b.w	800ac44 <_strtol_l.constprop.0>

0800ad3c <_strtoul_l.constprop.0>:
 800ad3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad40:	4e34      	ldr	r6, [pc, #208]	@ (800ae14 <_strtoul_l.constprop.0+0xd8>)
 800ad42:	4686      	mov	lr, r0
 800ad44:	460d      	mov	r5, r1
 800ad46:	4628      	mov	r0, r5
 800ad48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad4c:	5d37      	ldrb	r7, [r6, r4]
 800ad4e:	f017 0708 	ands.w	r7, r7, #8
 800ad52:	d1f8      	bne.n	800ad46 <_strtoul_l.constprop.0+0xa>
 800ad54:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad56:	d12f      	bne.n	800adb8 <_strtoul_l.constprop.0+0x7c>
 800ad58:	782c      	ldrb	r4, [r5, #0]
 800ad5a:	2701      	movs	r7, #1
 800ad5c:	1c85      	adds	r5, r0, #2
 800ad5e:	f033 0010 	bics.w	r0, r3, #16
 800ad62:	d109      	bne.n	800ad78 <_strtoul_l.constprop.0+0x3c>
 800ad64:	2c30      	cmp	r4, #48	@ 0x30
 800ad66:	d12c      	bne.n	800adc2 <_strtoul_l.constprop.0+0x86>
 800ad68:	7828      	ldrb	r0, [r5, #0]
 800ad6a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ad6e:	2858      	cmp	r0, #88	@ 0x58
 800ad70:	d127      	bne.n	800adc2 <_strtoul_l.constprop.0+0x86>
 800ad72:	786c      	ldrb	r4, [r5, #1]
 800ad74:	2310      	movs	r3, #16
 800ad76:	3502      	adds	r5, #2
 800ad78:	f04f 38ff 	mov.w	r8, #4294967295
 800ad7c:	2600      	movs	r6, #0
 800ad7e:	fbb8 f8f3 	udiv	r8, r8, r3
 800ad82:	fb03 f908 	mul.w	r9, r3, r8
 800ad86:	ea6f 0909 	mvn.w	r9, r9
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ad90:	f1bc 0f09 	cmp.w	ip, #9
 800ad94:	d81c      	bhi.n	800add0 <_strtoul_l.constprop.0+0x94>
 800ad96:	4664      	mov	r4, ip
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	dd2a      	ble.n	800adf2 <_strtoul_l.constprop.0+0xb6>
 800ad9c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ada0:	d007      	beq.n	800adb2 <_strtoul_l.constprop.0+0x76>
 800ada2:	4580      	cmp	r8, r0
 800ada4:	d322      	bcc.n	800adec <_strtoul_l.constprop.0+0xb0>
 800ada6:	d101      	bne.n	800adac <_strtoul_l.constprop.0+0x70>
 800ada8:	45a1      	cmp	r9, r4
 800adaa:	db1f      	blt.n	800adec <_strtoul_l.constprop.0+0xb0>
 800adac:	fb00 4003 	mla	r0, r0, r3, r4
 800adb0:	2601      	movs	r6, #1
 800adb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adb6:	e7e9      	b.n	800ad8c <_strtoul_l.constprop.0+0x50>
 800adb8:	2c2b      	cmp	r4, #43	@ 0x2b
 800adba:	bf04      	itt	eq
 800adbc:	782c      	ldrbeq	r4, [r5, #0]
 800adbe:	1c85      	addeq	r5, r0, #2
 800adc0:	e7cd      	b.n	800ad5e <_strtoul_l.constprop.0+0x22>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1d8      	bne.n	800ad78 <_strtoul_l.constprop.0+0x3c>
 800adc6:	2c30      	cmp	r4, #48	@ 0x30
 800adc8:	bf0c      	ite	eq
 800adca:	2308      	moveq	r3, #8
 800adcc:	230a      	movne	r3, #10
 800adce:	e7d3      	b.n	800ad78 <_strtoul_l.constprop.0+0x3c>
 800add0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800add4:	f1bc 0f19 	cmp.w	ip, #25
 800add8:	d801      	bhi.n	800adde <_strtoul_l.constprop.0+0xa2>
 800adda:	3c37      	subs	r4, #55	@ 0x37
 800addc:	e7dc      	b.n	800ad98 <_strtoul_l.constprop.0+0x5c>
 800adde:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ade2:	f1bc 0f19 	cmp.w	ip, #25
 800ade6:	d804      	bhi.n	800adf2 <_strtoul_l.constprop.0+0xb6>
 800ade8:	3c57      	subs	r4, #87	@ 0x57
 800adea:	e7d5      	b.n	800ad98 <_strtoul_l.constprop.0+0x5c>
 800adec:	f04f 36ff 	mov.w	r6, #4294967295
 800adf0:	e7df      	b.n	800adb2 <_strtoul_l.constprop.0+0x76>
 800adf2:	1c73      	adds	r3, r6, #1
 800adf4:	d106      	bne.n	800ae04 <_strtoul_l.constprop.0+0xc8>
 800adf6:	2322      	movs	r3, #34	@ 0x22
 800adf8:	f8ce 3000 	str.w	r3, [lr]
 800adfc:	4630      	mov	r0, r6
 800adfe:	b932      	cbnz	r2, 800ae0e <_strtoul_l.constprop.0+0xd2>
 800ae00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae04:	b107      	cbz	r7, 800ae08 <_strtoul_l.constprop.0+0xcc>
 800ae06:	4240      	negs	r0, r0
 800ae08:	2a00      	cmp	r2, #0
 800ae0a:	d0f9      	beq.n	800ae00 <_strtoul_l.constprop.0+0xc4>
 800ae0c:	b106      	cbz	r6, 800ae10 <_strtoul_l.constprop.0+0xd4>
 800ae0e:	1e69      	subs	r1, r5, #1
 800ae10:	6011      	str	r1, [r2, #0]
 800ae12:	e7f5      	b.n	800ae00 <_strtoul_l.constprop.0+0xc4>
 800ae14:	0800afe3 	.word	0x0800afe3

0800ae18 <_strtoul_r>:
 800ae18:	f7ff bf90 	b.w	800ad3c <_strtoul_l.constprop.0>

0800ae1c <_malloc_usable_size_r>:
 800ae1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae20:	1f18      	subs	r0, r3, #4
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bfbc      	itt	lt
 800ae26:	580b      	ldrlt	r3, [r1, r0]
 800ae28:	18c0      	addlt	r0, r0, r3
 800ae2a:	4770      	bx	lr

0800ae2c <_init>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	bf00      	nop
 800ae30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae32:	bc08      	pop	{r3}
 800ae34:	469e      	mov	lr, r3
 800ae36:	4770      	bx	lr

0800ae38 <_fini>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr

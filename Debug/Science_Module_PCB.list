
Science_Module_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009690  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009850  08009850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009998  08009998  0000b168  2**0
                  CONTENTS
  4 .ARM          00000008  08009998  08009998  0000a998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a0  080099a0  0000b168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a0  080099a0  0000a9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099a4  080099a4  0000a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  080099a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e30  20000168  08009b10  0000b168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f98  08009b10  0000bf98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f22  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e6  00000000  00000000  000210ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  000249a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb8  00000000  00000000  00025e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002efd8  00000000  00000000  00026e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f02  00000000  00000000  00055de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110a94  00000000  00000000  0006ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  0017f7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001856c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000168 	.word	0x20000168
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009838 	.word	0x08009838

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000016c 	.word	0x2000016c
 80001fc:	08009838 	.word	0x08009838

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fb41 	bl	800095a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f874 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f8f6 	bl	80004cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002e0:	f007 f9f2 	bl	80076c8 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80002e4:	f000 f8bc 	bl	8000460 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 80002e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ec:	f000 fbaa 	bl	8000a44 <HAL_Delay>
  printf("> ");
 80002f0:	482b      	ldr	r0, [pc, #172]	@ (80003a0 <main+0xd0>)
 80002f2:	f008 f9ff 	bl	80086f4 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80002f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fe:	f000 fe81 	bl	8001004 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000302:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000306:	f000 fb9d 	bl	8000a44 <HAL_Delay>

    if (LED2_flag)
 800030a:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <main+0xd4>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d005      	beq.n	800031e <main+0x4e>
    {
      HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2108      	movs	r1, #8
 8000316:	4824      	ldr	r0, [pc, #144]	@ (80003a8 <main+0xd8>)
 8000318:	f000 fe5c 	bl	8000fd4 <HAL_GPIO_WritePin>
 800031c:	e004      	b.n	8000328 <main+0x58>
    }
    else 
    {
      HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2108      	movs	r1, #8
 8000322:	4821      	ldr	r0, [pc, #132]	@ (80003a8 <main+0xd8>)
 8000324:	f000 fe56 	bl	8000fd4 <HAL_GPIO_WritePin>
    }
    if (Pump3_flag)
 8000328:	4b20      	ldr	r3, [pc, #128]	@ (80003ac <main+0xdc>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d020      	beq.n	8000372 <main+0xa2>
    {
      if (Pump3_dir){ //forward
 8000330:	4b1f      	ldr	r3, [pc, #124]	@ (80003b0 <main+0xe0>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d01c      	beq.n	8000372 <main+0xa2>
        HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800033e:	481a      	ldr	r0, [pc, #104]	@ (80003a8 <main+0xd8>)
 8000340:	f000 fe48 	bl	8000fd4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800034a:	4817      	ldr	r0, [pc, #92]	@ (80003a8 <main+0xd8>)
 800034c:	f000 fe42 	bl	8000fd4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000356:	4814      	ldr	r0, [pc, #80]	@ (80003a8 <main+0xd8>)
 8000358:	f000 fe3c 	bl	8000fd4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000362:	4811      	ldr	r0, [pc, #68]	@ (80003a8 <main+0xd8>)
 8000364:	f000 fe36 	bl	8000fd4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2108      	movs	r1, #8
 800036c:	480e      	ldr	r0, [pc, #56]	@ (80003a8 <main+0xd8>)
 800036e:	f000 fe31 	bl	8000fd4 <HAL_GPIO_WritePin>
      }
    }
    if (Timer6_flag)
 8000372:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <main+0xe4>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0bd      	beq.n	80002f6 <main+0x26>
    {
      timer6_init();
 800037a:	f000 f977 	bl	800066c <timer6_init>
      while(Get_timer6_us() < 10e6);
 800037e:	bf00      	nop
 8000380:	f000 f98c 	bl	800069c <Get_timer6_us>
 8000384:	4603      	mov	r3, r0
 8000386:	4a0c      	ldr	r2, [pc, #48]	@ (80003b8 <main+0xe8>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d3f9      	bcc.n	8000380 <main+0xb0>
      printf("5 seconds reached!\r\n");
 800038c:	480b      	ldr	r0, [pc, #44]	@ (80003bc <main+0xec>)
 800038e:	f008 fa19 	bl	80087c4 <puts>

      HAL_TIM_Base_Stop(&htim6);
 8000392:	480b      	ldr	r0, [pc, #44]	@ (80003c0 <main+0xf0>)
 8000394:	f003 fddc 	bl	8003f50 <HAL_TIM_Base_Stop>
      Timer6_flag = 0; 
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <main+0xe4>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 800039e:	e7aa      	b.n	80002f6 <main+0x26>
 80003a0:	08009850 	.word	0x08009850
 80003a4:	200001d0 	.word	0x200001d0
 80003a8:	48000400 	.word	0x48000400
 80003ac:	200001d1 	.word	0x200001d1
 80003b0:	200001d2 	.word	0x200001d2
 80003b4:	200001d3 	.word	0x200001d3
 80003b8:	00989680 	.word	0x00989680
 80003bc:	08009854 	.word	0x08009854
 80003c0:	20000184 	.word	0x20000184

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b098      	sub	sp, #96	@ 0x60
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2248      	movs	r2, #72	@ 0x48
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f008 faf6 	bl	80089c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80003e6:	2000      	movs	r0, #0
 80003e8:	f001 ffdc 	bl	80023a4 <HAL_PWREx_ControlVoltageScaling>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003f2:	f000 f96b 	bl	80006cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f6:	2301      	movs	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000404:	2303      	movs	r3, #3
 8000406:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000408:	2301      	movs	r3, #1
 800040a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 800040c:	231e      	movs	r3, #30
 800040e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000410:	2302      	movs	r3, #2
 8000412:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000418:	2302      	movs	r3, #2
 800041a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	4618      	mov	r0, r3
 8000422:	f002 f873 	bl	800250c <HAL_RCC_OscConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800042c:	f000 f94e 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000430:	230f      	movs	r3, #15
 8000432:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000434:	2303      	movs	r3, #3
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2105      	movs	r1, #5
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fcdb 	bl	8002e04 <HAL_RCC_ClockConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000454:	f000 f93a 	bl	80006cc <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3760      	adds	r7, #96	@ 0x60
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000470:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <MX_TIM6_Init+0x64>)
 8000472:	4a15      	ldr	r2, [pc, #84]	@ (80004c8 <MX_TIM6_Init+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <MX_TIM6_Init+0x64>)
 8000478:	2277      	movs	r2, #119	@ 0x77
 800047a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <MX_TIM6_Init+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000482:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <MX_TIM6_Init+0x64>)
 8000484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000488:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <MX_TIM6_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000490:	480c      	ldr	r0, [pc, #48]	@ (80004c4 <MX_TIM6_Init+0x64>)
 8000492:	f003 fc9d 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800049c:	f000 f916 	bl	80006cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <MX_TIM6_Init+0x64>)
 80004ae:	f003 fe1d 	bl	80040ec <HAL_TIMEx_MasterConfigSynchronization>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80004b8:	f000 f908 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000184 	.word	0x20000184
 80004c8:	40001000 	.word	0x40001000

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b47      	ldr	r3, [pc, #284]	@ (8000600 <MX_GPIO_Init+0x134>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	4a46      	ldr	r2, [pc, #280]	@ (8000600 <MX_GPIO_Init+0x134>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ee:	4b44      	ldr	r3, [pc, #272]	@ (8000600 <MX_GPIO_Init+0x134>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b41      	ldr	r3, [pc, #260]	@ (8000600 <MX_GPIO_Init+0x134>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	4a40      	ldr	r2, [pc, #256]	@ (8000600 <MX_GPIO_Init+0x134>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000506:	4b3e      	ldr	r3, [pc, #248]	@ (8000600 <MX_GPIO_Init+0x134>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b3b      	ldr	r3, [pc, #236]	@ (8000600 <MX_GPIO_Init+0x134>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000516:	4a3a      	ldr	r2, [pc, #232]	@ (8000600 <MX_GPIO_Init+0x134>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051e:	4b38      	ldr	r3, [pc, #224]	@ (8000600 <MX_GPIO_Init+0x134>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b35      	ldr	r3, [pc, #212]	@ (8000600 <MX_GPIO_Init+0x134>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	4a34      	ldr	r2, [pc, #208]	@ (8000600 <MX_GPIO_Init+0x134>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000536:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <MX_GPIO_Init+0x134>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8000548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054c:	f000 fd42 	bl	8000fd4 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 8000550:	2200      	movs	r2, #0
 8000552:	f64f 31cf 	movw	r1, #64463	@ 0xfbcf
 8000556:	482b      	ldr	r0, [pc, #172]	@ (8000604 <MX_GPIO_Init+0x138>)
 8000558:	f000 fd3c 	bl	8000fd4 <HAL_GPIO_WritePin>
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SM_EN__GPIO_Port, MCU_SM_EN__Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	4829      	ldr	r0, [pc, #164]	@ (8000608 <MX_GPIO_Init+0x13c>)
 8000562:	f000 fd37 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_Flow1_Pin MCU_Flow2_Pin MCU_Flow3_Pin */
  GPIO_InitStruct.Pin = MCU_Flow1_Pin|MCU_Flow2_Pin|MCU_Flow3_Pin;
 8000566:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	4824      	ldr	r0, [pc, #144]	@ (800060c <MX_GPIO_Init+0x140>)
 800057c:	f000 fb98 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_BANK_EN_Pin MCU_Pump3_HS_LR_Pin MCU_Pump3_LS_LR_Pin MCU_Pump3_HS_RL_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 8000580:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000584:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f000 fb88 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_Pump3_LS_RL_Pin MCU_Pump2_HS_LR_Pin MCU_Pump2_LS_LR_Pin MCU_Pump2_LS_RL_Pin
                           P3_LS_RL_Pin P3_LS_LR_Pin P3_HS_LR_Pin P3_HS_RL_Pin
                           LED2_Pin MCU_SM_PUL__Pin MCU_SM_DIR__Pin MCU_VM_EN_Pin
                           MCU_AM_EN_Pin */
  GPIO_InitStruct.Pin = MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 80005a0:	f64f 33cf 	movw	r3, #64463	@ 0xfbcf
 80005a4:	617b      	str	r3, [r7, #20]
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	4812      	ldr	r0, [pc, #72]	@ (8000604 <MX_GPIO_Init+0x138>)
 80005ba:	f000 fb79 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_Pump2_HS_RL_Pin */
  GPIO_InitStruct.Pin = MCU_Pump2_HS_RL_Pin;
 80005be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_Pump2_HS_RL_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <MX_GPIO_Init+0x138>)
 80005d6:	f000 fb6b 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SM_EN__Pin */
  GPIO_InitStruct.Pin = MCU_SM_EN__Pin;
 80005da:	2308      	movs	r3, #8
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_SM_EN__GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_GPIO_Init+0x13c>)
 80005f2:	f000 fb5d 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	@ 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	48000400 	.word	0x48000400
 8000608:	48001c00 	.word	0x48001c00
 800060c:	48000800 	.word	0x48000800

08000610 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) 
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b29b      	uxth	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f007 fa06 	bl	8007a34 <CDC_Transmit_FS>
  return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <timer6_overflow>:

void timer6_overflow(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE))
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <timer6_overflow+0x30>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b01      	cmp	r3, #1
 8000644:	d109      	bne.n	800065a <timer6_overflow+0x26>
  {
    tim6_overflow++; 
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <timer6_overflow+0x34>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <timer6_overflow+0x34>)
 800064e:	6013      	str	r3, [r2, #0]
    __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <timer6_overflow+0x30>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f06f 0201 	mvn.w	r2, #1
 8000658:	611a      	str	r2, [r3, #16]
  }
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000184 	.word	0x20000184
 8000668:	200001d8 	.word	0x200001d8

0800066c <timer6_init>:

void timer6_init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  // restart values and clear overflow flag
  tim6_val = 0; 
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <timer6_init+0x24>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
  tim6_overflow = 0; 
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <timer6_init+0x28>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <timer6_init+0x2c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f06f 0201 	mvn.w	r2, #1
 8000684:	611a      	str	r2, [r3, #16]

  // start timer6
  HAL_TIM_Base_Start(&htim6);
 8000686:	4804      	ldr	r0, [pc, #16]	@ (8000698 <timer6_init+0x2c>)
 8000688:	f003 fbfa 	bl	8003e80 <HAL_TIM_Base_Start>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200001d4 	.word	0x200001d4
 8000694:	200001d8 	.word	0x200001d8
 8000698:	20000184 	.word	0x20000184

0800069c <Get_timer6_us>:

uint32_t Get_timer6_us(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  timer6_overflow();
 80006a0:	f7ff ffc8 	bl	8000634 <timer6_overflow>
  tim6_val = __HAL_TIM_GET_COUNTER(&htim6);
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <Get_timer6_us+0x24>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006aa:	4a06      	ldr	r2, [pc, #24]	@ (80006c4 <Get_timer6_us+0x28>)
 80006ac:	6013      	str	r3, [r2, #0]
  return tim6_overflow * 65536 + tim6_val;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <Get_timer6_us+0x2c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	041a      	lsls	r2, r3, #16
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <Get_timer6_us+0x28>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4413      	add	r3, r2
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000184 	.word	0x20000184
 80006c4:	200001d4 	.word	0x200001d4
 80006c8:	200001d8 	.word	0x200001d8

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <Error_Handler+0x8>

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_MspInit+0x44>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <HAL_MspInit+0x44>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <HAL_MspInit+0x44>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000700:	6593      	str	r3, [r2, #88]	@ 0x58
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <HAL_TIM_Base_MspInit+0x38>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d10b      	bne.n	800074a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <HAL_TIM_Base_MspInit+0x3c>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	4a09      	ldr	r2, [pc, #36]	@ (800075c <HAL_TIM_Base_MspInit+0x3c>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6593      	str	r3, [r2, #88]	@ 0x58
 800073e:	4b07      	ldr	r3, [pc, #28]	@ (800075c <HAL_TIM_Base_MspInit+0x3c>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40001000 	.word	0x40001000
 800075c:	40021000 	.word	0x40021000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <MemManage_Handler+0x4>

08000778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <UsageFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 f925 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c4:	4802      	ldr	r0, [pc, #8]	@ (80007d0 <OTG_FS_IRQHandler+0x10>)
 80007c6:	f000 fd75 	bl	80012b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20001748 	.word	0x20001748

080007d4 <_read>:
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e00a      	b.n	80007fc <_read+0x28>
 80007e6:	f3af 8000 	nop.w
 80007ea:	4601      	mov	r1, r0
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	b2ca      	uxtb	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf0      	blt.n	80007e6 <_read+0x12>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_close>:
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_fstat>:
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	2300      	movs	r3, #0
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_isatty>:
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	2301      	movs	r3, #1
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <_lseek>:
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	2300      	movs	r3, #0
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <_sbrk>:
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
 80008a8:	f008 f8da 	bl	8008a60 <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20050000 	.word	0x20050000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	200001dc 	.word	0x200001dc
 80008e0:	20001f98 	.word	0x20001f98

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopForever+0x2>
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopForever+0x6>)
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopForever+0xa>)
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopForever+0xe>)
 8000916:	2300      	movs	r3, #0
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:
 800091a:	58d4      	ldr	r4, [r2, r3]
 800091c:	50c4      	str	r4, [r0, r3]
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:
 8000920:	18c4      	adds	r4, r0, r3
 8000922:	428c      	cmp	r4, r1
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopForever+0x12>)
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopForever+0x16>)
 800092a:	2300      	movs	r3, #0
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:
 8000932:	42a2      	cmp	r2, r4
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>
 8000936:	f008 f899 	bl	8008a6c <__libc_init_array>
 800093a:	f7ff fcc9 	bl	80002d0 <main>

0800093e <LoopForever>:
 800093e:	e7fe      	b.n	800093e <LoopForever>
 8000940:	20050000 	.word	0x20050000
 8000944:	20000000 	.word	0x20000000
 8000948:	20000168 	.word	0x20000168
 800094c:	080099a8 	.word	0x080099a8
 8000950:	20000168 	.word	0x20000168
 8000954:	20001f98 	.word	0x20001f98

08000958 <ADC1_2_IRQHandler>:
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>

0800095a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f961 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f80e 	bl	800098c <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097c:	f7ff feac 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	79fb      	ldrb	r3, [r7, #7]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d023      	beq.n	80009e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_InitTick+0x70>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f96d 	bl	8000c96 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d809      	bhi.n	80009dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f937 	bl	8000c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_InitTick+0x74>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e007      	b.n	80009ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e001      	b.n	80009ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200001e0 	.word	0x200001e0

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200001e0 	.word	0x200001e0

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff29 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff3e 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff31 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffa2 	bl	8000be8 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	e166      	b.n	8000f8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8158 	beq.w	8000f88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d005      	beq.n	8000cf0 <HAL_GPIO_Init+0x40>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0201 	and.w	r2, r3, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d017      	beq.n	8000d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d123      	bne.n	8000de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	6939      	ldr	r1, [r7, #16]
 8000dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0203 	and.w	r2, r3, #3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80b2 	beq.w	8000f88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	4b61      	ldr	r3, [pc, #388]	@ (8000fac <HAL_GPIO_Init+0x2fc>)
 8000e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e28:	4a60      	ldr	r2, [pc, #384]	@ (8000fac <HAL_GPIO_Init+0x2fc>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e30:	4b5e      	ldr	r3, [pc, #376]	@ (8000fac <HAL_GPIO_Init+0x2fc>)
 8000e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e3c:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e66:	d02b      	beq.n	8000ec0 <HAL_GPIO_Init+0x210>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a52      	ldr	r2, [pc, #328]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d025      	beq.n	8000ebc <HAL_GPIO_Init+0x20c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a51      	ldr	r2, [pc, #324]	@ (8000fb8 <HAL_GPIO_Init+0x308>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d01f      	beq.n	8000eb8 <HAL_GPIO_Init+0x208>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a50      	ldr	r2, [pc, #320]	@ (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d019      	beq.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc0 <HAL_GPIO_Init+0x310>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d013      	beq.n	8000eb0 <HAL_GPIO_Init+0x200>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc4 <HAL_GPIO_Init+0x314>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d00d      	beq.n	8000eac <HAL_GPIO_Init+0x1fc>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc8 <HAL_GPIO_Init+0x318>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d007      	beq.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8000fcc <HAL_GPIO_Init+0x31c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d101      	bne.n	8000ea4 <HAL_GPIO_Init+0x1f4>
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	e00e      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	e00c      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	e00a      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000eac:	2305      	movs	r3, #5
 8000eae:	e008      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed2:	4937      	ldr	r1, [pc, #220]	@ (8000fb0 <HAL_GPIO_Init+0x300>)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f04:	4a32      	ldr	r2, [pc, #200]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f2e:	4a28      	ldr	r2, [pc, #160]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f34:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f58:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f82:	4a13      	ldr	r2, [pc, #76]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f47f ae91 	bne.w	8000cc0 <HAL_GPIO_Init+0x10>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	48001000 	.word	0x48001000
 8000fc4:	48001400 	.word	0x48001400
 8000fc8:	48001800 	.word	0x48001800
 8000fcc:	48001c00 	.word	0x48001c00
 8000fd0:	40010400 	.word	0x40010400

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4013      	ands	r3, r2
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43d9      	mvns	r1, r3
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	400b      	ands	r3, r1
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e101      	b.n	800124e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d106      	bne.n	8001064 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f006 fe42 	bl	8007ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f003 f99b 	bl	80043b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7c1a      	ldrb	r2, [r3, #16]
 8001084:	f88d 2000 	strb.w	r2, [sp]
 8001088:	3304      	adds	r3, #4
 800108a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108c:	f003 f8b6 	bl	80041fc <USB_CoreInit>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2202      	movs	r2, #2
 800109a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0d5      	b.n	800124e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 f993 	bl	80043d4 <USB_SetCurrentMode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2202      	movs	r2, #2
 80010b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0c6      	b.n	800124e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e04a      	b.n	800115c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	3315      	adds	r3, #21
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3314      	adds	r3, #20
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	b298      	uxth	r0, r3
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	332e      	adds	r3, #46	@ 0x2e
 8001102:	4602      	mov	r2, r0
 8001104:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3318      	adds	r3, #24
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	331c      	adds	r3, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3320      	adds	r3, #32
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3324      	adds	r3, #36	@ 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3af      	bcc.n	80010c6 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e044      	b.n	80011f6 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3301      	adds	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3b5      	bcc.n	800116c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7c1a      	ldrb	r2, [r3, #16]
 8001208:	f88d 2000 	strb.w	r2, [sp]
 800120c:	3304      	adds	r3, #4
 800120e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001210:	f003 f92c 	bl	800446c <USB_DevInit>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e013      	b.n	800124e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7b1b      	ldrb	r3, [r3, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d102      	bne.n	8001242 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f001 f86d 	bl	800231c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f004 f8e3 	bl	8005412 <USB_DevDisconnect>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_PCD_Start+0x1c>
 800126e:	2302      	movs	r3, #2
 8001270:	e01c      	b.n	80012ac <HAL_PCD_Start+0x56>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7b5b      	ldrb	r3, [r3, #13]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d105      	bne.n	800128e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001286:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f003 f87c 	bl	8004390 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f004 f897 	bl	80053d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b08d      	sub	sp, #52	@ 0x34
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 f955 	bl	800557a <USB_GetMode>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 8481 	bne.w	8001bda <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 f8b9 	bl	8005454 <USB_ReadInterrupts>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 8477 	beq.w	8001bd8 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f004 f8a6 	bl	8005454 <USB_ReadInterrupts>
 8001308:	4603      	mov	r3, r0
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f002 0202 	and.w	r2, r2, #2
 8001320:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f004 f894 	bl	8005454 <USB_ReadInterrupts>
 800132c:	4603      	mov	r3, r0
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b10      	cmp	r3, #16
 8001334:	d161      	bne.n	80013fa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0210 	bic.w	r2, r2, #16
 8001344:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f003 020f 	and.w	r2, r3, #15
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	3304      	adds	r3, #4
 8001364:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	0c5b      	lsrs	r3, r3, #17
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	2b02      	cmp	r3, #2
 8001370:	d124      	bne.n	80013bc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d035      	beq.n	80013ea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138c:	b29b      	uxth	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	6a38      	ldr	r0, [r7, #32]
 8001392:	f003 fecb 	bl	800512c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a2:	441a      	add	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b4:	441a      	add	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	e016      	b.n	80013ea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	0c5b      	lsrs	r3, r3, #17
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	2b06      	cmp	r3, #6
 80013c6:	d110      	bne.n	80013ea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013ce:	2208      	movs	r2, #8
 80013d0:	4619      	mov	r1, r3
 80013d2:	6a38      	ldr	r0, [r7, #32]
 80013d4:	f003 feaa 	bl	800512c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e4:	441a      	add	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0210 	orr.w	r2, r2, #16
 80013f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 f828 	bl	8005454 <USB_ReadInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800140a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800140e:	f040 80a7 	bne.w	8001560 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f004 f82d 	bl	800547a <USB_ReadDevAllOutEpInterrupt>
 8001420:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001422:	e099      	b.n	8001558 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 808e 	beq.w	800154c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f004 f851 	bl	80054e2 <USB_ReadDevOutEPInterrupt>
 8001440:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00c      	beq.n	8001466 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001458:	461a      	mov	r2, r3
 800145a:	2301      	movs	r3, #1
 800145c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800145e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fe81 	bl	8002168 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00c      	beq.n	800148a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	015a      	lsls	r2, r3, #5
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800147c:	461a      	mov	r2, r3
 800147e:	2308      	movs	r3, #8
 8001480:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 febd 	bl	8002204 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4413      	add	r3, r2
 800149c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014a0:	461a      	mov	r2, r3
 80014a2:	2310      	movs	r3, #16
 80014a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d030      	beq.n	8001512 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b8:	2b80      	cmp	r3, #128	@ 0x80
 80014ba:	d109      	bne.n	80014d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	78db      	ldrb	r3, [r3, #3]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2200      	movs	r2, #0
 80014f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f006 fd48 	bl	8007f90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800150c:	461a      	mov	r2, r3
 800150e:	2302      	movs	r3, #2
 8001510:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001528:	461a      	mov	r2, r3
 800152a:	2320      	movs	r3, #32
 800152c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d009      	beq.n	800154c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	4413      	add	r3, r2
 8001540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001544:	461a      	mov	r2, r3
 8001546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	3301      	adds	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155a:	2b00      	cmp	r3, #0
 800155c:	f47f af62 	bne.w	8001424 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 ff75 	bl	8005454 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001570:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001574:	f040 80a4 	bne.w	80016c0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f003 ff96 	bl	80054ae <USB_ReadDevAllInEpInterrupt>
 8001582:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001588:	e096      	b.n	80016b8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 808b 	beq.w	80016ac <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 ffbc 	bl	800551e <USB_ReadDevInEPInterrupt>
 80015a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d020      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	2201      	movs	r2, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69f9      	ldr	r1, [r7, #28]
 80015ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015d2:	4013      	ands	r3, r2
 80015d4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e2:	461a      	mov	r2, r3
 80015e4:	2301      	movs	r3, #1
 80015e6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f006 fc39 	bl	8007e66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800160a:	461a      	mov	r2, r3
 800160c:	2308      	movs	r3, #8
 800160e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001626:	461a      	mov	r2, r3
 8001628:	2310      	movs	r3, #16
 800162a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001642:	461a      	mov	r2, r3
 8001644:	2340      	movs	r3, #64	@ 0x40
 8001646:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d023      	beq.n	800169a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001654:	6a38      	ldr	r0, [r7, #32]
 8001656:	f003 f851 	bl	80046fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	3310      	adds	r3, #16
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	3304      	adds	r3, #4
 800166c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2200      	movs	r2, #0
 800167a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f006 fc96 	bl	8007fb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001694:	461a      	mov	r2, r3
 8001696:	2302      	movs	r3, #2
 8001698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fcd6 	bl	8002058 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	3301      	adds	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f af65 	bne.w	800158a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fec5 	bl	8005454 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016d4:	d122      	bne.n	800171c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f006 feca 	bl	8008498 <HAL_PCDEx_LPM_Callback>
 8001704:	e002      	b.n	800170c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f006 fc1a 	bl	8007f40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800171a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fe97 	bl	8005454 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800172c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001730:	d112      	bne.n	8001758 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f006 fbd6 	bl	8007ef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001756:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fe79 	bl	8005454 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800176c:	d121      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800177c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001784:	2b00      	cmp	r3, #0
 8001786:	d111      	bne.n	80017ac <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	f003 020f 	and.w	r2, r3, #15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f006 fe77 	bl	8008498 <HAL_PCDEx_LPM_Callback>
 80017aa:	e002      	b.n	80017b2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f006 fba1 	bl	8007ef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fe4c 	bl	8005454 <USB_ReadInterrupts>
 80017bc:	4603      	mov	r3, r0
 80017be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017c6:	f040 80b6 	bne.w	8001936 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2110      	movs	r1, #16
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 ff89 	bl	80046fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ee:	e046      	b.n	800187e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017fc:	461a      	mov	r2, r3
 80017fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001802:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001814:	0151      	lsls	r1, r2, #5
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	440a      	add	r2, r1
 800181a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800181e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001822:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001830:	461a      	mov	r2, r3
 8001832:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001836:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183a:	015a      	lsls	r2, r3, #5
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4413      	add	r3, r2
 8001840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001848:	0151      	lsls	r1, r2, #5
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	440a      	add	r2, r1
 800184e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001852:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001856:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001868:	0151      	lsls	r1, r2, #5
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	440a      	add	r2, r1
 800186e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001872:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001876:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187a:	3301      	adds	r3, #1
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001886:	4293      	cmp	r3, r2
 8001888:	d3b2      	bcc.n	80017f0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001898:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800189c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7bdb      	ldrb	r3, [r3, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d016      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b6:	f043 030b 	orr.w	r3, r3, #11
 80018ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018cc:	f043 030b 	orr.w	r3, r3, #11
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	e015      	b.n	8001900 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018e6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018fa:	f043 030b 	orr.w	r3, r3, #11
 80018fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800190e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001912:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f003 fe5b 	bl	80055dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f003 fd8a 	bl	8005454 <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800194a:	d123      	bne.n	8001994 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fe20 	bl	8005596 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 ff47 	bl	80047ee <USB_GetDevSpeed>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681c      	ldr	r4, [r3, #0]
 800196c:	f001 fc10 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 8001970:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001976:	461a      	mov	r2, r3
 8001978:	4620      	mov	r0, r4
 800197a:	f002 fc6d 	bl	8004258 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f006 fa99 	bl	8007eb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001992:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fd5b 	bl	8005454 <USB_ReadInterrupts>
 800199e:	4603      	mov	r3, r0
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d10a      	bne.n	80019be <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f006 fa76 	bl	8007e9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f002 0208 	and.w	r2, r2, #8
 80019bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fd46 	bl	8005454 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ce:	2b80      	cmp	r3, #128	@ 0x80
 80019d0:	d123      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019de:	2301      	movs	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e2:	e014      	b.n	8001a0e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 faf7 	bl	8001ff6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d3e4      	bcc.n	80019e4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fd18 	bl	8005454 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a2e:	d13c      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a34:	e02b      	b.n	8001a8e <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3318      	adds	r3, #24
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d115      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da12      	bge.n	8001a88 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3317      	adds	r3, #23
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4619      	mov	r1, r3
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fab7 	bl	8001ff6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	791b      	ldrb	r3, [r3, #4]
 8001a92:	461a      	mov	r2, r3
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d3cd      	bcc.n	8001a36 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fcd0 	bl	8005454 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001abe:	d156      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac4:	e045      	b.n	8001b52 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d12e      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da2b      	bge.n	8001b4c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b00:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d121      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b48:	6053      	str	r3, [r2, #4]
            break;
 8001b4a:	e008      	b.n	8001b5e <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	3301      	adds	r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	461a      	mov	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d3b3      	bcc.n	8001ac6 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fc6e 	bl	8005454 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b82:	d10a      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f006 fa27 	bl	8007fd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fc58 	bl	8005454 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d115      	bne.n	8001bda <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f006 fa17 	bl	8007ff4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	e000      	b.n	8001bda <HAL_PCD_IRQHandler+0x926>
      return;
 8001bd8:	bf00      	nop
    }
  }
}
 8001bda:	3734      	adds	r7, #52	@ 0x34
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_PCD_SetAddress+0x1a>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e012      	b.n	8001c20 <HAL_PCD_SetAddress+0x40>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fbb7 	bl	8005384 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	70fb      	strb	r3, [r7, #3]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	803b      	strh	r3, [r7, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da0f      	bge.n	8001c6e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 020f 	and.w	r2, r3, #15
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	3310      	adds	r3, #16
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
 8001c6c:	e00f      	b.n	8001c8e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 020f 	and.w	r2, r3, #15
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	3304      	adds	r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c9a:	883b      	ldrh	r3, [r7, #0]
 8001c9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	78ba      	ldrb	r2, [r7, #2]
 8001ca8:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cbc:	78bb      	ldrb	r3, [r7, #2]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d102      	bne.n	8001cc8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_PCD_EP_Open+0xae>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e00e      	b.n	8001cf4 <HAL_PCD_EP_Open+0xcc>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68f9      	ldr	r1, [r7, #12]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fda1 	bl	800482c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da0f      	bge.n	8001d30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3310      	adds	r3, #16
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	705a      	strb	r2, [r3, #1]
 8001d2e:	e00f      	b.n	8001d50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 020f 	and.w	r2, r3, #15
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_PCD_EP_Close+0x6e>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e00e      	b.n	8001d88 <HAL_PCD_EP_Close+0x8c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68f9      	ldr	r1, [r7, #12]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fddf 	bl	800493c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fe85 	bl	8004af4 <USB_EPStartXfer>

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3310      	adds	r3, #16
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2201      	movs	r2, #1
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6979      	ldr	r1, [r7, #20]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fe3c 	bl	8004af4 <USB_EPStartXfer>

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	7912      	ldrb	r2, [r2, #4]
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e04e      	b.n	8001f42 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da0f      	bge.n	8001ecc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 020f 	and.w	r2, r3, #15
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	3310      	adds	r3, #16
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	705a      	strb	r2, [r3, #1]
 8001eca:	e00d      	b.n	8001ee8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_PCD_EP_SetStall+0x82>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e01c      	b.n	8001f42 <HAL_PCD_EP_SetStall+0xbc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 f960 	bl	80051dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d108      	bne.n	8001f38 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f003 fb52 	bl	80055dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	7912      	ldrb	r2, [r2, #4]
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e042      	b.n	8001fee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da0f      	bge.n	8001f90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 020f 	and.w	r2, r3, #15
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	3310      	adds	r3, #16
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
 8001f8e:	e00f      	b.n	8001fb0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_PCD_EP_ClrStall+0x86>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e00e      	b.n	8001fee <HAL_PCD_EP_ClrStall+0xa4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 f96a 	bl	80052b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da0c      	bge.n	8002024 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3310      	adds	r3, #16
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e00c      	b.n	800203e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	f002 ff8d 	bl	8004f64 <USB_EPStopXfer>
 800204a:	4603      	mov	r3, r0
 800204c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800204e:	7afb      	ldrb	r3, [r7, #11]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	3310      	adds	r3, #16
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d901      	bls.n	8002090 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e067      	b.n	8002160 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d902      	bls.n	80020ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	3303      	adds	r3, #3
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b4:	e026      	b.n	8002104 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d902      	bls.n	80020d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3303      	adds	r3, #3
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f002 ffe6 	bl	80050b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	441a      	add	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	441a      	add	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	429a      	cmp	r2, r3
 8002118:	d809      	bhi.n	800212e <PCD_WriteEmptyTxFifo+0xd6>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002122:	429a      	cmp	r2, r3
 8002124:	d203      	bcs.n	800212e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1c3      	bne.n	80020b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	429a      	cmp	r2, r3
 8002138:	d811      	bhi.n	800215e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	2201      	movs	r2, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800214e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	43db      	mvns	r3, r3
 8002154:	6939      	ldr	r1, [r7, #16]
 8002156:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800215a:	4013      	ands	r3, r2
 800215c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	333c      	adds	r3, #60	@ 0x3c
 8002180:	3304      	adds	r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <PCD_EP_OutXfrComplete_int+0x98>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d124      	bne.n	80021e8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ba:	6093      	str	r3, [r2, #8]
 80021bc:	e01a      	b.n	80021f4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d4:	461a      	mov	r2, r3
 80021d6:	2320      	movs	r3, #32
 80021d8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f005 fe25 	bl	8007e30 <HAL_PCD_DataOutStageCallback>
 80021e6:	e005      	b.n	80021f4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f005 fe1e 	bl	8007e30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	4f54310a 	.word	0x4f54310a

08002204 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	333c      	adds	r3, #60	@ 0x3c
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a0c      	ldr	r2, [pc, #48]	@ (8002268 <PCD_EP_OutSetupPacket_int+0x64>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d90e      	bls.n	8002258 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002250:	461a      	mov	r2, r3
 8002252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002256:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f005 fdd7 	bl	8007e0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	4f54300a 	.word	0x4f54300a

0800226c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	4613      	mov	r3, r2
 800227a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800228a:	883b      	ldrh	r3, [r7, #0]
 800228c:	0419      	lsls	r1, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	430a      	orrs	r2, r1
 8002296:	629a      	str	r2, [r3, #40]	@ 0x28
 8002298:	e028      	b.n	80022ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4413      	add	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e00d      	b.n	80022ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	3340      	adds	r3, #64	@ 0x40
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4413      	add	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d3ec      	bcc.n	80022ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022d4:	883b      	ldrh	r3, [r7, #0]
 80022d6:	0418      	lsls	r0, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	3b01      	subs	r3, #1
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	4302      	orrs	r2, r0
 80022e4:	3340      	adds	r3, #64	@ 0x40
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234e:	f043 0303 	orr.w	r3, r3, #3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002374:	d102      	bne.n	800237c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800237a:	e00b      	b.n	8002394 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800237e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800238a:	d102      	bne.n	8002392 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800238c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002390:	e000      	b.n	8002394 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002392:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40007000 	.word	0x40007000

080023a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d141      	bne.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023b2:	4b4b      	ldr	r3, [pc, #300]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023be:	d131      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c0:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023c6:	4a46      	ldr	r2, [pc, #280]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d8:	4a41      	ldr	r2, [pc, #260]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023e0:	4b40      	ldr	r3, [pc, #256]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2232      	movs	r2, #50	@ 0x32
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a3f      	ldr	r2, [pc, #252]	@ (80024e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	3301      	adds	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f6:	e002      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fe:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240a:	d102      	bne.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f2      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002412:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241e:	d158      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e057      	b.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002424:	4b2e      	ldr	r3, [pc, #184]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800242a:	4a2d      	ldr	r2, [pc, #180]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002434:	e04d      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800243c:	d141      	bne.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800243e:	4b28      	ldr	r3, [pc, #160]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244a:	d131      	bne.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002452:	4a23      	ldr	r2, [pc, #140]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002464:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800246c:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2232      	movs	r2, #50	@ 0x32
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002482:	e002      	b.n	800248a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3b01      	subs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002496:	d102      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f2      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024aa:	d112      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e011      	b.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024c0:	e007      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40007000 	.word	0x40007000
 80024e4:	20000000 	.word	0x20000000
 80024e8:	431bde83 	.word	0x431bde83

080024ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024fa:	6053      	str	r3, [r2, #4]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40007000 	.word	0x40007000

0800250c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f000 bc68 	b.w	8002df0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002520:	4b97      	ldr	r3, [pc, #604]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800252a:	4b95      	ldr	r3, [pc, #596]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80e6 	beq.w	800270e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x4c>
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	f040 808d 	bne.w	800266a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 8089 	bne.w	800266a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002558:	4b89      	ldr	r3, [pc, #548]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_RCC_OscConfig+0x66>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f000 bc3f 	b.w	8002df0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002576:	4b82      	ldr	r3, [pc, #520]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_RCC_OscConfig+0x80>
 8002582:	4b7f      	ldr	r3, [pc, #508]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258a:	e005      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
 800258c:	4b7c      	ldr	r3, [pc, #496]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002598:	4293      	cmp	r3, r2
 800259a:	d224      	bcs.n	80025e6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fe01 	bl	80031a8 <RCC_SetFlashLatencyFromMSIRange>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f000 bc1f 	b.w	8002df0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a72      	ldr	r2, [pc, #456]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b70      	ldr	r3, [pc, #448]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	496d      	ldr	r1, [pc, #436]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	4968      	ldr	r1, [pc, #416]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e025      	b.n	8002632 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e6:	4b66      	ldr	r3, [pc, #408]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a65      	ldr	r2, [pc, #404]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b63      	ldr	r3, [pc, #396]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	4960      	ldr	r1, [pc, #384]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002604:	4b5e      	ldr	r3, [pc, #376]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	495b      	ldr	r1, [pc, #364]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fdc0 	bl	80031a8 <RCC_SetFlashLatencyFromMSIRange>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e3de      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002632:	f000 fd21 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b51      	ldr	r3, [pc, #324]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	4950      	ldr	r1, [pc, #320]	@ (8002784 <HAL_RCC_OscConfig+0x278>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	4a4e      	ldr	r2, [pc, #312]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002650:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002652:	4b4e      	ldr	r3, [pc, #312]	@ (800278c <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe f998 	bl	800098c <HAL_InitTick>
 800265c:	4603      	mov	r3, r0
 800265e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d052      	beq.n	800270c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	e3c2      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d032      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002672:	4b43      	ldr	r3, [pc, #268]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a42      	ldr	r2, [pc, #264]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800267e:	f7fe f9d5 	bl	8000a2c <HAL_GetTick>
 8002682:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002686:	f7fe f9d1 	bl	8000a2c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e3ab      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002698:	4b39      	ldr	r3, [pc, #228]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a35      	ldr	r2, [pc, #212]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b33      	ldr	r3, [pc, #204]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	4930      	ldr	r1, [pc, #192]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	492b      	ldr	r1, [pc, #172]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
 80026d6:	e01a      	b.n	800270e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026d8:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a28      	ldr	r2, [pc, #160]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e4:	f7fe f9a2 	bl	8000a2c <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ec:	f7fe f99e 	bl	8000a2c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e378      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e0>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d073      	beq.n	8002802 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d005      	beq.n	800272c <HAL_RCC_OscConfig+0x220>
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d10e      	bne.n	8002744 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b14      	ldr	r3, [pc, #80]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d063      	beq.n	8002800 <HAL_RCC_OscConfig+0x2f4>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d15f      	bne.n	8002800 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e355      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x250>
 800274e:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a0b      	ldr	r2, [pc, #44]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e025      	b.n	80027a8 <HAL_RCC_OscConfig+0x29c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002764:	d114      	bne.n	8002790 <HAL_RCC_OscConfig+0x284>
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a02      	ldr	r2, [pc, #8]	@ (8002780 <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e013      	b.n	80027a8 <HAL_RCC_OscConfig+0x29c>
 8002780:	40021000 	.word	0x40021000
 8002784:	08009924 	.word	0x08009924
 8002788:	20000000 	.word	0x20000000
 800278c:	20000004 	.word	0x20000004
 8002790:	4b8f      	ldr	r3, [pc, #572]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a8e      	ldr	r2, [pc, #568]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b8c      	ldr	r3, [pc, #560]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a8b      	ldr	r2, [pc, #556]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe f93c 	bl	8000a2c <HAL_GetTick>
 80027b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe f938 	bl	8000a2c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e312      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ca:	4b81      	ldr	r3, [pc, #516]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x2ac>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe f928 	bl	8000a2c <HAL_GetTick>
 80027dc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7fe f924 	bl	8000a2c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	@ 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e2fe      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f2:	4b77      	ldr	r3, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2d4>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d060      	beq.n	80028d0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d005      	beq.n	8002820 <HAL_RCC_OscConfig+0x314>
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d119      	bne.n	800284e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d116      	bne.n	800284e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	4b6b      	ldr	r3, [pc, #428]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x32c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e2db      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	4b65      	ldr	r3, [pc, #404]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	4962      	ldr	r1, [pc, #392]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284c:	e040      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d023      	beq.n	800289e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002856:	4b5e      	ldr	r3, [pc, #376]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5d      	ldr	r2, [pc, #372]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe f8e3 	bl	8000a2c <HAL_GetTick>
 8002866:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe f8df 	bl	8000a2c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e2b9      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	4b54      	ldr	r3, [pc, #336]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b51      	ldr	r3, [pc, #324]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	494e      	ldr	r1, [pc, #312]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e018      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4b      	ldr	r2, [pc, #300]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe f8bf 	bl	8000a2c <HAL_GetTick>
 80028ae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe f8bb 	bl	8000a2c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e295      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c4:	4b42      	ldr	r3, [pc, #264]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8082 	beq.w	80029e2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d05f      	beq.n	80029a6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80028e6:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ec:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d037      	beq.n	800296c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e26d      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01b      	beq.n	8002956 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800291e:	4b2c      	ldr	r3, [pc, #176]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002924:	4a2a      	ldr	r2, [pc, #168]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292e:	f7fe f87d 	bl	8000a2c <HAL_GetTick>
 8002932:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002936:	f7fe f879 	bl	8000a2c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b11      	cmp	r3, #17
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e253      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002948:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ef      	bne.n	8002936 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295c:	f023 0210 	bic.w	r2, r3, #16
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	491a      	ldr	r1, [pc, #104]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002972:	4a17      	ldr	r2, [pc, #92]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe f856 	bl	8000a2c <HAL_GetTick>
 8002980:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe f852 	bl	8000a2c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b11      	cmp	r3, #17
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e22c      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002996:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <HAL_RCC_OscConfig+0x478>
 80029a4:	e01d      	b.n	80029e2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ac:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe f839 	bl	8000a2c <HAL_GetTick>
 80029ba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7fe f835 	bl	8000a2c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b11      	cmp	r3, #17
 80029ca:	d903      	bls.n	80029d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e20f      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
 80029d0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d4:	4b83      	ldr	r3, [pc, #524]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ed      	bne.n	80029be <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80bd 	beq.w	8002b6a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029f6:	4b7b      	ldr	r3, [pc, #492]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b78      	ldr	r3, [pc, #480]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a06:	4a77      	ldr	r2, [pc, #476]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a0e:	4b75      	ldr	r3, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a20:	4b71      	ldr	r3, [pc, #452]	@ (8002be8 <HAL_RCC_OscConfig+0x6dc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d118      	bne.n	8002a5e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4b6e      	ldr	r3, [pc, #440]	@ (8002be8 <HAL_RCC_OscConfig+0x6dc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6d      	ldr	r2, [pc, #436]	@ (8002be8 <HAL_RCC_OscConfig+0x6dc>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a38:	f7fd fff8 	bl	8000a2c <HAL_GetTick>
 8002a3c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fd fff4 	bl	8000a2c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1ce      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a52:	4b65      	ldr	r3, [pc, #404]	@ (8002be8 <HAL_RCC_OscConfig+0x6dc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7c:	4959      	ldr	r1, [pc, #356]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a90:	4b54      	ldr	r3, [pc, #336]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a96:	4a53      	ldr	r2, [pc, #332]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa6:	4a4f      	ldr	r2, [pc, #316]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac2:	e00f      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ac4:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aca:	4a46      	ldr	r2, [pc, #280]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ad4:	4b43      	ldr	r3, [pc, #268]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ada:	4a42      	ldr	r2, [pc, #264]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d016      	beq.n	8002b1a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fd ff9e 	bl	8000a2c <HAL_GetTick>
 8002af0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fd ff9a 	bl	8000a2c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e172      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0a:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ed      	beq.n	8002af4 <HAL_RCC_OscConfig+0x5e8>
 8002b18:	e01d      	b.n	8002b56 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fd ff87 	bl	8000a2c <HAL_GetTick>
 8002b1e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fd ff83 	bl	8000a2c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e15b      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b38:	4b2a      	ldr	r3, [pc, #168]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ed      	bne.n	8002b22 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b46:	4b27      	ldr	r3, [pc, #156]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4c:	4a25      	ldr	r2, [pc, #148]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5e:	4b21      	ldr	r3, [pc, #132]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b62:	4a20      	ldr	r2, [pc, #128]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d041      	beq.n	8002bfa <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b7e:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b84:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fd ff4d 	bl	8000a2c <HAL_GetTick>
 8002b92:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b96:	f7fd ff49 	bl	8000a2c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e123      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ef      	beq.n	8002b96 <HAL_RCC_OscConfig+0x68a>
 8002bb6:	e020      	b.n	8002bfa <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bbe:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <HAL_RCC_OscConfig+0x6d8>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fd ff30 	bl	8000a2c <HAL_GetTick>
 8002bcc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bce:	e00d      	b.n	8002bec <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd0:	f7fd ff2c 	bl	8000a2c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d906      	bls.n	8002bec <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e106      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bec:	4b82      	ldr	r3, [pc, #520]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ea      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80f5 	beq.w	8002dee <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	f040 80cb 	bne.w	8002da4 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d12c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d123      	bne.n	8002c7c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d11b      	bne.n	8002c7c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d113      	bne.n	8002c7c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	3b01      	subs	r3, #1
 8002c62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d109      	bne.n	8002c7c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d06d      	beq.n	8002d58 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d068      	beq.n	8002d54 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c82:	4b5d      	ldr	r3, [pc, #372]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0a8      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b56      	ldr	r3, [pc, #344]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a55      	ldr	r2, [pc, #340]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002ca4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002caa:	f7fd febf 	bl	8000a2c <HAL_GetTick>
 8002cae:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fd febb 	bl	8000a2c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e095      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd0:	4b49      	ldr	r3, [pc, #292]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	4b49      	ldr	r3, [pc, #292]	@ (8002dfc <HAL_RCC_OscConfig+0x8f0>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cea:	0212      	lsls	r2, r2, #8
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cf2:	0852      	lsrs	r2, r2, #1
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0552      	lsls	r2, r2, #21
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0652      	lsls	r2, r2, #25
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d0a:	06d2      	lsls	r2, r2, #27
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	493a      	ldr	r1, [pc, #232]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d14:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a37      	ldr	r2, [pc, #220]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d20:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d2c:	f7fd fe7e 	bl	8000a2c <HAL_GetTick>
 8002d30:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fd fe7a 	bl	8000a2c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e054      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b2c      	ldr	r3, [pc, #176]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d52:	e04c      	b.n	8002dee <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e04b      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b27      	ldr	r3, [pc, #156]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d144      	bne.n	8002dee <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a23      	ldr	r2, [pc, #140]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d70:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7c:	f7fd fe56 	bl	8000a2c <HAL_GetTick>
 8002d80:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fd fe52 	bl	8000a2c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e02c      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x878>
 8002da2:	e024      	b.n	8002dee <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d01f      	beq.n	8002dea <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fd fe39 	bl	8000a2c <HAL_GetTick>
 8002dba:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fd fe35 	bl	8000a2c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e00f      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	4905      	ldr	r1, [pc, #20]	@ (8002df8 <HAL_RCC_OscConfig+0x8ec>)
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <HAL_RCC_OscConfig+0x8f4>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
 8002de8:	e001      	b.n	8002dee <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3728      	adds	r7, #40	@ 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	019d800c 	.word	0x019d800c
 8002e00:	feeefffc 	.word	0xfeeefffc

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e11d      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b90      	ldr	r3, [pc, #576]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 020f 	bic.w	r2, r3, #15
 8002e32:	498b      	ldr	r1, [pc, #556]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b89      	ldr	r3, [pc, #548]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e105      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b81      	ldr	r3, [pc, #516]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b7e      	ldr	r3, [pc, #504]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	497b      	ldr	r1, [pc, #492]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d079      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d11e      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8e:	4b75      	ldr	r3, [pc, #468]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0dc      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e9e:	f000 f9dd 	bl	800325c <RCC_GetSysClockFreqFromPLLSource>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4a70      	ldr	r2, [pc, #448]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d946      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d140      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eb6:	4b6b      	ldr	r3, [pc, #428]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ebe:	4a69      	ldr	r2, [pc, #420]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e035      	b.n	8002f38 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed4:	4b63      	ldr	r3, [pc, #396]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0b9      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eec:	4b5d      	ldr	r3, [pc, #372]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0ad      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efc:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0a5      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002f0c:	f000 f8b4 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4a55      	ldr	r2, [pc, #340]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d90f      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f18:	4b52      	ldr	r3, [pc, #328]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f24:	4b4f      	ldr	r3, [pc, #316]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f32:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f38:	4b4a      	ldr	r3, [pc, #296]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 0203 	bic.w	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4947      	ldr	r1, [pc, #284]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4a:	f7fd fd6f 	bl	8000a2c <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f52:	f7fd fd6b 	bl	8000a2c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e077      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f68:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 020c 	and.w	r2, r3, #12
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d1eb      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b80      	cmp	r3, #128	@ 0x80
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f80:	4b38      	ldr	r3, [pc, #224]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a37      	ldr	r2, [pc, #220]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f8a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d208      	bcs.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	492b      	ldr	r1, [pc, #172]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fba:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d210      	bcs.n	8002fea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc8:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 020f 	bic.w	r2, r3, #15
 8002fd0:	4923      	ldr	r1, [pc, #140]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd8:	4b21      	ldr	r3, [pc, #132]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e036      	b.n	8003058 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4918      	ldr	r1, [pc, #96]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4910      	ldr	r1, [pc, #64]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003028:	f000 f826 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	490c      	ldr	r1, [pc, #48]	@ (800306c <HAL_RCC_ClockConfig+0x268>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <HAL_RCC_ClockConfig+0x26c>)
 8003046:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <HAL_RCC_ClockConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fc9d 	bl	800098c <HAL_InitTick>
 8003052:	4603      	mov	r3, r0
 8003054:	73fb      	strb	r3, [r7, #15]

  return status;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
 8003068:	04c4b400 	.word	0x04c4b400
 800306c:	08009924 	.word	0x08009924
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003086:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d121      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d11e      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ac:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030b8:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e004      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030fc:	4b23      	ldr	r3, [pc, #140]	@ (800318c <HAL_RCC_GetSysClockFreq+0x114>)
 80030fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d134      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0xa6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xac>
 800311c:	e005      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_GetSysClockFreq+0x114>)
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	e002      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	3301      	adds	r3, #1
 800313c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0e5b      	lsrs	r3, r3, #25
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	3301      	adds	r3, #1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003170:	69bb      	ldr	r3, [r7, #24]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	@ 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	08009934 	.word	0x08009934
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200

08003190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000

080031a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031b4:	4b27      	ldr	r3, [pc, #156]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031c0:	f7ff f8d0 	bl	8002364 <HAL_PWREx_GetVoltageRange>
 80031c4:	6178      	str	r0, [r7, #20]
 80031c6:	e014      	b.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b22      	ldr	r3, [pc, #136]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031cc:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031e0:	f7ff f8c0 	bl	8002364 <HAL_PWREx_GetVoltageRange>
 80031e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f8:	d10b      	bne.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	@ 0x80
 80031fe:	d913      	bls.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2ba0      	cmp	r3, #160	@ 0xa0
 8003204:	d902      	bls.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003206:	2302      	movs	r3, #2
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e00d      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800320c:	2301      	movs	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e00a      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b7f      	cmp	r3, #127	@ 0x7f
 8003216:	d902      	bls.n	800321e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003218:	2302      	movs	r3, #2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e004      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b70      	cmp	r3, #112	@ 0x70
 8003222:	d101      	bne.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003224:	2301      	movs	r3, #1
 8003226:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 020f 	bic.w	r2, r3, #15
 8003230:	4909      	ldr	r1, [pc, #36]	@ (8003258 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003238:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	40022000 	.word	0x40022000

0800325c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003262:	4b2d      	ldr	r3, [pc, #180]	@ (8003318 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d00b      	beq.n	800328a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d825      	bhi.n	80032c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d008      	beq.n	8003290 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d11f      	bne.n	80032c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003284:	4b25      	ldr	r3, [pc, #148]	@ (800331c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003286:	613b      	str	r3, [r7, #16]
    break;
 8003288:	e01f      	b.n	80032ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800328a:	4b25      	ldr	r3, [pc, #148]	@ (8003320 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800328c:	613b      	str	r3, [r7, #16]
    break;
 800328e:	e01c      	b.n	80032ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003290:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800329c:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e005      	b.n	80032b8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80032b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003324 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	613b      	str	r3, [r7, #16]
    break;
 80032c2:	e002      	b.n	80032ca <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
    break;
 80032c8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ca:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	3301      	adds	r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	fb03 f202 	mul.w	r2, r3, r2
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032f0:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0e5b      	lsrs	r3, r3, #25
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800330a:	683b      	ldr	r3, [r7, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40021000 	.word	0x40021000
 800331c:	00f42400 	.word	0x00f42400
 8003320:	007a1200 	.word	0x007a1200
 8003324:	08009934 	.word	0x08009934

08003328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003330:	2300      	movs	r3, #0
 8003332:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003334:	2300      	movs	r3, #0
 8003336:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003340:	2b00      	cmp	r3, #0
 8003342:	d040      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003348:	2b80      	cmp	r3, #128	@ 0x80
 800334a:	d02a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800334c:	2b80      	cmp	r3, #128	@ 0x80
 800334e:	d825      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003350:	2b60      	cmp	r3, #96	@ 0x60
 8003352:	d026      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003354:	2b60      	cmp	r3, #96	@ 0x60
 8003356:	d821      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d006      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	d81d      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003364:	2b20      	cmp	r3, #32
 8003366:	d010      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003368:	e018      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800336a:	4b89      	ldr	r3, [pc, #548]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a88      	ldr	r2, [pc, #544]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003374:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003376:	e015      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fb3e 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003388:	e00c      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3320      	adds	r3, #32
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fc29 	bl	8003be8 <RCCEx_PLLSAI2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800339a:	e003      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	74fb      	strb	r3, [r7, #19]
      break;
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80033a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033aa:	4b79      	ldr	r3, [pc, #484]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033b0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b8:	4975      	ldr	r1, [pc, #468]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80033c0:	e001      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d047      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033da:	d030      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e0:	d82a      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033e6:	d02a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ec:	d824      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f2:	d008      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f8:	d81e      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003402:	d010      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003404:	e018      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003406:	4b62      	ldr	r3, [pc, #392]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4a61      	ldr	r2, [pc, #388]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003412:	e015      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f000 faf0 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003424:	e00c      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3320      	adds	r3, #32
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fbdb 	bl	8003be8 <RCCEx_PLLSAI2_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	74fb      	strb	r3, [r7, #19]
      break;
 800343c:	e000      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800343e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003446:	4b52      	ldr	r3, [pc, #328]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003448:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	494e      	ldr	r1, [pc, #312]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800345c:	e001      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 809f 	beq.w	80035ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003474:	4b46      	ldr	r3, [pc, #280]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b41      	ldr	r3, [pc, #260]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4a40      	ldr	r2, [pc, #256]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
 8003496:	4b3e      	ldr	r3, [pc, #248]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b2:	f7fd fabb 	bl	8000a2c <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034b8:	e009      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fd fab7 	bl	8000a2c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d902      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	74fb      	strb	r3, [r7, #19]
        break;
 80034cc:	e005      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ef      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d15b      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01f      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d019      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034fe:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003508:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800350a:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003510:	4a1f      	ldr	r2, [pc, #124]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800351a:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800352a:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d016      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fa76 	bl	8000a2c <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003542:	e00b      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fd fa72 	bl	8000a2c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d902      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	74fb      	strb	r3, [r7, #19]
            break;
 800355a:	e006      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ec      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10c      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003570:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003580:	4903      	ldr	r1, [pc, #12]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003588:	e008      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	74bb      	strb	r3, [r7, #18]
 800358e:	e005      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003590:	40021000 	.word	0x40021000
 8003594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800359c:	7c7b      	ldrb	r3, [r7, #17]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a6:	4a9f      	ldr	r2, [pc, #636]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ba:	4b9a      	ldr	r3, [pc, #616]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f023 0203 	bic.w	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	4996      	ldr	r1, [pc, #600]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035dc:	4b91      	ldr	r3, [pc, #580]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	f023 020c 	bic.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	498e      	ldr	r1, [pc, #568]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035fe:	4b89      	ldr	r3, [pc, #548]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003604:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360c:	4985      	ldr	r1, [pc, #532]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003620:	4b80      	ldr	r3, [pc, #512]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362e:	497d      	ldr	r1, [pc, #500]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003642:	4b78      	ldr	r3, [pc, #480]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003650:	4974      	ldr	r1, [pc, #464]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003664:	4b6f      	ldr	r3, [pc, #444]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003672:	496c      	ldr	r1, [pc, #432]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003686:	4b67      	ldr	r3, [pc, #412]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003694:	4963      	ldr	r1, [pc, #396]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b6:	495b      	ldr	r1, [pc, #364]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ca:	4b56      	ldr	r3, [pc, #344]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	4952      	ldr	r1, [pc, #328]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	494a      	ldr	r1, [pc, #296]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800370e:	4b45      	ldr	r3, [pc, #276]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	4941      	ldr	r1, [pc, #260]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003730:	4b3c      	ldr	r3, [pc, #240]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003732:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	4939      	ldr	r1, [pc, #228]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003752:	4b34      	ldr	r3, [pc, #208]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003760:	4930      	ldr	r1, [pc, #192]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003770:	d106      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003772:	4b2c      	ldr	r3, [pc, #176]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4a2b      	ldr	r2, [pc, #172]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800377c:	60d3      	str	r3, [r2, #12]
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f935 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d04d      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b8:	d108      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80037ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037c0:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80037ca:	e012      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037cc:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037d2:	4a14      	ldr	r2, [pc, #80]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037d8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ea:	490e      	ldr	r1, [pc, #56]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037fa:	d106      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a08      	ldr	r2, [pc, #32]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	e020      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800380e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003812:	d109      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003814:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a02      	ldr	r2, [pc, #8]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800381a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381e:	60d3      	str	r3, [r2, #12]
 8003820:	e014      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800382c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003830:	d10c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3304      	adds	r3, #4
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f8e1 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d028      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003858:	4b68      	ldr	r3, [pc, #416]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003866:	4965      	ldr	r1, [pc, #404]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003876:	d106      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003878:	4b60      	ldr	r3, [pc, #384]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a5f      	ldr	r2, [pc, #380]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800387e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003882:	60d3      	str	r3, [r2, #12]
 8003884:	e011      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800388a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800388e:	d10c      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f8b2 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01e      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b6:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c6:	494d      	ldr	r1, [pc, #308]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 f88d 	bl	8003a00 <RCCEx_PLLSAI1_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ea:	7cfb      	ldrb	r3, [r7, #19]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003900:	4b3e      	ldr	r3, [pc, #248]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003902:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003906:	f023 0204 	bic.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003910:	493a      	ldr	r1, [pc, #232]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800392a:	f023 0218 	bic.w	r2, r3, #24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003934:	4931      	ldr	r1, [pc, #196]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d035      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003948:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2b      	ldr	r2, [pc, #172]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fd f86a 	bl	8000a2c <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395a:	e009      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800395c:	f7fd f866 	bl	8000a2c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d902      	bls.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	74fb      	strb	r3, [r7, #19]
        break;
 800396e:	e005      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003970:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ef      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d113      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003982:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003988:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003992:	491a      	ldr	r1, [pc, #104]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3320      	adds	r3, #32
 800399e:	2102      	movs	r1, #2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f921 	bl	8003be8 <RCCEx_PLLSAI2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d017      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039c0:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d0:	490a      	ldr	r1, [pc, #40]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039e2:	d105      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a04      	ldr	r2, [pc, #16]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80039ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000

08003a00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a0e:	4b72      	ldr	r3, [pc, #456]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0203 	and.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d103      	bne.n	8003a32 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d142      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e03f      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d018      	beq.n	8003a72 <RCCEx_PLLSAI1_Config+0x72>
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d825      	bhi.n	8003a90 <RCCEx_PLLSAI1_Config+0x90>
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d002      	beq.n	8003a4e <RCCEx_PLLSAI1_Config+0x4e>
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d009      	beq.n	8003a60 <RCCEx_PLLSAI1_Config+0x60>
 8003a4c:	e020      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a4e:	4b62      	ldr	r3, [pc, #392]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11d      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5e:	e01a      	b.n	8003a96 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a60:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d116      	bne.n	8003a9a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a70:	e013      	b.n	8003a9a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a72:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a7e:	4b56      	ldr	r3, [pc, #344]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a8e:	e006      	b.n	8003a9e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      break;
 8003a94:	e004      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4949      	ldr	r1, [pc, #292]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 8086 	bne.w	8003bcc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ac0:	4b45      	ldr	r3, [pc, #276]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a44      	ldr	r2, [pc, #272]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003acc:	f7fc ffae 	bl	8000a2c <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad4:	f7fc ffaa 	bl	8000a2c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae6:	e005      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ef      	bne.n	8003ad4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d168      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d113      	bne.n	8003b28 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b00:	4b35      	ldr	r3, [pc, #212]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	4b35      	ldr	r3, [pc, #212]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6892      	ldr	r2, [r2, #8]
 8003b0c:	0211      	lsls	r1, r2, #8
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	06d2      	lsls	r2, r2, #27
 8003b14:	4311      	orrs	r1, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6852      	ldr	r2, [r2, #4]
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	492d      	ldr	r1, [pc, #180]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	610b      	str	r3, [r1, #16]
 8003b26:	e02d      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d115      	bne.n	8003b5a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	0211      	lsls	r1, r2, #8
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6912      	ldr	r2, [r2, #16]
 8003b40:	0852      	lsrs	r2, r2, #1
 8003b42:	3a01      	subs	r2, #1
 8003b44:	0552      	lsls	r2, r2, #21
 8003b46:	4311      	orrs	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6852      	ldr	r2, [r2, #4]
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	430a      	orrs	r2, r1
 8003b52:	4921      	ldr	r1, [pc, #132]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	610b      	str	r3, [r1, #16]
 8003b58:	e014      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	4b21      	ldr	r3, [pc, #132]	@ (8003be4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6892      	ldr	r2, [r2, #8]
 8003b66:	0211      	lsls	r1, r2, #8
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6952      	ldr	r2, [r2, #20]
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0652      	lsls	r2, r2, #25
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6852      	ldr	r2, [r2, #4]
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	4916      	ldr	r1, [pc, #88]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b84:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a13      	ldr	r2, [pc, #76]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fc ff4c 	bl	8000a2c <HAL_GetTick>
 8003b94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b96:	e009      	b.n	8003bac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b98:	f7fc ff48 	bl	8000a2c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d902      	bls.n	8003bac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	73fb      	strb	r3, [r7, #15]
          break;
 8003baa:	e005      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bac:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ef      	beq.n	8003b98 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	4904      	ldr	r1, [pc, #16]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	07ff800f 	.word	0x07ff800f
 8003be0:	ff9f800f 	.word	0xff9f800f
 8003be4:	f9ff800f 	.word	0xf9ff800f

08003be8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf6:	4b72      	ldr	r3, [pc, #456]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00e      	beq.n	8003c20 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c02:	4b6f      	ldr	r3, [pc, #444]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d103      	bne.n	8003c1a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
       ||
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d142      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e03f      	b.n	8003ca0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d018      	beq.n	8003c5a <RCCEx_PLLSAI2_Config+0x72>
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d825      	bhi.n	8003c78 <RCCEx_PLLSAI2_Config+0x90>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d002      	beq.n	8003c36 <RCCEx_PLLSAI2_Config+0x4e>
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d009      	beq.n	8003c48 <RCCEx_PLLSAI2_Config+0x60>
 8003c34:	e020      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c36:	4b62      	ldr	r3, [pc, #392]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11d      	bne.n	8003c7e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c46:	e01a      	b.n	8003c7e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c48:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e013      	b.n	8003c82 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c5a:	4b59      	ldr	r3, [pc, #356]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c66:	4b56      	ldr	r3, [pc, #344]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c76:	e006      	b.n	8003c86 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e004      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c8e:	4b4c      	ldr	r3, [pc, #304]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4949      	ldr	r1, [pc, #292]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 8086 	bne.w	8003db4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ca8:	4b45      	ldr	r3, [pc, #276]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a44      	ldr	r2, [pc, #272]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fc feba 	bl	8000a2c <HAL_GetTick>
 8003cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cba:	e009      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cbc:	f7fc feb6 	bl	8000a2c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d902      	bls.n	8003cd0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cce:	e005      	b.n	8003cdc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ef      	bne.n	8003cbc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d168      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d113      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ce8:	4b35      	ldr	r3, [pc, #212]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	4b35      	ldr	r3, [pc, #212]	@ (8003dc4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	0211      	lsls	r1, r2, #8
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68d2      	ldr	r2, [r2, #12]
 8003cfa:	06d2      	lsls	r2, r2, #27
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	3a01      	subs	r2, #1
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	430a      	orrs	r2, r1
 8003d08:	492d      	ldr	r1, [pc, #180]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	614b      	str	r3, [r1, #20]
 8003d0e:	e02d      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d115      	bne.n	8003d42 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d16:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6892      	ldr	r2, [r2, #8]
 8003d22:	0211      	lsls	r1, r2, #8
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6912      	ldr	r2, [r2, #16]
 8003d28:	0852      	lsrs	r2, r2, #1
 8003d2a:	3a01      	subs	r2, #1
 8003d2c:	0552      	lsls	r2, r2, #21
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6852      	ldr	r2, [r2, #4]
 8003d34:	3a01      	subs	r2, #1
 8003d36:	0112      	lsls	r2, r2, #4
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	4921      	ldr	r1, [pc, #132]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	614b      	str	r3, [r1, #20]
 8003d40:	e014      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d42:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6892      	ldr	r2, [r2, #8]
 8003d4e:	0211      	lsls	r1, r2, #8
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6952      	ldr	r2, [r2, #20]
 8003d54:	0852      	lsrs	r2, r2, #1
 8003d56:	3a01      	subs	r2, #1
 8003d58:	0652      	lsls	r2, r2, #25
 8003d5a:	4311      	orrs	r1, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6852      	ldr	r2, [r2, #4]
 8003d60:	3a01      	subs	r2, #1
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	430a      	orrs	r2, r1
 8003d66:	4916      	ldr	r1, [pc, #88]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d6c:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fc fe58 	bl	8000a2c <HAL_GetTick>
 8003d7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d7e:	e009      	b.n	8003d94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d80:	f7fc fe54 	bl	8000a2c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d902      	bls.n	8003d94 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	73fb      	strb	r3, [r7, #15]
          break;
 8003d92:	e005      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d94:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ef      	beq.n	8003d80 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	4904      	ldr	r1, [pc, #16]	@ (8003dc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	07ff800f 	.word	0x07ff800f
 8003dc8:	ff9f800f 	.word	0xff9f800f
 8003dcc:	f9ff800f 	.word	0xf9ff800f

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e049      	b.n	8003e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc fc92 	bl	8000720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 f8c6 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e047      	b.n	8003f28 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	@ (8003f34 <HAL_TIM_Base_Start+0xb4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_TIM_Base_Start+0x66>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb2:	d018      	beq.n	8003ee6 <HAL_TIM_Base_Start+0x66>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f38 <HAL_TIM_Base_Start+0xb8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIM_Base_Start+0x66>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f3c <HAL_TIM_Base_Start+0xbc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIM_Base_Start+0x66>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <HAL_TIM_Base_Start+0xc0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIM_Base_Start+0x66>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_TIM_Base_Start+0xc4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIM_Base_Start+0x66>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <HAL_TIM_Base_Start+0xc8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d115      	bne.n	8003f12 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b17      	ldr	r3, [pc, #92]	@ (8003f4c <HAL_TIM_Base_Start+0xcc>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b06      	cmp	r3, #6
 8003ef6:	d015      	beq.n	8003f24 <HAL_TIM_Base_Start+0xa4>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efe:	d011      	beq.n	8003f24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	e008      	b.n	8003f24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e000      	b.n	8003f26 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40013400 	.word	0x40013400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	00010007 	.word	0x00010007

08003f50 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <HAL_TIM_Base_Stop+0x38>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a1a      	ldr	r2, [r3, #32]
 8003f6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_TIM_Base_Stop+0x38>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a46      	ldr	r2, [pc, #280]	@ (80040cc <TIM_Base_SetConfig+0x12c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a43      	ldr	r2, [pc, #268]	@ (80040d0 <TIM_Base_SetConfig+0x130>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a42      	ldr	r2, [pc, #264]	@ (80040d4 <TIM_Base_SetConfig+0x134>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a41      	ldr	r2, [pc, #260]	@ (80040d8 <TIM_Base_SetConfig+0x138>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a40      	ldr	r2, [pc, #256]	@ (80040dc <TIM_Base_SetConfig+0x13c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a35      	ldr	r2, [pc, #212]	@ (80040cc <TIM_Base_SetConfig+0x12c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01f      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004000:	d01b      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a32      	ldr	r2, [pc, #200]	@ (80040d0 <TIM_Base_SetConfig+0x130>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d017      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a31      	ldr	r2, [pc, #196]	@ (80040d4 <TIM_Base_SetConfig+0x134>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a30      	ldr	r2, [pc, #192]	@ (80040d8 <TIM_Base_SetConfig+0x138>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00f      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2f      	ldr	r2, [pc, #188]	@ (80040dc <TIM_Base_SetConfig+0x13c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2e      	ldr	r2, [pc, #184]	@ (80040e0 <TIM_Base_SetConfig+0x140>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2d      	ldr	r2, [pc, #180]	@ (80040e4 <TIM_Base_SetConfig+0x144>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2c      	ldr	r2, [pc, #176]	@ (80040e8 <TIM_Base_SetConfig+0x148>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <TIM_Base_SetConfig+0x12c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00f      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <TIM_Base_SetConfig+0x13c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <TIM_Base_SetConfig+0x140>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a16      	ldr	r2, [pc, #88]	@ (80040e4 <TIM_Base_SetConfig+0x144>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <TIM_Base_SetConfig+0x148>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]
  }
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40013400 	.word	0x40013400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004100:	2302      	movs	r3, #2
 8004102:	e068      	b.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2e      	ldr	r2, [pc, #184]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800413e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1e      	ldr	r2, [pc, #120]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01d      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004176:	d018      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1a      	ldr	r2, [pc, #104]	@ (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a14      	ldr	r2, [pc, #80]	@ (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10c      	bne.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40014000 	.word	0x40014000

080041fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041fc:	b084      	sub	sp, #16
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	f107 001c 	add.w	r0, r7, #28
 800420a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f001 fa26 	bl	800566c <USB_CoreReset>
 8004220:	4603      	mov	r3, r0
 8004222:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004224:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	639a      	str	r2, [r3, #56]	@ 0x38
 8004238:	e005      	b.n	8004246 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004252:	b004      	add	sp, #16
 8004254:	4770      	bx	lr
	...

08004258 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d165      	bne.n	8004338 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a3e      	ldr	r2, [pc, #248]	@ (8004368 <USB_SetTurnaroundTime+0x110>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0x2a>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a3d      	ldr	r2, [pc, #244]	@ (800436c <USB_SetTurnaroundTime+0x114>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d202      	bcs.n	8004282 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800427c:	230f      	movs	r3, #15
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e05c      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a39      	ldr	r2, [pc, #228]	@ (800436c <USB_SetTurnaroundTime+0x114>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d306      	bcc.n	8004298 <USB_SetTurnaroundTime+0x40>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a38      	ldr	r2, [pc, #224]	@ (8004370 <USB_SetTurnaroundTime+0x118>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d202      	bcs.n	8004298 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004292:	230e      	movs	r3, #14
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e051      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a35      	ldr	r2, [pc, #212]	@ (8004370 <USB_SetTurnaroundTime+0x118>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d306      	bcc.n	80042ae <USB_SetTurnaroundTime+0x56>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a34      	ldr	r2, [pc, #208]	@ (8004374 <USB_SetTurnaroundTime+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d202      	bcs.n	80042ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042a8:	230d      	movs	r3, #13
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e046      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <USB_SetTurnaroundTime+0x11c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d306      	bcc.n	80042c4 <USB_SetTurnaroundTime+0x6c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004378 <USB_SetTurnaroundTime+0x120>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042be:	230c      	movs	r3, #12
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e03b      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004378 <USB_SetTurnaroundTime+0x120>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0x82>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a2b      	ldr	r2, [pc, #172]	@ (800437c <USB_SetTurnaroundTime+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d802      	bhi.n	80042da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042d4:	230b      	movs	r3, #11
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e030      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a27      	ldr	r2, [pc, #156]	@ (800437c <USB_SetTurnaroundTime+0x124>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d906      	bls.n	80042f0 <USB_SetTurnaroundTime+0x98>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a26      	ldr	r2, [pc, #152]	@ (8004380 <USB_SetTurnaroundTime+0x128>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d802      	bhi.n	80042f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042ea:	230a      	movs	r3, #10
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e025      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a23      	ldr	r2, [pc, #140]	@ (8004380 <USB_SetTurnaroundTime+0x128>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <USB_SetTurnaroundTime+0xae>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a22      	ldr	r2, [pc, #136]	@ (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d202      	bcs.n	8004306 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004300:	2309      	movs	r3, #9
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e01a      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <USB_SetTurnaroundTime+0x12c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d306      	bcc.n	800431c <USB_SetTurnaroundTime+0xc4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a1d      	ldr	r2, [pc, #116]	@ (8004388 <USB_SetTurnaroundTime+0x130>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004316:	2308      	movs	r3, #8
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e00f      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a1a      	ldr	r2, [pc, #104]	@ (8004388 <USB_SetTurnaroundTime+0x130>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d906      	bls.n	8004332 <USB_SetTurnaroundTime+0xda>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a19      	ldr	r2, [pc, #100]	@ (800438c <USB_SetTurnaroundTime+0x134>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d202      	bcs.n	8004332 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800432c:	2307      	movs	r3, #7
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e004      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004332:	2306      	movs	r3, #6
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e001      	b.n	800433c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004338:	2309      	movs	r3, #9
 800433a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	029b      	lsls	r3, r3, #10
 8004350:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	00d8acbf 	.word	0x00d8acbf
 800436c:	00e4e1c0 	.word	0x00e4e1c0
 8004370:	00f42400 	.word	0x00f42400
 8004374:	01067380 	.word	0x01067380
 8004378:	011a499f 	.word	0x011a499f
 800437c:	01312cff 	.word	0x01312cff
 8004380:	014ca43f 	.word	0x014ca43f
 8004384:	016e3600 	.word	0x016e3600
 8004388:	01a6ab1f 	.word	0x01a6ab1f
 800438c:	01e84800 	.word	0x01e84800

08004390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d115      	bne.n	8004422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004402:	200a      	movs	r0, #10
 8004404:	f7fc fb1e 	bl	8000a44 <HAL_Delay>
      ms += 10U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	330a      	adds	r3, #10
 800440c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f001 f8b3 	bl	800557a <USB_GetMode>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d01e      	beq.n	8004458 <USB_SetCurrentMode+0x84>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2bc7      	cmp	r3, #199	@ 0xc7
 800441e:	d9f0      	bls.n	8004402 <USB_SetCurrentMode+0x2e>
 8004420:	e01a      	b.n	8004458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d115      	bne.n	8004454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004434:	200a      	movs	r0, #10
 8004436:	f7fc fb05 	bl	8000a44 <HAL_Delay>
      ms += 10U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	330a      	adds	r3, #10
 800443e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f001 f89a 	bl	800557a <USB_GetMode>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <USB_SetCurrentMode+0x84>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004450:	d9f0      	bls.n	8004434 <USB_SetCurrentMode+0x60>
 8004452:	e001      	b.n	8004458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e005      	b.n	8004464 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2bc8      	cmp	r3, #200	@ 0xc8
 800445c:	d101      	bne.n	8004462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800446c:	b084      	sub	sp, #16
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800447a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	e009      	b.n	80044a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3340      	adds	r3, #64	@ 0x40
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	2200      	movs	r2, #0
 8004498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3301      	adds	r3, #1
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b0e      	cmp	r3, #14
 80044a4:	d9f2      	bls.n	800448c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11c      	bne.n	80044e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e005      	b.n	80044f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044fa:	461a      	mov	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004500:	2103      	movs	r1, #3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f95a 	bl	80047bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004508:	2110      	movs	r1, #16
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8f6 	bl	80046fc <USB_FlushTxFifo>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f920 	bl	8004760 <USB_FlushRxFifo>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004530:	461a      	mov	r2, r3
 8004532:	2300      	movs	r3, #0
 8004534:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453c:	461a      	mov	r2, r3
 800453e:	2300      	movs	r3, #0
 8004540:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004548:	461a      	mov	r2, r3
 800454a:	2300      	movs	r3, #0
 800454c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e043      	b.n	80045dc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800456a:	d118      	bne.n	800459e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800457e:	461a      	mov	r2, r3
 8004580:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e013      	b.n	80045b0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004594:	461a      	mov	r2, r3
 8004596:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	e008      	b.n	80045b0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045aa:	461a      	mov	r2, r3
 80045ac:	2300      	movs	r3, #0
 80045ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ce:	461a      	mov	r2, r3
 80045d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3301      	adds	r3, #1
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045e0:	461a      	mov	r2, r3
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d3b5      	bcc.n	8004554 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e043      	b.n	8004676 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004604:	d118      	bne.n	8004638 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e013      	b.n	800464a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462e:	461a      	mov	r2, r3
 8004630:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e008      	b.n	800464a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004644:	461a      	mov	r2, r3
 8004646:	2300      	movs	r3, #0
 8004648:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	2300      	movs	r3, #0
 800465a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800466e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3301      	adds	r3, #1
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800467a:	461a      	mov	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4293      	cmp	r3, r2
 8004680:	d3b5      	bcc.n	80045ee <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004694:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80046a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f043 0210 	orr.w	r2, r3, #16
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <USB_DevInit+0x28c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f043 0208 	orr.w	r2, r3, #8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr
 80046f8:	803c3800 	.word	0x803c3800

080046fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3301      	adds	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004716:	d901      	bls.n	800471c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e01b      	b.n	8004754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	daf2      	bge.n	800470a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	019b      	lsls	r3, r3, #6
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004740:	d901      	bls.n	8004746 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e006      	b.n	8004754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b20      	cmp	r3, #32
 8004750:	d0f0      	beq.n	8004734 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004778:	d901      	bls.n	800477e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e018      	b.n	80047b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	daf2      	bge.n	800476c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2210      	movs	r2, #16
 800478e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800479c:	d901      	bls.n	80047a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e006      	b.n	80047b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d0f0      	beq.n	8004790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0306 	and.w	r3, r3, #6
 8004806:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d002      	beq.n	8004814 <USB_GetDevSpeed+0x26>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d102      	bne.n	800481a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004814:	2302      	movs	r3, #2
 8004816:	75fb      	strb	r3, [r7, #23]
 8004818:	e001      	b.n	800481e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800481a:	230f      	movs	r3, #15
 800481c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d13a      	bne.n	80048be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004866:	4313      	orrs	r3, r2
 8004868:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d155      	bne.n	800492c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	791b      	ldrb	r3, [r3, #4]
 800489a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800489c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	059b      	lsls	r3, r3, #22
 80048a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048a4:	4313      	orrs	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e036      	b.n	800492c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11a      	bne.n	800492c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	791b      	ldrb	r3, [r3, #4]
 8004910:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004912:	430b      	orrs	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d161      	bne.n	8004a1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800496a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800496e:	d11f      	bne.n	80049b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	440a      	add	r2, r1
 8004986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800498a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800498e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049d0:	4013      	ands	r3, r2
 80049d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049f4:	4013      	ands	r3, r2
 80049f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a12:	4619      	mov	r1, r3
 8004a14:	4b35      	ldr	r3, [pc, #212]	@ (8004aec <USB_DeactivateEndpoint+0x1b0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
 8004a1a:	e060      	b.n	8004ade <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a32:	d11f      	bne.n	8004a74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a94:	4013      	ands	r3, r2
 8004a96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	0159      	lsls	r1, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <USB_DeactivateEndpoint+0x1b4>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	ec337800 	.word	0xec337800
 8004af0:	eff37800 	.word	0xeff37800

08004af4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	f040 812d 	bne.w	8004d6c <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d132      	bne.n	8004b80 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b78:	0cdb      	lsrs	r3, r3, #19
 8004b7a:	04db      	lsls	r3, r3, #19
 8004b7c:	6113      	str	r3, [r2, #16]
 8004b7e:	e097      	b.n	8004cb0 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b9a:	0cdb      	lsrs	r3, r3, #19
 8004b9c:	04db      	lsls	r3, r3, #19
 8004b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bbe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bc2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11a      	bne.n	8004c00 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d903      	bls.n	8004bde <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bfc:	6113      	str	r3, [r2, #16]
 8004bfe:	e044      	b.n	8004c8a <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	04d9      	lsls	r1, r3, #19
 8004c28:	4b8f      	ldr	r3, [pc, #572]	@ (8004e68 <USB_EPStartXfer+0x374>)
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	6939      	ldr	r1, [r7, #16]
 8004c2e:	0148      	lsls	r0, r1, #5
 8004c30:	6979      	ldr	r1, [r7, #20]
 8004c32:	4401      	add	r1, r0
 8004c34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	791b      	ldrb	r3, [r3, #4]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d122      	bne.n	8004c8a <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004c62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	075b      	lsls	r3, r3, #29
 8004c76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004c7a:	6939      	ldr	r1, [r7, #16]
 8004c7c:	0148      	lsls	r0, r1, #5
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	4401      	add	r1, r0
 8004c82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c86:	4313      	orrs	r3, r2
 8004c88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	6939      	ldr	r1, [r7, #16]
 8004ca2:	0148      	lsls	r0, r1, #5
 8004ca4:	6979      	ldr	r1, [r7, #20]
 8004ca6:	4401      	add	r1, r0
 8004ca8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004cac:	4313      	orrs	r3, r2
 8004cae:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004cce:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	791b      	ldrb	r3, [r3, #4]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d015      	beq.n	8004d04 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 813a 	beq.w	8004f56 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	634b      	str	r3, [r1, #52]	@ 0x34
 8004d02:	e128      	b.n	8004f56 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d110      	bne.n	8004d36 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e00f      	b.n	8004d56 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68d9      	ldr	r1, [r3, #12]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f9a7 	bl	80050b8 <USB_WritePacket>
 8004d6a:	e0f4      	b.n	8004f56 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d86:	0cdb      	lsrs	r3, r3, #19
 8004d88:	04db      	lsls	r3, r3, #19
 8004d8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004da6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004daa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004dae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d12f      	bne.n	8004e16 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de4:	6939      	ldr	r1, [r7, #16]
 8004de6:	0148      	lsls	r0, r1, #5
 8004de8:	6979      	ldr	r1, [r7, #20]
 8004dea:	4401      	add	r1, r0
 8004dec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004df0:	4313      	orrs	r3, r2
 8004df2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e12:	6113      	str	r3, [r2, #16]
 8004e14:	e062      	b.n	8004edc <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d126      	bne.n	8004e6c <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e34:	6939      	ldr	r1, [r7, #16]
 8004e36:	0148      	lsls	r0, r1, #5
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	4401      	add	r1, r0
 8004e3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e40:	4313      	orrs	r3, r2
 8004e42:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e62:	6113      	str	r3, [r2, #16]
 8004e64:	e03a      	b.n	8004edc <USB_EPStartXfer+0x3e8>
 8004e66:	bf00      	nop
 8004e68:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4413      	add	r3, r2
 8004e76:	1e5a      	subs	r2, r3, #1
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	89fa      	ldrh	r2, [r7, #14]
 8004e88:	fb03 f202 	mul.w	r2, r3, r2
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	89fb      	ldrh	r3, [r7, #14]
 8004ea0:	04d9      	lsls	r1, r3, #19
 8004ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f60 <USB_EPStartXfer+0x46c>)
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	0148      	lsls	r0, r1, #5
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	4401      	add	r1, r0
 8004eae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ecc:	6939      	ldr	r1, [r7, #16]
 8004ece:	0148      	lsls	r0, r1, #5
 8004ed0:	6979      	ldr	r1, [r7, #20]
 8004ed2:	4401      	add	r1, r0
 8004ed4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	791b      	ldrb	r3, [r3, #4]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d128      	bne.n	8004f36 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d110      	bne.n	8004f16 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	e00f      	b.n	8004f36 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f34:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	1ff80000 	.word	0x1ff80000

08004f64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d14a      	bne.n	8005018 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f9a:	f040 8086 	bne.w	80050aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fc0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fe4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d902      	bls.n	8004ffc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffa:	e056      	b.n	80050aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005014:	d0e7      	beq.n	8004fe6 <USB_EPStopXfer+0x82>
 8005016:	e048      	b.n	80050aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800502c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005030:	d13b      	bne.n	80050aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005050:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005054:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005074:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005078:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005086:	4293      	cmp	r3, r2
 8005088:	d902      	bls.n	8005090 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
          break;
 800508e:	e00c      	b.n	80050aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050a8:	d0e7      	beq.n	800507a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	@ 0x24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	460b      	mov	r3, r1
 80050c8:	71fb      	strb	r3, [r7, #7]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80050d6:	88bb      	ldrh	r3, [r7, #4]
 80050d8:	3303      	adds	r3, #3
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e018      	b.n	8005116 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	031a      	lsls	r2, r3, #12
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f0:	461a      	mov	r2, r3
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	3301      	adds	r3, #1
 80050fc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3301      	adds	r3, #1
 8005102:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	3301      	adds	r3, #1
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	429a      	cmp	r2, r3
 800511c:	d3e2      	bcc.n	80050e4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3724      	adds	r7, #36	@ 0x24
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800512c:	b480      	push	{r7}
 800512e:	b08b      	sub	sp, #44	@ 0x2c
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	b29b      	uxth	r3, r3
 8005148:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	e014      	b.n	8005182 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	601a      	str	r2, [r3, #0]
    pDest++;
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	3301      	adds	r3, #1
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	3301      	adds	r3, #1
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	3301      	adds	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	3301      	adds	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	3301      	adds	r3, #1
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	429a      	cmp	r2, r3
 8005188:	d3e6      	bcc.n	8005158 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800518a:	8bfb      	ldrh	r3, [r7, #30]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01e      	beq.n	80051ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800519a:	461a      	mov	r2, r3
 800519c:	f107 0310 	add.w	r3, r7, #16
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	701a      	strb	r2, [r3, #0]
      i++;
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	3301      	adds	r3, #1
 80051ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	3301      	adds	r3, #1
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051c2:	8bfb      	ldrh	r3, [r7, #30]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051c8:	8bfb      	ldrh	r3, [r7, #30]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ea      	bne.n	80051a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	372c      	adds	r7, #44	@ 0x2c
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d12c      	bne.n	8005252 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	db12      	blt.n	8005230 <USB_EPSetStall+0x54>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00f      	beq.n	8005230 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800522a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800522e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800524a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e02b      	b.n	80052aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	db12      	blt.n	800528a <USB_EPSetStall+0xae>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00f      	beq.n	800528a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005284:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005288:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d128      	bne.n	8005326 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	791b      	ldrb	r3, [r3, #4]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d003      	beq.n	8005304 <USB_EPClearStall+0x4c>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	791b      	ldrb	r3, [r3, #4]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d138      	bne.n	8005376 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e027      	b.n	8005376 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005340:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005344:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	791b      	ldrb	r3, [r3, #4]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d003      	beq.n	8005356 <USB_EPClearStall+0x9e>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	791b      	ldrb	r3, [r3, #4]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d10f      	bne.n	8005376 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	440a      	add	r2, r1
 800536c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005374:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80053a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053fe:	f023 0302 	bic.w	r3, r3, #2
 8005402:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800542c:	f023 0303 	bic.w	r3, r3, #3
 8005430:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005440:	f043 0302 	orr.w	r3, r3, #2
 8005444:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800546c:	68fb      	ldr	r3, [r7, #12]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	4013      	ands	r3, r2
 800549c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	0c1b      	lsrs	r3, r3, #16
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	4013      	ands	r3, r2
 80054d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	b29b      	uxth	r3, r3
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005510:	68bb      	ldr	r3, [r7, #8]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005540:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	fa22 f303 	lsr.w	r3, r2, r3
 800554e:	01db      	lsls	r3, r3, #7
 8005550:	b2db      	uxtb	r3, r3
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800556c:	68bb      	ldr	r3, [r7, #8]
}
 800556e:	4618      	mov	r0, r3
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0301 	and.w	r3, r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80055b4:	f023 0307 	bic.w	r3, r3, #7
 80055b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	333c      	adds	r3, #60	@ 0x3c
 80055ee:	3304      	adds	r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <USB_EP0_OutStart+0x8c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d90a      	bls.n	8005612 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800560c:	d101      	bne.n	8005612 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e024      	b.n	800565c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005618:	461a      	mov	r2, r3
 800561a:	2300      	movs	r3, #0
 800561c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800562c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005640:	f043 0318 	orr.w	r3, r3, #24
 8005644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005654:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005658:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	4f54300a 	.word	0x4f54300a

0800566c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005684:	d901      	bls.n	800568a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e01b      	b.n	80056c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	daf2      	bge.n	8005678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056ae:	d901      	bls.n	80056b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d0f0      	beq.n	80056a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80056e0:	f002 ff28 	bl	8008534 <USBD_static_malloc>
 80056e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	32b0      	adds	r2, #176	@ 0xb0
 80056f6:	2100      	movs	r1, #0
 80056f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056fc:	2302      	movs	r3, #2
 80056fe:	e0d4      	b.n	80058aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005700:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005704:	2100      	movs	r1, #0
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f003 f95c 	bl	80089c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	32b0      	adds	r2, #176	@ 0xb0
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32b0      	adds	r2, #176	@ 0xb0
 8005726:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7c1b      	ldrb	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d138      	bne.n	80057aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005738:	4b5e      	ldr	r3, [pc, #376]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 800573a:	7819      	ldrb	r1, [r3, #0]
 800573c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005740:	2202      	movs	r2, #2
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f002 fce2 	bl	800810c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005748:	4b5a      	ldr	r3, [pc, #360]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3324      	adds	r3, #36	@ 0x24
 800575e:	2201      	movs	r2, #1
 8005760:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005762:	4b55      	ldr	r3, [pc, #340]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005764:	7819      	ldrb	r1, [r3, #0]
 8005766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800576a:	2202      	movs	r2, #2
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 fccd 	bl	800810c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005772:	4b51      	ldr	r3, [pc, #324]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800578a:	2201      	movs	r2, #1
 800578c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800578e:	4b4b      	ldr	r3, [pc, #300]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f003 020f 	and.w	r2, r3, #15
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	3326      	adds	r3, #38	@ 0x26
 80057a4:	2210      	movs	r2, #16
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e035      	b.n	8005816 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057aa:	4b42      	ldr	r3, [pc, #264]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 80057ac:	7819      	ldrb	r1, [r3, #0]
 80057ae:	2340      	movs	r3, #64	@ 0x40
 80057b0:	2202      	movs	r2, #2
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f002 fcaa 	bl	800810c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057b8:	4b3e      	ldr	r3, [pc, #248]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3324      	adds	r3, #36	@ 0x24
 80057ce:	2201      	movs	r2, #1
 80057d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057d2:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 80057d4:	7819      	ldrb	r1, [r3, #0]
 80057d6:	2340      	movs	r3, #64	@ 0x40
 80057d8:	2202      	movs	r2, #2
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f002 fc96 	bl	800810c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057e0:	4b35      	ldr	r3, [pc, #212]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057f8:	2201      	movs	r2, #1
 80057fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057fc:	4b2f      	ldr	r3, [pc, #188]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	3326      	adds	r3, #38	@ 0x26
 8005812:	2210      	movs	r2, #16
 8005814:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005816:	4b29      	ldr	r3, [pc, #164]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 8005818:	7819      	ldrb	r1, [r3, #0]
 800581a:	2308      	movs	r3, #8
 800581c:	2203      	movs	r2, #3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f002 fc74 	bl	800810c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005824:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	3324      	adds	r3, #36	@ 0x24
 800583a:	2201      	movs	r2, #1
 800583c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	33b0      	adds	r3, #176	@ 0xb0
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005874:	2302      	movs	r3, #2
 8005876:	e018      	b.n	80058aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7c1b      	ldrb	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005880:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005882:	7819      	ldrb	r1, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800588a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f002 fdb6 	bl	8008400 <USBD_LL_PrepareReceive>
 8005894:	e008      	b.n	80058a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005896:	4b08      	ldr	r3, [pc, #32]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005898:	7819      	ldrb	r1, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058a0:	2340      	movs	r3, #64	@ 0x40
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f002 fdac 	bl	8008400 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000093 	.word	0x20000093
 80058b8:	20000094 	.word	0x20000094
 80058bc:	20000095 	.word	0x20000095

080058c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058cc:	4b3a      	ldr	r3, [pc, #232]	@ (80059b8 <USBD_CDC_DeInit+0xf8>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f002 fc58 	bl	8008188 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058d8:	4b37      	ldr	r3, [pc, #220]	@ (80059b8 <USBD_CDC_DeInit+0xf8>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	3324      	adds	r3, #36	@ 0x24
 80058ee:	2200      	movs	r2, #0
 80058f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058f2:	4b32      	ldr	r3, [pc, #200]	@ (80059bc <USBD_CDC_DeInit+0xfc>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 fc45 	bl	8008188 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058fe:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <USBD_CDC_DeInit+0xfc>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005916:	2200      	movs	r2, #0
 8005918:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800591a:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <USBD_CDC_DeInit+0x100>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f002 fc31 	bl	8008188 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005926:	4b26      	ldr	r3, [pc, #152]	@ (80059c0 <USBD_CDC_DeInit+0x100>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3324      	adds	r3, #36	@ 0x24
 800593c:	2200      	movs	r2, #0
 800593e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005940:	4b1f      	ldr	r3, [pc, #124]	@ (80059c0 <USBD_CDC_DeInit+0x100>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3326      	adds	r3, #38	@ 0x26
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	32b0      	adds	r2, #176	@ 0xb0
 8005964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01f      	beq.n	80059ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	33b0      	adds	r3, #176	@ 0xb0
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	32b0      	adds	r2, #176	@ 0xb0
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	4618      	mov	r0, r3
 8005990:	f002 fdde 	bl	8008550 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	32b0      	adds	r2, #176	@ 0xb0
 800599e:	2100      	movs	r1, #0
 80059a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000093 	.word	0x20000093
 80059bc:	20000094 	.word	0x20000094
 80059c0:	20000095 	.word	0x20000095

080059c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	32b0      	adds	r2, #176	@ 0xb0
 80059d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e0bf      	b.n	8005b74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d050      	beq.n	8005aa2 <USBD_CDC_Setup+0xde>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	f040 80af 	bne.w	8005b64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	88db      	ldrh	r3, [r3, #6]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03a      	beq.n	8005a84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da1b      	bge.n	8005a50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	33b0      	adds	r3, #176	@ 0xb0
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	88d2      	ldrh	r2, [r2, #6]
 8005a34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	2b07      	cmp	r3, #7
 8005a3c:	bf28      	it	cs
 8005a3e:	2307      	movcs	r3, #7
 8005a40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	89fa      	ldrh	r2, [r7, #14]
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fdbd 	bl	80075c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a4e:	e090      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	785a      	ldrb	r2, [r3, #1]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	88db      	ldrh	r3, [r3, #6]
 8005a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a60:	d803      	bhi.n	8005a6a <USBD_CDC_Setup+0xa6>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	88db      	ldrh	r3, [r3, #6]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	e000      	b.n	8005a6c <USBD_CDC_Setup+0xa8>
 8005a6a:	2240      	movs	r2, #64	@ 0x40
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fdcf 	bl	8007620 <USBD_CtlPrepareRx>
      break;
 8005a82:	e076      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	33b0      	adds	r3, #176	@ 0xb0
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	7850      	ldrb	r0, [r2, #1]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	4798      	blx	r3
      break;
 8005aa0:	e067      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b0b      	cmp	r3, #11
 8005aa8:	d851      	bhi.n	8005b4e <USBD_CDC_Setup+0x18a>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <USBD_CDC_Setup+0xec>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005b5d 	.word	0x08005b5d
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b0b 	.word	0x08005b0b
 8005adc:	08005b35 	.word	0x08005b35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d107      	bne.n	8005afc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005aec:	f107 030a 	add.w	r3, r7, #10
 8005af0:	2202      	movs	r2, #2
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fd67 	bl	80075c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005afa:	e032      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fce5 	bl	80074ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	75fb      	strb	r3, [r7, #23]
          break;
 8005b08:	e02b      	b.n	8005b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d107      	bne.n	8005b26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b16:	f107 030d 	add.w	r3, r7, #13
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fd52 	bl	80075c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b24:	e01d      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fcd0 	bl	80074ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	75fb      	strb	r3, [r7, #23]
          break;
 8005b32:	e016      	b.n	8005b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d00f      	beq.n	8005b60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fcc3 	bl	80074ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b4c:	e008      	b.n	8005b60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fcbc 	bl	80074ce <USBD_CtlError>
          ret = USBD_FAIL;
 8005b56:	2303      	movs	r3, #3
 8005b58:	75fb      	strb	r3, [r7, #23]
          break;
 8005b5a:	e002      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
          break;
 8005b5c:	bf00      	nop
 8005b5e:	e008      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
          break;
 8005b60:	bf00      	nop
      }
      break;
 8005b62:	e006      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fcb1 	bl	80074ce <USBD_CtlError>
      ret = USBD_FAIL;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	32b0      	adds	r2, #176	@ 0xb0
 8005b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e065      	b.n	8005c72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	32b0      	adds	r2, #176	@ 0xb0
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3318      	adds	r3, #24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d02f      	beq.n	8005c30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	3318      	adds	r3, #24
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	f003 010f 	and.w	r1, r3, #15
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	440b      	add	r3, r1
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4403      	add	r3, r0
 8005bf8:	331c      	adds	r3, #28
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d112      	bne.n	8005c30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	f003 020f 	and.w	r2, r3, #15
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c22:	78f9      	ldrb	r1, [r7, #3]
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 fbb1 	bl	8008390 <USBD_LL_Transmit>
 8005c2e:	e01f      	b.n	8005c70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	33b0      	adds	r3, #176	@ 0xb0
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d010      	beq.n	8005c70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	33b0      	adds	r3, #176	@ 0xb0
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	32b0      	adds	r2, #176	@ 0xb0
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	32b0      	adds	r2, #176	@ 0xb0
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e01a      	b.n	8005ce2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f002 fbdd 	bl	8008470 <USBD_LL_GetRxDataSize>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	33b0      	adds	r3, #176	@ 0xb0
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	32b0      	adds	r2, #176	@ 0xb0
 8005cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e024      	b.n	8005d56 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	33b0      	adds	r3, #176	@ 0xb0
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d019      	beq.n	8005d54 <USBD_CDC_EP0_RxReady+0x6a>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d26:	2bff      	cmp	r3, #255	@ 0xff
 8005d28:	d014      	beq.n	8005d54 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	33b0      	adds	r3, #176	@ 0xb0
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	22ff      	movs	r2, #255	@ 0xff
 8005d50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d68:	2182      	movs	r1, #130	@ 0x82
 8005d6a:	4818      	ldr	r0, [pc, #96]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d6c:	f000 fd4f 	bl	800680e <USBD_GetEpDesc>
 8005d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d72:	2101      	movs	r1, #1
 8005d74:	4815      	ldr	r0, [pc, #84]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d76:	f000 fd4a 	bl	800680e <USBD_GetEpDesc>
 8005d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d7c:	2181      	movs	r1, #129	@ 0x81
 8005d7e:	4813      	ldr	r0, [pc, #76]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d80:	f000 fd45 	bl	800680e <USBD_GetEpDesc>
 8005d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da0:	711a      	strb	r2, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db4:	711a      	strb	r2, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2243      	movs	r2, #67	@ 0x43
 8005dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005dc0:	4b02      	ldr	r3, [pc, #8]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000050 	.word	0x20000050

08005dd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dd8:	2182      	movs	r1, #130	@ 0x82
 8005dda:	4818      	ldr	r0, [pc, #96]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ddc:	f000 fd17 	bl	800680e <USBD_GetEpDesc>
 8005de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005de2:	2101      	movs	r1, #1
 8005de4:	4815      	ldr	r0, [pc, #84]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005de6:	f000 fd12 	bl	800680e <USBD_GetEpDesc>
 8005dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dec:	2181      	movs	r1, #129	@ 0x81
 8005dee:	4813      	ldr	r0, [pc, #76]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005df0:	f000 fd0d 	bl	800680e <USBD_GetEpDesc>
 8005df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	711a      	strb	r2, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f042 0202 	orr.w	r2, r2, #2
 8005e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d006      	beq.n	8005e2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	711a      	strb	r2, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f042 0202 	orr.w	r2, r2, #2
 8005e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2243      	movs	r2, #67	@ 0x43
 8005e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e30:	4b02      	ldr	r3, [pc, #8]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000050 	.word	0x20000050

08005e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e48:	2182      	movs	r1, #130	@ 0x82
 8005e4a:	4818      	ldr	r0, [pc, #96]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e4c:	f000 fcdf 	bl	800680e <USBD_GetEpDesc>
 8005e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e52:	2101      	movs	r1, #1
 8005e54:	4815      	ldr	r0, [pc, #84]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e56:	f000 fcda 	bl	800680e <USBD_GetEpDesc>
 8005e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e5c:	2181      	movs	r1, #129	@ 0x81
 8005e5e:	4813      	ldr	r0, [pc, #76]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e60:	f000 fcd5 	bl	800680e <USBD_GetEpDesc>
 8005e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2210      	movs	r2, #16
 8005e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e80:	711a      	strb	r2, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e94:	711a      	strb	r2, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2243      	movs	r2, #67	@ 0x43
 8005e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000050 	.word	0x20000050

08005eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	220a      	movs	r2, #10
 8005ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	2000000c 	.word	0x2000000c

08005ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e009      	b.n	8005ef8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	33b0      	adds	r3, #176	@ 0xb0
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	32b0      	adds	r2, #176	@ 0xb0
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e008      	b.n	8005f3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	32b0      	adds	r2, #176	@ 0xb0
 8005f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e004      	b.n	8005f76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32b0      	adds	r2, #176	@ 0xb0
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e025      	b.n	8005ff6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11f      	bne.n	8005ff4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <USBD_CDC_TransmitPacket+0x7c>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4403      	add	r3, r0
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005fda:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <USBD_CDC_TransmitPacket+0x7c>)
 8005fdc:	7819      	ldrb	r1, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f002 f9d0 	bl	8008390 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000093 	.word	0x20000093

08006004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	32b0      	adds	r2, #176	@ 0xb0
 8006016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	32b0      	adds	r2, #176	@ 0xb0
 8006026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800602e:	2303      	movs	r3, #3
 8006030:	e018      	b.n	8006064 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7c1b      	ldrb	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800603a:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <USBD_CDC_ReceivePacket+0x68>)
 800603c:	7819      	ldrb	r1, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f002 f9d9 	bl	8008400 <USBD_LL_PrepareReceive>
 800604e:	e008      	b.n	8006062 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <USBD_CDC_ReceivePacket+0x68>)
 8006052:	7819      	ldrb	r1, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800605a:	2340      	movs	r3, #64	@ 0x40
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f002 f9cf 	bl	8008400 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000094 	.word	0x20000094

08006070 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	e01f      	b.n	80060c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	79fa      	ldrb	r2, [r7, #7]
 80060ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 ffa7 	bl	8008010 <USBD_LL_Init>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e025      	b.n	8006134 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	32ae      	adds	r2, #174	@ 0xae
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00f      	beq.n	8006124 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	32ae      	adds	r2, #174	@ 0xae
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	f107 020e 	add.w	r2, r7, #14
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	4602      	mov	r2, r0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 ffaf 	bl	80080a8 <USBD_LL_Start>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	4611      	mov	r1, r2
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	4611      	mov	r1, r2
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f936 	bl	800745a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2b02      	cmp	r3, #2
 8006210:	d01a      	beq.n	8006248 <USBD_LL_SetupStage+0x72>
 8006212:	2b02      	cmp	r3, #2
 8006214:	d822      	bhi.n	800625c <USBD_LL_SetupStage+0x86>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <USBD_LL_SetupStage+0x4a>
 800621a:	2b01      	cmp	r3, #1
 800621c:	d00a      	beq.n	8006234 <USBD_LL_SetupStage+0x5e>
 800621e:	e01d      	b.n	800625c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fb63 	bl	80068f4 <USBD_StdDevReq>
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
      break;
 8006232:	e020      	b.n	8006276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fbcb 	bl	80069d8 <USBD_StdItfReq>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
      break;
 8006246:	e016      	b.n	8006276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fc2d 	bl	8006ab0 <USBD_StdEPReq>
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
      break;
 800625a:	e00c      	b.n	8006276 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006262:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 ffc2 	bl	80081f4 <USBD_LL_StallEP>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	bf00      	nop
  }

  return ret;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	460b      	mov	r3, r1
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d16e      	bne.n	8006376 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800629e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	f040 8098 	bne.w	80063dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d913      	bls.n	80062e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	1ad2      	subs	r2, r2, r3
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	bf28      	it	cs
 80062d2:	4613      	movcs	r3, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f001 f9be 	bl	800765a <USBD_CtlContinueRx>
 80062de:	e07d      	b.n	80063dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d014      	beq.n	8006318 <USBD_LL_DataOutStage+0x98>
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d81d      	bhi.n	800632e <USBD_LL_DataOutStage+0xae>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <USBD_LL_DataOutStage+0x7c>
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d003      	beq.n	8006302 <USBD_LL_DataOutStage+0x82>
 80062fa:	e018      	b.n	800632e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006300:	e018      	b.n	8006334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fa64 	bl	80067da <USBD_CoreFindIF>
 8006312:	4603      	mov	r3, r0
 8006314:	75bb      	strb	r3, [r7, #22]
            break;
 8006316:	e00d      	b.n	8006334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800631e:	b2db      	uxtb	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fa66 	bl	80067f4 <USBD_CoreFindEP>
 8006328:	4603      	mov	r3, r0
 800632a:	75bb      	strb	r3, [r7, #22]
            break;
 800632c:	e002      	b.n	8006334 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	75bb      	strb	r3, [r7, #22]
            break;
 8006332:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006334:	7dbb      	ldrb	r3, [r7, #22]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d119      	bne.n	800636e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d113      	bne.n	800636e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006346:	7dba      	ldrb	r2, [r7, #22]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	32ae      	adds	r2, #174	@ 0xae
 800634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006356:	7dba      	ldrb	r2, [r7, #22]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800635e:	7dba      	ldrb	r2, [r7, #22]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	32ae      	adds	r2, #174	@ 0xae
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 f984 	bl	800767c <USBD_CtlSendStatus>
 8006374:	e032      	b.n	80063dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006376:	7afb      	ldrb	r3, [r7, #11]
 8006378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637c:	b2db      	uxtb	r3, r3
 800637e:	4619      	mov	r1, r3
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fa37 	bl	80067f4 <USBD_CoreFindEP>
 8006386:	4603      	mov	r3, r0
 8006388:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800638a:	7dbb      	ldrb	r3, [r7, #22]
 800638c:	2bff      	cmp	r3, #255	@ 0xff
 800638e:	d025      	beq.n	80063dc <USBD_LL_DataOutStage+0x15c>
 8006390:	7dbb      	ldrb	r3, [r7, #22]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d122      	bne.n	80063dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d117      	bne.n	80063d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063a2:	7dba      	ldrb	r2, [r7, #22]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	32ae      	adds	r2, #174	@ 0xae
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00f      	beq.n	80063d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063b2:	7dba      	ldrb	r2, [r7, #22]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063ba:	7dba      	ldrb	r2, [r7, #22]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	32ae      	adds	r2, #174	@ 0xae
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	7afa      	ldrb	r2, [r7, #11]
 80063c8:	4611      	mov	r1, r2
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	4798      	blx	r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	e000      	b.n	80063de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	460b      	mov	r3, r1
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d16f      	bne.n	80064da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3314      	adds	r3, #20
 80063fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006406:	2b02      	cmp	r3, #2
 8006408:	d15a      	bne.n	80064c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	429a      	cmp	r2, r3
 8006414:	d914      	bls.n	8006440 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	461a      	mov	r2, r3
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f001 f8e6 	bl	80075fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f001 ffe1 	bl	8008400 <USBD_LL_PrepareReceive>
 800643e:	e03f      	b.n	80064c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d11c      	bne.n	8006486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006454:	429a      	cmp	r2, r3
 8006456:	d316      	bcc.n	8006486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006462:	429a      	cmp	r2, r3
 8006464:	d20f      	bcs.n	8006486 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006466:	2200      	movs	r2, #0
 8006468:	2100      	movs	r1, #0
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 f8c7 	bl	80075fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006478:	2300      	movs	r3, #0
 800647a:	2200      	movs	r2, #0
 800647c:	2100      	movs	r1, #0
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f001 ffbe 	bl	8008400 <USBD_LL_PrepareReceive>
 8006484:	e01c      	b.n	80064c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b03      	cmp	r3, #3
 8006490:	d10f      	bne.n	80064b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064b2:	2180      	movs	r1, #128	@ 0x80
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 fe9d 	bl	80081f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f001 f8f1 	bl	80076a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03a      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff fe42 	bl	8006154 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80064d8:	e032      	b.n	8006540 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064da:	7afb      	ldrb	r3, [r7, #11]
 80064dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	4619      	mov	r1, r3
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f985 	bl	80067f4 <USBD_CoreFindEP>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	2bff      	cmp	r3, #255	@ 0xff
 80064f2:	d025      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d122      	bne.n	8006540 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b03      	cmp	r3, #3
 8006504:	d11c      	bne.n	8006540 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006506:	7dfa      	ldrb	r2, [r7, #23]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	32ae      	adds	r2, #174	@ 0xae
 800650c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d014      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006516:	7dfa      	ldrb	r2, [r7, #23]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800651e:	7dfa      	ldrb	r2, [r7, #23]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	32ae      	adds	r2, #174	@ 0xae
 8006524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	7afa      	ldrb	r2, [r7, #11]
 800652c:	4611      	mov	r1, r2
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	4798      	blx	r3
 8006532:	4603      	mov	r3, r0
 8006534:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006536:	7dbb      	ldrb	r3, [r7, #22]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800653c:	7dbb      	ldrb	r3, [r7, #22]
 800653e:	e000      	b.n	8006542 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d014      	beq.n	80065b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00e      	beq.n	80065b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6852      	ldr	r2, [r2, #4]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	4611      	mov	r1, r2
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065b0:	2340      	movs	r3, #64	@ 0x40
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fda8 	bl	800810c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2240      	movs	r2, #64	@ 0x40
 80065c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065cc:	2340      	movs	r3, #64	@ 0x40
 80065ce:	2200      	movs	r2, #0
 80065d0:	2180      	movs	r1, #128	@ 0x80
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fd9a 	bl	800810c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2240      	movs	r2, #64	@ 0x40
 80065e2:	621a      	str	r2, [r3, #32]

  return ret;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b04      	cmp	r3, #4
 8006620:	d006      	beq.n	8006630 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006628:	b2da      	uxtb	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b04      	cmp	r3, #4
 8006658:	d106      	bne.n	8006668 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006660:	b2da      	uxtb	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d110      	bne.n	80066ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	32ae      	adds	r2, #174	@ 0xae
 80066cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e01c      	b.n	8006712 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d115      	bne.n	8006710 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32ae      	adds	r2, #174	@ 0xae
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32ae      	adds	r2, #174	@ 0xae
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	4611      	mov	r1, r2
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	32ae      	adds	r2, #174	@ 0xae
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006738:	2303      	movs	r3, #3
 800673a:	e01c      	b.n	8006776 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b03      	cmp	r3, #3
 8006746:	d115      	bne.n	8006774 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	32ae      	adds	r2, #174	@ 0xae
 8006752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32ae      	adds	r2, #174	@ 0xae
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	4611      	mov	r1, r2
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6852      	ldr	r2, [r2, #4]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	4611      	mov	r1, r2
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006800:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	b29b      	uxth	r3, r3
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	7812      	ldrb	r2, [r2, #0]
 8006830:	4293      	cmp	r3, r2
 8006832:	d91f      	bls.n	8006874 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800683a:	e013      	b.n	8006864 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800683c:	f107 030a 	add.w	r3, r7, #10
 8006840:	4619      	mov	r1, r3
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f000 f81b 	bl	800687e <USBD_GetNextDesc>
 8006848:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d108      	bne.n	8006864 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	789b      	ldrb	r3, [r3, #2]
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	429a      	cmp	r2, r3
 800685e:	d008      	beq.n	8006872 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	885b      	ldrh	r3, [r3, #2]
 8006868:	b29a      	uxth	r2, r3
 800686a:	897b      	ldrh	r3, [r7, #10]
 800686c:	429a      	cmp	r2, r3
 800686e:	d8e5      	bhi.n	800683c <USBD_GetEpDesc+0x2e>
 8006870:	e000      	b.n	8006874 <USBD_GetEpDesc+0x66>
          break;
 8006872:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006874:	693b      	ldr	r3, [r7, #16]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	7812      	ldrb	r2, [r2, #0]
 8006894:	4413      	add	r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b087      	sub	sp, #28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3301      	adds	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068d4:	8a3b      	ldrh	r3, [r7, #16]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	b21a      	sxth	r2, r3
 80068da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068de:	4313      	orrs	r3, r2
 80068e0:	b21b      	sxth	r3, r3
 80068e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068e4:	89fb      	ldrh	r3, [r7, #14]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800690a:	2b40      	cmp	r3, #64	@ 0x40
 800690c:	d005      	beq.n	800691a <USBD_StdDevReq+0x26>
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d857      	bhi.n	80069c2 <USBD_StdDevReq+0xce>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <USBD_StdDevReq+0x42>
 8006916:	2b20      	cmp	r3, #32
 8006918:	d153      	bne.n	80069c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	32ae      	adds	r2, #174	@ 0xae
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]
      break;
 8006934:	e04a      	b.n	80069cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b09      	cmp	r3, #9
 800693c:	d83b      	bhi.n	80069b6 <USBD_StdDevReq+0xc2>
 800693e:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <USBD_StdDevReq+0x50>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	08006999 	.word	0x08006999
 8006948:	080069ad 	.word	0x080069ad
 800694c:	080069b7 	.word	0x080069b7
 8006950:	080069a3 	.word	0x080069a3
 8006954:	080069b7 	.word	0x080069b7
 8006958:	08006977 	.word	0x08006977
 800695c:	0800696d 	.word	0x0800696d
 8006960:	080069b7 	.word	0x080069b7
 8006964:	0800698f 	.word	0x0800698f
 8006968:	08006981 	.word	0x08006981
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa3c 	bl	8006dec <USBD_GetDescriptor>
          break;
 8006974:	e024      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fbcb 	bl	8007114 <USBD_SetAddress>
          break;
 800697e:	e01f      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc0a 	bl	800719c <USBD_SetConfig>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
          break;
 800698c:	e018      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fcad 	bl	80072f0 <USBD_GetConfig>
          break;
 8006996:	e013      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fcde 	bl	800735c <USBD_GetStatus>
          break;
 80069a0:	e00e      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fd0d 	bl	80073c4 <USBD_SetFeature>
          break;
 80069aa:	e009      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fd31 	bl	8007416 <USBD_ClrFeature>
          break;
 80069b4:	e004      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fd88 	bl	80074ce <USBD_CtlError>
          break;
 80069be:	bf00      	nop
      }
      break;
 80069c0:	e004      	b.n	80069cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fd82 	bl	80074ce <USBD_CtlError>
      break;
 80069ca:	bf00      	nop
  }

  return ret;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop

080069d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069ee:	2b40      	cmp	r3, #64	@ 0x40
 80069f0:	d005      	beq.n	80069fe <USBD_StdItfReq+0x26>
 80069f2:	2b40      	cmp	r3, #64	@ 0x40
 80069f4:	d852      	bhi.n	8006a9c <USBD_StdItfReq+0xc4>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <USBD_StdItfReq+0x26>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d14e      	bne.n	8006a9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d840      	bhi.n	8006a8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	889b      	ldrh	r3, [r3, #4]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d836      	bhi.n	8006a84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	889b      	ldrh	r3, [r3, #4]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fedb 	bl	80067da <USBD_CoreFindIF>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	2bff      	cmp	r3, #255	@ 0xff
 8006a2c:	d01d      	beq.n	8006a6a <USBD_StdItfReq+0x92>
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11a      	bne.n	8006a6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a34:	7bba      	ldrb	r2, [r7, #14]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	32ae      	adds	r2, #174	@ 0xae
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00f      	beq.n	8006a64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a44:	7bba      	ldrb	r2, [r7, #14]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a4c:	7bba      	ldrb	r2, [r7, #14]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	32ae      	adds	r2, #174	@ 0xae
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a62:	e004      	b.n	8006a6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a68:	e001      	b.n	8006a6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	88db      	ldrh	r3, [r3, #6]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d110      	bne.n	8006a98 <USBD_StdItfReq+0xc0>
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10d      	bne.n	8006a98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fdfd 	bl	800767c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a82:	e009      	b.n	8006a98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fd21 	bl	80074ce <USBD_CtlError>
          break;
 8006a8c:	e004      	b.n	8006a98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fd1c 	bl	80074ce <USBD_CtlError>
          break;
 8006a96:	e000      	b.n	8006a9a <USBD_StdItfReq+0xc2>
          break;
 8006a98:	bf00      	nop
      }
      break;
 8006a9a:	e004      	b.n	8006aa6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fd15 	bl	80074ce <USBD_CtlError>
      break;
 8006aa4:	bf00      	nop
  }

  return ret;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	889b      	ldrh	r3, [r3, #4]
 8006ac2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006acc:	2b40      	cmp	r3, #64	@ 0x40
 8006ace:	d007      	beq.n	8006ae0 <USBD_StdEPReq+0x30>
 8006ad0:	2b40      	cmp	r3, #64	@ 0x40
 8006ad2:	f200 817f 	bhi.w	8006dd4 <USBD_StdEPReq+0x324>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02a      	beq.n	8006b30 <USBD_StdEPReq+0x80>
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	f040 817a 	bne.w	8006dd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ae0:	7bbb      	ldrb	r3, [r7, #14]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fe85 	bl	80067f4 <USBD_CoreFindEP>
 8006aea:	4603      	mov	r3, r0
 8006aec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aee:	7b7b      	ldrb	r3, [r7, #13]
 8006af0:	2bff      	cmp	r3, #255	@ 0xff
 8006af2:	f000 8174 	beq.w	8006dde <USBD_StdEPReq+0x32e>
 8006af6:	7b7b      	ldrb	r3, [r7, #13]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 8170 	bne.w	8006dde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006afe:	7b7a      	ldrb	r2, [r7, #13]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b06:	7b7a      	ldrb	r2, [r7, #13]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	32ae      	adds	r2, #174	@ 0xae
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 8163 	beq.w	8006dde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b18:	7b7a      	ldrb	r2, [r7, #13]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32ae      	adds	r2, #174	@ 0xae
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b2e:	e156      	b.n	8006dde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d008      	beq.n	8006b4a <USBD_StdEPReq+0x9a>
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	f300 8145 	bgt.w	8006dc8 <USBD_StdEPReq+0x318>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 809b 	beq.w	8006c7a <USBD_StdEPReq+0x1ca>
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d03c      	beq.n	8006bc2 <USBD_StdEPReq+0x112>
 8006b48:	e13e      	b.n	8006dc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d002      	beq.n	8006b5c <USBD_StdEPReq+0xac>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d016      	beq.n	8006b88 <USBD_StdEPReq+0xd8>
 8006b5a:	e02c      	b.n	8006bb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00d      	beq.n	8006b7e <USBD_StdEPReq+0xce>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b80      	cmp	r3, #128	@ 0x80
 8006b66:	d00a      	beq.n	8006b7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fb41 	bl	80081f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b72:	2180      	movs	r1, #128	@ 0x80
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 fb3d 	bl	80081f4 <USBD_LL_StallEP>
 8006b7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b7c:	e020      	b.n	8006bc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fca4 	bl	80074ce <USBD_CtlError>
              break;
 8006b86:	e01b      	b.n	8006bc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	885b      	ldrh	r3, [r3, #2]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10e      	bne.n	8006bae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <USBD_StdEPReq+0xfe>
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b80      	cmp	r3, #128	@ 0x80
 8006b9a:	d008      	beq.n	8006bae <USBD_StdEPReq+0xfe>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	88db      	ldrh	r3, [r3, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fb23 	bl	80081f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fd64 	bl	800767c <USBD_CtlSendStatus>

              break;
 8006bb4:	e004      	b.n	8006bc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc88 	bl	80074ce <USBD_CtlError>
              break;
 8006bbe:	bf00      	nop
          }
          break;
 8006bc0:	e107      	b.n	8006dd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d002      	beq.n	8006bd4 <USBD_StdEPReq+0x124>
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d016      	beq.n	8006c00 <USBD_StdEPReq+0x150>
 8006bd2:	e04b      	b.n	8006c6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00d      	beq.n	8006bf6 <USBD_StdEPReq+0x146>
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b80      	cmp	r3, #128	@ 0x80
 8006bde:	d00a      	beq.n	8006bf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fb05 	bl	80081f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bea:	2180      	movs	r1, #128	@ 0x80
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 fb01 	bl	80081f4 <USBD_LL_StallEP>
 8006bf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bf4:	e040      	b.n	8006c78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc68 	bl	80074ce <USBD_CtlError>
              break;
 8006bfe:	e03b      	b.n	8006c78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	885b      	ldrh	r3, [r3, #2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d136      	bne.n	8006c76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 fb22 	bl	8008260 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fd2d 	bl	800767c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff fde4 	bl	80067f4 <USBD_CoreFindEP>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c30:	7b7b      	ldrb	r3, [r7, #13]
 8006c32:	2bff      	cmp	r3, #255	@ 0xff
 8006c34:	d01f      	beq.n	8006c76 <USBD_StdEPReq+0x1c6>
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11c      	bne.n	8006c76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c3c:	7b7a      	ldrb	r2, [r7, #13]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c44:	7b7a      	ldrb	r2, [r7, #13]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	32ae      	adds	r2, #174	@ 0xae
 8006c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c54:	7b7a      	ldrb	r2, [r7, #13]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	32ae      	adds	r2, #174	@ 0xae
 8006c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c6a:	e004      	b.n	8006c76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fc2d 	bl	80074ce <USBD_CtlError>
              break;
 8006c74:	e000      	b.n	8006c78 <USBD_StdEPReq+0x1c8>
              break;
 8006c76:	bf00      	nop
          }
          break;
 8006c78:	e0ab      	b.n	8006dd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d002      	beq.n	8006c8c <USBD_StdEPReq+0x1dc>
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d032      	beq.n	8006cf0 <USBD_StdEPReq+0x240>
 8006c8a:	e097      	b.n	8006dbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <USBD_StdEPReq+0x1f2>
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b80      	cmp	r3, #128	@ 0x80
 8006c96:	d004      	beq.n	8006ca2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fc17 	bl	80074ce <USBD_CtlError>
                break;
 8006ca0:	e091      	b.n	8006dc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da0b      	bge.n	8006cc2 <USBD_StdEPReq+0x212>
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	3310      	adds	r3, #16
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	e00b      	b.n	8006cda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3304      	adds	r3, #4
 8006cda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fc6d 	bl	80075c8 <USBD_CtlSendData>
              break;
 8006cee:	e06a      	b.n	8006dc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da11      	bge.n	8006d1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	f003 020f 	and.w	r2, r3, #15
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	3324      	adds	r3, #36	@ 0x24
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d117      	bne.n	8006d42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fbda 	bl	80074ce <USBD_CtlError>
                  break;
 8006d1a:	e054      	b.n	8006dc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	f003 020f 	and.w	r2, r3, #15
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fbc7 	bl	80074ce <USBD_CtlError>
                  break;
 8006d40:	e041      	b.n	8006dc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da0b      	bge.n	8006d62 <USBD_StdEPReq+0x2b2>
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	3310      	adds	r3, #16
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	e00b      	b.n	8006d7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4413      	add	r3, r2
 8006d78:	3304      	adds	r3, #4
 8006d7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <USBD_StdEPReq+0x2d8>
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b80      	cmp	r3, #128	@ 0x80
 8006d86:	d103      	bne.n	8006d90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e00e      	b.n	8006dae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fa99 	bl	80082cc <USBD_LL_IsStallEP>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	e002      	b.n	8006dae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2202      	movs	r2, #2
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc07 	bl	80075c8 <USBD_CtlSendData>
              break;
 8006dba:	e004      	b.n	8006dc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fb85 	bl	80074ce <USBD_CtlError>
              break;
 8006dc4:	bf00      	nop
          }
          break;
 8006dc6:	e004      	b.n	8006dd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fb7f 	bl	80074ce <USBD_CtlError>
          break;
 8006dd0:	bf00      	nop
      }
      break;
 8006dd2:	e005      	b.n	8006de0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb79 	bl	80074ce <USBD_CtlError>
      break;
 8006ddc:	e000      	b.n	8006de0 <USBD_StdEPReq+0x330>
      break;
 8006dde:	bf00      	nop
  }

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b0e      	cmp	r3, #14
 8006e0e:	f200 8152 	bhi.w	80070b6 <USBD_GetDescriptor+0x2ca>
 8006e12:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <USBD_GetDescriptor+0x2c>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e89 	.word	0x08006e89
 8006e1c:	08006ea1 	.word	0x08006ea1
 8006e20:	08006ee1 	.word	0x08006ee1
 8006e24:	080070b7 	.word	0x080070b7
 8006e28:	080070b7 	.word	0x080070b7
 8006e2c:	08007057 	.word	0x08007057
 8006e30:	08007083 	.word	0x08007083
 8006e34:	080070b7 	.word	0x080070b7
 8006e38:	080070b7 	.word	0x080070b7
 8006e3c:	080070b7 	.word	0x080070b7
 8006e40:	080070b7 	.word	0x080070b7
 8006e44:	080070b7 	.word	0x080070b7
 8006e48:	080070b7 	.word	0x080070b7
 8006e4c:	080070b7 	.word	0x080070b7
 8006e50:	08006e55 	.word	0x08006e55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	7c12      	ldrb	r2, [r2, #16]
 8006e6c:	f107 0108 	add.w	r1, r7, #8
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e76:	e126      	b.n	80070c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fb27 	bl	80074ce <USBD_CtlError>
        err++;
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	3301      	adds	r3, #1
 8006e84:	72fb      	strb	r3, [r7, #11]
      break;
 8006e86:	e11e      	b.n	80070c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	7c12      	ldrb	r2, [r2, #16]
 8006e94:	f107 0108 	add.w	r1, r7, #8
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	60f8      	str	r0, [r7, #12]
      break;
 8006e9e:	e112      	b.n	80070c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7c1b      	ldrb	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10d      	bne.n	8006ec4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	f107 0208 	add.w	r2, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ec2:	e100      	b.n	80070c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	f107 0208 	add.w	r2, r7, #8
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	2202      	movs	r2, #2
 8006edc:	701a      	strb	r2, [r3, #0]
      break;
 8006ede:	e0f2      	b.n	80070c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	885b      	ldrh	r3, [r3, #2]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	f200 80ac 	bhi.w	8007044 <USBD_GetDescriptor+0x258>
 8006eec:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef4 <USBD_GetDescriptor+0x108>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f41 	.word	0x08006f41
 8006efc:	08006f75 	.word	0x08006f75
 8006f00:	08006fa9 	.word	0x08006fa9
 8006f04:	08006fdd 	.word	0x08006fdd
 8006f08:	08007011 	.word	0x08007011
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2e:	e091      	b.n	8007054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 facb 	bl	80074ce <USBD_CtlError>
            err++;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3e:	e089      	b.n	8007054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7c12      	ldrb	r2, [r2, #16]
 8006f58:	f107 0108 	add.w	r1, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f62:	e077      	b.n	8007054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fab1 	bl	80074ce <USBD_CtlError>
            err++;
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	72fb      	strb	r3, [r7, #11]
          break;
 8006f72:	e06f      	b.n	8007054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f96:	e05d      	b.n	8007054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa97 	bl	80074ce <USBD_CtlError>
            err++;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fa6:	e055      	b.n	8007054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e043      	b.n	8007054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa7d 	bl	80074ce <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e03b      	b.n	8007054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e029      	b.n	8007054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa63 	bl	80074ce <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e021      	b.n	8007054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007032:	e00f      	b.n	8007054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa49 	bl	80074ce <USBD_CtlError>
            err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
          break;
 8007042:	e007      	b.n	8007054 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa41 	bl	80074ce <USBD_CtlError>
          err++;
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	3301      	adds	r3, #1
 8007050:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007052:	bf00      	nop
      }
      break;
 8007054:	e037      	b.n	80070c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7c1b      	ldrb	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007066:	f107 0208 	add.w	r2, r7, #8
 800706a:	4610      	mov	r0, r2
 800706c:	4798      	blx	r3
 800706e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007070:	e029      	b.n	80070c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa2a 	bl	80074ce <USBD_CtlError>
        err++;
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	3301      	adds	r3, #1
 800707e:	72fb      	strb	r3, [r7, #11]
      break;
 8007080:	e021      	b.n	80070c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7c1b      	ldrb	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10d      	bne.n	80070a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007092:	f107 0208 	add.w	r2, r7, #8
 8007096:	4610      	mov	r0, r2
 8007098:	4798      	blx	r3
 800709a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3301      	adds	r3, #1
 80070a0:	2207      	movs	r2, #7
 80070a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070a4:	e00f      	b.n	80070c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa10 	bl	80074ce <USBD_CtlError>
        err++;
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	3301      	adds	r3, #1
 80070b2:	72fb      	strb	r3, [r7, #11]
      break;
 80070b4:	e007      	b.n	80070c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa08 	bl	80074ce <USBD_CtlError>
      err++;
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	3301      	adds	r3, #1
 80070c2:	72fb      	strb	r3, [r7, #11]
      break;
 80070c4:	bf00      	nop
  }

  if (err != 0U)
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11e      	bne.n	800710a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	88db      	ldrh	r3, [r3, #6]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d016      	beq.n	8007102 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80070d4:	893b      	ldrh	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00e      	beq.n	80070f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88da      	ldrh	r2, [r3, #6]
 80070de:	893b      	ldrh	r3, [r7, #8]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	bf28      	it	cs
 80070e4:	4613      	movcs	r3, r2
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070ea:	893b      	ldrh	r3, [r7, #8]
 80070ec:	461a      	mov	r2, r3
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa69 	bl	80075c8 <USBD_CtlSendData>
 80070f6:	e009      	b.n	800710c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f9e7 	bl	80074ce <USBD_CtlError>
 8007100:	e004      	b.n	800710c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 faba 	bl	800767c <USBD_CtlSendStatus>
 8007108:	e000      	b.n	800710c <USBD_GetDescriptor+0x320>
    return;
 800710a:	bf00      	nop
  }
}
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop

08007114 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	889b      	ldrh	r3, [r3, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d131      	bne.n	800718a <USBD_SetAddress+0x76>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	88db      	ldrh	r3, [r3, #6]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d12d      	bne.n	800718a <USBD_SetAddress+0x76>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	2b7f      	cmp	r3, #127	@ 0x7f
 8007134:	d829      	bhi.n	800718a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007140:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b03      	cmp	r3, #3
 800714c:	d104      	bne.n	8007158 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f9bc 	bl	80074ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007156:	e01d      	b.n	8007194 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7bfa      	ldrb	r2, [r7, #15]
 800715c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 f8dd 	bl	8008324 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa86 	bl	800767c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	e009      	b.n	8007194 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007188:	e004      	b.n	8007194 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f99e 	bl	80074ce <USBD_CtlError>
  }
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	885b      	ldrh	r3, [r3, #2]
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	4b4e      	ldr	r3, [pc, #312]	@ (80072ec <USBD_SetConfig+0x150>)
 80071b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071b4:	4b4d      	ldr	r3, [pc, #308]	@ (80072ec <USBD_SetConfig+0x150>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d905      	bls.n	80071c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f985 	bl	80074ce <USBD_CtlError>
    return USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e08c      	b.n	80072e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d002      	beq.n	80071da <USBD_SetConfig+0x3e>
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d029      	beq.n	800722c <USBD_SetConfig+0x90>
 80071d8:	e075      	b.n	80072c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80071da:	4b44      	ldr	r3, [pc, #272]	@ (80072ec <USBD_SetConfig+0x150>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d020      	beq.n	8007224 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80071e2:	4b42      	ldr	r3, [pc, #264]	@ (80072ec <USBD_SetConfig+0x150>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071ec:	4b3f      	ldr	r3, [pc, #252]	@ (80072ec <USBD_SetConfig+0x150>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fe ffb9 	bl	800616a <USBD_SetClassConfig>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f962 	bl	80074ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007212:	e065      	b.n	80072e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa31 	bl	800767c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2203      	movs	r2, #3
 800721e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007222:	e05d      	b.n	80072e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fa29 	bl	800767c <USBD_CtlSendStatus>
      break;
 800722a:	e059      	b.n	80072e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800722c:	4b2f      	ldr	r3, [pc, #188]	@ (80072ec <USBD_SetConfig+0x150>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d112      	bne.n	800725a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800723c:	4b2b      	ldr	r3, [pc, #172]	@ (80072ec <USBD_SetConfig+0x150>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007246:	4b29      	ldr	r3, [pc, #164]	@ (80072ec <USBD_SetConfig+0x150>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7fe ffa8 	bl	80061a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa12 	bl	800767c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007258:	e042      	b.n	80072e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800725a:	4b24      	ldr	r3, [pc, #144]	@ (80072ec <USBD_SetConfig+0x150>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d02a      	beq.n	80072be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7fe ff96 	bl	80061a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007276:	4b1d      	ldr	r3, [pc, #116]	@ (80072ec <USBD_SetConfig+0x150>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007280:	4b1a      	ldr	r3, [pc, #104]	@ (80072ec <USBD_SetConfig+0x150>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fe ff6f 	bl	800616a <USBD_SetClassConfig>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00f      	beq.n	80072b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f918 	bl	80074ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fe ff7b 	bl	80061a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80072b4:	e014      	b.n	80072e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9e0 	bl	800767c <USBD_CtlSendStatus>
      break;
 80072bc:	e010      	b.n	80072e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f9dc 	bl	800767c <USBD_CtlSendStatus>
      break;
 80072c4:	e00c      	b.n	80072e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f900 	bl	80074ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ce:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <USBD_SetConfig+0x150>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fe ff64 	bl	80061a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	73fb      	strb	r3, [r7, #15]
      break;
 80072de:	bf00      	nop
  }

  return ret;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200001e4 	.word	0x200001e4

080072f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	88db      	ldrh	r3, [r3, #6]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d004      	beq.n	800730c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f8e2 	bl	80074ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800730a:	e023      	b.n	8007354 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	dc02      	bgt.n	800731e <USBD_GetConfig+0x2e>
 8007318:	2b00      	cmp	r3, #0
 800731a:	dc03      	bgt.n	8007324 <USBD_GetConfig+0x34>
 800731c:	e015      	b.n	800734a <USBD_GetConfig+0x5a>
 800731e:	2b03      	cmp	r3, #3
 8007320:	d00b      	beq.n	800733a <USBD_GetConfig+0x4a>
 8007322:	e012      	b.n	800734a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3308      	adds	r3, #8
 800732e:	2201      	movs	r2, #1
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f948 	bl	80075c8 <USBD_CtlSendData>
        break;
 8007338:	e00c      	b.n	8007354 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	2201      	movs	r2, #1
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f940 	bl	80075c8 <USBD_CtlSendData>
        break;
 8007348:	e004      	b.n	8007354 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8be 	bl	80074ce <USBD_CtlError>
        break;
 8007352:	bf00      	nop
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800736c:	b2db      	uxtb	r3, r3
 800736e:	3b01      	subs	r3, #1
 8007370:	2b02      	cmp	r3, #2
 8007372:	d81e      	bhi.n	80073b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d004      	beq.n	8007386 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8a5 	bl	80074ce <USBD_CtlError>
        break;
 8007384:	e01a      	b.n	80073bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f043 0202 	orr.w	r2, r3, #2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	330c      	adds	r3, #12
 80073a6:	2202      	movs	r2, #2
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f90c 	bl	80075c8 <USBD_CtlSendData>
      break;
 80073b0:	e004      	b.n	80073bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f88a 	bl	80074ce <USBD_CtlError>
      break;
 80073ba:	bf00      	nop
  }
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	885b      	ldrh	r3, [r3, #2]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d107      	bne.n	80073e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f94c 	bl	800767c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80073e4:	e013      	b.n	800740e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	885b      	ldrh	r3, [r3, #2]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d10b      	bne.n	8007406 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	889b      	ldrh	r3, [r3, #4]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f93c 	bl	800767c <USBD_CtlSendStatus>
}
 8007404:	e003      	b.n	800740e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f860 	bl	80074ce <USBD_CtlError>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007426:	b2db      	uxtb	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	2b02      	cmp	r3, #2
 800742c:	d80b      	bhi.n	8007446 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	885b      	ldrh	r3, [r3, #2]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10c      	bne.n	8007450 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f91c 	bl	800767c <USBD_CtlSendStatus>
      }
      break;
 8007444:	e004      	b.n	8007450 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f840 	bl	80074ce <USBD_CtlError>
      break;
 800744e:	e000      	b.n	8007452 <USBD_ClrFeature+0x3c>
      break;
 8007450:	bf00      	nop
  }
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff fa16 	bl	80068b6 <SWAPBYTE>
 800748a:	4603      	mov	r3, r0
 800748c:	461a      	mov	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f7ff fa09 	bl	80068b6 <SWAPBYTE>
 80074a4:	4603      	mov	r3, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff f9fc 	bl	80068b6 <SWAPBYTE>
 80074be:	4603      	mov	r3, r0
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	80da      	strh	r2, [r3, #6]
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074d8:	2180      	movs	r1, #128	@ 0x80
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fe8a 	bl	80081f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fe86 	bl	80081f4 <USBD_LL_StallEP>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d042      	beq.n	800758c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f000 f842 	bl	8007594 <USBD_GetLen>
 8007510:	4603      	mov	r3, r0
 8007512:	3301      	adds	r3, #1
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800751a:	d808      	bhi.n	800752e <USBD_GetString+0x3e>
 800751c:	6938      	ldr	r0, [r7, #16]
 800751e:	f000 f839 	bl	8007594 <USBD_GetLen>
 8007522:	4603      	mov	r3, r0
 8007524:	3301      	adds	r3, #1
 8007526:	b29b      	uxth	r3, r3
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	e001      	b.n	8007532 <USBD_GetString+0x42>
 800752e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	4413      	add	r3, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	7812      	ldrb	r2, [r2, #0]
 8007540:	701a      	strb	r2, [r3, #0]
  idx++;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	3301      	adds	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	2203      	movs	r2, #3
 8007550:	701a      	strb	r2, [r3, #0]
  idx++;
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	3301      	adds	r3, #1
 8007556:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007558:	e013      	b.n	8007582 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	4413      	add	r3, r2
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	7812      	ldrb	r2, [r2, #0]
 8007564:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	3301      	adds	r3, #1
 800756a:	613b      	str	r3, [r7, #16]
    idx++;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	3301      	adds	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	4413      	add	r3, r2
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
    idx++;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	3301      	adds	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e7      	bne.n	800755a <USBD_GetString+0x6a>
 800758a:	e000      	b.n	800758e <USBD_GetString+0x9e>
    return;
 800758c:	bf00      	nop
  }
}
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075a4:	e005      	b.n	80075b2 <USBD_GetLen+0x1e>
  {
    len++;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	3301      	adds	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	3301      	adds	r3, #1
 80075b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f5      	bne.n	80075a6 <USBD_GetLen+0x12>
  }

  return len;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	2100      	movs	r1, #0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fece 	bl	8008390 <USBD_LL_Transmit>

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	2100      	movs	r1, #0
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 febd 	bl	8008390 <USBD_LL_Transmit>

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2203      	movs	r2, #3
 8007630:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	2100      	movs	r1, #0
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fed8 	bl	8008400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	2100      	movs	r1, #0
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fec7 	bl	8008400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800768c:	2300      	movs	r3, #0
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fe7c 	bl	8008390 <USBD_LL_Transmit>

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2205      	movs	r2, #5
 80076ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076b2:	2300      	movs	r3, #0
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fea1 	bl	8008400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076cc:	2200      	movs	r2, #0
 80076ce:	4912      	ldr	r1, [pc, #72]	@ (8007718 <MX_USB_DEVICE_Init+0x50>)
 80076d0:	4812      	ldr	r0, [pc, #72]	@ (800771c <MX_USB_DEVICE_Init+0x54>)
 80076d2:	f7fe fccd 	bl	8006070 <USBD_Init>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076dc:	f7f8 fff6 	bl	80006cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076e0:	490f      	ldr	r1, [pc, #60]	@ (8007720 <MX_USB_DEVICE_Init+0x58>)
 80076e2:	480e      	ldr	r0, [pc, #56]	@ (800771c <MX_USB_DEVICE_Init+0x54>)
 80076e4:	f7fe fcf4 	bl	80060d0 <USBD_RegisterClass>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076ee:	f7f8 ffed 	bl	80006cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076f2:	490c      	ldr	r1, [pc, #48]	@ (8007724 <MX_USB_DEVICE_Init+0x5c>)
 80076f4:	4809      	ldr	r0, [pc, #36]	@ (800771c <MX_USB_DEVICE_Init+0x54>)
 80076f6:	f7fe fbeb 	bl	8005ed0 <USBD_CDC_RegisterInterface>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007700:	f7f8 ffe4 	bl	80006cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007704:	4805      	ldr	r0, [pc, #20]	@ (800771c <MX_USB_DEVICE_Init+0x54>)
 8007706:	f7fe fd19 	bl	800613c <USBD_Start>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007710:	f7f8 ffdc 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007714:	bf00      	nop
 8007716:	bd80      	pop	{r7, pc}
 8007718:	200000ac 	.word	0x200000ac
 800771c:	200001e8 	.word	0x200001e8
 8007720:	20000018 	.word	0x20000018
 8007724:	20000098 	.word	0x20000098

08007728 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800772c:	2200      	movs	r2, #0
 800772e:	4907      	ldr	r1, [pc, #28]	@ (800774c <CDC_Init_FS+0x24>)
 8007730:	4807      	ldr	r0, [pc, #28]	@ (8007750 <CDC_Init_FS+0x28>)
 8007732:	f7fe fbe7 	bl	8005f04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007736:	4907      	ldr	r1, [pc, #28]	@ (8007754 <CDC_Init_FS+0x2c>)
 8007738:	4805      	ldr	r0, [pc, #20]	@ (8007750 <CDC_Init_FS+0x28>)
 800773a:	f7fe fc05 	bl	8005f48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800773e:	4804      	ldr	r0, [pc, #16]	@ (8007750 <CDC_Init_FS+0x28>)
 8007740:	f7fe fc60 	bl	8006004 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007744:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007746:	4618      	mov	r0, r3
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000d48 	.word	0x20000d48
 8007750:	200001e8 	.word	0x200001e8
 8007754:	20000548 	.word	0x20000548

08007758 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800775c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800775e:	4618      	mov	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
 8007774:	4613      	mov	r3, r2
 8007776:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b23      	cmp	r3, #35	@ 0x23
 800777c:	d84a      	bhi.n	8007814 <CDC_Control_FS+0xac>
 800777e:	a201      	add	r2, pc, #4	@ (adr r2, 8007784 <CDC_Control_FS+0x1c>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	08007815 	.word	0x08007815
 8007788:	08007815 	.word	0x08007815
 800778c:	08007815 	.word	0x08007815
 8007790:	08007815 	.word	0x08007815
 8007794:	08007815 	.word	0x08007815
 8007798:	08007815 	.word	0x08007815
 800779c:	08007815 	.word	0x08007815
 80077a0:	08007815 	.word	0x08007815
 80077a4:	08007815 	.word	0x08007815
 80077a8:	08007815 	.word	0x08007815
 80077ac:	08007815 	.word	0x08007815
 80077b0:	08007815 	.word	0x08007815
 80077b4:	08007815 	.word	0x08007815
 80077b8:	08007815 	.word	0x08007815
 80077bc:	08007815 	.word	0x08007815
 80077c0:	08007815 	.word	0x08007815
 80077c4:	08007815 	.word	0x08007815
 80077c8:	08007815 	.word	0x08007815
 80077cc:	08007815 	.word	0x08007815
 80077d0:	08007815 	.word	0x08007815
 80077d4:	08007815 	.word	0x08007815
 80077d8:	08007815 	.word	0x08007815
 80077dc:	08007815 	.word	0x08007815
 80077e0:	08007815 	.word	0x08007815
 80077e4:	08007815 	.word	0x08007815
 80077e8:	08007815 	.word	0x08007815
 80077ec:	08007815 	.word	0x08007815
 80077f0:	08007815 	.word	0x08007815
 80077f4:	08007815 	.word	0x08007815
 80077f8:	08007815 	.word	0x08007815
 80077fc:	08007815 	.word	0x08007815
 8007800:	08007815 	.word	0x08007815
 8007804:	08007815 	.word	0x08007815
 8007808:	08007815 	.word	0x08007815
 800780c:	08007815 	.word	0x08007815
 8007810:	08007815 	.word	0x08007815
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007814:	bf00      	nop
  }

  return (USBD_OK);
 8007816:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b0c6      	sub	sp, #280	@ 0x118
 8007828:	af00      	add	r7, sp, #0
 800782a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800782e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007832:	6018      	str	r0, [r3, #0]
 8007834:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007838:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800783c:	6019      	str	r1, [r3, #0]
  /* USER CODE BEGIN 6 */

    char temp[CMD_BUFFER_SIZE*2];
    uint8_t valid = 0; 
 800783e:	2300      	movs	r3, #0
 8007840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
      for (uint32_t i = 0; i < *Len; i++) {
 8007844:	2300      	movs	r3, #0
 8007846:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800784a:	e0ba      	b.n	80079c2 <CDC_Receive_FS+0x19e>
          char c = (char)Buf[i];
 800784c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007850:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800785a:	4413      	add	r3, r2
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
          uint8_t u = (uint8_t)c;
 8007862:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007866:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800786a:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800786e:	701a      	strb	r2, [r3, #0]
  
          // Echo every char back
          if (c != '\r' && c != '\n') {
 8007870:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007874:	2b0d      	cmp	r3, #13
 8007876:	d01a      	beq.n	80078ae <CDC_Receive_FS+0x8a>
 8007878:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800787c:	2b0a      	cmp	r3, #10
 800787e:	d016      	beq.n	80078ae <CDC_Receive_FS+0x8a>
              // block until endpoint is free
              CDC_Transmit_FS(&u, 1);
 8007880:	f107 030b 	add.w	r3, r7, #11
 8007884:	2101      	movs	r1, #1
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f8d4 	bl	8007a34 <CDC_Transmit_FS>
              
              if (command_index < CMD_BUFFER_SIZE - 1) {
 800788c:	4b5b      	ldr	r3, [pc, #364]	@ (80079fc <CDC_Receive_FS+0x1d8>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b7e      	cmp	r3, #126	@ 0x7e
 8007892:	f200 8090 	bhi.w	80079b6 <CDC_Receive_FS+0x192>
                  command_buffer[command_index++] = c;
 8007896:	4b59      	ldr	r3, [pc, #356]	@ (80079fc <CDC_Receive_FS+0x1d8>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	b2d1      	uxtb	r1, r2
 800789e:	4a57      	ldr	r2, [pc, #348]	@ (80079fc <CDC_Receive_FS+0x1d8>)
 80078a0:	7011      	strb	r1, [r2, #0]
 80078a2:	4619      	mov	r1, r3
 80078a4:	4a56      	ldr	r2, [pc, #344]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 80078a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80078aa:	5453      	strb	r3, [r2, r1]
 80078ac:	e084      	b.n	80079b8 <CDC_Receive_FS+0x194>
              }
              continue;
          }
          
          // Terminate command
          command_buffer[command_index] = '\0';
 80078ae:	4b53      	ldr	r3, [pc, #332]	@ (80079fc <CDC_Receive_FS+0x1d8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	4b52      	ldr	r3, [pc, #328]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 80078b6:	2100      	movs	r1, #0
 80078b8:	5499      	strb	r1, [r3, r2]
  
          if (command_index > 0) {
 80078ba:	4b50      	ldr	r3, [pc, #320]	@ (80079fc <CDC_Receive_FS+0x1d8>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d07a      	beq.n	80079b8 <CDC_Receive_FS+0x194>
              // your command logic
              if (strcmp(command_buffer, "LED2 on") == 0) {
 80078c2:	4950      	ldr	r1, [pc, #320]	@ (8007a04 <CDC_Receive_FS+0x1e0>)
 80078c4:	484e      	ldr	r0, [pc, #312]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 80078c6:	f7f8 fc9b 	bl	8000200 <strcmp>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <CDC_Receive_FS+0xba>
                  LED2_flag = 1;
 80078d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007a08 <CDC_Receive_FS+0x1e4>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80078dc:	e00c      	b.n	80078f8 <CDC_Receive_FS+0xd4>
              }
              else if (strcmp(command_buffer, "LED2 off") == 0) {
 80078de:	494b      	ldr	r1, [pc, #300]	@ (8007a0c <CDC_Receive_FS+0x1e8>)
 80078e0:	4847      	ldr	r0, [pc, #284]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 80078e2:	f7f8 fc8d 	bl	8000200 <strcmp>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <CDC_Receive_FS+0xd4>
                  LED2_flag = 0;
 80078ec:	4b46      	ldr	r3, [pc, #280]	@ (8007a08 <CDC_Receive_FS+0x1e4>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	701a      	strb	r2, [r3, #0]
                  valid = 1; 
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
              
              // Prompting Pump 3
              if (strcmp(command_buffer, "Pump3 on forward") == 0){
 80078f8:	4945      	ldr	r1, [pc, #276]	@ (8007a10 <CDC_Receive_FS+0x1ec>)
 80078fa:	4841      	ldr	r0, [pc, #260]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 80078fc:	f7f8 fc80 	bl	8000200 <strcmp>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <CDC_Receive_FS+0xf6>
                Pump3_flag = 1; 
 8007906:	4b43      	ldr	r3, [pc, #268]	@ (8007a14 <CDC_Receive_FS+0x1f0>)
 8007908:	2201      	movs	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 1; 
 800790c:	4b42      	ldr	r3, [pc, #264]	@ (8007a18 <CDC_Receive_FS+0x1f4>)
 800790e:	2201      	movs	r2, #1
 8007910:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8007918:	e00f      	b.n	800793a <CDC_Receive_FS+0x116>
              }
              else if (strcmp(command_buffer, "Pump3 on backward") == 0){
 800791a:	4940      	ldr	r1, [pc, #256]	@ (8007a1c <CDC_Receive_FS+0x1f8>)
 800791c:	4838      	ldr	r0, [pc, #224]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 800791e:	f7f8 fc6f 	bl	8000200 <strcmp>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d108      	bne.n	800793a <CDC_Receive_FS+0x116>
                Pump3_flag = 1; 
 8007928:	4b3a      	ldr	r3, [pc, #232]	@ (8007a14 <CDC_Receive_FS+0x1f0>)
 800792a:	2201      	movs	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]
                Pump3_dir = 0; 
 800792e:	4b3a      	ldr	r3, [pc, #232]	@ (8007a18 <CDC_Receive_FS+0x1f4>)
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }

              // timer test 
              if (strcmp(command_buffer, "Timer on") == 0){
 800793a:	4939      	ldr	r1, [pc, #228]	@ (8007a20 <CDC_Receive_FS+0x1fc>)
 800793c:	4830      	ldr	r0, [pc, #192]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 800793e:	f7f8 fc5f 	bl	8000200 <strcmp>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d105      	bne.n	8007954 <CDC_Receive_FS+0x130>
                Timer6_flag = 1; 
 8007948:	4b36      	ldr	r3, [pc, #216]	@ (8007a24 <CDC_Receive_FS+0x200>)
 800794a:	2201      	movs	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
              }
  
              if (valid)
 8007954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007958:	2b00      	cmp	r3, #0
 800795a:	d014      	beq.n	8007986 <CDC_Receive_FS+0x162>
              {
                sprintf(temp, "\r\nReceieved: %s\r\n> ", command_buffer);
 800795c:	f107 030c 	add.w	r3, r7, #12
 8007960:	4a27      	ldr	r2, [pc, #156]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 8007962:	4931      	ldr	r1, [pc, #196]	@ (8007a28 <CDC_Receive_FS+0x204>)
 8007964:	4618      	mov	r0, r3
 8007966:	f000 ff35 	bl	80087d4 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 800796a:	f107 030c 	add.w	r3, r7, #12
 800796e:	4618      	mov	r0, r3
 8007970:	f7f8 fc50 	bl	8000214 <strlen>
 8007974:	4603      	mov	r3, r0
 8007976:	b29a      	uxth	r2, r3
 8007978:	f107 030c 	add.w	r3, r7, #12
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f858 	bl	8007a34 <CDC_Transmit_FS>
 8007984:	e013      	b.n	80079ae <CDC_Receive_FS+0x18a>
              }
              else 
              {
                sprintf(temp, "\r\nError Commaand:%s\r\n> ", command_buffer);
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	4a1d      	ldr	r2, [pc, #116]	@ (8007a00 <CDC_Receive_FS+0x1dc>)
 800798c:	4927      	ldr	r1, [pc, #156]	@ (8007a2c <CDC_Receive_FS+0x208>)
 800798e:	4618      	mov	r0, r3
 8007990:	f000 ff20 	bl	80087d4 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4618      	mov	r0, r3
 800799a:	f7f8 fc3b 	bl	8000214 <strlen>
 800799e:	4603      	mov	r3, r0
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 f843 	bl	8007a34 <CDC_Transmit_FS>
              }
              command_index = 0;
 80079ae:	4b13      	ldr	r3, [pc, #76]	@ (80079fc <CDC_Receive_FS+0x1d8>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e000      	b.n	80079b8 <CDC_Receive_FS+0x194>
              continue;
 80079b6:	bf00      	nop
      for (uint32_t i = 0; i < *Len; i++) {
 80079b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80079bc:	3301      	adds	r3, #1
 80079be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80079c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80079c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f4ff af3a 	bcc.w	800784c <CDC_Receive_FS+0x28>
          }
  
      }
  
      // 4) re-arm USB to receive more
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 80079d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80079dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80079e0:	6819      	ldr	r1, [r3, #0]
 80079e2:	4813      	ldr	r0, [pc, #76]	@ (8007a30 <CDC_Receive_FS+0x20c>)
 80079e4:	f7fe fab0 	bl	8005f48 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079e8:	4811      	ldr	r0, [pc, #68]	@ (8007a30 <CDC_Receive_FS+0x20c>)
 80079ea:	f7fe fb0b 	bl	8006004 <USBD_CDC_ReceivePacket>
      return USBD_OK;
 80079ee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000544 	.word	0x20000544
 8007a00:	200004c4 	.word	0x200004c4
 8007a04:	08009868 	.word	0x08009868
 8007a08:	200001d0 	.word	0x200001d0
 8007a0c:	08009870 	.word	0x08009870
 8007a10:	0800987c 	.word	0x0800987c
 8007a14:	200001d1 	.word	0x200001d1
 8007a18:	200001d2 	.word	0x200001d2
 8007a1c:	08009890 	.word	0x08009890
 8007a20:	080098a4 	.word	0x080098a4
 8007a24:	200001d3 	.word	0x200001d3
 8007a28:	080098b0 	.word	0x080098b0
 8007a2c:	080098c4 	.word	0x080098c4
 8007a30:	200001e8 	.word	0x200001e8

08007a34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a44:	4b0d      	ldr	r3, [pc, #52]	@ (8007a7c <CDC_Transmit_FS+0x48>)
 8007a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e00b      	b.n	8007a72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a5a:	887b      	ldrh	r3, [r7, #2]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4806      	ldr	r0, [pc, #24]	@ (8007a7c <CDC_Transmit_FS+0x48>)
 8007a62:	f7fe fa4f 	bl	8005f04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a66:	4805      	ldr	r0, [pc, #20]	@ (8007a7c <CDC_Transmit_FS+0x48>)
 8007a68:	f7fe fa8c 	bl	8005f84 <USBD_CDC_TransmitPacket>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	200001e8 	.word	0x200001e8

08007a80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2212      	movs	r2, #18
 8007ab4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ab6:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	200000cc 	.word	0x200000cc

08007ac8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ada:	4b03      	ldr	r3, [pc, #12]	@ (8007ae8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	200000ec 	.word	0x200000ec

08007aec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d105      	bne.n	8007b0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4907      	ldr	r1, [pc, #28]	@ (8007b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b02:	4808      	ldr	r0, [pc, #32]	@ (8007b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b04:	f7ff fcf4 	bl	80074f0 <USBD_GetString>
 8007b08:	e004      	b.n	8007b14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4904      	ldr	r1, [pc, #16]	@ (8007b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b0e:	4805      	ldr	r0, [pc, #20]	@ (8007b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b10:	f7ff fcee 	bl	80074f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b14:	4b02      	ldr	r3, [pc, #8]	@ (8007b20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20001548 	.word	0x20001548
 8007b24:	080098dc 	.word	0x080098dc

08007b28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	4904      	ldr	r1, [pc, #16]	@ (8007b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b38:	4804      	ldr	r0, [pc, #16]	@ (8007b4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b3a:	f7ff fcd9 	bl	80074f0 <USBD_GetString>
  return USBD_StrDesc;
 8007b3e:	4b02      	ldr	r3, [pc, #8]	@ (8007b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20001548 	.word	0x20001548
 8007b4c:	080098f4 	.word	0x080098f4

08007b50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	221a      	movs	r2, #26
 8007b60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b62:	f000 f855 	bl	8007c10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b66:	4b02      	ldr	r3, [pc, #8]	@ (8007b70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200000f0 	.word	0x200000f0

08007b74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4907      	ldr	r1, [pc, #28]	@ (8007ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b8a:	4808      	ldr	r0, [pc, #32]	@ (8007bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b8c:	f7ff fcb0 	bl	80074f0 <USBD_GetString>
 8007b90:	e004      	b.n	8007b9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4904      	ldr	r1, [pc, #16]	@ (8007ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b96:	4805      	ldr	r0, [pc, #20]	@ (8007bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b98:	f7ff fcaa 	bl	80074f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20001548 	.word	0x20001548
 8007bac:	08009908 	.word	0x08009908

08007bb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4907      	ldr	r1, [pc, #28]	@ (8007be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bc6:	4808      	ldr	r0, [pc, #32]	@ (8007be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bc8:	f7ff fc92 	bl	80074f0 <USBD_GetString>
 8007bcc:	e004      	b.n	8007bd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4904      	ldr	r1, [pc, #16]	@ (8007be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bd2:	4805      	ldr	r0, [pc, #20]	@ (8007be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bd4:	f7ff fc8c 	bl	80074f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd8:	4b02      	ldr	r3, [pc, #8]	@ (8007be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20001548 	.word	0x20001548
 8007be8:	08009914 	.word	0x08009914

08007bec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	220c      	movs	r2, #12
 8007bfc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007bfe:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	200000e0 	.word	0x200000e0

08007c10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c16:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <Get_SerialNum+0x44>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <Get_SerialNum+0x48>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c22:	4b0e      	ldr	r3, [pc, #56]	@ (8007c5c <Get_SerialNum+0x4c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c36:	2208      	movs	r2, #8
 8007c38:	4909      	ldr	r1, [pc, #36]	@ (8007c60 <Get_SerialNum+0x50>)
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f814 	bl	8007c68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c40:	2204      	movs	r2, #4
 8007c42:	4908      	ldr	r1, [pc, #32]	@ (8007c64 <Get_SerialNum+0x54>)
 8007c44:	68b8      	ldr	r0, [r7, #8]
 8007c46:	f000 f80f 	bl	8007c68 <IntToUnicode>
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	1fff7590 	.word	0x1fff7590
 8007c58:	1fff7594 	.word	0x1fff7594
 8007c5c:	1fff7598 	.word	0x1fff7598
 8007c60:	200000f2 	.word	0x200000f2
 8007c64:	20000102 	.word	0x20000102

08007c68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]
 8007c7e:	e027      	b.n	8007cd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	0f1b      	lsrs	r3, r3, #28
 8007c84:	2b09      	cmp	r3, #9
 8007c86:	d80b      	bhi.n	8007ca0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	0f1b      	lsrs	r3, r3, #28
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	4619      	mov	r1, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	440b      	add	r3, r1
 8007c98:	3230      	adds	r2, #48	@ 0x30
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e00a      	b.n	8007cb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	0f1b      	lsrs	r3, r3, #28
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	4619      	mov	r1, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	440b      	add	r3, r1
 8007cb0:	3237      	adds	r2, #55	@ 0x37
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]
 8007cd0:	7dfa      	ldrb	r2, [r7, #23]
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d3d3      	bcc.n	8007c80 <IntToUnicode+0x18>
  }
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b0b0      	sub	sp, #192	@ 0xc0
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cf0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	605a      	str	r2, [r3, #4]
 8007cfa:	609a      	str	r2, [r3, #8]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d00:	f107 0314 	add.w	r3, r7, #20
 8007d04:	2298      	movs	r2, #152	@ 0x98
 8007d06:	2100      	movs	r1, #0
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fe5b 	bl	80089c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d16:	d173      	bne.n	8007e00 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d1c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007d1e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007d22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007d26:	2303      	movs	r3, #3
 8007d28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8007d2e:	230c      	movs	r3, #12
 8007d30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007d32:	2302      	movs	r3, #2
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007d36:	2302      	movs	r3, #2
 8007d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007d3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007d42:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d44:	f107 0314 	add.w	r3, r7, #20
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fb faed 	bl	8003328 <HAL_RCCEx_PeriphCLKConfig>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007d54:	f7f8 fcba 	bl	80006cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d58:	4b2b      	ldr	r3, [pc, #172]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007d5e:	f043 0301 	orr.w	r3, r3, #1
 8007d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d64:	4b28      	ldr	r3, [pc, #160]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d70:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d84:	2303      	movs	r3, #3
 8007d86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007d94:	4619      	mov	r1, r3
 8007d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007d9a:	f7f8 ff89 	bl	8000cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da2:	4a19      	ldr	r2, [pc, #100]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007daa:	4b17      	ldr	r3, [pc, #92]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007db6:	4b14      	ldr	r3, [pc, #80]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d114      	bne.n	8007dec <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dc2:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc6:	4a10      	ldr	r2, [pc, #64]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dce:	4b0e      	ldr	r3, [pc, #56]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dd6:	60bb      	str	r3, [r7, #8]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007dda:	f7fa fb87 	bl	80024ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dde:	4b0a      	ldr	r3, [pc, #40]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de2:	4a09      	ldr	r2, [pc, #36]	@ (8007e08 <HAL_PCD_MspInit+0x120>)
 8007de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dea:	e001      	b.n	8007df0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007dec:	f7fa fb7e 	bl	80024ec <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007df0:	2200      	movs	r2, #0
 8007df2:	2100      	movs	r1, #0
 8007df4:	2043      	movs	r0, #67	@ 0x43
 8007df6:	f7f8 ff24 	bl	8000c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007dfa:	2043      	movs	r0, #67	@ 0x43
 8007dfc:	f7f8 ff3d 	bl	8000c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e00:	bf00      	nop
 8007e02:	37c0      	adds	r7, #192	@ 0xc0
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40021000 	.word	0x40021000

08007e0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe f9d7 	bl	80061d6 <USBD_LL_SetupStage>
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f7fe fa11 	bl	8006280 <USBD_LL_DataOutStage>
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	3320      	adds	r3, #32
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f7fe faaa 	bl	80063e6 <USBD_LL_DataInStage>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fbe4 	bl	8006676 <USBD_LL_SOF>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	79db      	ldrb	r3, [r3, #7]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d001      	beq.n	8007ece <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007eca:	f7f8 fbff 	bl	80006cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ed4:	7bfa      	ldrb	r2, [r7, #15]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fb88 	bl	80065ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe fb30 	bl	800654a <USBD_LL_Reset>
}
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fb77 	bl	800660e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7adb      	ldrb	r3, [r3, #11]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f28:	4b04      	ldr	r3, [pc, #16]	@ (8007f3c <HAL_PCD_SuspendCallback+0x48>)
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	4a03      	ldr	r2, [pc, #12]	@ (8007f3c <HAL_PCD_SuspendCallback+0x48>)
 8007f2e:	f043 0306 	orr.w	r3, r3, #6
 8007f32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f5a:	f023 0301 	bic.w	r3, r3, #1
 8007f5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7adb      	ldrb	r3, [r3, #11]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f68:	4b08      	ldr	r3, [pc, #32]	@ (8007f8c <HAL_PCD_ResumeCallback+0x4c>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	4a07      	ldr	r2, [pc, #28]	@ (8007f8c <HAL_PCD_ResumeCallback+0x4c>)
 8007f6e:	f023 0306 	bic.w	r3, r3, #6
 8007f72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007f74:	f000 faf6 	bl	8008564 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fb61 	bl	8006646 <USBD_LL_Resume>
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	e000ed00 	.word	0xe000ed00

08007f90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fbb7 	bl	800671a <USBD_LL_IsoOUTIncomplete>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fb73 	bl	80066b6 <USBD_LL_IsoINIncomplete>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fbc9 	bl	800677e <USBD_LL_DevConnected>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fbc6 	bl	8006794 <USBD_LL_DevDisconnected>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d13c      	bne.n	800809a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008020:	4a20      	ldr	r2, [pc, #128]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a1e      	ldr	r2, [pc, #120]	@ (80080a4 <USBD_LL_Init+0x94>)
 800802c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008030:	4b1c      	ldr	r3, [pc, #112]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008032:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008036:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008038:	4b1a      	ldr	r3, [pc, #104]	@ (80080a4 <USBD_LL_Init+0x94>)
 800803a:	2206      	movs	r2, #6
 800803c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800803e:	4b19      	ldr	r3, [pc, #100]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008040:	2202      	movs	r2, #2
 8008042:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008044:	4b17      	ldr	r3, [pc, #92]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008046:	2202      	movs	r2, #2
 8008048:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800804a:	4b16      	ldr	r3, [pc, #88]	@ (80080a4 <USBD_LL_Init+0x94>)
 800804c:	2200      	movs	r2, #0
 800804e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008050:	4b14      	ldr	r3, [pc, #80]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008052:	2200      	movs	r2, #0
 8008054:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008056:	4b13      	ldr	r3, [pc, #76]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008058:	2200      	movs	r2, #0
 800805a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800805c:	4b11      	ldr	r3, [pc, #68]	@ (80080a4 <USBD_LL_Init+0x94>)
 800805e:	2200      	movs	r2, #0
 8008060:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008062:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008064:	2200      	movs	r2, #0
 8008066:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008068:	4b0e      	ldr	r3, [pc, #56]	@ (80080a4 <USBD_LL_Init+0x94>)
 800806a:	2200      	movs	r2, #0
 800806c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800806e:	480d      	ldr	r0, [pc, #52]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008070:	f7f8 ffe2 	bl	8001038 <HAL_PCD_Init>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800807a:	f7f8 fb27 	bl	80006cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800807e:	2180      	movs	r1, #128	@ 0x80
 8008080:	4808      	ldr	r0, [pc, #32]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008082:	f7fa f93a 	bl	80022fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008086:	2240      	movs	r2, #64	@ 0x40
 8008088:	2100      	movs	r1, #0
 800808a:	4806      	ldr	r0, [pc, #24]	@ (80080a4 <USBD_LL_Init+0x94>)
 800808c:	f7fa f8ee 	bl	800226c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008090:	2280      	movs	r2, #128	@ 0x80
 8008092:	2101      	movs	r1, #1
 8008094:	4803      	ldr	r0, [pc, #12]	@ (80080a4 <USBD_LL_Init+0x94>)
 8008096:	f7fa f8e9 	bl	800226c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20001748 	.word	0x20001748

080080a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f9 f8c9 	bl	8001256 <HAL_PCD_Start>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d816      	bhi.n	80080fc <USBD_LL_Start+0x54>
 80080ce:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <USBD_LL_Start+0x2c>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080eb 	.word	0x080080eb
 80080dc:	080080f1 	.word	0x080080f1
 80080e0:	080080f7 	.word	0x080080f7
    case HAL_OK :
      usb_status = USBD_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
    break;
 80080e8:	e00b      	b.n	8008102 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	73fb      	strb	r3, [r7, #15]
    break;
 80080ee:	e008      	b.n	8008102 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
    break;
 80080f4:	e005      	b.n	8008102 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080f6:	2303      	movs	r3, #3
 80080f8:	73fb      	strb	r3, [r7, #15]
    break;
 80080fa:	e002      	b.n	8008102 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008100:	bf00      	nop
  }
  return usb_status;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	70fb      	strb	r3, [r7, #3]
 800811e:	460b      	mov	r3, r1
 8008120:	70bb      	strb	r3, [r7, #2]
 8008122:	4613      	mov	r3, r2
 8008124:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008134:	78bb      	ldrb	r3, [r7, #2]
 8008136:	883a      	ldrh	r2, [r7, #0]
 8008138:	78f9      	ldrb	r1, [r7, #3]
 800813a:	f7f9 fd75 	bl	8001c28 <HAL_PCD_EP_Open>
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d817      	bhi.n	8008178 <USBD_LL_OpenEP+0x6c>
 8008148:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <USBD_LL_OpenEP+0x44>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008161 	.word	0x08008161
 8008154:	08008167 	.word	0x08008167
 8008158:	0800816d 	.word	0x0800816d
 800815c:	08008173 	.word	0x08008173
    case HAL_OK :
      usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
    break;
 8008164:	e00b      	b.n	800817e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008166:	2303      	movs	r3, #3
 8008168:	73fb      	strb	r3, [r7, #15]
    break;
 800816a:	e008      	b.n	800817e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
    break;
 8008170:	e005      	b.n	800817e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	73fb      	strb	r3, [r7, #15]
    break;
 8008176:	e002      	b.n	800817e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	73fb      	strb	r3, [r7, #15]
    break;
 800817c:	bf00      	nop
  }
  return usb_status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f9 fda8 	bl	8001cfc <HAL_PCD_EP_Close>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d816      	bhi.n	80081e4 <USBD_LL_CloseEP+0x5c>
 80081b6:	a201      	add	r2, pc, #4	@ (adr r2, 80081bc <USBD_LL_CloseEP+0x34>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081d3 	.word	0x080081d3
 80081c4:	080081d9 	.word	0x080081d9
 80081c8:	080081df 	.word	0x080081df
    case HAL_OK :
      usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	e00b      	b.n	80081ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	73fb      	strb	r3, [r7, #15]
    break;
 80081d6:	e008      	b.n	80081ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	e005      	b.n	80081ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081de:	2303      	movs	r3, #3
 80081e0:	73fb      	strb	r3, [r7, #15]
    break;
 80081e2:	e002      	b.n	80081ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80081e4:	2303      	movs	r3, #3
 80081e6:	73fb      	strb	r3, [r7, #15]
    break;
 80081e8:	bf00      	nop
  }
  return usb_status;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7f9 fe37 	bl	8001e86 <HAL_PCD_EP_SetStall>
 8008218:	4603      	mov	r3, r0
 800821a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b03      	cmp	r3, #3
 8008220:	d816      	bhi.n	8008250 <USBD_LL_StallEP+0x5c>
 8008222:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <USBD_LL_StallEP+0x34>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008239 	.word	0x08008239
 800822c:	0800823f 	.word	0x0800823f
 8008230:	08008245 	.word	0x08008245
 8008234:	0800824b 	.word	0x0800824b
    case HAL_OK :
      usb_status = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
    break;
 800823c:	e00b      	b.n	8008256 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800823e:	2303      	movs	r3, #3
 8008240:	73fb      	strb	r3, [r7, #15]
    break;
 8008242:	e008      	b.n	8008256 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
    break;
 8008248:	e005      	b.n	8008256 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	73fb      	strb	r3, [r7, #15]
    break;
 800824e:	e002      	b.n	8008256 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	73fb      	strb	r3, [r7, #15]
    break;
 8008254:	bf00      	nop
  }
  return usb_status;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7f9 fe63 	bl	8001f4a <HAL_PCD_EP_ClrStall>
 8008284:	4603      	mov	r3, r0
 8008286:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b03      	cmp	r3, #3
 800828c:	d816      	bhi.n	80082bc <USBD_LL_ClearStallEP+0x5c>
 800828e:	a201      	add	r2, pc, #4	@ (adr r2, 8008294 <USBD_LL_ClearStallEP+0x34>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082ab 	.word	0x080082ab
 800829c:	080082b1 	.word	0x080082b1
 80082a0:	080082b7 	.word	0x080082b7
    case HAL_OK :
      usb_status = USBD_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
    break;
 80082a8:	e00b      	b.n	80082c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082aa:	2303      	movs	r3, #3
 80082ac:	73fb      	strb	r3, [r7, #15]
    break;
 80082ae:	e008      	b.n	80082c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
    break;
 80082b4:	e005      	b.n	80082c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082b6:	2303      	movs	r3, #3
 80082b8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ba:	e002      	b.n	80082c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80082bc:	2303      	movs	r3, #3
 80082be:	73fb      	strb	r3, [r7, #15]
    break;
 80082c0:	bf00      	nop
  }
  return usb_status;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da0b      	bge.n	8008300 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	4613      	mov	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	3316      	adds	r3, #22
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	e00b      	b.n	8008318 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008316:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	4611      	mov	r1, r2
 8008342:	4618      	mov	r0, r3
 8008344:	f7f9 fc4c 	bl	8001be0 <HAL_PCD_SetAddress>
 8008348:	4603      	mov	r3, r0
 800834a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b03      	cmp	r3, #3
 8008350:	d816      	bhi.n	8008380 <USBD_LL_SetUSBAddress+0x5c>
 8008352:	a201      	add	r2, pc, #4	@ (adr r2, 8008358 <USBD_LL_SetUSBAddress+0x34>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	08008369 	.word	0x08008369
 800835c:	0800836f 	.word	0x0800836f
 8008360:	08008375 	.word	0x08008375
 8008364:	0800837b 	.word	0x0800837b
    case HAL_OK :
      usb_status = USBD_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
    break;
 800836c:	e00b      	b.n	8008386 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800836e:	2303      	movs	r3, #3
 8008370:	73fb      	strb	r3, [r7, #15]
    break;
 8008372:	e008      	b.n	8008386 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
    break;
 8008378:	e005      	b.n	8008386 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	73fb      	strb	r3, [r7, #15]
    break;
 800837e:	e002      	b.n	8008386 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	bf00      	nop
  }
  return usb_status;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	607a      	str	r2, [r7, #4]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	460b      	mov	r3, r1
 800839e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083ae:	7af9      	ldrb	r1, [r7, #11]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	f7f9 fd36 	bl	8001e24 <HAL_PCD_EP_Transmit>
 80083b8:	4603      	mov	r3, r0
 80083ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80083bc:	7dbb      	ldrb	r3, [r7, #22]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d816      	bhi.n	80083f0 <USBD_LL_Transmit+0x60>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <USBD_LL_Transmit+0x38>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083df 	.word	0x080083df
 80083d0:	080083e5 	.word	0x080083e5
 80083d4:	080083eb 	.word	0x080083eb
    case HAL_OK :
      usb_status = USBD_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	75fb      	strb	r3, [r7, #23]
    break;
 80083dc:	e00b      	b.n	80083f6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083de:	2303      	movs	r3, #3
 80083e0:	75fb      	strb	r3, [r7, #23]
    break;
 80083e2:	e008      	b.n	80083f6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083e4:	2301      	movs	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]
    break;
 80083e8:	e005      	b.n	80083f6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ea:	2303      	movs	r3, #3
 80083ec:	75fb      	strb	r3, [r7, #23]
    break;
 80083ee:	e002      	b.n	80083f6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80083f0:	2303      	movs	r3, #3
 80083f2:	75fb      	strb	r3, [r7, #23]
    break;
 80083f4:	bf00      	nop
  }
  return usb_status;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	607a      	str	r2, [r7, #4]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	460b      	mov	r3, r1
 800840e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800841e:	7af9      	ldrb	r1, [r7, #11]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	f7f9 fcb4 	bl	8001d90 <HAL_PCD_EP_Receive>
 8008428:	4603      	mov	r3, r0
 800842a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800842c:	7dbb      	ldrb	r3, [r7, #22]
 800842e:	2b03      	cmp	r3, #3
 8008430:	d816      	bhi.n	8008460 <USBD_LL_PrepareReceive+0x60>
 8008432:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <USBD_LL_PrepareReceive+0x38>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	08008449 	.word	0x08008449
 800843c:	0800844f 	.word	0x0800844f
 8008440:	08008455 	.word	0x08008455
 8008444:	0800845b 	.word	0x0800845b
    case HAL_OK :
      usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	75fb      	strb	r3, [r7, #23]
    break;
 800844c:	e00b      	b.n	8008466 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	75fb      	strb	r3, [r7, #23]
    break;
 8008452:	e008      	b.n	8008466 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008454:	2301      	movs	r3, #1
 8008456:	75fb      	strb	r3, [r7, #23]
    break;
 8008458:	e005      	b.n	8008466 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800845a:	2303      	movs	r3, #3
 800845c:	75fb      	strb	r3, [r7, #23]
    break;
 800845e:	e002      	b.n	8008466 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	75fb      	strb	r3, [r7, #23]
    break;
 8008464:	bf00      	nop
  }
  return usb_status;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7f9 fcb4 	bl	8001df4 <HAL_PCD_EP_GetRxCount>
 800848c:	4603      	mov	r3, r0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80084a4:	78fb      	ldrb	r3, [r7, #3]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <HAL_PCDEx_LPM_Callback+0x18>
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d01f      	beq.n	80084ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80084ae:	e03b      	b.n	8008528 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7adb      	ldrb	r3, [r3, #11]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80084b8:	f000 f854 	bl	8008564 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008530 <HAL_PCDEx_LPM_Callback+0x98>)
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008530 <HAL_PCDEx_LPM_Callback+0x98>)
 80084c2:	f023 0306 	bic.w	r3, r3, #6
 80084c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe f8ad 	bl	8006646 <USBD_LL_Resume>
    break;
 80084ec:	e01c      	b.n	8008528 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6812      	ldr	r2, [r2, #0]
 80084fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe f87e 	bl	800660e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7adb      	ldrb	r3, [r3, #11]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800851a:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <HAL_PCDEx_LPM_Callback+0x98>)
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	4a04      	ldr	r2, [pc, #16]	@ (8008530 <HAL_PCDEx_LPM_Callback+0x98>)
 8008520:	f043 0306 	orr.w	r3, r3, #6
 8008524:	6113      	str	r3, [r2, #16]
    break;
 8008526:	bf00      	nop
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800853c:	4b03      	ldr	r3, [pc, #12]	@ (800854c <USBD_static_malloc+0x18>)
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20001c2c 	.word	0x20001c2c

08008550 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008568:	f7f7 ff2c 	bl	80003c4 <SystemClock_Config>
}
 800856c:	bf00      	nop
 800856e:	bd80      	pop	{r7, pc}

08008570 <std>:
 8008570:	2300      	movs	r3, #0
 8008572:	b510      	push	{r4, lr}
 8008574:	4604      	mov	r4, r0
 8008576:	e9c0 3300 	strd	r3, r3, [r0]
 800857a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800857e:	6083      	str	r3, [r0, #8]
 8008580:	8181      	strh	r1, [r0, #12]
 8008582:	6643      	str	r3, [r0, #100]	@ 0x64
 8008584:	81c2      	strh	r2, [r0, #14]
 8008586:	6183      	str	r3, [r0, #24]
 8008588:	4619      	mov	r1, r3
 800858a:	2208      	movs	r2, #8
 800858c:	305c      	adds	r0, #92	@ 0x5c
 800858e:	f000 fa19 	bl	80089c4 <memset>
 8008592:	4b0d      	ldr	r3, [pc, #52]	@ (80085c8 <std+0x58>)
 8008594:	6263      	str	r3, [r4, #36]	@ 0x24
 8008596:	4b0d      	ldr	r3, [pc, #52]	@ (80085cc <std+0x5c>)
 8008598:	62a3      	str	r3, [r4, #40]	@ 0x28
 800859a:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <std+0x60>)
 800859c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800859e:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <std+0x64>)
 80085a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80085a2:	4b0d      	ldr	r3, [pc, #52]	@ (80085d8 <std+0x68>)
 80085a4:	6224      	str	r4, [r4, #32]
 80085a6:	429c      	cmp	r4, r3
 80085a8:	d006      	beq.n	80085b8 <std+0x48>
 80085aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085ae:	4294      	cmp	r4, r2
 80085b0:	d002      	beq.n	80085b8 <std+0x48>
 80085b2:	33d0      	adds	r3, #208	@ 0xd0
 80085b4:	429c      	cmp	r4, r3
 80085b6:	d105      	bne.n	80085c4 <std+0x54>
 80085b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c0:	f000 ba78 	b.w	8008ab4 <__retarget_lock_init_recursive>
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	bf00      	nop
 80085c8:	08008815 	.word	0x08008815
 80085cc:	08008837 	.word	0x08008837
 80085d0:	0800886f 	.word	0x0800886f
 80085d4:	08008893 	.word	0x08008893
 80085d8:	20001e4c 	.word	0x20001e4c

080085dc <stdio_exit_handler>:
 80085dc:	4a02      	ldr	r2, [pc, #8]	@ (80085e8 <stdio_exit_handler+0xc>)
 80085de:	4903      	ldr	r1, [pc, #12]	@ (80085ec <stdio_exit_handler+0x10>)
 80085e0:	4803      	ldr	r0, [pc, #12]	@ (80085f0 <stdio_exit_handler+0x14>)
 80085e2:	f000 b869 	b.w	80086b8 <_fwalk_sglue>
 80085e6:	bf00      	nop
 80085e8:	2000010c 	.word	0x2000010c
 80085ec:	08009605 	.word	0x08009605
 80085f0:	2000011c 	.word	0x2000011c

080085f4 <cleanup_stdio>:
 80085f4:	6841      	ldr	r1, [r0, #4]
 80085f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008628 <cleanup_stdio+0x34>)
 80085f8:	4299      	cmp	r1, r3
 80085fa:	b510      	push	{r4, lr}
 80085fc:	4604      	mov	r4, r0
 80085fe:	d001      	beq.n	8008604 <cleanup_stdio+0x10>
 8008600:	f001 f800 	bl	8009604 <_fflush_r>
 8008604:	68a1      	ldr	r1, [r4, #8]
 8008606:	4b09      	ldr	r3, [pc, #36]	@ (800862c <cleanup_stdio+0x38>)
 8008608:	4299      	cmp	r1, r3
 800860a:	d002      	beq.n	8008612 <cleanup_stdio+0x1e>
 800860c:	4620      	mov	r0, r4
 800860e:	f000 fff9 	bl	8009604 <_fflush_r>
 8008612:	68e1      	ldr	r1, [r4, #12]
 8008614:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <cleanup_stdio+0x3c>)
 8008616:	4299      	cmp	r1, r3
 8008618:	d004      	beq.n	8008624 <cleanup_stdio+0x30>
 800861a:	4620      	mov	r0, r4
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	f000 bff0 	b.w	8009604 <_fflush_r>
 8008624:	bd10      	pop	{r4, pc}
 8008626:	bf00      	nop
 8008628:	20001e4c 	.word	0x20001e4c
 800862c:	20001eb4 	.word	0x20001eb4
 8008630:	20001f1c 	.word	0x20001f1c

08008634 <global_stdio_init.part.0>:
 8008634:	b510      	push	{r4, lr}
 8008636:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <global_stdio_init.part.0+0x30>)
 8008638:	4c0b      	ldr	r4, [pc, #44]	@ (8008668 <global_stdio_init.part.0+0x34>)
 800863a:	4a0c      	ldr	r2, [pc, #48]	@ (800866c <global_stdio_init.part.0+0x38>)
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	4620      	mov	r0, r4
 8008640:	2200      	movs	r2, #0
 8008642:	2104      	movs	r1, #4
 8008644:	f7ff ff94 	bl	8008570 <std>
 8008648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800864c:	2201      	movs	r2, #1
 800864e:	2109      	movs	r1, #9
 8008650:	f7ff ff8e 	bl	8008570 <std>
 8008654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008658:	2202      	movs	r2, #2
 800865a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800865e:	2112      	movs	r1, #18
 8008660:	f7ff bf86 	b.w	8008570 <std>
 8008664:	20001f84 	.word	0x20001f84
 8008668:	20001e4c 	.word	0x20001e4c
 800866c:	080085dd 	.word	0x080085dd

08008670 <__sfp_lock_acquire>:
 8008670:	4801      	ldr	r0, [pc, #4]	@ (8008678 <__sfp_lock_acquire+0x8>)
 8008672:	f000 ba20 	b.w	8008ab6 <__retarget_lock_acquire_recursive>
 8008676:	bf00      	nop
 8008678:	20001f8d 	.word	0x20001f8d

0800867c <__sfp_lock_release>:
 800867c:	4801      	ldr	r0, [pc, #4]	@ (8008684 <__sfp_lock_release+0x8>)
 800867e:	f000 ba1b 	b.w	8008ab8 <__retarget_lock_release_recursive>
 8008682:	bf00      	nop
 8008684:	20001f8d 	.word	0x20001f8d

08008688 <__sinit>:
 8008688:	b510      	push	{r4, lr}
 800868a:	4604      	mov	r4, r0
 800868c:	f7ff fff0 	bl	8008670 <__sfp_lock_acquire>
 8008690:	6a23      	ldr	r3, [r4, #32]
 8008692:	b11b      	cbz	r3, 800869c <__sinit+0x14>
 8008694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008698:	f7ff bff0 	b.w	800867c <__sfp_lock_release>
 800869c:	4b04      	ldr	r3, [pc, #16]	@ (80086b0 <__sinit+0x28>)
 800869e:	6223      	str	r3, [r4, #32]
 80086a0:	4b04      	ldr	r3, [pc, #16]	@ (80086b4 <__sinit+0x2c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1f5      	bne.n	8008694 <__sinit+0xc>
 80086a8:	f7ff ffc4 	bl	8008634 <global_stdio_init.part.0>
 80086ac:	e7f2      	b.n	8008694 <__sinit+0xc>
 80086ae:	bf00      	nop
 80086b0:	080085f5 	.word	0x080085f5
 80086b4:	20001f84 	.word	0x20001f84

080086b8 <_fwalk_sglue>:
 80086b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086bc:	4607      	mov	r7, r0
 80086be:	4688      	mov	r8, r1
 80086c0:	4614      	mov	r4, r2
 80086c2:	2600      	movs	r6, #0
 80086c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086c8:	f1b9 0901 	subs.w	r9, r9, #1
 80086cc:	d505      	bpl.n	80086da <_fwalk_sglue+0x22>
 80086ce:	6824      	ldr	r4, [r4, #0]
 80086d0:	2c00      	cmp	r4, #0
 80086d2:	d1f7      	bne.n	80086c4 <_fwalk_sglue+0xc>
 80086d4:	4630      	mov	r0, r6
 80086d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d907      	bls.n	80086f0 <_fwalk_sglue+0x38>
 80086e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086e4:	3301      	adds	r3, #1
 80086e6:	d003      	beq.n	80086f0 <_fwalk_sglue+0x38>
 80086e8:	4629      	mov	r1, r5
 80086ea:	4638      	mov	r0, r7
 80086ec:	47c0      	blx	r8
 80086ee:	4306      	orrs	r6, r0
 80086f0:	3568      	adds	r5, #104	@ 0x68
 80086f2:	e7e9      	b.n	80086c8 <_fwalk_sglue+0x10>

080086f4 <iprintf>:
 80086f4:	b40f      	push	{r0, r1, r2, r3}
 80086f6:	b507      	push	{r0, r1, r2, lr}
 80086f8:	4906      	ldr	r1, [pc, #24]	@ (8008714 <iprintf+0x20>)
 80086fa:	ab04      	add	r3, sp, #16
 80086fc:	6808      	ldr	r0, [r1, #0]
 80086fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008702:	6881      	ldr	r1, [r0, #8]
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	f000 fc53 	bl	8008fb0 <_vfiprintf_r>
 800870a:	b003      	add	sp, #12
 800870c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008710:	b004      	add	sp, #16
 8008712:	4770      	bx	lr
 8008714:	20000118 	.word	0x20000118

08008718 <_puts_r>:
 8008718:	6a03      	ldr	r3, [r0, #32]
 800871a:	b570      	push	{r4, r5, r6, lr}
 800871c:	6884      	ldr	r4, [r0, #8]
 800871e:	4605      	mov	r5, r0
 8008720:	460e      	mov	r6, r1
 8008722:	b90b      	cbnz	r3, 8008728 <_puts_r+0x10>
 8008724:	f7ff ffb0 	bl	8008688 <__sinit>
 8008728:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800872a:	07db      	lsls	r3, r3, #31
 800872c:	d405      	bmi.n	800873a <_puts_r+0x22>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	0598      	lsls	r0, r3, #22
 8008732:	d402      	bmi.n	800873a <_puts_r+0x22>
 8008734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008736:	f000 f9be 	bl	8008ab6 <__retarget_lock_acquire_recursive>
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	0719      	lsls	r1, r3, #28
 800873e:	d502      	bpl.n	8008746 <_puts_r+0x2e>
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d135      	bne.n	80087b2 <_puts_r+0x9a>
 8008746:	4621      	mov	r1, r4
 8008748:	4628      	mov	r0, r5
 800874a:	f000 f8e5 	bl	8008918 <__swsetup_r>
 800874e:	b380      	cbz	r0, 80087b2 <_puts_r+0x9a>
 8008750:	f04f 35ff 	mov.w	r5, #4294967295
 8008754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008756:	07da      	lsls	r2, r3, #31
 8008758:	d405      	bmi.n	8008766 <_puts_r+0x4e>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	059b      	lsls	r3, r3, #22
 800875e:	d402      	bmi.n	8008766 <_puts_r+0x4e>
 8008760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008762:	f000 f9a9 	bl	8008ab8 <__retarget_lock_release_recursive>
 8008766:	4628      	mov	r0, r5
 8008768:	bd70      	pop	{r4, r5, r6, pc}
 800876a:	2b00      	cmp	r3, #0
 800876c:	da04      	bge.n	8008778 <_puts_r+0x60>
 800876e:	69a2      	ldr	r2, [r4, #24]
 8008770:	429a      	cmp	r2, r3
 8008772:	dc17      	bgt.n	80087a4 <_puts_r+0x8c>
 8008774:	290a      	cmp	r1, #10
 8008776:	d015      	beq.n	80087a4 <_puts_r+0x8c>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	7019      	strb	r1, [r3, #0]
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008786:	3b01      	subs	r3, #1
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	2900      	cmp	r1, #0
 800878c:	d1ed      	bne.n	800876a <_puts_r+0x52>
 800878e:	2b00      	cmp	r3, #0
 8008790:	da11      	bge.n	80087b6 <_puts_r+0x9e>
 8008792:	4622      	mov	r2, r4
 8008794:	210a      	movs	r1, #10
 8008796:	4628      	mov	r0, r5
 8008798:	f000 f87f 	bl	800889a <__swbuf_r>
 800879c:	3001      	adds	r0, #1
 800879e:	d0d7      	beq.n	8008750 <_puts_r+0x38>
 80087a0:	250a      	movs	r5, #10
 80087a2:	e7d7      	b.n	8008754 <_puts_r+0x3c>
 80087a4:	4622      	mov	r2, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f877 	bl	800889a <__swbuf_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d1e7      	bne.n	8008780 <_puts_r+0x68>
 80087b0:	e7ce      	b.n	8008750 <_puts_r+0x38>
 80087b2:	3e01      	subs	r6, #1
 80087b4:	e7e4      	b.n	8008780 <_puts_r+0x68>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	220a      	movs	r2, #10
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	e7ee      	b.n	80087a0 <_puts_r+0x88>
	...

080087c4 <puts>:
 80087c4:	4b02      	ldr	r3, [pc, #8]	@ (80087d0 <puts+0xc>)
 80087c6:	4601      	mov	r1, r0
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f7ff bfa5 	b.w	8008718 <_puts_r>
 80087ce:	bf00      	nop
 80087d0:	20000118 	.word	0x20000118

080087d4 <siprintf>:
 80087d4:	b40e      	push	{r1, r2, r3}
 80087d6:	b500      	push	{lr}
 80087d8:	b09c      	sub	sp, #112	@ 0x70
 80087da:	ab1d      	add	r3, sp, #116	@ 0x74
 80087dc:	9002      	str	r0, [sp, #8]
 80087de:	9006      	str	r0, [sp, #24]
 80087e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80087e4:	4809      	ldr	r0, [pc, #36]	@ (800880c <siprintf+0x38>)
 80087e6:	9107      	str	r1, [sp, #28]
 80087e8:	9104      	str	r1, [sp, #16]
 80087ea:	4909      	ldr	r1, [pc, #36]	@ (8008810 <siprintf+0x3c>)
 80087ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f0:	9105      	str	r1, [sp, #20]
 80087f2:	6800      	ldr	r0, [r0, #0]
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	a902      	add	r1, sp, #8
 80087f8:	f000 fab4 	bl	8008d64 <_svfiprintf_r>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	b01c      	add	sp, #112	@ 0x70
 8008804:	f85d eb04 	ldr.w	lr, [sp], #4
 8008808:	b003      	add	sp, #12
 800880a:	4770      	bx	lr
 800880c:	20000118 	.word	0x20000118
 8008810:	ffff0208 	.word	0xffff0208

08008814 <__sread>:
 8008814:	b510      	push	{r4, lr}
 8008816:	460c      	mov	r4, r1
 8008818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881c:	f000 f8fc 	bl	8008a18 <_read_r>
 8008820:	2800      	cmp	r0, #0
 8008822:	bfab      	itete	ge
 8008824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008826:	89a3      	ldrhlt	r3, [r4, #12]
 8008828:	181b      	addge	r3, r3, r0
 800882a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800882e:	bfac      	ite	ge
 8008830:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008832:	81a3      	strhlt	r3, [r4, #12]
 8008834:	bd10      	pop	{r4, pc}

08008836 <__swrite>:
 8008836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883a:	461f      	mov	r7, r3
 800883c:	898b      	ldrh	r3, [r1, #12]
 800883e:	05db      	lsls	r3, r3, #23
 8008840:	4605      	mov	r5, r0
 8008842:	460c      	mov	r4, r1
 8008844:	4616      	mov	r6, r2
 8008846:	d505      	bpl.n	8008854 <__swrite+0x1e>
 8008848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884c:	2302      	movs	r3, #2
 800884e:	2200      	movs	r2, #0
 8008850:	f000 f8d0 	bl	80089f4 <_lseek_r>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800885a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800885e:	81a3      	strh	r3, [r4, #12]
 8008860:	4632      	mov	r2, r6
 8008862:	463b      	mov	r3, r7
 8008864:	4628      	mov	r0, r5
 8008866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800886a:	f000 b8e7 	b.w	8008a3c <_write_r>

0800886e <__sseek>:
 800886e:	b510      	push	{r4, lr}
 8008870:	460c      	mov	r4, r1
 8008872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008876:	f000 f8bd 	bl	80089f4 <_lseek_r>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	bf15      	itete	ne
 8008880:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008882:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008886:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800888a:	81a3      	strheq	r3, [r4, #12]
 800888c:	bf18      	it	ne
 800888e:	81a3      	strhne	r3, [r4, #12]
 8008890:	bd10      	pop	{r4, pc}

08008892 <__sclose>:
 8008892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008896:	f000 b89d 	b.w	80089d4 <_close_r>

0800889a <__swbuf_r>:
 800889a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889c:	460e      	mov	r6, r1
 800889e:	4614      	mov	r4, r2
 80088a0:	4605      	mov	r5, r0
 80088a2:	b118      	cbz	r0, 80088ac <__swbuf_r+0x12>
 80088a4:	6a03      	ldr	r3, [r0, #32]
 80088a6:	b90b      	cbnz	r3, 80088ac <__swbuf_r+0x12>
 80088a8:	f7ff feee 	bl	8008688 <__sinit>
 80088ac:	69a3      	ldr	r3, [r4, #24]
 80088ae:	60a3      	str	r3, [r4, #8]
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	071a      	lsls	r2, r3, #28
 80088b4:	d501      	bpl.n	80088ba <__swbuf_r+0x20>
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	b943      	cbnz	r3, 80088cc <__swbuf_r+0x32>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 f82b 	bl	8008918 <__swsetup_r>
 80088c2:	b118      	cbz	r0, 80088cc <__swbuf_r+0x32>
 80088c4:	f04f 37ff 	mov.w	r7, #4294967295
 80088c8:	4638      	mov	r0, r7
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	6922      	ldr	r2, [r4, #16]
 80088d0:	1a98      	subs	r0, r3, r2
 80088d2:	6963      	ldr	r3, [r4, #20]
 80088d4:	b2f6      	uxtb	r6, r6
 80088d6:	4283      	cmp	r3, r0
 80088d8:	4637      	mov	r7, r6
 80088da:	dc05      	bgt.n	80088e8 <__swbuf_r+0x4e>
 80088dc:	4621      	mov	r1, r4
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 fe90 	bl	8009604 <_fflush_r>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d1ed      	bne.n	80088c4 <__swbuf_r+0x2a>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	701e      	strb	r6, [r3, #0]
 80088f6:	6962      	ldr	r2, [r4, #20]
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d004      	beq.n	8008908 <__swbuf_r+0x6e>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	07db      	lsls	r3, r3, #31
 8008902:	d5e1      	bpl.n	80088c8 <__swbuf_r+0x2e>
 8008904:	2e0a      	cmp	r6, #10
 8008906:	d1df      	bne.n	80088c8 <__swbuf_r+0x2e>
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f000 fe7a 	bl	8009604 <_fflush_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	d0d9      	beq.n	80088c8 <__swbuf_r+0x2e>
 8008914:	e7d6      	b.n	80088c4 <__swbuf_r+0x2a>
	...

08008918 <__swsetup_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4b29      	ldr	r3, [pc, #164]	@ (80089c0 <__swsetup_r+0xa8>)
 800891c:	4605      	mov	r5, r0
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	460c      	mov	r4, r1
 8008922:	b118      	cbz	r0, 800892c <__swsetup_r+0x14>
 8008924:	6a03      	ldr	r3, [r0, #32]
 8008926:	b90b      	cbnz	r3, 800892c <__swsetup_r+0x14>
 8008928:	f7ff feae 	bl	8008688 <__sinit>
 800892c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008930:	0719      	lsls	r1, r3, #28
 8008932:	d422      	bmi.n	800897a <__swsetup_r+0x62>
 8008934:	06da      	lsls	r2, r3, #27
 8008936:	d407      	bmi.n	8008948 <__swsetup_r+0x30>
 8008938:	2209      	movs	r2, #9
 800893a:	602a      	str	r2, [r5, #0]
 800893c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	f04f 30ff 	mov.w	r0, #4294967295
 8008946:	e033      	b.n	80089b0 <__swsetup_r+0x98>
 8008948:	0758      	lsls	r0, r3, #29
 800894a:	d512      	bpl.n	8008972 <__swsetup_r+0x5a>
 800894c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800894e:	b141      	cbz	r1, 8008962 <__swsetup_r+0x4a>
 8008950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008954:	4299      	cmp	r1, r3
 8008956:	d002      	beq.n	800895e <__swsetup_r+0x46>
 8008958:	4628      	mov	r0, r5
 800895a:	f000 f8af 	bl	8008abc <_free_r>
 800895e:	2300      	movs	r3, #0
 8008960:	6363      	str	r3, [r4, #52]	@ 0x34
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	2300      	movs	r3, #0
 800896c:	6063      	str	r3, [r4, #4]
 800896e:	6923      	ldr	r3, [r4, #16]
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f043 0308 	orr.w	r3, r3, #8
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	b94b      	cbnz	r3, 8008992 <__swsetup_r+0x7a>
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008988:	d003      	beq.n	8008992 <__swsetup_r+0x7a>
 800898a:	4621      	mov	r1, r4
 800898c:	4628      	mov	r0, r5
 800898e:	f000 fe87 	bl	80096a0 <__smakebuf_r>
 8008992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008996:	f013 0201 	ands.w	r2, r3, #1
 800899a:	d00a      	beq.n	80089b2 <__swsetup_r+0x9a>
 800899c:	2200      	movs	r2, #0
 800899e:	60a2      	str	r2, [r4, #8]
 80089a0:	6962      	ldr	r2, [r4, #20]
 80089a2:	4252      	negs	r2, r2
 80089a4:	61a2      	str	r2, [r4, #24]
 80089a6:	6922      	ldr	r2, [r4, #16]
 80089a8:	b942      	cbnz	r2, 80089bc <__swsetup_r+0xa4>
 80089aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ae:	d1c5      	bne.n	800893c <__swsetup_r+0x24>
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	0799      	lsls	r1, r3, #30
 80089b4:	bf58      	it	pl
 80089b6:	6962      	ldrpl	r2, [r4, #20]
 80089b8:	60a2      	str	r2, [r4, #8]
 80089ba:	e7f4      	b.n	80089a6 <__swsetup_r+0x8e>
 80089bc:	2000      	movs	r0, #0
 80089be:	e7f7      	b.n	80089b0 <__swsetup_r+0x98>
 80089c0:	20000118 	.word	0x20000118

080089c4 <memset>:
 80089c4:	4402      	add	r2, r0
 80089c6:	4603      	mov	r3, r0
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d100      	bne.n	80089ce <memset+0xa>
 80089cc:	4770      	bx	lr
 80089ce:	f803 1b01 	strb.w	r1, [r3], #1
 80089d2:	e7f9      	b.n	80089c8 <memset+0x4>

080089d4 <_close_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d06      	ldr	r5, [pc, #24]	@ (80089f0 <_close_r+0x1c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	602b      	str	r3, [r5, #0]
 80089e0:	f7f7 ff15 	bl	800080e <_close>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_close_r+0x1a>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_close_r+0x1a>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	20001f88 	.word	0x20001f88

080089f4 <_lseek_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d07      	ldr	r5, [pc, #28]	@ (8008a14 <_lseek_r+0x20>)
 80089f8:	4604      	mov	r4, r0
 80089fa:	4608      	mov	r0, r1
 80089fc:	4611      	mov	r1, r2
 80089fe:	2200      	movs	r2, #0
 8008a00:	602a      	str	r2, [r5, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	f7f7 ff2a 	bl	800085c <_lseek>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_lseek_r+0x1e>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_lseek_r+0x1e>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20001f88 	.word	0x20001f88

08008a18 <_read_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d07      	ldr	r5, [pc, #28]	@ (8008a38 <_read_r+0x20>)
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	4608      	mov	r0, r1
 8008a20:	4611      	mov	r1, r2
 8008a22:	2200      	movs	r2, #0
 8008a24:	602a      	str	r2, [r5, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	f7f7 fed4 	bl	80007d4 <_read>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_read_r+0x1e>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_read_r+0x1e>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20001f88 	.word	0x20001f88

08008a3c <_write_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d07      	ldr	r5, [pc, #28]	@ (8008a5c <_write_r+0x20>)
 8008a40:	4604      	mov	r4, r0
 8008a42:	4608      	mov	r0, r1
 8008a44:	4611      	mov	r1, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	602a      	str	r2, [r5, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f7f7 fde0 	bl	8000610 <_write>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_write_r+0x1e>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_write_r+0x1e>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	20001f88 	.word	0x20001f88

08008a60 <__errno>:
 8008a60:	4b01      	ldr	r3, [pc, #4]	@ (8008a68 <__errno+0x8>)
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	20000118 	.word	0x20000118

08008a6c <__libc_init_array>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8008aa4 <__libc_init_array+0x38>)
 8008a70:	4c0d      	ldr	r4, [pc, #52]	@ (8008aa8 <__libc_init_array+0x3c>)
 8008a72:	1b64      	subs	r4, r4, r5
 8008a74:	10a4      	asrs	r4, r4, #2
 8008a76:	2600      	movs	r6, #0
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	d109      	bne.n	8008a90 <__libc_init_array+0x24>
 8008a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8008aac <__libc_init_array+0x40>)
 8008a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8008ab0 <__libc_init_array+0x44>)
 8008a80:	f000 feda 	bl	8009838 <_init>
 8008a84:	1b64      	subs	r4, r4, r5
 8008a86:	10a4      	asrs	r4, r4, #2
 8008a88:	2600      	movs	r6, #0
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	d105      	bne.n	8008a9a <__libc_init_array+0x2e>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a94:	4798      	blx	r3
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7ee      	b.n	8008a78 <__libc_init_array+0xc>
 8008a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9e:	4798      	blx	r3
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7f2      	b.n	8008a8a <__libc_init_array+0x1e>
 8008aa4:	080099a0 	.word	0x080099a0
 8008aa8:	080099a0 	.word	0x080099a0
 8008aac:	080099a0 	.word	0x080099a0
 8008ab0:	080099a4 	.word	0x080099a4

08008ab4 <__retarget_lock_init_recursive>:
 8008ab4:	4770      	bx	lr

08008ab6 <__retarget_lock_acquire_recursive>:
 8008ab6:	4770      	bx	lr

08008ab8 <__retarget_lock_release_recursive>:
 8008ab8:	4770      	bx	lr
	...

08008abc <_free_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4605      	mov	r5, r0
 8008ac0:	2900      	cmp	r1, #0
 8008ac2:	d041      	beq.n	8008b48 <_free_r+0x8c>
 8008ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ac8:	1f0c      	subs	r4, r1, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfb8      	it	lt
 8008ace:	18e4      	addlt	r4, r4, r3
 8008ad0:	f000 f8e0 	bl	8008c94 <__malloc_lock>
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <_free_r+0x90>)
 8008ad6:	6813      	ldr	r3, [r2, #0]
 8008ad8:	b933      	cbnz	r3, 8008ae8 <_free_r+0x2c>
 8008ada:	6063      	str	r3, [r4, #4]
 8008adc:	6014      	str	r4, [r2, #0]
 8008ade:	4628      	mov	r0, r5
 8008ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae4:	f000 b8dc 	b.w	8008ca0 <__malloc_unlock>
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d908      	bls.n	8008afe <_free_r+0x42>
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	1821      	adds	r1, r4, r0
 8008af0:	428b      	cmp	r3, r1
 8008af2:	bf01      	itttt	eq
 8008af4:	6819      	ldreq	r1, [r3, #0]
 8008af6:	685b      	ldreq	r3, [r3, #4]
 8008af8:	1809      	addeq	r1, r1, r0
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	e7ed      	b.n	8008ada <_free_r+0x1e>
 8008afe:	461a      	mov	r2, r3
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	b10b      	cbz	r3, 8008b08 <_free_r+0x4c>
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	d9fa      	bls.n	8008afe <_free_r+0x42>
 8008b08:	6811      	ldr	r1, [r2, #0]
 8008b0a:	1850      	adds	r0, r2, r1
 8008b0c:	42a0      	cmp	r0, r4
 8008b0e:	d10b      	bne.n	8008b28 <_free_r+0x6c>
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	4401      	add	r1, r0
 8008b14:	1850      	adds	r0, r2, r1
 8008b16:	4283      	cmp	r3, r0
 8008b18:	6011      	str	r1, [r2, #0]
 8008b1a:	d1e0      	bne.n	8008ade <_free_r+0x22>
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	6053      	str	r3, [r2, #4]
 8008b22:	4408      	add	r0, r1
 8008b24:	6010      	str	r0, [r2, #0]
 8008b26:	e7da      	b.n	8008ade <_free_r+0x22>
 8008b28:	d902      	bls.n	8008b30 <_free_r+0x74>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	602b      	str	r3, [r5, #0]
 8008b2e:	e7d6      	b.n	8008ade <_free_r+0x22>
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	1821      	adds	r1, r4, r0
 8008b34:	428b      	cmp	r3, r1
 8008b36:	bf04      	itt	eq
 8008b38:	6819      	ldreq	r1, [r3, #0]
 8008b3a:	685b      	ldreq	r3, [r3, #4]
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	bf04      	itt	eq
 8008b40:	1809      	addeq	r1, r1, r0
 8008b42:	6021      	streq	r1, [r4, #0]
 8008b44:	6054      	str	r4, [r2, #4]
 8008b46:	e7ca      	b.n	8008ade <_free_r+0x22>
 8008b48:	bd38      	pop	{r3, r4, r5, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20001f94 	.word	0x20001f94

08008b50 <sbrk_aligned>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4e0f      	ldr	r6, [pc, #60]	@ (8008b90 <sbrk_aligned+0x40>)
 8008b54:	460c      	mov	r4, r1
 8008b56:	6831      	ldr	r1, [r6, #0]
 8008b58:	4605      	mov	r5, r0
 8008b5a:	b911      	cbnz	r1, 8008b62 <sbrk_aligned+0x12>
 8008b5c:	f000 fe18 	bl	8009790 <_sbrk_r>
 8008b60:	6030      	str	r0, [r6, #0]
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 fe13 	bl	8009790 <_sbrk_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d103      	bne.n	8008b76 <sbrk_aligned+0x26>
 8008b6e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b72:	4620      	mov	r0, r4
 8008b74:	bd70      	pop	{r4, r5, r6, pc}
 8008b76:	1cc4      	adds	r4, r0, #3
 8008b78:	f024 0403 	bic.w	r4, r4, #3
 8008b7c:	42a0      	cmp	r0, r4
 8008b7e:	d0f8      	beq.n	8008b72 <sbrk_aligned+0x22>
 8008b80:	1a21      	subs	r1, r4, r0
 8008b82:	4628      	mov	r0, r5
 8008b84:	f000 fe04 	bl	8009790 <_sbrk_r>
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d1f2      	bne.n	8008b72 <sbrk_aligned+0x22>
 8008b8c:	e7ef      	b.n	8008b6e <sbrk_aligned+0x1e>
 8008b8e:	bf00      	nop
 8008b90:	20001f90 	.word	0x20001f90

08008b94 <_malloc_r>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	1ccd      	adds	r5, r1, #3
 8008b9a:	f025 0503 	bic.w	r5, r5, #3
 8008b9e:	3508      	adds	r5, #8
 8008ba0:	2d0c      	cmp	r5, #12
 8008ba2:	bf38      	it	cc
 8008ba4:	250c      	movcc	r5, #12
 8008ba6:	2d00      	cmp	r5, #0
 8008ba8:	4606      	mov	r6, r0
 8008baa:	db01      	blt.n	8008bb0 <_malloc_r+0x1c>
 8008bac:	42a9      	cmp	r1, r5
 8008bae:	d904      	bls.n	8008bba <_malloc_r+0x26>
 8008bb0:	230c      	movs	r3, #12
 8008bb2:	6033      	str	r3, [r6, #0]
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c90 <_malloc_r+0xfc>
 8008bbe:	f000 f869 	bl	8008c94 <__malloc_lock>
 8008bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bc6:	461c      	mov	r4, r3
 8008bc8:	bb44      	cbnz	r4, 8008c1c <_malloc_r+0x88>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f7ff ffbf 	bl	8008b50 <sbrk_aligned>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	d158      	bne.n	8008c8a <_malloc_r+0xf6>
 8008bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bdc:	4627      	mov	r7, r4
 8008bde:	2f00      	cmp	r7, #0
 8008be0:	d143      	bne.n	8008c6a <_malloc_r+0xd6>
 8008be2:	2c00      	cmp	r4, #0
 8008be4:	d04b      	beq.n	8008c7e <_malloc_r+0xea>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	4639      	mov	r1, r7
 8008bea:	4630      	mov	r0, r6
 8008bec:	eb04 0903 	add.w	r9, r4, r3
 8008bf0:	f000 fdce 	bl	8009790 <_sbrk_r>
 8008bf4:	4581      	cmp	r9, r0
 8008bf6:	d142      	bne.n	8008c7e <_malloc_r+0xea>
 8008bf8:	6821      	ldr	r1, [r4, #0]
 8008bfa:	1a6d      	subs	r5, r5, r1
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f7ff ffa6 	bl	8008b50 <sbrk_aligned>
 8008c04:	3001      	adds	r0, #1
 8008c06:	d03a      	beq.n	8008c7e <_malloc_r+0xea>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	442b      	add	r3, r5
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	bb62      	cbnz	r2, 8008c70 <_malloc_r+0xdc>
 8008c16:	f8c8 7000 	str.w	r7, [r8]
 8008c1a:	e00f      	b.n	8008c3c <_malloc_r+0xa8>
 8008c1c:	6822      	ldr	r2, [r4, #0]
 8008c1e:	1b52      	subs	r2, r2, r5
 8008c20:	d420      	bmi.n	8008c64 <_malloc_r+0xd0>
 8008c22:	2a0b      	cmp	r2, #11
 8008c24:	d917      	bls.n	8008c56 <_malloc_r+0xc2>
 8008c26:	1961      	adds	r1, r4, r5
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	6025      	str	r5, [r4, #0]
 8008c2c:	bf18      	it	ne
 8008c2e:	6059      	strne	r1, [r3, #4]
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	bf08      	it	eq
 8008c34:	f8c8 1000 	streq.w	r1, [r8]
 8008c38:	5162      	str	r2, [r4, r5]
 8008c3a:	604b      	str	r3, [r1, #4]
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 f82f 	bl	8008ca0 <__malloc_unlock>
 8008c42:	f104 000b 	add.w	r0, r4, #11
 8008c46:	1d23      	adds	r3, r4, #4
 8008c48:	f020 0007 	bic.w	r0, r0, #7
 8008c4c:	1ac2      	subs	r2, r0, r3
 8008c4e:	bf1c      	itt	ne
 8008c50:	1a1b      	subne	r3, r3, r0
 8008c52:	50a3      	strne	r3, [r4, r2]
 8008c54:	e7af      	b.n	8008bb6 <_malloc_r+0x22>
 8008c56:	6862      	ldr	r2, [r4, #4]
 8008c58:	42a3      	cmp	r3, r4
 8008c5a:	bf0c      	ite	eq
 8008c5c:	f8c8 2000 	streq.w	r2, [r8]
 8008c60:	605a      	strne	r2, [r3, #4]
 8008c62:	e7eb      	b.n	8008c3c <_malloc_r+0xa8>
 8008c64:	4623      	mov	r3, r4
 8008c66:	6864      	ldr	r4, [r4, #4]
 8008c68:	e7ae      	b.n	8008bc8 <_malloc_r+0x34>
 8008c6a:	463c      	mov	r4, r7
 8008c6c:	687f      	ldr	r7, [r7, #4]
 8008c6e:	e7b6      	b.n	8008bde <_malloc_r+0x4a>
 8008c70:	461a      	mov	r2, r3
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	d1fb      	bne.n	8008c70 <_malloc_r+0xdc>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	6053      	str	r3, [r2, #4]
 8008c7c:	e7de      	b.n	8008c3c <_malloc_r+0xa8>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	6033      	str	r3, [r6, #0]
 8008c82:	4630      	mov	r0, r6
 8008c84:	f000 f80c 	bl	8008ca0 <__malloc_unlock>
 8008c88:	e794      	b.n	8008bb4 <_malloc_r+0x20>
 8008c8a:	6005      	str	r5, [r0, #0]
 8008c8c:	e7d6      	b.n	8008c3c <_malloc_r+0xa8>
 8008c8e:	bf00      	nop
 8008c90:	20001f94 	.word	0x20001f94

08008c94 <__malloc_lock>:
 8008c94:	4801      	ldr	r0, [pc, #4]	@ (8008c9c <__malloc_lock+0x8>)
 8008c96:	f7ff bf0e 	b.w	8008ab6 <__retarget_lock_acquire_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20001f8c 	.word	0x20001f8c

08008ca0 <__malloc_unlock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	@ (8008ca8 <__malloc_unlock+0x8>)
 8008ca2:	f7ff bf09 	b.w	8008ab8 <__retarget_lock_release_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20001f8c 	.word	0x20001f8c

08008cac <__ssputs_r>:
 8008cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	688e      	ldr	r6, [r1, #8]
 8008cb2:	461f      	mov	r7, r3
 8008cb4:	42be      	cmp	r6, r7
 8008cb6:	680b      	ldr	r3, [r1, #0]
 8008cb8:	4682      	mov	sl, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	4690      	mov	r8, r2
 8008cbe:	d82d      	bhi.n	8008d1c <__ssputs_r+0x70>
 8008cc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cc8:	d026      	beq.n	8008d18 <__ssputs_r+0x6c>
 8008cca:	6965      	ldr	r5, [r4, #20]
 8008ccc:	6909      	ldr	r1, [r1, #16]
 8008cce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cd2:	eba3 0901 	sub.w	r9, r3, r1
 8008cd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cda:	1c7b      	adds	r3, r7, #1
 8008cdc:	444b      	add	r3, r9
 8008cde:	106d      	asrs	r5, r5, #1
 8008ce0:	429d      	cmp	r5, r3
 8008ce2:	bf38      	it	cc
 8008ce4:	461d      	movcc	r5, r3
 8008ce6:	0553      	lsls	r3, r2, #21
 8008ce8:	d527      	bpl.n	8008d3a <__ssputs_r+0x8e>
 8008cea:	4629      	mov	r1, r5
 8008cec:	f7ff ff52 	bl	8008b94 <_malloc_r>
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	b360      	cbz	r0, 8008d4e <__ssputs_r+0xa2>
 8008cf4:	6921      	ldr	r1, [r4, #16]
 8008cf6:	464a      	mov	r2, r9
 8008cf8:	f000 fd5a 	bl	80097b0 <memcpy>
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	6126      	str	r6, [r4, #16]
 8008d0a:	6165      	str	r5, [r4, #20]
 8008d0c:	444e      	add	r6, r9
 8008d0e:	eba5 0509 	sub.w	r5, r5, r9
 8008d12:	6026      	str	r6, [r4, #0]
 8008d14:	60a5      	str	r5, [r4, #8]
 8008d16:	463e      	mov	r6, r7
 8008d18:	42be      	cmp	r6, r7
 8008d1a:	d900      	bls.n	8008d1e <__ssputs_r+0x72>
 8008d1c:	463e      	mov	r6, r7
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	4632      	mov	r2, r6
 8008d22:	4641      	mov	r1, r8
 8008d24:	f000 fcf8 	bl	8009718 <memmove>
 8008d28:	68a3      	ldr	r3, [r4, #8]
 8008d2a:	1b9b      	subs	r3, r3, r6
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	4433      	add	r3, r6
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	2000      	movs	r0, #0
 8008d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	f000 fd46 	bl	80097cc <_realloc_r>
 8008d40:	4606      	mov	r6, r0
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d1e0      	bne.n	8008d08 <__ssputs_r+0x5c>
 8008d46:	6921      	ldr	r1, [r4, #16]
 8008d48:	4650      	mov	r0, sl
 8008d4a:	f7ff feb7 	bl	8008abc <_free_r>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	f8ca 3000 	str.w	r3, [sl]
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	e7e9      	b.n	8008d36 <__ssputs_r+0x8a>
	...

08008d64 <_svfiprintf_r>:
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	4698      	mov	r8, r3
 8008d6a:	898b      	ldrh	r3, [r1, #12]
 8008d6c:	061b      	lsls	r3, r3, #24
 8008d6e:	b09d      	sub	sp, #116	@ 0x74
 8008d70:	4607      	mov	r7, r0
 8008d72:	460d      	mov	r5, r1
 8008d74:	4614      	mov	r4, r2
 8008d76:	d510      	bpl.n	8008d9a <_svfiprintf_r+0x36>
 8008d78:	690b      	ldr	r3, [r1, #16]
 8008d7a:	b973      	cbnz	r3, 8008d9a <_svfiprintf_r+0x36>
 8008d7c:	2140      	movs	r1, #64	@ 0x40
 8008d7e:	f7ff ff09 	bl	8008b94 <_malloc_r>
 8008d82:	6028      	str	r0, [r5, #0]
 8008d84:	6128      	str	r0, [r5, #16]
 8008d86:	b930      	cbnz	r0, 8008d96 <_svfiprintf_r+0x32>
 8008d88:	230c      	movs	r3, #12
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	b01d      	add	sp, #116	@ 0x74
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	2340      	movs	r3, #64	@ 0x40
 8008d98:	616b      	str	r3, [r5, #20]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d9e:	2320      	movs	r3, #32
 8008da0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008da8:	2330      	movs	r3, #48	@ 0x30
 8008daa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f48 <_svfiprintf_r+0x1e4>
 8008dae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008db2:	f04f 0901 	mov.w	r9, #1
 8008db6:	4623      	mov	r3, r4
 8008db8:	469a      	mov	sl, r3
 8008dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dbe:	b10a      	cbz	r2, 8008dc4 <_svfiprintf_r+0x60>
 8008dc0:	2a25      	cmp	r2, #37	@ 0x25
 8008dc2:	d1f9      	bne.n	8008db8 <_svfiprintf_r+0x54>
 8008dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8008dc8:	d00b      	beq.n	8008de2 <_svfiprintf_r+0x7e>
 8008dca:	465b      	mov	r3, fp
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	f7ff ff6b 	bl	8008cac <__ssputs_r>
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	f000 80a7 	beq.w	8008f2a <_svfiprintf_r+0x1c6>
 8008ddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dde:	445a      	add	r2, fp
 8008de0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008de2:	f89a 3000 	ldrb.w	r3, [sl]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 809f 	beq.w	8008f2a <_svfiprintf_r+0x1c6>
 8008dec:	2300      	movs	r3, #0
 8008dee:	f04f 32ff 	mov.w	r2, #4294967295
 8008df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008df6:	f10a 0a01 	add.w	sl, sl, #1
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	9307      	str	r3, [sp, #28]
 8008dfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e02:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e04:	4654      	mov	r4, sl
 8008e06:	2205      	movs	r2, #5
 8008e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0c:	484e      	ldr	r0, [pc, #312]	@ (8008f48 <_svfiprintf_r+0x1e4>)
 8008e0e:	f7f7 fa0f 	bl	8000230 <memchr>
 8008e12:	9a04      	ldr	r2, [sp, #16]
 8008e14:	b9d8      	cbnz	r0, 8008e4e <_svfiprintf_r+0xea>
 8008e16:	06d0      	lsls	r0, r2, #27
 8008e18:	bf44      	itt	mi
 8008e1a:	2320      	movmi	r3, #32
 8008e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e20:	0711      	lsls	r1, r2, #28
 8008e22:	bf44      	itt	mi
 8008e24:	232b      	movmi	r3, #43	@ 0x2b
 8008e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e30:	d015      	beq.n	8008e5e <_svfiprintf_r+0xfa>
 8008e32:	9a07      	ldr	r2, [sp, #28]
 8008e34:	4654      	mov	r4, sl
 8008e36:	2000      	movs	r0, #0
 8008e38:	f04f 0c0a 	mov.w	ip, #10
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e42:	3b30      	subs	r3, #48	@ 0x30
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	d94b      	bls.n	8008ee0 <_svfiprintf_r+0x17c>
 8008e48:	b1b0      	cbz	r0, 8008e78 <_svfiprintf_r+0x114>
 8008e4a:	9207      	str	r2, [sp, #28]
 8008e4c:	e014      	b.n	8008e78 <_svfiprintf_r+0x114>
 8008e4e:	eba0 0308 	sub.w	r3, r0, r8
 8008e52:	fa09 f303 	lsl.w	r3, r9, r3
 8008e56:	4313      	orrs	r3, r2
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	46a2      	mov	sl, r4
 8008e5c:	e7d2      	b.n	8008e04 <_svfiprintf_r+0xa0>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	1d19      	adds	r1, r3, #4
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	9103      	str	r1, [sp, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfbb      	ittet	lt
 8008e6a:	425b      	neglt	r3, r3
 8008e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e70:	9307      	strge	r3, [sp, #28]
 8008e72:	9307      	strlt	r3, [sp, #28]
 8008e74:	bfb8      	it	lt
 8008e76:	9204      	strlt	r2, [sp, #16]
 8008e78:	7823      	ldrb	r3, [r4, #0]
 8008e7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e7c:	d10a      	bne.n	8008e94 <_svfiprintf_r+0x130>
 8008e7e:	7863      	ldrb	r3, [r4, #1]
 8008e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e82:	d132      	bne.n	8008eea <_svfiprintf_r+0x186>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	1d1a      	adds	r2, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	9203      	str	r2, [sp, #12]
 8008e8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e90:	3402      	adds	r4, #2
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f58 <_svfiprintf_r+0x1f4>
 8008e98:	7821      	ldrb	r1, [r4, #0]
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	f7f7 f9c7 	bl	8000230 <memchr>
 8008ea2:	b138      	cbz	r0, 8008eb4 <_svfiprintf_r+0x150>
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	eba0 000a 	sub.w	r0, r0, sl
 8008eaa:	2240      	movs	r2, #64	@ 0x40
 8008eac:	4082      	lsls	r2, r0
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	3401      	adds	r4, #1
 8008eb2:	9304      	str	r3, [sp, #16]
 8008eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb8:	4824      	ldr	r0, [pc, #144]	@ (8008f4c <_svfiprintf_r+0x1e8>)
 8008eba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ebe:	2206      	movs	r2, #6
 8008ec0:	f7f7 f9b6 	bl	8000230 <memchr>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d036      	beq.n	8008f36 <_svfiprintf_r+0x1d2>
 8008ec8:	4b21      	ldr	r3, [pc, #132]	@ (8008f50 <_svfiprintf_r+0x1ec>)
 8008eca:	bb1b      	cbnz	r3, 8008f14 <_svfiprintf_r+0x1b0>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	3307      	adds	r3, #7
 8008ed0:	f023 0307 	bic.w	r3, r3, #7
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eda:	4433      	add	r3, r6
 8008edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ede:	e76a      	b.n	8008db6 <_svfiprintf_r+0x52>
 8008ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	2001      	movs	r0, #1
 8008ee8:	e7a8      	b.n	8008e3c <_svfiprintf_r+0xd8>
 8008eea:	2300      	movs	r3, #0
 8008eec:	3401      	adds	r4, #1
 8008eee:	9305      	str	r3, [sp, #20]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	f04f 0c0a 	mov.w	ip, #10
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008efc:	3a30      	subs	r2, #48	@ 0x30
 8008efe:	2a09      	cmp	r2, #9
 8008f00:	d903      	bls.n	8008f0a <_svfiprintf_r+0x1a6>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0c6      	beq.n	8008e94 <_svfiprintf_r+0x130>
 8008f06:	9105      	str	r1, [sp, #20]
 8008f08:	e7c4      	b.n	8008e94 <_svfiprintf_r+0x130>
 8008f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f0e:	4604      	mov	r4, r0
 8008f10:	2301      	movs	r3, #1
 8008f12:	e7f0      	b.n	8008ef6 <_svfiprintf_r+0x192>
 8008f14:	ab03      	add	r3, sp, #12
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	462a      	mov	r2, r5
 8008f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <_svfiprintf_r+0x1f0>)
 8008f1c:	a904      	add	r1, sp, #16
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f3af 8000 	nop.w
 8008f24:	1c42      	adds	r2, r0, #1
 8008f26:	4606      	mov	r6, r0
 8008f28:	d1d6      	bne.n	8008ed8 <_svfiprintf_r+0x174>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	065b      	lsls	r3, r3, #25
 8008f2e:	f53f af2d 	bmi.w	8008d8c <_svfiprintf_r+0x28>
 8008f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f34:	e72c      	b.n	8008d90 <_svfiprintf_r+0x2c>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <_svfiprintf_r+0x1f0>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4638      	mov	r0, r7
 8008f42:	f000 f9bb 	bl	80092bc <_printf_i>
 8008f46:	e7ed      	b.n	8008f24 <_svfiprintf_r+0x1c0>
 8008f48:	08009964 	.word	0x08009964
 8008f4c:	0800996e 	.word	0x0800996e
 8008f50:	00000000 	.word	0x00000000
 8008f54:	08008cad 	.word	0x08008cad
 8008f58:	0800996a 	.word	0x0800996a

08008f5c <__sfputc_r>:
 8008f5c:	6893      	ldr	r3, [r2, #8]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	b410      	push	{r4}
 8008f64:	6093      	str	r3, [r2, #8]
 8008f66:	da08      	bge.n	8008f7a <__sfputc_r+0x1e>
 8008f68:	6994      	ldr	r4, [r2, #24]
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	db01      	blt.n	8008f72 <__sfputc_r+0x16>
 8008f6e:	290a      	cmp	r1, #10
 8008f70:	d103      	bne.n	8008f7a <__sfputc_r+0x1e>
 8008f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f76:	f7ff bc90 	b.w	800889a <__swbuf_r>
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	1c58      	adds	r0, r3, #1
 8008f7e:	6010      	str	r0, [r2, #0]
 8008f80:	7019      	strb	r1, [r3, #0]
 8008f82:	4608      	mov	r0, r1
 8008f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <__sfputs_r>:
 8008f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	4614      	mov	r4, r2
 8008f92:	18d5      	adds	r5, r2, r3
 8008f94:	42ac      	cmp	r4, r5
 8008f96:	d101      	bne.n	8008f9c <__sfputs_r+0x12>
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e007      	b.n	8008fac <__sfputs_r+0x22>
 8008f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa0:	463a      	mov	r2, r7
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ffda 	bl	8008f5c <__sfputc_r>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d1f3      	bne.n	8008f94 <__sfputs_r+0xa>
 8008fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb0 <_vfiprintf_r>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	460d      	mov	r5, r1
 8008fb6:	b09d      	sub	sp, #116	@ 0x74
 8008fb8:	4614      	mov	r4, r2
 8008fba:	4698      	mov	r8, r3
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	b118      	cbz	r0, 8008fc8 <_vfiprintf_r+0x18>
 8008fc0:	6a03      	ldr	r3, [r0, #32]
 8008fc2:	b90b      	cbnz	r3, 8008fc8 <_vfiprintf_r+0x18>
 8008fc4:	f7ff fb60 	bl	8008688 <__sinit>
 8008fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fca:	07d9      	lsls	r1, r3, #31
 8008fcc:	d405      	bmi.n	8008fda <_vfiprintf_r+0x2a>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	059a      	lsls	r2, r3, #22
 8008fd2:	d402      	bmi.n	8008fda <_vfiprintf_r+0x2a>
 8008fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fd6:	f7ff fd6e 	bl	8008ab6 <__retarget_lock_acquire_recursive>
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	071b      	lsls	r3, r3, #28
 8008fde:	d501      	bpl.n	8008fe4 <_vfiprintf_r+0x34>
 8008fe0:	692b      	ldr	r3, [r5, #16]
 8008fe2:	b99b      	cbnz	r3, 800900c <_vfiprintf_r+0x5c>
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f7ff fc96 	bl	8008918 <__swsetup_r>
 8008fec:	b170      	cbz	r0, 800900c <_vfiprintf_r+0x5c>
 8008fee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ff0:	07dc      	lsls	r4, r3, #31
 8008ff2:	d504      	bpl.n	8008ffe <_vfiprintf_r+0x4e>
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	b01d      	add	sp, #116	@ 0x74
 8008ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	0598      	lsls	r0, r3, #22
 8009002:	d4f7      	bmi.n	8008ff4 <_vfiprintf_r+0x44>
 8009004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009006:	f7ff fd57 	bl	8008ab8 <__retarget_lock_release_recursive>
 800900a:	e7f3      	b.n	8008ff4 <_vfiprintf_r+0x44>
 800900c:	2300      	movs	r3, #0
 800900e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009010:	2320      	movs	r3, #32
 8009012:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009016:	f8cd 800c 	str.w	r8, [sp, #12]
 800901a:	2330      	movs	r3, #48	@ 0x30
 800901c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091cc <_vfiprintf_r+0x21c>
 8009020:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009024:	f04f 0901 	mov.w	r9, #1
 8009028:	4623      	mov	r3, r4
 800902a:	469a      	mov	sl, r3
 800902c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009030:	b10a      	cbz	r2, 8009036 <_vfiprintf_r+0x86>
 8009032:	2a25      	cmp	r2, #37	@ 0x25
 8009034:	d1f9      	bne.n	800902a <_vfiprintf_r+0x7a>
 8009036:	ebba 0b04 	subs.w	fp, sl, r4
 800903a:	d00b      	beq.n	8009054 <_vfiprintf_r+0xa4>
 800903c:	465b      	mov	r3, fp
 800903e:	4622      	mov	r2, r4
 8009040:	4629      	mov	r1, r5
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ffa1 	bl	8008f8a <__sfputs_r>
 8009048:	3001      	adds	r0, #1
 800904a:	f000 80a7 	beq.w	800919c <_vfiprintf_r+0x1ec>
 800904e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009050:	445a      	add	r2, fp
 8009052:	9209      	str	r2, [sp, #36]	@ 0x24
 8009054:	f89a 3000 	ldrb.w	r3, [sl]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 809f 	beq.w	800919c <_vfiprintf_r+0x1ec>
 800905e:	2300      	movs	r3, #0
 8009060:	f04f 32ff 	mov.w	r2, #4294967295
 8009064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009068:	f10a 0a01 	add.w	sl, sl, #1
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	9307      	str	r3, [sp, #28]
 8009070:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009074:	931a      	str	r3, [sp, #104]	@ 0x68
 8009076:	4654      	mov	r4, sl
 8009078:	2205      	movs	r2, #5
 800907a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907e:	4853      	ldr	r0, [pc, #332]	@ (80091cc <_vfiprintf_r+0x21c>)
 8009080:	f7f7 f8d6 	bl	8000230 <memchr>
 8009084:	9a04      	ldr	r2, [sp, #16]
 8009086:	b9d8      	cbnz	r0, 80090c0 <_vfiprintf_r+0x110>
 8009088:	06d1      	lsls	r1, r2, #27
 800908a:	bf44      	itt	mi
 800908c:	2320      	movmi	r3, #32
 800908e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009092:	0713      	lsls	r3, r2, #28
 8009094:	bf44      	itt	mi
 8009096:	232b      	movmi	r3, #43	@ 0x2b
 8009098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800909c:	f89a 3000 	ldrb.w	r3, [sl]
 80090a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090a2:	d015      	beq.n	80090d0 <_vfiprintf_r+0x120>
 80090a4:	9a07      	ldr	r2, [sp, #28]
 80090a6:	4654      	mov	r4, sl
 80090a8:	2000      	movs	r0, #0
 80090aa:	f04f 0c0a 	mov.w	ip, #10
 80090ae:	4621      	mov	r1, r4
 80090b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090b4:	3b30      	subs	r3, #48	@ 0x30
 80090b6:	2b09      	cmp	r3, #9
 80090b8:	d94b      	bls.n	8009152 <_vfiprintf_r+0x1a2>
 80090ba:	b1b0      	cbz	r0, 80090ea <_vfiprintf_r+0x13a>
 80090bc:	9207      	str	r2, [sp, #28]
 80090be:	e014      	b.n	80090ea <_vfiprintf_r+0x13a>
 80090c0:	eba0 0308 	sub.w	r3, r0, r8
 80090c4:	fa09 f303 	lsl.w	r3, r9, r3
 80090c8:	4313      	orrs	r3, r2
 80090ca:	9304      	str	r3, [sp, #16]
 80090cc:	46a2      	mov	sl, r4
 80090ce:	e7d2      	b.n	8009076 <_vfiprintf_r+0xc6>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	1d19      	adds	r1, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9103      	str	r1, [sp, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfbb      	ittet	lt
 80090dc:	425b      	neglt	r3, r3
 80090de:	f042 0202 	orrlt.w	r2, r2, #2
 80090e2:	9307      	strge	r3, [sp, #28]
 80090e4:	9307      	strlt	r3, [sp, #28]
 80090e6:	bfb8      	it	lt
 80090e8:	9204      	strlt	r2, [sp, #16]
 80090ea:	7823      	ldrb	r3, [r4, #0]
 80090ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80090ee:	d10a      	bne.n	8009106 <_vfiprintf_r+0x156>
 80090f0:	7863      	ldrb	r3, [r4, #1]
 80090f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090f4:	d132      	bne.n	800915c <_vfiprintf_r+0x1ac>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	1d1a      	adds	r2, r3, #4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	9203      	str	r2, [sp, #12]
 80090fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009102:	3402      	adds	r4, #2
 8009104:	9305      	str	r3, [sp, #20]
 8009106:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091dc <_vfiprintf_r+0x22c>
 800910a:	7821      	ldrb	r1, [r4, #0]
 800910c:	2203      	movs	r2, #3
 800910e:	4650      	mov	r0, sl
 8009110:	f7f7 f88e 	bl	8000230 <memchr>
 8009114:	b138      	cbz	r0, 8009126 <_vfiprintf_r+0x176>
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	eba0 000a 	sub.w	r0, r0, sl
 800911c:	2240      	movs	r2, #64	@ 0x40
 800911e:	4082      	lsls	r2, r0
 8009120:	4313      	orrs	r3, r2
 8009122:	3401      	adds	r4, #1
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912a:	4829      	ldr	r0, [pc, #164]	@ (80091d0 <_vfiprintf_r+0x220>)
 800912c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009130:	2206      	movs	r2, #6
 8009132:	f7f7 f87d 	bl	8000230 <memchr>
 8009136:	2800      	cmp	r0, #0
 8009138:	d03f      	beq.n	80091ba <_vfiprintf_r+0x20a>
 800913a:	4b26      	ldr	r3, [pc, #152]	@ (80091d4 <_vfiprintf_r+0x224>)
 800913c:	bb1b      	cbnz	r3, 8009186 <_vfiprintf_r+0x1d6>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	3307      	adds	r3, #7
 8009142:	f023 0307 	bic.w	r3, r3, #7
 8009146:	3308      	adds	r3, #8
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914c:	443b      	add	r3, r7
 800914e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009150:	e76a      	b.n	8009028 <_vfiprintf_r+0x78>
 8009152:	fb0c 3202 	mla	r2, ip, r2, r3
 8009156:	460c      	mov	r4, r1
 8009158:	2001      	movs	r0, #1
 800915a:	e7a8      	b.n	80090ae <_vfiprintf_r+0xfe>
 800915c:	2300      	movs	r3, #0
 800915e:	3401      	adds	r4, #1
 8009160:	9305      	str	r3, [sp, #20]
 8009162:	4619      	mov	r1, r3
 8009164:	f04f 0c0a 	mov.w	ip, #10
 8009168:	4620      	mov	r0, r4
 800916a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800916e:	3a30      	subs	r2, #48	@ 0x30
 8009170:	2a09      	cmp	r2, #9
 8009172:	d903      	bls.n	800917c <_vfiprintf_r+0x1cc>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0c6      	beq.n	8009106 <_vfiprintf_r+0x156>
 8009178:	9105      	str	r1, [sp, #20]
 800917a:	e7c4      	b.n	8009106 <_vfiprintf_r+0x156>
 800917c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009180:	4604      	mov	r4, r0
 8009182:	2301      	movs	r3, #1
 8009184:	e7f0      	b.n	8009168 <_vfiprintf_r+0x1b8>
 8009186:	ab03      	add	r3, sp, #12
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	462a      	mov	r2, r5
 800918c:	4b12      	ldr	r3, [pc, #72]	@ (80091d8 <_vfiprintf_r+0x228>)
 800918e:	a904      	add	r1, sp, #16
 8009190:	4630      	mov	r0, r6
 8009192:	f3af 8000 	nop.w
 8009196:	4607      	mov	r7, r0
 8009198:	1c78      	adds	r0, r7, #1
 800919a:	d1d6      	bne.n	800914a <_vfiprintf_r+0x19a>
 800919c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800919e:	07d9      	lsls	r1, r3, #31
 80091a0:	d405      	bmi.n	80091ae <_vfiprintf_r+0x1fe>
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	059a      	lsls	r2, r3, #22
 80091a6:	d402      	bmi.n	80091ae <_vfiprintf_r+0x1fe>
 80091a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091aa:	f7ff fc85 	bl	8008ab8 <__retarget_lock_release_recursive>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	065b      	lsls	r3, r3, #25
 80091b2:	f53f af1f 	bmi.w	8008ff4 <_vfiprintf_r+0x44>
 80091b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091b8:	e71e      	b.n	8008ff8 <_vfiprintf_r+0x48>
 80091ba:	ab03      	add	r3, sp, #12
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	462a      	mov	r2, r5
 80091c0:	4b05      	ldr	r3, [pc, #20]	@ (80091d8 <_vfiprintf_r+0x228>)
 80091c2:	a904      	add	r1, sp, #16
 80091c4:	4630      	mov	r0, r6
 80091c6:	f000 f879 	bl	80092bc <_printf_i>
 80091ca:	e7e4      	b.n	8009196 <_vfiprintf_r+0x1e6>
 80091cc:	08009964 	.word	0x08009964
 80091d0:	0800996e 	.word	0x0800996e
 80091d4:	00000000 	.word	0x00000000
 80091d8:	08008f8b 	.word	0x08008f8b
 80091dc:	0800996a 	.word	0x0800996a

080091e0 <_printf_common>:
 80091e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	4616      	mov	r6, r2
 80091e6:	4698      	mov	r8, r3
 80091e8:	688a      	ldr	r2, [r1, #8]
 80091ea:	690b      	ldr	r3, [r1, #16]
 80091ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091f0:	4293      	cmp	r3, r2
 80091f2:	bfb8      	it	lt
 80091f4:	4613      	movlt	r3, r2
 80091f6:	6033      	str	r3, [r6, #0]
 80091f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091fc:	4607      	mov	r7, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	b10a      	cbz	r2, 8009206 <_printf_common+0x26>
 8009202:	3301      	adds	r3, #1
 8009204:	6033      	str	r3, [r6, #0]
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	0699      	lsls	r1, r3, #26
 800920a:	bf42      	ittt	mi
 800920c:	6833      	ldrmi	r3, [r6, #0]
 800920e:	3302      	addmi	r3, #2
 8009210:	6033      	strmi	r3, [r6, #0]
 8009212:	6825      	ldr	r5, [r4, #0]
 8009214:	f015 0506 	ands.w	r5, r5, #6
 8009218:	d106      	bne.n	8009228 <_printf_common+0x48>
 800921a:	f104 0a19 	add.w	sl, r4, #25
 800921e:	68e3      	ldr	r3, [r4, #12]
 8009220:	6832      	ldr	r2, [r6, #0]
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	42ab      	cmp	r3, r5
 8009226:	dc26      	bgt.n	8009276 <_printf_common+0x96>
 8009228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800922c:	6822      	ldr	r2, [r4, #0]
 800922e:	3b00      	subs	r3, #0
 8009230:	bf18      	it	ne
 8009232:	2301      	movne	r3, #1
 8009234:	0692      	lsls	r2, r2, #26
 8009236:	d42b      	bmi.n	8009290 <_printf_common+0xb0>
 8009238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800923c:	4641      	mov	r1, r8
 800923e:	4638      	mov	r0, r7
 8009240:	47c8      	blx	r9
 8009242:	3001      	adds	r0, #1
 8009244:	d01e      	beq.n	8009284 <_printf_common+0xa4>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	6922      	ldr	r2, [r4, #16]
 800924a:	f003 0306 	and.w	r3, r3, #6
 800924e:	2b04      	cmp	r3, #4
 8009250:	bf02      	ittt	eq
 8009252:	68e5      	ldreq	r5, [r4, #12]
 8009254:	6833      	ldreq	r3, [r6, #0]
 8009256:	1aed      	subeq	r5, r5, r3
 8009258:	68a3      	ldr	r3, [r4, #8]
 800925a:	bf0c      	ite	eq
 800925c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009260:	2500      	movne	r5, #0
 8009262:	4293      	cmp	r3, r2
 8009264:	bfc4      	itt	gt
 8009266:	1a9b      	subgt	r3, r3, r2
 8009268:	18ed      	addgt	r5, r5, r3
 800926a:	2600      	movs	r6, #0
 800926c:	341a      	adds	r4, #26
 800926e:	42b5      	cmp	r5, r6
 8009270:	d11a      	bne.n	80092a8 <_printf_common+0xc8>
 8009272:	2000      	movs	r0, #0
 8009274:	e008      	b.n	8009288 <_printf_common+0xa8>
 8009276:	2301      	movs	r3, #1
 8009278:	4652      	mov	r2, sl
 800927a:	4641      	mov	r1, r8
 800927c:	4638      	mov	r0, r7
 800927e:	47c8      	blx	r9
 8009280:	3001      	adds	r0, #1
 8009282:	d103      	bne.n	800928c <_printf_common+0xac>
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928c:	3501      	adds	r5, #1
 800928e:	e7c6      	b.n	800921e <_printf_common+0x3e>
 8009290:	18e1      	adds	r1, r4, r3
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	2030      	movs	r0, #48	@ 0x30
 8009296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800929a:	4422      	add	r2, r4
 800929c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092a4:	3302      	adds	r3, #2
 80092a6:	e7c7      	b.n	8009238 <_printf_common+0x58>
 80092a8:	2301      	movs	r3, #1
 80092aa:	4622      	mov	r2, r4
 80092ac:	4641      	mov	r1, r8
 80092ae:	4638      	mov	r0, r7
 80092b0:	47c8      	blx	r9
 80092b2:	3001      	adds	r0, #1
 80092b4:	d0e6      	beq.n	8009284 <_printf_common+0xa4>
 80092b6:	3601      	adds	r6, #1
 80092b8:	e7d9      	b.n	800926e <_printf_common+0x8e>
	...

080092bc <_printf_i>:
 80092bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c0:	7e0f      	ldrb	r7, [r1, #24]
 80092c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092c4:	2f78      	cmp	r7, #120	@ 0x78
 80092c6:	4691      	mov	r9, r2
 80092c8:	4680      	mov	r8, r0
 80092ca:	460c      	mov	r4, r1
 80092cc:	469a      	mov	sl, r3
 80092ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092d2:	d807      	bhi.n	80092e4 <_printf_i+0x28>
 80092d4:	2f62      	cmp	r7, #98	@ 0x62
 80092d6:	d80a      	bhi.n	80092ee <_printf_i+0x32>
 80092d8:	2f00      	cmp	r7, #0
 80092da:	f000 80d2 	beq.w	8009482 <_printf_i+0x1c6>
 80092de:	2f58      	cmp	r7, #88	@ 0x58
 80092e0:	f000 80b9 	beq.w	8009456 <_printf_i+0x19a>
 80092e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092ec:	e03a      	b.n	8009364 <_printf_i+0xa8>
 80092ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092f2:	2b15      	cmp	r3, #21
 80092f4:	d8f6      	bhi.n	80092e4 <_printf_i+0x28>
 80092f6:	a101      	add	r1, pc, #4	@ (adr r1, 80092fc <_printf_i+0x40>)
 80092f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092fc:	08009355 	.word	0x08009355
 8009300:	08009369 	.word	0x08009369
 8009304:	080092e5 	.word	0x080092e5
 8009308:	080092e5 	.word	0x080092e5
 800930c:	080092e5 	.word	0x080092e5
 8009310:	080092e5 	.word	0x080092e5
 8009314:	08009369 	.word	0x08009369
 8009318:	080092e5 	.word	0x080092e5
 800931c:	080092e5 	.word	0x080092e5
 8009320:	080092e5 	.word	0x080092e5
 8009324:	080092e5 	.word	0x080092e5
 8009328:	08009469 	.word	0x08009469
 800932c:	08009393 	.word	0x08009393
 8009330:	08009423 	.word	0x08009423
 8009334:	080092e5 	.word	0x080092e5
 8009338:	080092e5 	.word	0x080092e5
 800933c:	0800948b 	.word	0x0800948b
 8009340:	080092e5 	.word	0x080092e5
 8009344:	08009393 	.word	0x08009393
 8009348:	080092e5 	.word	0x080092e5
 800934c:	080092e5 	.word	0x080092e5
 8009350:	0800942b 	.word	0x0800942b
 8009354:	6833      	ldr	r3, [r6, #0]
 8009356:	1d1a      	adds	r2, r3, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6032      	str	r2, [r6, #0]
 800935c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009364:	2301      	movs	r3, #1
 8009366:	e09d      	b.n	80094a4 <_printf_i+0x1e8>
 8009368:	6833      	ldr	r3, [r6, #0]
 800936a:	6820      	ldr	r0, [r4, #0]
 800936c:	1d19      	adds	r1, r3, #4
 800936e:	6031      	str	r1, [r6, #0]
 8009370:	0606      	lsls	r6, r0, #24
 8009372:	d501      	bpl.n	8009378 <_printf_i+0xbc>
 8009374:	681d      	ldr	r5, [r3, #0]
 8009376:	e003      	b.n	8009380 <_printf_i+0xc4>
 8009378:	0645      	lsls	r5, r0, #25
 800937a:	d5fb      	bpl.n	8009374 <_printf_i+0xb8>
 800937c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009380:	2d00      	cmp	r5, #0
 8009382:	da03      	bge.n	800938c <_printf_i+0xd0>
 8009384:	232d      	movs	r3, #45	@ 0x2d
 8009386:	426d      	negs	r5, r5
 8009388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800938c:	4859      	ldr	r0, [pc, #356]	@ (80094f4 <_printf_i+0x238>)
 800938e:	230a      	movs	r3, #10
 8009390:	e011      	b.n	80093b6 <_printf_i+0xfa>
 8009392:	6821      	ldr	r1, [r4, #0]
 8009394:	6833      	ldr	r3, [r6, #0]
 8009396:	0608      	lsls	r0, r1, #24
 8009398:	f853 5b04 	ldr.w	r5, [r3], #4
 800939c:	d402      	bmi.n	80093a4 <_printf_i+0xe8>
 800939e:	0649      	lsls	r1, r1, #25
 80093a0:	bf48      	it	mi
 80093a2:	b2ad      	uxthmi	r5, r5
 80093a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80093a6:	4853      	ldr	r0, [pc, #332]	@ (80094f4 <_printf_i+0x238>)
 80093a8:	6033      	str	r3, [r6, #0]
 80093aa:	bf14      	ite	ne
 80093ac:	230a      	movne	r3, #10
 80093ae:	2308      	moveq	r3, #8
 80093b0:	2100      	movs	r1, #0
 80093b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093b6:	6866      	ldr	r6, [r4, #4]
 80093b8:	60a6      	str	r6, [r4, #8]
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	bfa2      	ittt	ge
 80093be:	6821      	ldrge	r1, [r4, #0]
 80093c0:	f021 0104 	bicge.w	r1, r1, #4
 80093c4:	6021      	strge	r1, [r4, #0]
 80093c6:	b90d      	cbnz	r5, 80093cc <_printf_i+0x110>
 80093c8:	2e00      	cmp	r6, #0
 80093ca:	d04b      	beq.n	8009464 <_printf_i+0x1a8>
 80093cc:	4616      	mov	r6, r2
 80093ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80093d2:	fb03 5711 	mls	r7, r3, r1, r5
 80093d6:	5dc7      	ldrb	r7, [r0, r7]
 80093d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093dc:	462f      	mov	r7, r5
 80093de:	42bb      	cmp	r3, r7
 80093e0:	460d      	mov	r5, r1
 80093e2:	d9f4      	bls.n	80093ce <_printf_i+0x112>
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d10b      	bne.n	8009400 <_printf_i+0x144>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	07df      	lsls	r7, r3, #31
 80093ec:	d508      	bpl.n	8009400 <_printf_i+0x144>
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	6861      	ldr	r1, [r4, #4]
 80093f2:	4299      	cmp	r1, r3
 80093f4:	bfde      	ittt	le
 80093f6:	2330      	movle	r3, #48	@ 0x30
 80093f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009400:	1b92      	subs	r2, r2, r6
 8009402:	6122      	str	r2, [r4, #16]
 8009404:	f8cd a000 	str.w	sl, [sp]
 8009408:	464b      	mov	r3, r9
 800940a:	aa03      	add	r2, sp, #12
 800940c:	4621      	mov	r1, r4
 800940e:	4640      	mov	r0, r8
 8009410:	f7ff fee6 	bl	80091e0 <_printf_common>
 8009414:	3001      	adds	r0, #1
 8009416:	d14a      	bne.n	80094ae <_printf_i+0x1f2>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	b004      	add	sp, #16
 800941e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	f043 0320 	orr.w	r3, r3, #32
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	4833      	ldr	r0, [pc, #204]	@ (80094f8 <_printf_i+0x23c>)
 800942c:	2778      	movs	r7, #120	@ 0x78
 800942e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	6831      	ldr	r1, [r6, #0]
 8009436:	061f      	lsls	r7, r3, #24
 8009438:	f851 5b04 	ldr.w	r5, [r1], #4
 800943c:	d402      	bmi.n	8009444 <_printf_i+0x188>
 800943e:	065f      	lsls	r7, r3, #25
 8009440:	bf48      	it	mi
 8009442:	b2ad      	uxthmi	r5, r5
 8009444:	6031      	str	r1, [r6, #0]
 8009446:	07d9      	lsls	r1, r3, #31
 8009448:	bf44      	itt	mi
 800944a:	f043 0320 	orrmi.w	r3, r3, #32
 800944e:	6023      	strmi	r3, [r4, #0]
 8009450:	b11d      	cbz	r5, 800945a <_printf_i+0x19e>
 8009452:	2310      	movs	r3, #16
 8009454:	e7ac      	b.n	80093b0 <_printf_i+0xf4>
 8009456:	4827      	ldr	r0, [pc, #156]	@ (80094f4 <_printf_i+0x238>)
 8009458:	e7e9      	b.n	800942e <_printf_i+0x172>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	f023 0320 	bic.w	r3, r3, #32
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	e7f6      	b.n	8009452 <_printf_i+0x196>
 8009464:	4616      	mov	r6, r2
 8009466:	e7bd      	b.n	80093e4 <_printf_i+0x128>
 8009468:	6833      	ldr	r3, [r6, #0]
 800946a:	6825      	ldr	r5, [r4, #0]
 800946c:	6961      	ldr	r1, [r4, #20]
 800946e:	1d18      	adds	r0, r3, #4
 8009470:	6030      	str	r0, [r6, #0]
 8009472:	062e      	lsls	r6, r5, #24
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	d501      	bpl.n	800947c <_printf_i+0x1c0>
 8009478:	6019      	str	r1, [r3, #0]
 800947a:	e002      	b.n	8009482 <_printf_i+0x1c6>
 800947c:	0668      	lsls	r0, r5, #25
 800947e:	d5fb      	bpl.n	8009478 <_printf_i+0x1bc>
 8009480:	8019      	strh	r1, [r3, #0]
 8009482:	2300      	movs	r3, #0
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	4616      	mov	r6, r2
 8009488:	e7bc      	b.n	8009404 <_printf_i+0x148>
 800948a:	6833      	ldr	r3, [r6, #0]
 800948c:	1d1a      	adds	r2, r3, #4
 800948e:	6032      	str	r2, [r6, #0]
 8009490:	681e      	ldr	r6, [r3, #0]
 8009492:	6862      	ldr	r2, [r4, #4]
 8009494:	2100      	movs	r1, #0
 8009496:	4630      	mov	r0, r6
 8009498:	f7f6 feca 	bl	8000230 <memchr>
 800949c:	b108      	cbz	r0, 80094a2 <_printf_i+0x1e6>
 800949e:	1b80      	subs	r0, r0, r6
 80094a0:	6060      	str	r0, [r4, #4]
 80094a2:	6863      	ldr	r3, [r4, #4]
 80094a4:	6123      	str	r3, [r4, #16]
 80094a6:	2300      	movs	r3, #0
 80094a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094ac:	e7aa      	b.n	8009404 <_printf_i+0x148>
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	4632      	mov	r2, r6
 80094b2:	4649      	mov	r1, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	47d0      	blx	sl
 80094b8:	3001      	adds	r0, #1
 80094ba:	d0ad      	beq.n	8009418 <_printf_i+0x15c>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	079b      	lsls	r3, r3, #30
 80094c0:	d413      	bmi.n	80094ea <_printf_i+0x22e>
 80094c2:	68e0      	ldr	r0, [r4, #12]
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	4298      	cmp	r0, r3
 80094c8:	bfb8      	it	lt
 80094ca:	4618      	movlt	r0, r3
 80094cc:	e7a6      	b.n	800941c <_printf_i+0x160>
 80094ce:	2301      	movs	r3, #1
 80094d0:	4632      	mov	r2, r6
 80094d2:	4649      	mov	r1, r9
 80094d4:	4640      	mov	r0, r8
 80094d6:	47d0      	blx	sl
 80094d8:	3001      	adds	r0, #1
 80094da:	d09d      	beq.n	8009418 <_printf_i+0x15c>
 80094dc:	3501      	adds	r5, #1
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	9903      	ldr	r1, [sp, #12]
 80094e2:	1a5b      	subs	r3, r3, r1
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dcf2      	bgt.n	80094ce <_printf_i+0x212>
 80094e8:	e7eb      	b.n	80094c2 <_printf_i+0x206>
 80094ea:	2500      	movs	r5, #0
 80094ec:	f104 0619 	add.w	r6, r4, #25
 80094f0:	e7f5      	b.n	80094de <_printf_i+0x222>
 80094f2:	bf00      	nop
 80094f4:	08009975 	.word	0x08009975
 80094f8:	08009986 	.word	0x08009986

080094fc <__sflush_r>:
 80094fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	0716      	lsls	r6, r2, #28
 8009506:	4605      	mov	r5, r0
 8009508:	460c      	mov	r4, r1
 800950a:	d454      	bmi.n	80095b6 <__sflush_r+0xba>
 800950c:	684b      	ldr	r3, [r1, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	dc02      	bgt.n	8009518 <__sflush_r+0x1c>
 8009512:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	dd48      	ble.n	80095aa <__sflush_r+0xae>
 8009518:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800951a:	2e00      	cmp	r6, #0
 800951c:	d045      	beq.n	80095aa <__sflush_r+0xae>
 800951e:	2300      	movs	r3, #0
 8009520:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009524:	682f      	ldr	r7, [r5, #0]
 8009526:	6a21      	ldr	r1, [r4, #32]
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	d030      	beq.n	800958e <__sflush_r+0x92>
 800952c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	0759      	lsls	r1, r3, #29
 8009532:	d505      	bpl.n	8009540 <__sflush_r+0x44>
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	1ad2      	subs	r2, r2, r3
 8009538:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800953a:	b10b      	cbz	r3, 8009540 <__sflush_r+0x44>
 800953c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	2300      	movs	r3, #0
 8009542:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009544:	6a21      	ldr	r1, [r4, #32]
 8009546:	4628      	mov	r0, r5
 8009548:	47b0      	blx	r6
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	d106      	bne.n	800955e <__sflush_r+0x62>
 8009550:	6829      	ldr	r1, [r5, #0]
 8009552:	291d      	cmp	r1, #29
 8009554:	d82b      	bhi.n	80095ae <__sflush_r+0xb2>
 8009556:	4a2a      	ldr	r2, [pc, #168]	@ (8009600 <__sflush_r+0x104>)
 8009558:	410a      	asrs	r2, r1
 800955a:	07d6      	lsls	r6, r2, #31
 800955c:	d427      	bmi.n	80095ae <__sflush_r+0xb2>
 800955e:	2200      	movs	r2, #0
 8009560:	6062      	str	r2, [r4, #4]
 8009562:	04d9      	lsls	r1, r3, #19
 8009564:	6922      	ldr	r2, [r4, #16]
 8009566:	6022      	str	r2, [r4, #0]
 8009568:	d504      	bpl.n	8009574 <__sflush_r+0x78>
 800956a:	1c42      	adds	r2, r0, #1
 800956c:	d101      	bne.n	8009572 <__sflush_r+0x76>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	b903      	cbnz	r3, 8009574 <__sflush_r+0x78>
 8009572:	6560      	str	r0, [r4, #84]	@ 0x54
 8009574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009576:	602f      	str	r7, [r5, #0]
 8009578:	b1b9      	cbz	r1, 80095aa <__sflush_r+0xae>
 800957a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800957e:	4299      	cmp	r1, r3
 8009580:	d002      	beq.n	8009588 <__sflush_r+0x8c>
 8009582:	4628      	mov	r0, r5
 8009584:	f7ff fa9a 	bl	8008abc <_free_r>
 8009588:	2300      	movs	r3, #0
 800958a:	6363      	str	r3, [r4, #52]	@ 0x34
 800958c:	e00d      	b.n	80095aa <__sflush_r+0xae>
 800958e:	2301      	movs	r3, #1
 8009590:	4628      	mov	r0, r5
 8009592:	47b0      	blx	r6
 8009594:	4602      	mov	r2, r0
 8009596:	1c50      	adds	r0, r2, #1
 8009598:	d1c9      	bne.n	800952e <__sflush_r+0x32>
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0c6      	beq.n	800952e <__sflush_r+0x32>
 80095a0:	2b1d      	cmp	r3, #29
 80095a2:	d001      	beq.n	80095a8 <__sflush_r+0xac>
 80095a4:	2b16      	cmp	r3, #22
 80095a6:	d11e      	bne.n	80095e6 <__sflush_r+0xea>
 80095a8:	602f      	str	r7, [r5, #0]
 80095aa:	2000      	movs	r0, #0
 80095ac:	e022      	b.n	80095f4 <__sflush_r+0xf8>
 80095ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095b2:	b21b      	sxth	r3, r3
 80095b4:	e01b      	b.n	80095ee <__sflush_r+0xf2>
 80095b6:	690f      	ldr	r7, [r1, #16]
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	d0f6      	beq.n	80095aa <__sflush_r+0xae>
 80095bc:	0793      	lsls	r3, r2, #30
 80095be:	680e      	ldr	r6, [r1, #0]
 80095c0:	bf08      	it	eq
 80095c2:	694b      	ldreq	r3, [r1, #20]
 80095c4:	600f      	str	r7, [r1, #0]
 80095c6:	bf18      	it	ne
 80095c8:	2300      	movne	r3, #0
 80095ca:	eba6 0807 	sub.w	r8, r6, r7
 80095ce:	608b      	str	r3, [r1, #8]
 80095d0:	f1b8 0f00 	cmp.w	r8, #0
 80095d4:	dde9      	ble.n	80095aa <__sflush_r+0xae>
 80095d6:	6a21      	ldr	r1, [r4, #32]
 80095d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095da:	4643      	mov	r3, r8
 80095dc:	463a      	mov	r2, r7
 80095de:	4628      	mov	r0, r5
 80095e0:	47b0      	blx	r6
 80095e2:	2800      	cmp	r0, #0
 80095e4:	dc08      	bgt.n	80095f8 <__sflush_r+0xfc>
 80095e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	f04f 30ff 	mov.w	r0, #4294967295
 80095f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f8:	4407      	add	r7, r0
 80095fa:	eba8 0800 	sub.w	r8, r8, r0
 80095fe:	e7e7      	b.n	80095d0 <__sflush_r+0xd4>
 8009600:	dfbffffe 	.word	0xdfbffffe

08009604 <_fflush_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	690b      	ldr	r3, [r1, #16]
 8009608:	4605      	mov	r5, r0
 800960a:	460c      	mov	r4, r1
 800960c:	b913      	cbnz	r3, 8009614 <_fflush_r+0x10>
 800960e:	2500      	movs	r5, #0
 8009610:	4628      	mov	r0, r5
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	b118      	cbz	r0, 800961e <_fflush_r+0x1a>
 8009616:	6a03      	ldr	r3, [r0, #32]
 8009618:	b90b      	cbnz	r3, 800961e <_fflush_r+0x1a>
 800961a:	f7ff f835 	bl	8008688 <__sinit>
 800961e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0f3      	beq.n	800960e <_fflush_r+0xa>
 8009626:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009628:	07d0      	lsls	r0, r2, #31
 800962a:	d404      	bmi.n	8009636 <_fflush_r+0x32>
 800962c:	0599      	lsls	r1, r3, #22
 800962e:	d402      	bmi.n	8009636 <_fflush_r+0x32>
 8009630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009632:	f7ff fa40 	bl	8008ab6 <__retarget_lock_acquire_recursive>
 8009636:	4628      	mov	r0, r5
 8009638:	4621      	mov	r1, r4
 800963a:	f7ff ff5f 	bl	80094fc <__sflush_r>
 800963e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009640:	07da      	lsls	r2, r3, #31
 8009642:	4605      	mov	r5, r0
 8009644:	d4e4      	bmi.n	8009610 <_fflush_r+0xc>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	059b      	lsls	r3, r3, #22
 800964a:	d4e1      	bmi.n	8009610 <_fflush_r+0xc>
 800964c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800964e:	f7ff fa33 	bl	8008ab8 <__retarget_lock_release_recursive>
 8009652:	e7dd      	b.n	8009610 <_fflush_r+0xc>

08009654 <__swhatbuf_r>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	460c      	mov	r4, r1
 8009658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965c:	2900      	cmp	r1, #0
 800965e:	b096      	sub	sp, #88	@ 0x58
 8009660:	4615      	mov	r5, r2
 8009662:	461e      	mov	r6, r3
 8009664:	da0d      	bge.n	8009682 <__swhatbuf_r+0x2e>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800966c:	f04f 0100 	mov.w	r1, #0
 8009670:	bf14      	ite	ne
 8009672:	2340      	movne	r3, #64	@ 0x40
 8009674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009678:	2000      	movs	r0, #0
 800967a:	6031      	str	r1, [r6, #0]
 800967c:	602b      	str	r3, [r5, #0]
 800967e:	b016      	add	sp, #88	@ 0x58
 8009680:	bd70      	pop	{r4, r5, r6, pc}
 8009682:	466a      	mov	r2, sp
 8009684:	f000 f862 	bl	800974c <_fstat_r>
 8009688:	2800      	cmp	r0, #0
 800968a:	dbec      	blt.n	8009666 <__swhatbuf_r+0x12>
 800968c:	9901      	ldr	r1, [sp, #4]
 800968e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009696:	4259      	negs	r1, r3
 8009698:	4159      	adcs	r1, r3
 800969a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800969e:	e7eb      	b.n	8009678 <__swhatbuf_r+0x24>

080096a0 <__smakebuf_r>:
 80096a0:	898b      	ldrh	r3, [r1, #12]
 80096a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a4:	079d      	lsls	r5, r3, #30
 80096a6:	4606      	mov	r6, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	d507      	bpl.n	80096bc <__smakebuf_r+0x1c>
 80096ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	6123      	str	r3, [r4, #16]
 80096b4:	2301      	movs	r3, #1
 80096b6:	6163      	str	r3, [r4, #20]
 80096b8:	b003      	add	sp, #12
 80096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096bc:	ab01      	add	r3, sp, #4
 80096be:	466a      	mov	r2, sp
 80096c0:	f7ff ffc8 	bl	8009654 <__swhatbuf_r>
 80096c4:	9f00      	ldr	r7, [sp, #0]
 80096c6:	4605      	mov	r5, r0
 80096c8:	4639      	mov	r1, r7
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7ff fa62 	bl	8008b94 <_malloc_r>
 80096d0:	b948      	cbnz	r0, 80096e6 <__smakebuf_r+0x46>
 80096d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d6:	059a      	lsls	r2, r3, #22
 80096d8:	d4ee      	bmi.n	80096b8 <__smakebuf_r+0x18>
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	f043 0302 	orr.w	r3, r3, #2
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	e7e2      	b.n	80096ac <__smakebuf_r+0xc>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	6020      	str	r0, [r4, #0]
 80096ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ee:	81a3      	strh	r3, [r4, #12]
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096f6:	b15b      	cbz	r3, 8009710 <__smakebuf_r+0x70>
 80096f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096fc:	4630      	mov	r0, r6
 80096fe:	f000 f837 	bl	8009770 <_isatty_r>
 8009702:	b128      	cbz	r0, 8009710 <__smakebuf_r+0x70>
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	f023 0303 	bic.w	r3, r3, #3
 800970a:	f043 0301 	orr.w	r3, r3, #1
 800970e:	81a3      	strh	r3, [r4, #12]
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	431d      	orrs	r5, r3
 8009714:	81a5      	strh	r5, [r4, #12]
 8009716:	e7cf      	b.n	80096b8 <__smakebuf_r+0x18>

08009718 <memmove>:
 8009718:	4288      	cmp	r0, r1
 800971a:	b510      	push	{r4, lr}
 800971c:	eb01 0402 	add.w	r4, r1, r2
 8009720:	d902      	bls.n	8009728 <memmove+0x10>
 8009722:	4284      	cmp	r4, r0
 8009724:	4623      	mov	r3, r4
 8009726:	d807      	bhi.n	8009738 <memmove+0x20>
 8009728:	1e43      	subs	r3, r0, #1
 800972a:	42a1      	cmp	r1, r4
 800972c:	d008      	beq.n	8009740 <memmove+0x28>
 800972e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009732:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009736:	e7f8      	b.n	800972a <memmove+0x12>
 8009738:	4402      	add	r2, r0
 800973a:	4601      	mov	r1, r0
 800973c:	428a      	cmp	r2, r1
 800973e:	d100      	bne.n	8009742 <memmove+0x2a>
 8009740:	bd10      	pop	{r4, pc}
 8009742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800974a:	e7f7      	b.n	800973c <memmove+0x24>

0800974c <_fstat_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d07      	ldr	r5, [pc, #28]	@ (800976c <_fstat_r+0x20>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	4611      	mov	r1, r2
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	f7f7 f864 	bl	8000826 <_fstat>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d102      	bne.n	8009768 <_fstat_r+0x1c>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	b103      	cbz	r3, 8009768 <_fstat_r+0x1c>
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop
 800976c:	20001f88 	.word	0x20001f88

08009770 <_isatty_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4d06      	ldr	r5, [pc, #24]	@ (800978c <_isatty_r+0x1c>)
 8009774:	2300      	movs	r3, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f7f7 f863 	bl	8000846 <_isatty>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_isatty_r+0x1a>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_isatty_r+0x1a>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	20001f88 	.word	0x20001f88

08009790 <_sbrk_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d06      	ldr	r5, [pc, #24]	@ (80097ac <_sbrk_r+0x1c>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	f7f7 f86c 	bl	8000878 <_sbrk>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_sbrk_r+0x1a>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_sbrk_r+0x1a>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	20001f88 	.word	0x20001f88

080097b0 <memcpy>:
 80097b0:	440a      	add	r2, r1
 80097b2:	4291      	cmp	r1, r2
 80097b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097b8:	d100      	bne.n	80097bc <memcpy+0xc>
 80097ba:	4770      	bx	lr
 80097bc:	b510      	push	{r4, lr}
 80097be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097c6:	4291      	cmp	r1, r2
 80097c8:	d1f9      	bne.n	80097be <memcpy+0xe>
 80097ca:	bd10      	pop	{r4, pc}

080097cc <_realloc_r>:
 80097cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d0:	4680      	mov	r8, r0
 80097d2:	4615      	mov	r5, r2
 80097d4:	460c      	mov	r4, r1
 80097d6:	b921      	cbnz	r1, 80097e2 <_realloc_r+0x16>
 80097d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097dc:	4611      	mov	r1, r2
 80097de:	f7ff b9d9 	b.w	8008b94 <_malloc_r>
 80097e2:	b92a      	cbnz	r2, 80097f0 <_realloc_r+0x24>
 80097e4:	f7ff f96a 	bl	8008abc <_free_r>
 80097e8:	2400      	movs	r4, #0
 80097ea:	4620      	mov	r0, r4
 80097ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f0:	f000 f81a 	bl	8009828 <_malloc_usable_size_r>
 80097f4:	4285      	cmp	r5, r0
 80097f6:	4606      	mov	r6, r0
 80097f8:	d802      	bhi.n	8009800 <_realloc_r+0x34>
 80097fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80097fe:	d8f4      	bhi.n	80097ea <_realloc_r+0x1e>
 8009800:	4629      	mov	r1, r5
 8009802:	4640      	mov	r0, r8
 8009804:	f7ff f9c6 	bl	8008b94 <_malloc_r>
 8009808:	4607      	mov	r7, r0
 800980a:	2800      	cmp	r0, #0
 800980c:	d0ec      	beq.n	80097e8 <_realloc_r+0x1c>
 800980e:	42b5      	cmp	r5, r6
 8009810:	462a      	mov	r2, r5
 8009812:	4621      	mov	r1, r4
 8009814:	bf28      	it	cs
 8009816:	4632      	movcs	r2, r6
 8009818:	f7ff ffca 	bl	80097b0 <memcpy>
 800981c:	4621      	mov	r1, r4
 800981e:	4640      	mov	r0, r8
 8009820:	f7ff f94c 	bl	8008abc <_free_r>
 8009824:	463c      	mov	r4, r7
 8009826:	e7e0      	b.n	80097ea <_realloc_r+0x1e>

08009828 <_malloc_usable_size_r>:
 8009828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800982c:	1f18      	subs	r0, r3, #4
 800982e:	2b00      	cmp	r3, #0
 8009830:	bfbc      	itt	lt
 8009832:	580b      	ldrlt	r3, [r1, r0]
 8009834:	18c0      	addlt	r0, r0, r3
 8009836:	4770      	bx	lr

08009838 <_init>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	bf00      	nop
 800983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983e:	bc08      	pop	{r3}
 8009840:	469e      	mov	lr, r3
 8009842:	4770      	bx	lr

08009844 <_fini>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr


Science_Module_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008444  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800868c  0800868c  0000a168  2**0
                  CONTENTS
  4 .ARM          00000000  0800868c  0800868c  0000a168  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800868c  0800868c  0000a168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800868c  0800868c  0000968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008690  08008690  00009690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08008694  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d54  20000168  080087fc  0000a168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ebc  080087fc  0000aebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109a4  00000000  00000000  0000a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003212  00000000  00000000  0001ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b31  00000000  00000000  0001ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de2e  00000000  00000000  0001f7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e60  00000000  00000000  0004d5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105cd7  00000000  00000000  0006042f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  0016614c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016a37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000168 	.word	0x20000168
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080085e8 	.word	0x080085e8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000016c 	.word	0x2000016c
 80001f8:	080085e8 	.word	0x080085e8

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fa45 	bl	800068e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f81a 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f866 	bl	80002d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f006 fee0 	bl	8006fd0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000210:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000214:	f000 fab0 	bl	8000778 <HAL_Delay>
  printf(">\r\n");
 8000218:	4807      	ldr	r0, [pc, #28]	@ (8000238 <main+0x3c>)
 800021a:	f007 fe51 	bl	8007ec0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 800021e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000226:	f000 fd87 	bl	8000d38 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800022a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800022e:	f000 faa3 	bl	8000778 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000232:	bf00      	nop
 8000234:	e7f3      	b.n	800021e <main+0x22>
 8000236:	bf00      	nop
 8000238:	08008600 	.word	0x08008600

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b098      	sub	sp, #96	@ 0x60
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2248      	movs	r2, #72	@ 0x48
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f007 ff18 	bl	8008080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800025e:	2000      	movs	r0, #0
 8000260:	f001 ff3a 	bl	80020d8 <HAL_PWREx_ControlVoltageScaling>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800026a:	f000 f8e8 	bl	800043e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	2303      	movs	r3, #3
 800027e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000280:	2301      	movs	r3, #1
 8000282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000284:	231e      	movs	r3, #30
 8000286:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000288:	2302      	movs	r3, #2
 800028a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800028c:	2302      	movs	r3, #2
 800028e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000290:	2302      	movs	r3, #2
 8000292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f001 ffd1 	bl	8002240 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002a4:	f000 f8cb 	bl	800043e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2303      	movs	r3, #3
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2105      	movs	r1, #5
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 fc39 	bl	8002b38 <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002cc:	f000 f8b7 	bl	800043e <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3760      	adds	r7, #96	@ 0x60
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b47      	ldr	r3, [pc, #284]	@ (800040c <MX_GPIO_Init+0x134>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a46      	ldr	r2, [pc, #280]	@ (800040c <MX_GPIO_Init+0x134>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002fa:	4b44      	ldr	r3, [pc, #272]	@ (800040c <MX_GPIO_Init+0x134>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fe:	f003 0304 	and.w	r3, r3, #4
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000306:	4b41      	ldr	r3, [pc, #260]	@ (800040c <MX_GPIO_Init+0x134>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030a:	4a40      	ldr	r2, [pc, #256]	@ (800040c <MX_GPIO_Init+0x134>)
 800030c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000312:	4b3e      	ldr	r3, [pc, #248]	@ (800040c <MX_GPIO_Init+0x134>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	4b3b      	ldr	r3, [pc, #236]	@ (800040c <MX_GPIO_Init+0x134>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000322:	4a3a      	ldr	r2, [pc, #232]	@ (800040c <MX_GPIO_Init+0x134>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800032a:	4b38      	ldr	r3, [pc, #224]	@ (800040c <MX_GPIO_Init+0x134>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000336:	4b35      	ldr	r3, [pc, #212]	@ (800040c <MX_GPIO_Init+0x134>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033a:	4a34      	ldr	r2, [pc, #208]	@ (800040c <MX_GPIO_Init+0x134>)
 800033c:	f043 0302 	orr.w	r3, r3, #2
 8000340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000342:	4b32      	ldr	r3, [pc, #200]	@ (800040c <MX_GPIO_Init+0x134>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000346:	f003 0302 	and.w	r3, r3, #2
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8000354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000358:	f000 fcd6 	bl	8000d08 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 800035c:	2200      	movs	r2, #0
 800035e:	f64f 31cf 	movw	r1, #64463	@ 0xfbcf
 8000362:	482b      	ldr	r0, [pc, #172]	@ (8000410 <MX_GPIO_Init+0x138>)
 8000364:	f000 fcd0 	bl	8000d08 <HAL_GPIO_WritePin>
                          |MCU_Pump1_LS_RL_Pin|MCU_Pump1_HS_RL_Pin|MCU_Pump1_LS_LR_Pin|MCU_Pump1_HS_LR_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SM_EN__GPIO_Port, MCU_SM_EN__Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2108      	movs	r1, #8
 800036c:	4829      	ldr	r0, [pc, #164]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800036e:	f000 fccb 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_Flow1_Pin MCU_Flow2_Pin MCU_Flow3_Pin */
  GPIO_InitStruct.Pin = MCU_Flow1_Pin|MCU_Flow2_Pin|MCU_Flow3_Pin;
 8000372:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	4824      	ldr	r0, [pc, #144]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000388:	f000 fb2c 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_BANK_EN_Pin MCU_Pump3_HS_LR_Pin MCU_Pump3_LS_LR_Pin MCU_Pump3_HS_RL_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = MCU_LED_BANK_EN_Pin|MCU_Pump3_HS_LR_Pin|MCU_Pump3_LS_LR_Pin|MCU_Pump3_HS_RL_Pin
 800038c:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000390:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	4619      	mov	r1, r3
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a8:	f000 fb1c 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_Pump3_LS_RL_Pin MCU_Pump2_HS_LR_Pin MCU_Pump2_LS_LR_Pin MCU_Pump2_LS_RL_Pin
                           MCU_Pump1_LS_RL_Pin MCU_Pump1_HS_RL_Pin MCU_Pump1_LS_LR_Pin MCU_Pump1_HS_LR_Pin
                           LED2_Pin MCU_SM_PUL__Pin MCU_SM_DIR__Pin MCU_VM_EN_Pin
                           MCU_AM_EN_Pin */
  GPIO_InitStruct.Pin = MCU_Pump3_LS_RL_Pin|MCU_Pump2_HS_LR_Pin|MCU_Pump2_LS_LR_Pin|MCU_Pump2_LS_RL_Pin
 80003ac:	f64f 33cf 	movw	r3, #64463	@ 0xfbcf
 80003b0:	617b      	str	r3, [r7, #20]
                          |MCU_Pump1_LS_RL_Pin|MCU_Pump1_HS_RL_Pin|MCU_Pump1_LS_LR_Pin|MCU_Pump1_HS_LR_Pin
                          |LED2_Pin|MCU_SM_PUL__Pin|MCU_SM_DIR__Pin|MCU_VM_EN_Pin
                          |MCU_AM_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	4619      	mov	r1, r3
 80003c4:	4812      	ldr	r0, [pc, #72]	@ (8000410 <MX_GPIO_Init+0x138>)
 80003c6:	f000 fb0d 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_Pump2_HS_RL_Pin */
  GPIO_InitStruct.Pin = MCU_Pump2_HS_RL_Pin;
 80003ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_Pump2_HS_RL_GPIO_Port, &GPIO_InitStruct);
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	4619      	mov	r1, r3
 80003e0:	480b      	ldr	r0, [pc, #44]	@ (8000410 <MX_GPIO_Init+0x138>)
 80003e2:	f000 faff 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SM_EN__Pin */
  GPIO_InitStruct.Pin = MCU_SM_EN__Pin;
 80003e6:	2308      	movs	r3, #8
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2300      	movs	r3, #0
 80003f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_SM_EN__GPIO_Port, &GPIO_InitStruct);
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	@ (8000414 <MX_GPIO_Init+0x13c>)
 80003fe:	f000 faf1 	bl	80009e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000402:	bf00      	nop
 8000404:	3728      	adds	r7, #40	@ 0x28
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	48000400 	.word	0x48000400
 8000414:	48001c00 	.word	0x48001c00
 8000418:	48000800 	.word	0x48000800

0800041c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	b29b      	uxth	r3, r3
 800042c:	4619      	mov	r1, r3
 800042e:	68b8      	ldr	r0, [r7, #8]
 8000430:	f006 fe90 	bl	8007154 <CDC_Transmit_FS>
  return len;
 8000434:	687b      	ldr	r3, [r7, #4]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000442:	b672      	cpsid	i
}
 8000444:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000446:	bf00      	nop
 8000448:	e7fd      	b.n	8000446 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <HAL_MspInit+0x44>)
 8000454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000456:	4a0e      	ldr	r2, [pc, #56]	@ (8000490 <HAL_MspInit+0x44>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6613      	str	r3, [r2, #96]	@ 0x60
 800045e:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <HAL_MspInit+0x44>)
 8000460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <HAL_MspInit+0x44>)
 800046c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046e:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <HAL_MspInit+0x44>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000474:	6593      	str	r3, [r2, #88]	@ 0x58
 8000476:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <HAL_MspInit+0x44>)
 8000478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800047a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <NMI_Handler+0x4>

0800049c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <HardFault_Handler+0x4>

080004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <MemManage_Handler+0x4>

080004ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <UsageFault_Handler+0x4>

080004bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ea:	f000 f925 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80004f8:	4802      	ldr	r0, [pc, #8]	@ (8000504 <OTG_FS_IRQHandler+0x10>)
 80004fa:	f000 fd75 	bl	8000fe8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000166c 	.word	0x2000166c

08000508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
  }

  return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800056a:	605a      	str	r2, [r3, #4]
  return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <_isatty>:

int _isatty(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b4:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <_sbrk+0x5c>)
 80005b6:	4b15      	ldr	r3, [pc, #84]	@ (800060c <_sbrk+0x60>)
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c0:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <_sbrk+0x64>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	@ (8000614 <_sbrk+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d207      	bcs.n	80005ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005dc:	f007 fd9e 	bl	800811c <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e009      	b.n	8000600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <_sbrk+0x64>)
 80005fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20050000 	.word	0x20050000
 800060c:	00000400 	.word	0x00000400
 8000610:	20000184 	.word	0x20000184
 8000614:	20001ec0 	.word	0x20001ec0

08000618 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <SystemInit+0x20>)
 800061e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <SystemInit+0x20>)
 8000624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800063c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000674 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000640:	f7ff ffea 	bl	8000618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <LoopForever+0x6>)
  ldr r1, =_edata
 8000646:	490d      	ldr	r1, [pc, #52]	@ (800067c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <LoopForever+0xe>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800065c:	4c0a      	ldr	r4, [pc, #40]	@ (8000688 <LoopForever+0x16>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066a:	f007 fd5d 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800066e:	f7ff fdc5 	bl	80001fc <main>

08000672 <LoopForever>:

LoopForever:
    b LoopForever
 8000672:	e7fe      	b.n	8000672 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000674:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000680:	08008694 	.word	0x08008694
  ldr r2, =_sbss
 8000684:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000688:	20001ebc 	.word	0x20001ebc

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>

0800068e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000694:	2300      	movs	r3, #0
 8000696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f961 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069e:	200f      	movs	r0, #15
 80006a0:	f000 f80e 	bl	80006c0 <HAL_InitTick>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e001      	b.n	80006b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b0:	f7ff fecc 	bl	800044c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_InitTick+0x6c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <HAL_InitTick+0x70>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <HAL_InitTick+0x6c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f96d 	bl	80009ca <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10f      	bne.n	8000716 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d809      	bhi.n	8000710 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 f937 	bl	8000976 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000708:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <HAL_InitTick+0x74>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e007      	b.n	8000720 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	e004      	b.n	8000720 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e001      	b.n	8000720 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000008 	.word	0x20000008
 8000730:	20000000 	.word	0x20000000
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_IncTick+0x20>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_IncTick+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_IncTick+0x24>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	20000188 	.word	0x20000188

08000760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000188 	.word	0x20000188

08000778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000780:	f7ff ffee 	bl	8000760 <HAL_GetTick>
 8000784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000790:	d005      	beq.n	800079e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <HAL_Delay+0x44>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800079e:	bf00      	nop
 80007a0:	f7ff ffde 	bl	8000760 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d8f7      	bhi.n	80007a0 <HAL_Delay+0x28>
  {
  }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	db0b      	blt.n	800084e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 021f 	and.w	r2, r3, #31
 800083c:	4907      	ldr	r1, [pc, #28]	@ (800085c <__NVIC_EnableIRQ+0x38>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	095b      	lsrs	r3, r3, #5
 8000844:	2001      	movs	r0, #1
 8000846:	fa00 f202 	lsl.w	r2, r0, r2
 800084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	@ (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	@ 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	@ 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f7ff ff8e 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	@ (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff29 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff3e 	bl	8000808 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff8e 	bl	80008b4 <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff5d 	bl	8000860 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff31 	bl	8000824 <__NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffa2 	bl	800091c <SysTick_Config>
 80009d8:	4603      	mov	r3, r0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e166      	b.n	8000cc2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8158 	beq.w	8000cbc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d005      	beq.n	8000a24 <HAL_GPIO_Init+0x40>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d130      	bne.n	8000a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	f003 0201 	and.w	r2, r3, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d017      	beq.n	8000ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d123      	bne.n	8000b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	6939      	ldr	r1, [r7, #16]
 8000b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0203 	and.w	r2, r3, #3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 80b2 	beq.w	8000cbc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b58:	4b61      	ldr	r3, [pc, #388]	@ (8000ce0 <HAL_GPIO_Init+0x2fc>)
 8000b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5c:	4a60      	ldr	r2, [pc, #384]	@ (8000ce0 <HAL_GPIO_Init+0x2fc>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b64:	4b5e      	ldr	r3, [pc, #376]	@ (8000ce0 <HAL_GPIO_Init+0x2fc>)
 8000b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b70:	4a5c      	ldr	r2, [pc, #368]	@ (8000ce4 <HAL_GPIO_Init+0x300>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	220f      	movs	r2, #15
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b9a:	d02b      	beq.n	8000bf4 <HAL_GPIO_Init+0x210>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a52      	ldr	r2, [pc, #328]	@ (8000ce8 <HAL_GPIO_Init+0x304>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d025      	beq.n	8000bf0 <HAL_GPIO_Init+0x20c>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a51      	ldr	r2, [pc, #324]	@ (8000cec <HAL_GPIO_Init+0x308>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d01f      	beq.n	8000bec <HAL_GPIO_Init+0x208>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a50      	ldr	r2, [pc, #320]	@ (8000cf0 <HAL_GPIO_Init+0x30c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d019      	beq.n	8000be8 <HAL_GPIO_Init+0x204>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4f      	ldr	r2, [pc, #316]	@ (8000cf4 <HAL_GPIO_Init+0x310>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d013      	beq.n	8000be4 <HAL_GPIO_Init+0x200>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8000cf8 <HAL_GPIO_Init+0x314>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d00d      	beq.n	8000be0 <HAL_GPIO_Init+0x1fc>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4d      	ldr	r2, [pc, #308]	@ (8000cfc <HAL_GPIO_Init+0x318>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d007      	beq.n	8000bdc <HAL_GPIO_Init+0x1f8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4c      	ldr	r2, [pc, #304]	@ (8000d00 <HAL_GPIO_Init+0x31c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d101      	bne.n	8000bd8 <HAL_GPIO_Init+0x1f4>
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	e00e      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000bd8:	2308      	movs	r3, #8
 8000bda:	e00c      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000bdc:	2306      	movs	r3, #6
 8000bde:	e00a      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000be0:	2305      	movs	r3, #5
 8000be2:	e008      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000be4:	2304      	movs	r3, #4
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c06:	4937      	ldr	r1, [pc, #220]	@ (8000ce4 <HAL_GPIO_Init+0x300>)
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c14:	4b3b      	ldr	r3, [pc, #236]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c38:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c62:	4a28      	ldr	r2, [pc, #160]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cb6:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <HAL_GPIO_Init+0x320>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f47f ae91 	bne.w	80009f4 <HAL_GPIO_Init+0x10>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	371c      	adds	r7, #28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	48001000 	.word	0x48001000
 8000cf8:	48001400 	.word	0x48001400
 8000cfc:	48001800 	.word	0x48001800
 8000d00:	48001c00 	.word	0x48001c00
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43d9      	mvns	r1, r3
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	400b      	ands	r3, r1
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e101      	b.n	8000f82 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d106      	bne.n	8000d98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f006 fb38 	bl	8007408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 ff85 	bl	8003cba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7c1a      	ldrb	r2, [r3, #16]
 8000db8:	f88d 2000 	strb.w	r2, [sp]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc0:	f002 fea0 	bl	8003b04 <USB_CoreInit>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2202      	movs	r2, #2
 8000dce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0d5      	b.n	8000f82 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 ff7d 	bl	8003cdc <USB_SetCurrentMode>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2202      	movs	r2, #2
 8000dec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e0c6      	b.n	8000f82 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e04a      	b.n	8000e90 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4413      	add	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	3315      	adds	r3, #21
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3314      	adds	r3, #20
 8000e1e:	7bfa      	ldrb	r2, [r7, #15]
 8000e20:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	b298      	uxth	r0, r3
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	332e      	adds	r3, #46	@ 0x2e
 8000e36:	4602      	mov	r2, r0
 8000e38:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	3318      	adds	r3, #24
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	4413      	add	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	331c      	adds	r3, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	3320      	adds	r3, #32
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3324      	adds	r3, #36	@ 0x24
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	7bfa      	ldrb	r2, [r7, #15]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3af      	bcc.n	8000dfa <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e044      	b.n	8000f2a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	3301      	adds	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	791b      	ldrb	r3, [r3, #4]
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3b5      	bcc.n	8000ea0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7c1a      	ldrb	r2, [r3, #16]
 8000f3c:	f88d 2000 	strb.w	r2, [sp]
 8000f40:	3304      	adds	r3, #4
 8000f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f44:	f002 ff16 	bl	8003d74 <USB_DevInit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2202      	movs	r2, #2
 8000f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e013      	b.n	8000f82 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7b1b      	ldrb	r3, [r3, #12]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f001 f86d 	bl	8002050 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fecd 	bl	8004d1a <USB_DevDisconnect>

  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_PCD_Start+0x1c>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e01c      	b.n	8000fe0 <HAL_PCD_Start+0x56>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7b5b      	ldrb	r3, [r3, #13]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d105      	bne.n	8000fc2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fe66 	bl	8003c98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fe81 	bl	8004cd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08d      	sub	sp, #52	@ 0x34
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 ff3f 	bl	8004e82 <USB_GetMode>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	f040 8481 	bne.w	800190e <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fea3 	bl	8004d5c <USB_ReadInterrupts>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 8477 	beq.w	800190c <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fe90 	bl	8004d5c <USB_ReadInterrupts>
 800103c:	4603      	mov	r3, r0
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b02      	cmp	r3, #2
 8001044:	d107      	bne.n	8001056 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f002 0202 	and.w	r2, r2, #2
 8001054:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fe7e 	bl	8004d5c <USB_ReadInterrupts>
 8001060:	4603      	mov	r3, r0
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b10      	cmp	r3, #16
 8001068:	d161      	bne.n	800112e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0210 	bic.w	r2, r2, #16
 8001078:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	f003 020f 	and.w	r2, r3, #15
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	3304      	adds	r3, #4
 8001098:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	0c5b      	lsrs	r3, r3, #17
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d124      	bne.n	80010f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d035      	beq.n	800111e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	6a38      	ldr	r0, [r7, #32]
 80010c6:	f003 fcb5 	bl	8004a34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d6:	441a      	add	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010e8:	441a      	add	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	e016      	b.n	800111e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	0c5b      	lsrs	r3, r3, #17
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	2b06      	cmp	r3, #6
 80010fa:	d110      	bne.n	800111e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001102:	2208      	movs	r2, #8
 8001104:	4619      	mov	r1, r3
 8001106:	6a38      	ldr	r0, [r7, #32]
 8001108:	f003 fc94 	bl	8004a34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001118:	441a      	add	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	699a      	ldr	r2, [r3, #24]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0210 	orr.w	r2, r2, #16
 800112c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fe12 	bl	8004d5c <USB_ReadInterrupts>
 8001138:	4603      	mov	r3, r0
 800113a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800113e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001142:	f040 80a7 	bne.w	8001294 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fe17 	bl	8004d82 <USB_ReadDevAllOutEpInterrupt>
 8001154:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001156:	e099      	b.n	800128c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 808e 	beq.w	8001280 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fe3b 	bl	8004dea <USB_ReadDevOutEPInterrupt>
 8001174:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	015a      	lsls	r2, r3, #5
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	4413      	add	r3, r2
 8001188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800118c:	461a      	mov	r2, r3
 800118e:	2301      	movs	r3, #1
 8001190:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001192:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fe81 	bl	8001e9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00c      	beq.n	80011be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	015a      	lsls	r2, r3, #5
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	4413      	add	r3, r2
 80011ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80011b0:	461a      	mov	r2, r3
 80011b2:	2308      	movs	r3, #8
 80011b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 febd 	bl	8001f38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d008      	beq.n	80011da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80011c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ca:	015a      	lsls	r2, r3, #5
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	4413      	add	r3, r2
 80011d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80011d4:	461a      	mov	r2, r3
 80011d6:	2310      	movs	r3, #16
 80011d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d030      	beq.n	8001246 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ec:	2b80      	cmp	r3, #128	@ 0x80
 80011ee:	d109      	bne.n	8001204 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001202:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	3304      	adds	r3, #4
 8001218:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	78db      	ldrb	r3, [r3, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2200      	movs	r2, #0
 8001226:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4619      	mov	r1, r3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f006 fa3e 	bl	80076b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	015a      	lsls	r2, r3, #5
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	4413      	add	r3, r2
 800123c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001240:	461a      	mov	r2, r3
 8001242:	2302      	movs	r3, #2
 8001244:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	4413      	add	r3, r2
 8001258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800125c:	461a      	mov	r2, r3
 800125e:	2320      	movs	r3, #32
 8001260:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d009      	beq.n	8001280 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	4413      	add	r3, r2
 8001274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001278:	461a      	mov	r2, r3
 800127a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800127e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001282:	3301      	adds	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800128c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128e:	2b00      	cmp	r3, #0
 8001290:	f47f af62 	bne.w	8001158 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fd5f 	bl	8004d5c <USB_ReadInterrupts>
 800129e:	4603      	mov	r3, r0
 80012a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80012a8:	f040 80a4 	bne.w	80013f4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fd80 	bl	8004db6 <USB_ReadDevAllInEpInterrupt>
 80012b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80012bc:	e096      	b.n	80013ec <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 808b 	beq.w	80013e0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fda6 	bl	8004e26 <USB_ReadDevInEPInterrupt>
 80012da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d020      	beq.n	8001328 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	2201      	movs	r2, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69f9      	ldr	r1, [r7, #28]
 8001302:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001306:	4013      	ands	r3, r2
 8001308:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	015a      	lsls	r2, r3, #5
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	4413      	add	r3, r2
 8001312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001316:	461a      	mov	r2, r3
 8001318:	2301      	movs	r3, #1
 800131a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f006 f92f 	bl	8007586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800133e:	461a      	mov	r2, r3
 8001340:	2308      	movs	r3, #8
 8001342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	d008      	beq.n	8001360 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	015a      	lsls	r2, r3, #5
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800135a:	461a      	mov	r2, r3
 800135c:	2310      	movs	r3, #16
 800135e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001376:	461a      	mov	r2, r3
 8001378:	2340      	movs	r3, #64	@ 0x40
 800137a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d023      	beq.n	80013ce <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001388:	6a38      	ldr	r0, [r7, #32]
 800138a:	f002 fe3b 	bl	8004004 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800138e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	3310      	adds	r3, #16
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	3304      	adds	r3, #4
 80013a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d108      	bne.n	80013bc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 f98c 	bl	80076d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013c8:	461a      	mov	r2, r3
 80013ca:	2302      	movs	r3, #2
 80013cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fcd6 	bl	8001d8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	3301      	adds	r3, #1
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80013e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80013ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f47f af65 	bne.w	80012be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fcaf 	bl	8004d5c <USB_ReadInterrupts>
 80013fe:	4603      	mov	r3, r0
 8001400:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001408:	d122      	bne.n	8001450 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001424:	2b01      	cmp	r3, #1
 8001426:	d108      	bne.n	800143a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001430:	2100      	movs	r1, #0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f006 fbc0 	bl	8007bb8 <HAL_PCDEx_LPM_Callback>
 8001438:	e002      	b.n	8001440 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f006 f910 	bl	8007660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800144e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fc81 	bl	8004d5c <USB_ReadInterrupts>
 800145a:	4603      	mov	r3, r0
 800145c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001464:	d112      	bne.n	800148c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b01      	cmp	r3, #1
 8001474:	d102      	bne.n	800147c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f006 f8cc 	bl	8007614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800148a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fc63 	bl	8004d5c <USB_ReadInterrupts>
 8001496:	4603      	mov	r3, r0
 8001498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800149c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80014a0:	d121      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80014b0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d111      	bne.n	80014e0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	f003 020f 	and.w	r2, r3, #15
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80014d6:	2101      	movs	r1, #1
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f006 fb6d 	bl	8007bb8 <HAL_PCDEx_LPM_Callback>
 80014de:	e002      	b.n	80014e6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f006 f897 	bl	8007614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fc36 	bl	8004d5c <USB_ReadInterrupts>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014fa:	f040 80b6 	bne.w	800166a <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2110      	movs	r1, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fd73 	bl	8004004 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001522:	e046      	b.n	80015b2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001530:	461a      	mov	r2, r3
 8001532:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001536:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	4413      	add	r3, r2
 8001540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001548:	0151      	lsls	r1, r2, #5
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	440a      	add	r2, r1
 800154e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001552:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001556:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001564:	461a      	mov	r2, r3
 8001566:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800156a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800156c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800157c:	0151      	lsls	r1, r2, #5
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	440a      	add	r2, r1
 8001582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001586:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800158a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800159c:	0151      	lsls	r1, r2, #5
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	440a      	add	r2, r1
 80015a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80015a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ae:	3301      	adds	r3, #1
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	791b      	ldrb	r3, [r3, #4]
 80015b6:	461a      	mov	r2, r3
 80015b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d3b2      	bcc.n	8001524 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80015d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7bdb      	ldrb	r3, [r3, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d016      	beq.n	8001608 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015ea:	f043 030b 	orr.w	r3, r3, #11
 80015ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001600:	f043 030b 	orr.w	r3, r3, #11
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	e015      	b.n	8001634 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001616:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800161a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800161e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800162e:	f043 030b 	orr.w	r3, r3, #11
 8001632:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001642:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001646:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f003 fc45 	bl	8004ee4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fb74 	bl	8004d5c <USB_ReadInterrupts>
 8001674:	4603      	mov	r3, r0
 8001676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800167a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800167e:	d123      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fc0a 	bl	8004e9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fd31 	bl	80040f6 <USB_GetDevSpeed>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681c      	ldr	r4, [r3, #0]
 80016a0:	f001 fc10 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 80016a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016aa:	461a      	mov	r2, r3
 80016ac:	4620      	mov	r0, r4
 80016ae:	f002 fa57 	bl	8003b60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f005 ff8f 	bl	80075d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80016c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fb45 	bl	8004d5c <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d10a      	bne.n	80016f2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f005 ff6c 	bl	80075ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695a      	ldr	r2, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f002 0208 	and.w	r2, r2, #8
 80016f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fb30 	bl	8004d5c <USB_ReadInterrupts>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001702:	2b80      	cmp	r3, #128	@ 0x80
 8001704:	d123      	bne.n	800174e <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001712:	2301      	movs	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
 8001716:	e014      	b.n	8001742 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4619      	mov	r1, r3
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 faf7 	bl	8001d2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	3301      	adds	r3, #1
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	791b      	ldrb	r3, [r3, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	4293      	cmp	r3, r2
 800174c:	d3e4      	bcc.n	8001718 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fb02 	bl	8004d5c <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800175e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001762:	d13c      	bne.n	80017de <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001764:	2301      	movs	r3, #1
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
 8001768:	e02b      	b.n	80017c2 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3318      	adds	r3, #24
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d115      	bne.n	80017bc <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001790:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001792:	2b00      	cmp	r3, #0
 8001794:	da12      	bge.n	80017bc <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3317      	adds	r3, #23
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fab7 	bl	8001d2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	3301      	adds	r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	791b      	ldrb	r3, [r3, #4]
 80017c6:	461a      	mov	r2, r3
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d3cd      	bcc.n	800176a <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80017dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 faba 	bl	8004d5c <USB_ReadInterrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017f2:	d156      	bne.n	80018a2 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f4:	2301      	movs	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f8:	e045      	b.n	8001886 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180e:	4613      	mov	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d12e      	bne.n	8001880 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001822:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001824:	2b00      	cmp	r3, #0
 8001826:	da2b      	bge.n	8001880 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001834:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001838:	429a      	cmp	r2, r3
 800183a:	d121      	bne.n	8001880 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10a      	bne.n	8001880 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187c:	6053      	str	r3, [r2, #4]
            break;
 800187e:	e008      	b.n	8001892 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	3301      	adds	r3, #1
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	4293      	cmp	r3, r2
 8001890:	d3b3      	bcc.n	80017fa <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80018a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fa58 	bl	8004d5c <USB_ReadInterrupts>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80018b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b6:	d10a      	bne.n	80018ce <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f005 ff1d 	bl	80076f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80018cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fa42 	bl	8004d5c <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d115      	bne.n	800190e <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f005 ff0d 	bl	8007714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	e000      	b.n	800190e <HAL_PCD_IRQHandler+0x926>
      return;
 800190c:	bf00      	nop
    }
  }
}
 800190e:	3734      	adds	r7, #52	@ 0x34
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_PCD_SetAddress+0x1a>
 800192a:	2302      	movs	r3, #2
 800192c:	e012      	b.n	8001954 <HAL_PCD_SetAddress+0x40>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f003 f9a1 	bl	8004c8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	4608      	mov	r0, r1
 8001966:	4611      	mov	r1, r2
 8001968:	461a      	mov	r2, r3
 800196a:	4603      	mov	r3, r0
 800196c:	70fb      	strb	r3, [r7, #3]
 800196e:	460b      	mov	r3, r1
 8001970:	803b      	strh	r3, [r7, #0]
 8001972:	4613      	mov	r3, r2
 8001974:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800197a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da0f      	bge.n	80019a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	f003 020f 	and.w	r2, r3, #15
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	3310      	adds	r3, #16
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	3304      	adds	r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	705a      	strb	r2, [r3, #1]
 80019a0:	e00f      	b.n	80019c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	f003 020f 	and.w	r2, r3, #15
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	3304      	adds	r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80019ce:	883b      	ldrh	r3, [r7, #0]
 80019d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	78ba      	ldrb	r2, [r7, #2]
 80019dc:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019f0:	78bb      	ldrb	r3, [r7, #2]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d102      	bne.n	80019fc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_PCD_EP_Open+0xae>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e00e      	b.n	8001a28 <HAL_PCD_EP_Open+0xcc>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fb8b 	bl	8004134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001a26:	7afb      	ldrb	r3, [r7, #11]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da0f      	bge.n	8001a64 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	3310      	adds	r3, #16
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	705a      	strb	r2, [r3, #1]
 8001a62:	e00f      	b.n	8001a84 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_PCD_EP_Close+0x6e>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e00e      	b.n	8001abc <HAL_PCD_EP_Close+0x8c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fbc9 	bl	8004244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2200      	movs	r2, #0
 8001b04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6979      	ldr	r1, [r7, #20]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fc6f 	bl	80043fc <USB_EPStartXfer>

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 020f 	and.w	r2, r3, #15
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	460b      	mov	r3, r1
 8001b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	f003 020f 	and.w	r2, r3, #15
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	3310      	adds	r3, #16
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fc26 	bl	80043fc <USB_EPStartXfer>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	7912      	ldrb	r2, [r2, #4]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e04e      	b.n	8001c76 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da0f      	bge.n	8001c00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 020f 	and.w	r2, r3, #15
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	3310      	adds	r3, #16
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
 8001bfe:	e00d      	b.n	8001c1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_PCD_EP_SetStall+0x82>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e01c      	b.n	8001c76 <HAL_PCD_EP_SetStall+0xbc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68f9      	ldr	r1, [r7, #12]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 ff4a 	bl	8004ae4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f003 f93c 	bl	8004ee4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	7912      	ldrb	r2, [r2, #4]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e042      	b.n	8001d22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da0f      	bge.n	8001cc4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 020f 	and.w	r2, r3, #15
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	705a      	strb	r2, [r3, #1]
 8001cc2:	e00f      	b.n	8001ce4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 020f 	and.w	r2, r3, #15
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_PCD_EP_ClrStall+0x86>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e00e      	b.n	8001d22 <HAL_PCD_EP_ClrStall+0xa4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 ff54 	bl	8004bc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da0c      	bge.n	8001d58 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	f003 020f 	and.w	r2, r3, #15
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e00c      	b.n	8001d72 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3304      	adds	r3, #4
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68f9      	ldr	r1, [r7, #12]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fd77 	bl	800486c <USB_EPStopXfer>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001d82:	7afb      	ldrb	r3, [r7, #11]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	3310      	adds	r3, #16
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d901      	bls.n	8001dc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e067      	b.n	8001e94 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d902      	bls.n	8001de0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3303      	adds	r3, #3
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001de8:	e026      	b.n	8001e38 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d902      	bls.n	8001e06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3303      	adds	r3, #3
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	68d9      	ldr	r1, [r3, #12]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f002 fdd0 	bl	80049c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	441a      	add	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	441a      	add	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d809      	bhi.n	8001e62 <PCD_WriteEmptyTxFifo+0xd6>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d203      	bcs.n	8001e62 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1c3      	bne.n	8001dea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d811      	bhi.n	8001e92 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	2201      	movs	r2, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	6939      	ldr	r1, [r7, #16]
 8001e8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e8e:	4013      	ands	r3, r2
 8001e90:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	333c      	adds	r3, #60	@ 0x3c
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <PCD_EP_OutXfrComplete_int+0x98>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d124      	bne.n	8001f1c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eee:	6093      	str	r3, [r2, #8]
 8001ef0:	e01a      	b.n	8001f28 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 fb1b 	bl	8007550 <HAL_PCD_DataOutStageCallback>
 8001f1a:	e005      	b.n	8001f28 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f005 fb14 	bl	8007550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	4f54310a 	.word	0x4f54310a

08001f38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	333c      	adds	r3, #60	@ 0x3c
 8001f50:	3304      	adds	r3, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <PCD_EP_OutSetupPacket_int+0x64>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d90e      	bls.n	8001f8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f84:	461a      	mov	r2, r3
 8001f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f005 facd 	bl	800752c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	4f54300a 	.word	0x4f54300a

08001fa0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
 8001fac:	4613      	mov	r3, r2
 8001fae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d107      	bne.n	8001fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001fbe:	883b      	ldrh	r3, [r7, #0]
 8001fc0:	0419      	lsls	r1, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fcc:	e028      	b.n	8002020 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4413      	add	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e00d      	b.n	8001ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	3340      	adds	r3, #64	@ 0x40
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	3b01      	subs	r3, #1
 8002004:	429a      	cmp	r2, r3
 8002006:	d3ec      	bcc.n	8001fe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002008:	883b      	ldrh	r3, [r7, #0]
 800200a:	0418      	lsls	r0, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	3b01      	subs	r3, #1
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	4302      	orrs	r2, r0
 8002018:	3340      	adds	r3, #64	@ 0x40
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002082:	f043 0303 	orr.w	r3, r3, #3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800209c:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a8:	d102      	bne.n	80020b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80020aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ae:	e00b      	b.n	80020c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80020b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020be:	d102      	bne.n	80020c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80020c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020c4:	e000      	b.n	80020c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80020c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d141      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f2:	d131      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f4:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fa:	4a46      	ldr	r2, [pc, #280]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002100:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002104:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800210c:	4a41      	ldr	r2, [pc, #260]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002114:	4b40      	ldr	r3, [pc, #256]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2232      	movs	r2, #50	@ 0x32
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	4a3f      	ldr	r2, [pc, #252]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	0c9b      	lsrs	r3, r3, #18
 8002126:	3301      	adds	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212a:	e002      	b.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3b01      	subs	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002132:	4b38      	ldr	r3, [pc, #224]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213e:	d102      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f2      	bne.n	800212c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002146:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002152:	d158      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e057      	b.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800215e:	4a2d      	ldr	r2, [pc, #180]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002164:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002168:	e04d      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002170:	d141      	bne.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002172:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217e:	d131      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002180:	4b24      	ldr	r3, [pc, #144]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002186:	4a23      	ldr	r2, [pc, #140]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002190:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002198:	4a1e      	ldr	r2, [pc, #120]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2232      	movs	r2, #50	@ 0x32
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	4a1c      	ldr	r2, [pc, #112]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c9b      	lsrs	r3, r3, #18
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b6:	e002      	b.n	80021be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ca:	d102      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f2      	bne.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021de:	d112      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e011      	b.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021f4:	e007      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002204:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40007000 	.word	0x40007000
 8002218:	20000000 	.word	0x20000000
 800221c:	431bde83 	.word	0x431bde83

08002220 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_PWREx_EnableVddUSB+0x1c>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6053      	str	r3, [r2, #4]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f000 bc68 	b.w	8002b24 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002254:	4b97      	ldr	r3, [pc, #604]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225e:	4b95      	ldr	r3, [pc, #596]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80e6 	beq.w	8002442 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_RCC_OscConfig+0x4c>
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	f040 808d 	bne.w	800239e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b01      	cmp	r3, #1
 8002288:	f040 8089 	bne.w	800239e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800228c:	4b89      	ldr	r3, [pc, #548]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_RCC_OscConfig+0x66>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f000 bc3f 	b.w	8002b24 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022aa:	4b82      	ldr	r3, [pc, #520]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <HAL_RCC_OscConfig+0x80>
 80022b6:	4b7f      	ldr	r3, [pc, #508]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022be:	e005      	b.n	80022cc <HAL_RCC_OscConfig+0x8c>
 80022c0:	4b7c      	ldr	r3, [pc, #496]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d224      	bcs.n	800231a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fe01 	bl	8002edc <RCC_SetFlashLatencyFromMSIRange>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f000 bc1f 	b.w	8002b24 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e6:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a72      	ldr	r2, [pc, #456]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b70      	ldr	r3, [pc, #448]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	496d      	ldr	r1, [pc, #436]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002304:	4b6b      	ldr	r3, [pc, #428]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4968      	ldr	r1, [pc, #416]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e025      	b.n	8002366 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231a:	4b66      	ldr	r3, [pc, #408]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a65      	ldr	r2, [pc, #404]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	4960      	ldr	r1, [pc, #384]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002338:	4b5e      	ldr	r3, [pc, #376]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	495b      	ldr	r1, [pc, #364]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fdc0 	bl	8002edc <RCC_SetFlashLatencyFromMSIRange>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3de      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002366:	f000 fd21 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b51      	ldr	r3, [pc, #324]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	4950      	ldr	r1, [pc, #320]	@ (80024b8 <HAL_RCC_OscConfig+0x278>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	4a4e      	ldr	r2, [pc, #312]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002386:	4b4e      	ldr	r3, [pc, #312]	@ (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f998 	bl	80006c0 <HAL_InitTick>
 8002390:	4603      	mov	r3, r0
 8002392:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d052      	beq.n	8002440 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	e3c2      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d032      	beq.n	800240c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a42      	ldr	r2, [pc, #264]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b2:	f7fe f9d5 	bl	8000760 <HAL_GetTick>
 80023b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ba:	f7fe f9d1 	bl	8000760 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e3ab      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023cc:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d8:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a35      	ldr	r2, [pc, #212]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023de:	f043 0308 	orr.w	r3, r3, #8
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b33      	ldr	r3, [pc, #204]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	4930      	ldr	r1, [pc, #192]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f6:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	492b      	ldr	r1, [pc, #172]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
 800240a:	e01a      	b.n	8002442 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a28      	ldr	r2, [pc, #160]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002418:	f7fe f9a2 	bl	8000760 <HAL_GetTick>
 800241c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002420:	f7fe f99e 	bl	8000760 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e378      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x1e0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d073      	beq.n	8002536 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x220>
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d10e      	bne.n	8002478 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d063      	beq.n	8002534 <HAL_RCC_OscConfig+0x2f4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d15f      	bne.n	8002534 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e355      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x250>
 8002482:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a0b      	ldr	r2, [pc, #44]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e025      	b.n	80024dc <HAL_RCC_OscConfig+0x29c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002498:	d114      	bne.n	80024c4 <HAL_RCC_OscConfig+0x284>
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a02      	ldr	r2, [pc, #8]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e013      	b.n	80024dc <HAL_RCC_OscConfig+0x29c>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	0800864c 	.word	0x0800864c
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004
 80024c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a8b      	ldr	r2, [pc, #556]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe f93c 	bl	8000760 <HAL_GetTick>
 80024e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe f938 	bl	8000760 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	@ 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e312      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fe:	4b81      	ldr	r3, [pc, #516]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x2ac>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe f928 	bl	8000760 <HAL_GetTick>
 8002510:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe f924 	bl	8000760 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	@ 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2fe      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002526:	4b77      	ldr	r3, [pc, #476]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x2d4>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d060      	beq.n	8002604 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d005      	beq.n	8002554 <HAL_RCC_OscConfig+0x314>
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d119      	bne.n	8002582 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d116      	bne.n	8002582 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002554:	4b6b      	ldr	r3, [pc, #428]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x32c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e2db      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b65      	ldr	r3, [pc, #404]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4962      	ldr	r1, [pc, #392]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002580:	e040      	b.n	8002604 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d023      	beq.n	80025d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258a:	4b5e      	ldr	r3, [pc, #376]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5d      	ldr	r2, [pc, #372]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe f8e3 	bl	8000760 <HAL_GetTick>
 800259a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe f8df 	bl	8000760 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e2b9      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	4b54      	ldr	r3, [pc, #336]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b51      	ldr	r3, [pc, #324]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	494e      	ldr	r1, [pc, #312]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
 80025d0:	e018      	b.n	8002604 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe f8bf 	bl	8000760 <HAL_GetTick>
 80025e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe f8bb 	bl	8000760 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e295      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f8:	4b42      	ldr	r3, [pc, #264]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8082 	beq.w	8002716 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d05f      	beq.n	80026da <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800261a:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002620:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	429a      	cmp	r2, r3
 800262e:	d037      	beq.n	80026a0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e26d      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01b      	beq.n	800268a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002652:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002658:	4a2a      	ldr	r2, [pc, #168]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002662:	f7fe f87d 	bl	8000760 <HAL_GetTick>
 8002666:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe f879 	bl	8000760 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b11      	cmp	r3, #17
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e253      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267c:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ef      	bne.n	800266a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002690:	f023 0210 	bic.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	491a      	ldr	r1, [pc, #104]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a0:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a6:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe f856 	bl	8000760 <HAL_GetTick>
 80026b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe f852 	bl	8000760 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e22c      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x478>
 80026d8:	e01d      	b.n	8002716 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e0:	4a08      	ldr	r2, [pc, #32]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe f839 	bl	8000760 <HAL_GetTick>
 80026ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe f835 	bl	8000760 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b11      	cmp	r3, #17
 80026fe:	d903      	bls.n	8002708 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e20f      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
 8002704:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002708:	4b83      	ldr	r3, [pc, #524]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ed      	bne.n	80026f2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80bd 	beq.w	800289e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800272a:	4b7b      	ldr	r3, [pc, #492]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10e      	bne.n	8002754 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b78      	ldr	r3, [pc, #480]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	4a77      	ldr	r2, [pc, #476]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	@ 0x58
 8002742:	4b75      	ldr	r3, [pc, #468]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002754:	4b71      	ldr	r3, [pc, #452]	@ (800291c <HAL_RCC_OscConfig+0x6dc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d118      	bne.n	8002792 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002760:	4b6e      	ldr	r3, [pc, #440]	@ (800291c <HAL_RCC_OscConfig+0x6dc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a6d      	ldr	r2, [pc, #436]	@ (800291c <HAL_RCC_OscConfig+0x6dc>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276c:	f7fd fff8 	bl	8000760 <HAL_GetTick>
 8002770:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7fd fff4 	bl	8000760 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1ce      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002786:	4b65      	ldr	r3, [pc, #404]	@ (800291c <HAL_RCC_OscConfig+0x6dc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800279e:	4b5e      	ldr	r3, [pc, #376]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b0:	4959      	ldr	r1, [pc, #356]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d010      	beq.n	80027e6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027c4:	4b54      	ldr	r3, [pc, #336]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ca:	4a53      	ldr	r2, [pc, #332]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027d4:	4b50      	ldr	r3, [pc, #320]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027da:	4a4f      	ldr	r2, [pc, #316]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e4:	e018      	b.n	8002818 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f6:	e00f      	b.n	8002818 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027f8:	4b47      	ldr	r3, [pc, #284]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	4a46      	ldr	r2, [pc, #280]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002808:	4b43      	ldr	r3, [pc, #268]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	4a42      	ldr	r2, [pc, #264]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fd ff9e 	bl	8000760 <HAL_GetTick>
 8002824:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fd ff9a 	bl	8000760 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e172      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283e:	4b36      	ldr	r3, [pc, #216]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ed      	beq.n	8002828 <HAL_RCC_OscConfig+0x5e8>
 800284c:	e01d      	b.n	800288a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fd ff87 	bl	8000760 <HAL_GetTick>
 8002852:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fd ff83 	bl	8000760 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e15b      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286c:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ed      	bne.n	8002856 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800287a:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002880:	4a25      	ldr	r2, [pc, #148]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b21      	ldr	r3, [pc, #132]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002896:	4a20      	ldr	r2, [pc, #128]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d041      	beq.n	800292e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01c      	beq.n	80028ec <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80028b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b8:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7fd ff4d 	bl	8000760 <HAL_GetTick>
 80028c6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ca:	f7fd ff49 	bl	8000760 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e123      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80028de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0ef      	beq.n	80028ca <HAL_RCC_OscConfig+0x68a>
 80028ea:	e020      	b.n	800292e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80028ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_RCC_OscConfig+0x6d8>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fd ff30 	bl	8000760 <HAL_GetTick>
 8002900:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002902:	e00d      	b.n	8002920 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002904:	f7fd ff2c 	bl	8000760 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d906      	bls.n	8002920 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e106      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002920:	4b82      	ldr	r3, [pc, #520]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ea      	bne.n	8002904 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80f5 	beq.w	8002b22 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	2b02      	cmp	r3, #2
 800293e:	f040 80cb 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002942:	4b7a      	ldr	r3, [pc, #488]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	429a      	cmp	r2, r3
 8002954:	d12c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002960:	3b01      	subs	r3, #1
 8002962:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d123      	bne.n	80029b0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d11b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002982:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d113      	bne.n	80029b0 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	3b01      	subs	r3, #1
 8002996:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d109      	bne.n	80029b0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	3b01      	subs	r3, #1
 80029aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d06d      	beq.n	8002a8c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d068      	beq.n	8002a88 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029b6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029c2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0a8      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d2:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a55      	ldr	r2, [pc, #340]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 80029d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029de:	f7fd febf 	bl	8000760 <HAL_GetTick>
 80029e2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fd febb 	bl	8000760 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e095      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	4b49      	ldr	r3, [pc, #292]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	4b49      	ldr	r3, [pc, #292]	@ (8002b30 <HAL_RCC_OscConfig+0x8f0>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a14:	3a01      	subs	r2, #1
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a1e:	0212      	lsls	r2, r2, #8
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a26:	0852      	lsrs	r2, r2, #1
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	0552      	lsls	r2, r2, #21
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a32:	0852      	lsrs	r2, r2, #1
 8002a34:	3a01      	subs	r2, #1
 8002a36:	0652      	lsls	r2, r2, #25
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a3e:	06d2      	lsls	r2, r2, #27
 8002a40:	430a      	orrs	r2, r1
 8002a42:	493a      	ldr	r1, [pc, #232]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a48:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a37      	ldr	r2, [pc, #220]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a54:	4b35      	ldr	r3, [pc, #212]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a34      	ldr	r2, [pc, #208]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a60:	f7fd fe7e 	bl	8000760 <HAL_GetTick>
 8002a64:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fd fe7a 	bl	8000760 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e054      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a86:	e04c      	b.n	8002b22 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e04b      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d144      	bne.n	8002b22 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a98:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab0:	f7fd fe56 	bl	8000760 <HAL_GetTick>
 8002ab4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fd fe52 	bl	8000760 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e02c      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b18      	ldr	r3, [pc, #96]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x878>
 8002ad6:	e024      	b.n	8002b22 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d01f      	beq.n	8002b1e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fd fe39 	bl	8000760 <HAL_GetTick>
 8002aee:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fd fe35 	bl	8000760 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e00f      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	4905      	ldr	r1, [pc, #20]	@ (8002b2c <HAL_RCC_OscConfig+0x8ec>)
 8002b16:	4b07      	ldr	r3, [pc, #28]	@ (8002b34 <HAL_RCC_OscConfig+0x8f4>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
 8002b1c:	e001      	b.n	8002b22 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3728      	adds	r7, #40	@ 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	019d800c 	.word	0x019d800c
 8002b34:	feeefffc 	.word	0xfeeefffc

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e11d      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b90      	ldr	r3, [pc, #576]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d910      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 020f 	bic.w	r2, r3, #15
 8002b66:	498b      	ldr	r1, [pc, #556]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b89      	ldr	r3, [pc, #548]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e105      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b81      	ldr	r3, [pc, #516]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d908      	bls.n	8002bae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	497b      	ldr	r1, [pc, #492]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d079      	beq.n	8002cae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d11e      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b75      	ldr	r3, [pc, #468]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0dc      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bd2:	f000 f9dd 	bl	8002f90 <RCC_GetSysClockFreqFromPLLSource>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4a70      	ldr	r2, [pc, #448]	@ (8002d9c <HAL_RCC_ClockConfig+0x264>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d946      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bde:	4b6e      	ldr	r3, [pc, #440]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d140      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bea:	4b6b      	ldr	r3, [pc, #428]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bf2:	4a69      	ldr	r2, [pc, #420]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bfa:	2380      	movs	r3, #128	@ 0x80
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e035      	b.n	8002c6c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c08:	4b63      	ldr	r3, [pc, #396]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d115      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b9      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c20:	4b5d      	ldr	r3, [pc, #372]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0ad      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c30:	4b59      	ldr	r3, [pc, #356]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0a5      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c40:	f000 f8b4 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a55      	ldr	r2, [pc, #340]	@ (8002d9c <HAL_RCC_ClockConfig+0x264>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d90f      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c4c:	4b52      	ldr	r3, [pc, #328]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c58:	4b4f      	ldr	r3, [pc, #316]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c60:	4a4d      	ldr	r2, [pc, #308]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 0203 	bic.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4947      	ldr	r1, [pc, #284]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7e:	f7fd fd6f 	bl	8000760 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c86:	f7fd fd6b 	bl	8000760 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e077      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 020c 	and.w	r2, r3, #12
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d1eb      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b80      	cmp	r3, #128	@ 0x80
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cb4:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a37      	ldr	r2, [pc, #220]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cbe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d208      	bcs.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	492b      	ldr	r1, [pc, #172]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cee:	4b29      	ldr	r3, [pc, #164]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d210      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfc:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 020f 	bic.w	r2, r3, #15
 8002d04:	4923      	ldr	r1, [pc, #140]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0c:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e036      	b.n	8002d8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4918      	ldr	r1, [pc, #96]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4910      	ldr	r1, [pc, #64]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d5c:	f000 f826 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <HAL_RCC_ClockConfig+0x268>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <HAL_RCC_ClockConfig+0x26c>)
 8002d7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_RCC_ClockConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fc9d 	bl	80006c0 <HAL_InitTick>
 8002d86:	4603      	mov	r3, r0
 8002d88:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40022000 	.word	0x40022000
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	04c4b400 	.word	0x04c4b400
 8002da0:	0800864c 	.word	0x0800864c
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000004 	.word	0x20000004

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dba:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d121      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d11e      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002de0:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dec:	4b31      	ldr	r3, [pc, #196]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e005      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e08:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e24:	4b25      	ldr	r3, [pc, #148]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	e004      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e30:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d134      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d003      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0xac>
 8002e50:	e005      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e52:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8002e54:	617b      	str	r3, [r7, #20]
      break;
 8002e56:	e005      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e5a:	617b      	str	r3, [r7, #20]
      break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	617b      	str	r3, [r7, #20]
      break;
 8002e62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3301      	adds	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	0e5b      	lsrs	r3, r3, #25
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	3301      	adds	r3, #1
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	@ 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	0800865c 	.word	0x0800865c
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	007a1200 	.word	0x007a1200

08002ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000

08002edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ef4:	f7ff f8d0 	bl	8002098 <HAL_PWREx_GetVoltageRange>
 8002ef8:	6178      	str	r0, [r7, #20]
 8002efa:	e014      	b.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	4a21      	ldr	r2, [pc, #132]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f08:	4b1f      	ldr	r3, [pc, #124]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f14:	f7ff f8c0 	bl	8002098 <HAL_PWREx_GetVoltageRange>
 8002f18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f2c:	d10b      	bne.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b80      	cmp	r3, #128	@ 0x80
 8002f32:	d913      	bls.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f38:	d902      	bls.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e00d      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f40:	2301      	movs	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e00a      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f4a:	d902      	bls.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e004      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b70      	cmp	r3, #112	@ 0x70
 8002f56:	d101      	bne.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f58:	2301      	movs	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 020f 	bic.w	r2, r3, #15
 8002f64:	4909      	ldr	r1, [pc, #36]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40022000 	.word	0x40022000

08002f90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f96:	4b2d      	ldr	r3, [pc, #180]	@ (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d00b      	beq.n	8002fbe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d825      	bhi.n	8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d008      	beq.n	8002fc4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d11f      	bne.n	8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fba:	613b      	str	r3, [r7, #16]
    break;
 8002fbc:	e01f      	b.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002fc0:	613b      	str	r3, [r7, #16]
    break;
 8002fc2:	e01c      	b.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc4:	4b21      	ldr	r3, [pc, #132]	@ (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e005      	b.n	8002fec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002fec:	4a1a      	ldr	r2, [pc, #104]	@ (8003058 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
    break;
 8002ff6:	e002      	b.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
    break;
 8002ffc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ffe:	4b13      	ldr	r3, [pc, #76]	@ (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	3301      	adds	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800300c:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	fb03 f202 	mul.w	r2, r3, r2
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003024:	4b09      	ldr	r3, [pc, #36]	@ (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0e5b      	lsrs	r3, r3, #25
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	3301      	adds	r3, #1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800303e:	683b      	ldr	r3, [r7, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200
 8003058:	0800865c 	.word	0x0800865c

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003064:	2300      	movs	r3, #0
 8003066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003068:	2300      	movs	r3, #0
 800306a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003074:	2b00      	cmp	r3, #0
 8003076:	d040      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307c:	2b80      	cmp	r3, #128	@ 0x80
 800307e:	d02a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003080:	2b80      	cmp	r3, #128	@ 0x80
 8003082:	d825      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003084:	2b60      	cmp	r3, #96	@ 0x60
 8003086:	d026      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003088:	2b60      	cmp	r3, #96	@ 0x60
 800308a:	d821      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d006      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d81d      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d010      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800309c:	e018      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800309e:	4b89      	ldr	r3, [pc, #548]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a88      	ldr	r2, [pc, #544]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030aa:	e015      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fb3e 	bl	8003734 <RCCEx_PLLSAI1_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030bc:	e00c      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3320      	adds	r3, #32
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fc29 	bl	800391c <RCCEx_PLLSAI2_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ce:	e003      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	74fb      	strb	r3, [r7, #19]
      break;
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80030d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030de:	4b79      	ldr	r3, [pc, #484]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030e4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ec:	4975      	ldr	r1, [pc, #468]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80030f4:	e001      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d047      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	d030      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003114:	d82a      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800311a:	d02a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800311c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003120:	d824      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800312c:	d81e      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003136:	d010      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003138:	e018      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800313a:	4b62      	ldr	r3, [pc, #392]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4a61      	ldr	r2, [pc, #388]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003144:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003146:	e015      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 faf0 	bl	8003734 <RCCEx_PLLSAI1_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003158:	e00c      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3320      	adds	r3, #32
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fbdb 	bl	800391c <RCCEx_PLLSAI2_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800316a:	e003      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	74fb      	strb	r3, [r7, #19]
      break;
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800317a:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800317c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	494e      	ldr	r1, [pc, #312]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003190:	e001      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 809f 	beq.w	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a8:	4b46      	ldr	r3, [pc, #280]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b41      	ldr	r3, [pc, #260]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	4a40      	ldr	r2, [pc, #256]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ca:	4b3e      	ldr	r3, [pc, #248]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3a      	ldr	r2, [pc, #232]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031e6:	f7fd fabb 	bl	8000760 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ec:	e009      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fd fab7 	bl	8000760 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d902      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003200:	e005      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003202:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ef      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d15b      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003214:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01f      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d019      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003232:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800323c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800323e:	4b21      	ldr	r3, [pc, #132]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003254:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800325e:	4a19      	ldr	r2, [pc, #100]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd fa76 	bl	8000760 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003276:	e00b      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fd fa72 	bl	8000760 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d902      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	74fb      	strb	r3, [r7, #19]
            break;
 800328e:	e006      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ec      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10c      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a4:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b4:	4903      	ldr	r1, [pc, #12]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032bc:	e008      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	74bb      	strb	r3, [r7, #18]
 80032c2:	e005      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d0:	7c7b      	ldrb	r3, [r7, #17]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4ba0      	ldr	r3, [pc, #640]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	4a9f      	ldr	r2, [pc, #636]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ee:	4b9a      	ldr	r3, [pc, #616]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fc:	4996      	ldr	r1, [pc, #600]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003310:	4b91      	ldr	r3, [pc, #580]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f023 020c 	bic.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	498e      	ldr	r1, [pc, #568]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003332:	4b89      	ldr	r3, [pc, #548]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003340:	4985      	ldr	r1, [pc, #532]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003354:	4b80      	ldr	r3, [pc, #512]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003362:	497d      	ldr	r1, [pc, #500]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003376:	4b78      	ldr	r3, [pc, #480]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003384:	4974      	ldr	r1, [pc, #464]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003398:	4b6f      	ldr	r3, [pc, #444]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a6:	496c      	ldr	r1, [pc, #432]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ba:	4b67      	ldr	r3, [pc, #412]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033c8:	4963      	ldr	r1, [pc, #396]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ea:	495b      	ldr	r1, [pc, #364]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033fe:	4b56      	ldr	r3, [pc, #344]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	4952      	ldr	r1, [pc, #328]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003420:	4b4d      	ldr	r3, [pc, #308]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	494a      	ldr	r1, [pc, #296]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003442:	4b45      	ldr	r3, [pc, #276]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003450:	4941      	ldr	r1, [pc, #260]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003464:	4b3c      	ldr	r3, [pc, #240]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003472:	4939      	ldr	r1, [pc, #228]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d028      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003486:	4b34      	ldr	r3, [pc, #208]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003494:	4930      	ldr	r1, [pc, #192]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034b0:	60d3      	str	r3, [r2, #12]
 80034b2:	e011      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2101      	movs	r1, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f935 	bl	8003734 <RCCEx_PLLSAI1_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d04d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ec:	d108      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034f4:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80034fe:	e012      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003500:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003506:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003508:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800350c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800351e:	490e      	ldr	r1, [pc, #56]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800352a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800352e:	d106      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a08      	ldr	r2, [pc, #32]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
 800353c:	e020      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003546:	d109      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003548:	4b03      	ldr	r3, [pc, #12]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a02      	ldr	r2, [pc, #8]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003552:	60d3      	str	r3, [r2, #12]
 8003554:	e014      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f8e1 	bl	8003734 <RCCEx_PLLSAI1_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d028      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800358c:	4b68      	ldr	r3, [pc, #416]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003592:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800359a:	4965      	ldr	r1, [pc, #404]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035aa:	d106      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ac:	4b60      	ldr	r3, [pc, #384]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b6:	60d3      	str	r3, [r2, #12]
 80035b8:	e011      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c2:	d10c      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f8b2 	bl	8003734 <RCCEx_PLLSAI1_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01e      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ea:	4b51      	ldr	r3, [pc, #324]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fa:	494d      	ldr	r1, [pc, #308]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f88d 	bl	8003734 <RCCEx_PLLSAI1_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003634:	4b3e      	ldr	r3, [pc, #248]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003636:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800363a:	f023 0204 	bic.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003644:	493a      	ldr	r1, [pc, #232]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003658:	4b35      	ldr	r3, [pc, #212]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800365a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800365e:	f023 0218 	bic.w	r2, r3, #24
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	4931      	ldr	r1, [pc, #196]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d035      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800367c:	4b2c      	ldr	r3, [pc, #176]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2b      	ldr	r2, [pc, #172]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003688:	f7fd f86a 	bl	8000760 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800368e:	e009      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003690:	f7fd f866 	bl	8000760 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	74fb      	strb	r3, [r7, #19]
        break;
 80036a2:	e005      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036a4:	4b22      	ldr	r3, [pc, #136]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ef      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d113      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80036b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036c6:	491a      	ldr	r1, [pc, #104]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3320      	adds	r3, #32
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f921 	bl	800391c <RCCEx_PLLSAI2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d017      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003704:	490a      	ldr	r1, [pc, #40]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800371e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003722:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003724:	7cbb      	ldrb	r3, [r7, #18]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003742:	4b72      	ldr	r3, [pc, #456]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800374e:	4b6f      	ldr	r3, [pc, #444]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d103      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
       ||
 8003762:	2b00      	cmp	r3, #0
 8003764:	d142      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	e03f      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d018      	beq.n	80037a6 <RCCEx_PLLSAI1_Config+0x72>
 8003774:	2b03      	cmp	r3, #3
 8003776:	d825      	bhi.n	80037c4 <RCCEx_PLLSAI1_Config+0x90>
 8003778:	2b01      	cmp	r3, #1
 800377a:	d002      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x4e>
 800377c:	2b02      	cmp	r3, #2
 800377e:	d009      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x60>
 8003780:	e020      	b.n	80037c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003782:	4b62      	ldr	r3, [pc, #392]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11d      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003792:	e01a      	b.n	80037ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003794:	4b5d      	ldr	r3, [pc, #372]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d116      	bne.n	80037ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a4:	e013      	b.n	80037ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037a6:	4b59      	ldr	r3, [pc, #356]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10f      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037b2:	4b56      	ldr	r3, [pc, #344]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037c2:	e006      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e004      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037ca:	bf00      	nop
 80037cc:	e002      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80037da:	4b4c      	ldr	r3, [pc, #304]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4949      	ldr	r1, [pc, #292]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 8086 	bne.w	8003900 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037f4:	4b45      	ldr	r3, [pc, #276]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a44      	ldr	r2, [pc, #272]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80037fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fc ffae 	bl	8000760 <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003806:	e009      	b.n	800381c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003808:	f7fc ffaa 	bl	8000760 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d902      	bls.n	800381c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	73fb      	strb	r3, [r7, #15]
        break;
 800381a:	e005      	b.n	8003828 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800381c:	4b3b      	ldr	r3, [pc, #236]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ef      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d168      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003834:	4b35      	ldr	r3, [pc, #212]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	4b35      	ldr	r3, [pc, #212]	@ (8003910 <RCCEx_PLLSAI1_Config+0x1dc>)
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6892      	ldr	r2, [r2, #8]
 8003840:	0211      	lsls	r1, r2, #8
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	06d2      	lsls	r2, r2, #27
 8003848:	4311      	orrs	r1, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6852      	ldr	r2, [r2, #4]
 800384e:	3a01      	subs	r2, #1
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	430a      	orrs	r2, r1
 8003854:	492d      	ldr	r1, [pc, #180]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	610b      	str	r3, [r1, #16]
 800385a:	e02d      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d115      	bne.n	800388e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003862:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	4b2b      	ldr	r3, [pc, #172]	@ (8003914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6892      	ldr	r2, [r2, #8]
 800386e:	0211      	lsls	r1, r2, #8
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6912      	ldr	r2, [r2, #16]
 8003874:	0852      	lsrs	r2, r2, #1
 8003876:	3a01      	subs	r2, #1
 8003878:	0552      	lsls	r2, r2, #21
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6852      	ldr	r2, [r2, #4]
 8003880:	3a01      	subs	r2, #1
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	430a      	orrs	r2, r1
 8003886:	4921      	ldr	r1, [pc, #132]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	610b      	str	r3, [r1, #16]
 800388c:	e014      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388e:	4b1f      	ldr	r3, [pc, #124]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	4b21      	ldr	r3, [pc, #132]	@ (8003918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6892      	ldr	r2, [r2, #8]
 800389a:	0211      	lsls	r1, r2, #8
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6952      	ldr	r2, [r2, #20]
 80038a0:	0852      	lsrs	r2, r2, #1
 80038a2:	3a01      	subs	r2, #1
 80038a4:	0652      	lsls	r2, r2, #25
 80038a6:	4311      	orrs	r1, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6852      	ldr	r2, [r2, #4]
 80038ac:	3a01      	subs	r2, #1
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	430a      	orrs	r2, r1
 80038b2:	4916      	ldr	r1, [pc, #88]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038b8:	4b14      	ldr	r3, [pc, #80]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a13      	ldr	r2, [pc, #76]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fc ff4c 	bl	8000760 <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ca:	e009      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038cc:	f7fc ff48 	bl	8000760 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	73fb      	strb	r3, [r7, #15]
          break;
 80038de:	e005      	b.n	80038ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ef      	beq.n	80038cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4904      	ldr	r1, [pc, #16]	@ (800390c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	07ff800f 	.word	0x07ff800f
 8003914:	ff9f800f 	.word	0xff9f800f
 8003918:	f9ff800f 	.word	0xf9ff800f

0800391c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800392a:	4b72      	ldr	r3, [pc, #456]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00e      	beq.n	8003954 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003936:	4b6f      	ldr	r3, [pc, #444]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0203 	and.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d103      	bne.n	800394e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
       ||
 800394a:	2b00      	cmp	r3, #0
 800394c:	d142      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e03f      	b.n	80039d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d018      	beq.n	800398e <RCCEx_PLLSAI2_Config+0x72>
 800395c:	2b03      	cmp	r3, #3
 800395e:	d825      	bhi.n	80039ac <RCCEx_PLLSAI2_Config+0x90>
 8003960:	2b01      	cmp	r3, #1
 8003962:	d002      	beq.n	800396a <RCCEx_PLLSAI2_Config+0x4e>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d009      	beq.n	800397c <RCCEx_PLLSAI2_Config+0x60>
 8003968:	e020      	b.n	80039ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800396a:	4b62      	ldr	r3, [pc, #392]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397a:	e01a      	b.n	80039b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800397c:	4b5d      	ldr	r3, [pc, #372]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e013      	b.n	80039b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800398e:	4b59      	ldr	r3, [pc, #356]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800399a:	4b56      	ldr	r3, [pc, #344]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039aa:	e006      	b.n	80039ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      break;
 80039b0:	e004      	b.n	80039bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80039c2:	4b4c      	ldr	r3, [pc, #304]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4949      	ldr	r1, [pc, #292]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 8086 	bne.w	8003ae8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039dc:	4b45      	ldr	r3, [pc, #276]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a44      	ldr	r2, [pc, #272]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fc feba 	bl	8000760 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039f0:	f7fc feb6 	bl	8000760 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
        break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a04:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ef      	bne.n	80039f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d168      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d113      	bne.n	8003a44 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a1c:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	4b35      	ldr	r3, [pc, #212]	@ (8003af8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6892      	ldr	r2, [r2, #8]
 8003a28:	0211      	lsls	r1, r2, #8
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68d2      	ldr	r2, [r2, #12]
 8003a2e:	06d2      	lsls	r2, r2, #27
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6852      	ldr	r2, [r2, #4]
 8003a36:	3a01      	subs	r2, #1
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	492d      	ldr	r1, [pc, #180]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	614b      	str	r3, [r1, #20]
 8003a42:	e02d      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d115      	bne.n	8003a76 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003afc <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6892      	ldr	r2, [r2, #8]
 8003a56:	0211      	lsls	r1, r2, #8
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6912      	ldr	r2, [r2, #16]
 8003a5c:	0852      	lsrs	r2, r2, #1
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	0552      	lsls	r2, r2, #21
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6852      	ldr	r2, [r2, #4]
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	4921      	ldr	r1, [pc, #132]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	614b      	str	r3, [r1, #20]
 8003a74:	e014      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a76:	4b1f      	ldr	r3, [pc, #124]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	4b21      	ldr	r3, [pc, #132]	@ (8003b00 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6892      	ldr	r2, [r2, #8]
 8003a82:	0211      	lsls	r1, r2, #8
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6952      	ldr	r2, [r2, #20]
 8003a88:	0852      	lsrs	r2, r2, #1
 8003a8a:	3a01      	subs	r2, #1
 8003a8c:	0652      	lsls	r2, r2, #25
 8003a8e:	4311      	orrs	r1, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6852      	ldr	r2, [r2, #4]
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4916      	ldr	r1, [pc, #88]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003aa0:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fc fe58 	bl	8000760 <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab2:	e009      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab4:	f7fc fe54 	bl	8000760 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac6:	e005      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ada:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	4904      	ldr	r1, [pc, #16]	@ (8003af4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	07ff800f 	.word	0x07ff800f
 8003afc:	ff9f800f 	.word	0xff9f800f
 8003b00:	f9ff800f 	.word	0xf9ff800f

08003b04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b04:	b084      	sub	sp, #16
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	f107 001c 	add.w	r0, r7, #28
 8003b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f001 fa26 	bl	8004f74 <USB_CoreReset>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003b2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b40:	e005      	b.n	8003b4e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b5a:	b004      	add	sp, #16
 8003b5c:	4770      	bx	lr
	...

08003b60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d165      	bne.n	8003c40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4a3e      	ldr	r2, [pc, #248]	@ (8003c70 <USB_SetTurnaroundTime+0x110>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d906      	bls.n	8003b8a <USB_SetTurnaroundTime+0x2a>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c74 <USB_SetTurnaroundTime+0x114>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d202      	bcs.n	8003b8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b84:	230f      	movs	r3, #15
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e05c      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4a39      	ldr	r2, [pc, #228]	@ (8003c74 <USB_SetTurnaroundTime+0x114>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d306      	bcc.n	8003ba0 <USB_SetTurnaroundTime+0x40>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a38      	ldr	r2, [pc, #224]	@ (8003c78 <USB_SetTurnaroundTime+0x118>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d202      	bcs.n	8003ba0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b9a:	230e      	movs	r3, #14
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e051      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a35      	ldr	r2, [pc, #212]	@ (8003c78 <USB_SetTurnaroundTime+0x118>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d306      	bcc.n	8003bb6 <USB_SetTurnaroundTime+0x56>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a34      	ldr	r2, [pc, #208]	@ (8003c7c <USB_SetTurnaroundTime+0x11c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d202      	bcs.n	8003bb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bb0:	230d      	movs	r3, #13
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e046      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a30      	ldr	r2, [pc, #192]	@ (8003c7c <USB_SetTurnaroundTime+0x11c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d306      	bcc.n	8003bcc <USB_SetTurnaroundTime+0x6c>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8003c80 <USB_SetTurnaroundTime+0x120>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d802      	bhi.n	8003bcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e03b      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a2c      	ldr	r2, [pc, #176]	@ (8003c80 <USB_SetTurnaroundTime+0x120>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d906      	bls.n	8003be2 <USB_SetTurnaroundTime+0x82>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c84 <USB_SetTurnaroundTime+0x124>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d802      	bhi.n	8003be2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bdc:	230b      	movs	r3, #11
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e030      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a27      	ldr	r2, [pc, #156]	@ (8003c84 <USB_SetTurnaroundTime+0x124>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d906      	bls.n	8003bf8 <USB_SetTurnaroundTime+0x98>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a26      	ldr	r2, [pc, #152]	@ (8003c88 <USB_SetTurnaroundTime+0x128>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d802      	bhi.n	8003bf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e025      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4a23      	ldr	r2, [pc, #140]	@ (8003c88 <USB_SetTurnaroundTime+0x128>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d906      	bls.n	8003c0e <USB_SetTurnaroundTime+0xae>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <USB_SetTurnaroundTime+0x12c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d202      	bcs.n	8003c0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c08:	2309      	movs	r3, #9
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e01a      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4a1e      	ldr	r2, [pc, #120]	@ (8003c8c <USB_SetTurnaroundTime+0x12c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d306      	bcc.n	8003c24 <USB_SetTurnaroundTime+0xc4>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <USB_SetTurnaroundTime+0x130>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d802      	bhi.n	8003c24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c1e:	2308      	movs	r3, #8
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e00f      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <USB_SetTurnaroundTime+0x130>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d906      	bls.n	8003c3a <USB_SetTurnaroundTime+0xda>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4a19      	ldr	r2, [pc, #100]	@ (8003c94 <USB_SetTurnaroundTime+0x134>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d202      	bcs.n	8003c3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c34:	2307      	movs	r3, #7
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e004      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c3a:	2306      	movs	r3, #6
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e001      	b.n	8003c44 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c40:	2309      	movs	r3, #9
 8003c42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	029b      	lsls	r3, r3, #10
 8003c58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	00d8acbf 	.word	0x00d8acbf
 8003c74:	00e4e1c0 	.word	0x00e4e1c0
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	01067380 	.word	0x01067380
 8003c80:	011a499f 	.word	0x011a499f
 8003c84:	01312cff 	.word	0x01312cff
 8003c88:	014ca43f 	.word	0x014ca43f
 8003c8c:	016e3600 	.word	0x016e3600
 8003c90:	01a6ab1f 	.word	0x01a6ab1f
 8003c94:	01e84800 	.word	0x01e84800

08003c98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d115      	bne.n	8003d2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d0a:	200a      	movs	r0, #10
 8003d0c:	f7fc fd34 	bl	8000778 <HAL_Delay>
      ms += 10U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	330a      	adds	r3, #10
 8003d14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f001 f8b3 	bl	8004e82 <USB_GetMode>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d01e      	beq.n	8003d60 <USB_SetCurrentMode+0x84>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d26:	d9f0      	bls.n	8003d0a <USB_SetCurrentMode+0x2e>
 8003d28:	e01a      	b.n	8003d60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d115      	bne.n	8003d5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d3c:	200a      	movs	r0, #10
 8003d3e:	f7fc fd1b 	bl	8000778 <HAL_Delay>
      ms += 10U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	330a      	adds	r3, #10
 8003d46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f001 f89a 	bl	8004e82 <USB_GetMode>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <USB_SetCurrentMode+0x84>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d58:	d9f0      	bls.n	8003d3c <USB_SetCurrentMode+0x60>
 8003d5a:	e001      	b.n	8003d60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e005      	b.n	8003d6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d64:	d101      	bne.n	8003d6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d74:	b084      	sub	sp, #16
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e009      	b.n	8003da8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3340      	adds	r3, #64	@ 0x40
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3301      	adds	r3, #1
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b0e      	cmp	r3, #14
 8003dac:	d9f2      	bls.n	8003d94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11c      	bne.n	8003df0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e005      	b.n	8003dfc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e02:	461a      	mov	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e08:	2103      	movs	r1, #3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f95a 	bl	80040c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e10:	2110      	movs	r1, #16
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8f6 	bl	8004004 <USB_FlushTxFifo>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f920 	bl	8004068 <USB_FlushRxFifo>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e44:	461a      	mov	r2, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	e043      	b.n	8003ee4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e72:	d118      	bne.n	8003ea6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e86:	461a      	mov	r2, r3
 8003e88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e013      	b.n	8003eb8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e008      	b.n	8003eb8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003edc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ee8:	461a      	mov	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d3b5      	bcc.n	8003e5c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	e043      	b.n	8003f7e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f0c:	d118      	bne.n	8003f40 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e013      	b.n	8003f52 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f36:	461a      	mov	r2, r3
 8003f38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e008      	b.n	8003f52 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2300      	movs	r3, #0
 8003f62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f82:	461a      	mov	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d3b5      	bcc.n	8003ef6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003faa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f043 0210 	orr.w	r2, r3, #16
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <USB_DevInit+0x28c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f043 0208 	orr.w	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ffc:	b004      	add	sp, #16
 8003ffe:	4770      	bx	lr
 8004000:	803c3800 	.word	0x803c3800

08004004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800401e:	d901      	bls.n	8004024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e01b      	b.n	800405c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	daf2      	bge.n	8004012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	019b      	lsls	r3, r3, #6
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004048:	d901      	bls.n	800404e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e006      	b.n	800405c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b20      	cmp	r3, #32
 8004058:	d0f0      	beq.n	800403c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004080:	d901      	bls.n	8004086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e018      	b.n	80040b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	daf2      	bge.n	8004074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2210      	movs	r2, #16
 8004096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040a4:	d901      	bls.n	80040aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e006      	b.n	80040b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d0f0      	beq.n	8004098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0306 	and.w	r3, r3, #6
 800410e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d002      	beq.n	800411c <USB_GetDevSpeed+0x26>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b06      	cmp	r3, #6
 800411a:	d102      	bne.n	8004122 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800411c:	2302      	movs	r3, #2
 800411e:	75fb      	strb	r3, [r7, #23]
 8004120:	e001      	b.n	8004126 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004122:	230f      	movs	r3, #15
 8004124:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d13a      	bne.n	80041c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	68f9      	ldr	r1, [r7, #12]
 800416a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800416e:	4313      	orrs	r3, r2
 8004170:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d155      	bne.n	8004234 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	791b      	ldrb	r3, [r3, #4]
 80041a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	059b      	lsls	r3, r3, #22
 80041aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041ac:	4313      	orrs	r3, r2
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e036      	b.n	8004234 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11a      	bne.n	8004234 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	791b      	ldrb	r3, [r3, #4]
 8004218:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800421a:	430b      	orrs	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	440a      	add	r2, r1
 8004226:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004232:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d161      	bne.n	8004324 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004276:	d11f      	bne.n	80042b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004292:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004296:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	2101      	movs	r1, #1
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042d8:	4013      	ands	r3, r2
 80042da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042fc:	4013      	ands	r3, r2
 80042fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0159      	lsls	r1, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	440b      	add	r3, r1
 8004316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431a:	4619      	mov	r1, r3
 800431c:	4b35      	ldr	r3, [pc, #212]	@ (80043f4 <USB_DeactivateEndpoint+0x1b0>)
 800431e:	4013      	ands	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
 8004322:	e060      	b.n	80043e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004336:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800433a:	d11f      	bne.n	800437c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004356:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800435a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	0151      	lsls	r1, r2, #5
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	440a      	add	r2, r1
 8004372:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004376:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800437a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	43db      	mvns	r3, r3
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800439c:	4013      	ands	r3, r2
 800439e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f303 	lsl.w	r3, r1, r3
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	43db      	mvns	r3, r3
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043c0:	4013      	ands	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0159      	lsls	r1, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	440b      	add	r3, r1
 80043da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043de:	4619      	mov	r1, r3
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <USB_DeactivateEndpoint+0x1b4>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	ec337800 	.word	0xec337800
 80043f8:	eff37800 	.word	0xeff37800

080043fc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	2b01      	cmp	r3, #1
 8004416:	f040 812d 	bne.w	8004674 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d132      	bne.n	8004488 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800443c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004440:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004444:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	440a      	add	r2, r1
 800445c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004460:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	440a      	add	r2, r1
 800447c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004480:	0cdb      	lsrs	r3, r3, #19
 8004482:	04db      	lsls	r3, r3, #19
 8004484:	6113      	str	r3, [r2, #16]
 8004486:	e097      	b.n	80045b8 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	0151      	lsls	r1, r2, #5
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	440a      	add	r2, r1
 800449e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044a2:	0cdb      	lsrs	r3, r3, #19
 80044a4:	04db      	lsls	r3, r3, #19
 80044a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11a      	bne.n	8004508 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d903      	bls.n	80044e6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004500:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004504:	6113      	str	r3, [r2, #16]
 8004506:	e044      	b.n	8004592 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4413      	add	r3, r2
 8004512:	1e5a      	subs	r2, r3, #1
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	04d9      	lsls	r1, r3, #19
 8004530:	4b8f      	ldr	r3, [pc, #572]	@ (8004770 <USB_EPStartXfer+0x374>)
 8004532:	400b      	ands	r3, r1
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	0148      	lsls	r0, r1, #5
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	4401      	add	r1, r0
 800453c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004540:	4313      	orrs	r3, r2
 8004542:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	791b      	ldrb	r3, [r3, #4]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d122      	bne.n	8004592 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004566:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800456a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	89fb      	ldrh	r3, [r7, #14]
 800457c:	075b      	lsls	r3, r3, #29
 800457e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004582:	6939      	ldr	r1, [r7, #16]
 8004584:	0148      	lsls	r0, r1, #5
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	4401      	add	r1, r0
 800458a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800458e:	4313      	orrs	r3, r2
 8004590:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a8:	6939      	ldr	r1, [r7, #16]
 80045aa:	0148      	lsls	r0, r1, #5
 80045ac:	6979      	ldr	r1, [r7, #20]
 80045ae:	4401      	add	r1, r0
 80045b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	0151      	lsls	r1, r2, #5
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	440a      	add	r2, r1
 80045ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80045d6:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	791b      	ldrb	r3, [r3, #4]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d015      	beq.n	800460c <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 813a 	beq.w	800485e <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	6979      	ldr	r1, [r7, #20]
 8004602:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004606:	4313      	orrs	r3, r2
 8004608:	634b      	str	r3, [r1, #52]	@ 0x34
 800460a:	e128      	b.n	800485e <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d110      	bne.n	800463e <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004636:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e00f      	b.n	800465e <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465c:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68d9      	ldr	r1, [r3, #12]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	b29b      	uxth	r3, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9a7 	bl	80049c0 <USB_WritePacket>
 8004672:	e0f4      	b.n	800485e <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800468e:	0cdb      	lsrs	r3, r3, #19
 8004690:	04db      	lsls	r3, r3, #19
 8004692:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80046b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80046b6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d12f      	bne.n	800471e <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ec:	6939      	ldr	r1, [r7, #16]
 80046ee:	0148      	lsls	r0, r1, #5
 80046f0:	6979      	ldr	r1, [r7, #20]
 80046f2:	4401      	add	r1, r0
 80046f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80046f8:	4313      	orrs	r3, r2
 80046fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800471a:	6113      	str	r3, [r2, #16]
 800471c:	e062      	b.n	80047e4 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d126      	bne.n	8004774 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	0148      	lsls	r0, r1, #5
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	4401      	add	r1, r0
 8004744:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004748:	4313      	orrs	r3, r2
 800474a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004766:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800476a:	6113      	str	r3, [r2, #16]
 800476c:	e03a      	b.n	80047e4 <USB_EPStartXfer+0x3e8>
 800476e:	bf00      	nop
 8004770:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4413      	add	r3, r2
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	89fa      	ldrh	r2, [r7, #14]
 8004790:	fb03 f202 	mul.w	r2, r3, r2
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	89fb      	ldrh	r3, [r7, #14]
 80047a8:	04d9      	lsls	r1, r3, #19
 80047aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004868 <USB_EPStartXfer+0x46c>)
 80047ac:	400b      	ands	r3, r1
 80047ae:	6939      	ldr	r1, [r7, #16]
 80047b0:	0148      	lsls	r0, r1, #5
 80047b2:	6979      	ldr	r1, [r7, #20]
 80047b4:	4401      	add	r1, r0
 80047b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047ba:	4313      	orrs	r3, r2
 80047bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d4:	6939      	ldr	r1, [r7, #16]
 80047d6:	0148      	lsls	r0, r1, #5
 80047d8:	6979      	ldr	r1, [r7, #20]
 80047da:	4401      	add	r1, r0
 80047dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047e0:	4313      	orrs	r3, r2
 80047e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	791b      	ldrb	r3, [r3, #4]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d128      	bne.n	800483e <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d110      	bne.n	800481e <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004816:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	e00f      	b.n	800483e <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004858:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800485c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	1ff80000 	.word	0x1ff80000

0800486c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d14a      	bne.n	8004920 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800489e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048a2:	f040 8086 	bne.w	80049b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d902      	bls.n	8004904 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
          break;
 8004902:	e056      	b.n	80049b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800491c:	d0e7      	beq.n	80048ee <USB_EPStopXfer+0x82>
 800491e:	e048      	b.n	80049b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004938:	d13b      	bne.n	80049b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	7812      	ldrb	r2, [r2, #0]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004958:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800495c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	7812      	ldrb	r2, [r2, #0]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800497c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004980:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3301      	adds	r3, #1
 8004986:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800498e:	4293      	cmp	r3, r2
 8004990:	d902      	bls.n	8004998 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
          break;
 8004996:	e00c      	b.n	80049b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049b0:	d0e7      	beq.n	8004982 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	@ 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	4611      	mov	r1, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	460b      	mov	r3, r1
 80049d0:	71fb      	strb	r3, [r7, #7]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80049de:	88bb      	ldrh	r3, [r7, #4]
 80049e0:	3303      	adds	r3, #3
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e018      	b.n	8004a1e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	031a      	lsls	r2, r3, #12
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f8:	461a      	mov	r2, r3
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3301      	adds	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3e2      	bcc.n	80049ec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3724      	adds	r7, #36	@ 0x24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b08b      	sub	sp, #44	@ 0x2c
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	089b      	lsrs	r3, r3, #2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	e014      	b.n	8004a8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	3301      	adds	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	3301      	adds	r3, #1
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	3301      	adds	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	3301      	adds	r3, #1
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	6a3a      	ldr	r2, [r7, #32]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d3e6      	bcc.n	8004a60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a92:	8bfb      	ldrh	r3, [r7, #30]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01e      	beq.n	8004ad6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f107 0310 	add.w	r3, r7, #16
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	701a      	strb	r2, [r3, #0]
      i++;
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004aca:	8bfb      	ldrh	r3, [r7, #30]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ad0:	8bfb      	ldrh	r3, [r7, #30]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ea      	bne.n	8004aac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	372c      	adds	r7, #44	@ 0x2c
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d12c      	bne.n	8004b5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db12      	blt.n	8004b38 <USB_EPSetStall+0x54>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00f      	beq.n	8004b38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e02b      	b.n	8004bb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	db12      	blt.n	8004b92 <USB_EPSetStall+0xae>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00f      	beq.n	8004b92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d128      	bne.n	8004c2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d003      	beq.n	8004c0c <USB_EPClearStall+0x4c>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	791b      	ldrb	r3, [r3, #4]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d138      	bne.n	8004c7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e027      	b.n	8004c7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	791b      	ldrb	r3, [r3, #4]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d003      	beq.n	8004c5e <USB_EPClearStall+0x9e>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	791b      	ldrb	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d10f      	bne.n	8004c7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004caa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004cae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004cc0:	68f9      	ldr	r1, [r7, #12]
 8004cc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d06:	f023 0302 	bic.w	r3, r3, #2
 8004d0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d34:	f023 0303 	bic.w	r3, r3, #3
 8004d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d74:	68fb      	ldr	r3, [r7, #12]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0c1b      	lsrs	r3, r3, #16
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	b29b      	uxth	r3, r3
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4013      	ands	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e18:	68bb      	ldr	r3, [r7, #8]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	01db      	lsls	r3, r3, #7
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e74:	68bb      	ldr	r3, [r7, #8]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ebc:	f023 0307 	bic.w	r3, r3, #7
 8004ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	333c      	adds	r3, #60	@ 0x3c
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <USB_EP0_OutStart+0x8c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d90a      	bls.n	8004f1a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f14:	d101      	bne.n	8004f1a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e024      	b.n	8004f64 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f20:	461a      	mov	r2, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f48:	f043 0318 	orr.w	r3, r3, #24
 8004f4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004f60:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	4f54300a 	.word	0x4f54300a

08004f74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f8c:	d901      	bls.n	8004f92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e01b      	b.n	8004fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	daf2      	bge.n	8004f80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f043 0201 	orr.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb6:	d901      	bls.n	8004fbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e006      	b.n	8004fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d0f0      	beq.n	8004faa <USB_CoreReset+0x36>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004fe4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004fe8:	f002 fe34 	bl	8007c54 <USBD_static_malloc>
 8004fec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	32b0      	adds	r2, #176	@ 0xb0
 8004ffe:	2100      	movs	r1, #0
 8005000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005004:	2302      	movs	r3, #2
 8005006:	e0d4      	b.n	80051b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005008:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800500c:	2100      	movs	r1, #0
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f003 f836 	bl	8008080 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	32b0      	adds	r2, #176	@ 0xb0
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	32b0      	adds	r2, #176	@ 0xb0
 800502e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7c1b      	ldrb	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d138      	bne.n	80050b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005040:	4b5e      	ldr	r3, [pc, #376]	@ (80051bc <USBD_CDC_Init+0x1e4>)
 8005042:	7819      	ldrb	r1, [r3, #0]
 8005044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005048:	2202      	movs	r2, #2
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f002 fbee 	bl	800782c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005050:	4b5a      	ldr	r3, [pc, #360]	@ (80051bc <USBD_CDC_Init+0x1e4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3324      	adds	r3, #36	@ 0x24
 8005066:	2201      	movs	r2, #1
 8005068:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800506a:	4b55      	ldr	r3, [pc, #340]	@ (80051c0 <USBD_CDC_Init+0x1e8>)
 800506c:	7819      	ldrb	r1, [r3, #0]
 800506e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005072:	2202      	movs	r2, #2
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f002 fbd9 	bl	800782c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800507a:	4b51      	ldr	r3, [pc, #324]	@ (80051c0 <USBD_CDC_Init+0x1e8>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f003 020f 	and.w	r2, r3, #15
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005092:	2201      	movs	r2, #1
 8005094:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005096:	4b4b      	ldr	r3, [pc, #300]	@ (80051c4 <USBD_CDC_Init+0x1ec>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3326      	adds	r3, #38	@ 0x26
 80050ac:	2210      	movs	r2, #16
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	e035      	b.n	800511e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80050b2:	4b42      	ldr	r3, [pc, #264]	@ (80051bc <USBD_CDC_Init+0x1e4>)
 80050b4:	7819      	ldrb	r1, [r3, #0]
 80050b6:	2340      	movs	r3, #64	@ 0x40
 80050b8:	2202      	movs	r2, #2
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f002 fbb6 	bl	800782c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80050c0:	4b3e      	ldr	r3, [pc, #248]	@ (80051bc <USBD_CDC_Init+0x1e4>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3324      	adds	r3, #36	@ 0x24
 80050d6:	2201      	movs	r2, #1
 80050d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80050da:	4b39      	ldr	r3, [pc, #228]	@ (80051c0 <USBD_CDC_Init+0x1e8>)
 80050dc:	7819      	ldrb	r1, [r3, #0]
 80050de:	2340      	movs	r3, #64	@ 0x40
 80050e0:	2202      	movs	r2, #2
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f002 fba2 	bl	800782c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80050e8:	4b35      	ldr	r3, [pc, #212]	@ (80051c0 <USBD_CDC_Init+0x1e8>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005100:	2201      	movs	r2, #1
 8005102:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005104:	4b2f      	ldr	r3, [pc, #188]	@ (80051c4 <USBD_CDC_Init+0x1ec>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f003 020f 	and.w	r2, r3, #15
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	3326      	adds	r3, #38	@ 0x26
 800511a:	2210      	movs	r2, #16
 800511c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800511e:	4b29      	ldr	r3, [pc, #164]	@ (80051c4 <USBD_CDC_Init+0x1ec>)
 8005120:	7819      	ldrb	r1, [r3, #0]
 8005122:	2308      	movs	r3, #8
 8005124:	2203      	movs	r2, #3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f002 fb80 	bl	800782c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800512c:	4b25      	ldr	r3, [pc, #148]	@ (80051c4 <USBD_CDC_Init+0x1ec>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3324      	adds	r3, #36	@ 0x24
 8005142:	2201      	movs	r2, #1
 8005144:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	33b0      	adds	r3, #176	@ 0xb0
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800517c:	2302      	movs	r3, #2
 800517e:	e018      	b.n	80051b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7c1b      	ldrb	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005188:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <USBD_CDC_Init+0x1e8>)
 800518a:	7819      	ldrb	r1, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f002 fcc2 	bl	8007b20 <USBD_LL_PrepareReceive>
 800519c:	e008      	b.n	80051b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800519e:	4b08      	ldr	r3, [pc, #32]	@ (80051c0 <USBD_CDC_Init+0x1e8>)
 80051a0:	7819      	ldrb	r1, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80051a8:	2340      	movs	r3, #64	@ 0x40
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f002 fcb8 	bl	8007b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000093 	.word	0x20000093
 80051c0:	20000094 	.word	0x20000094
 80051c4:	20000095 	.word	0x20000095

080051c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80051d4:	4b3a      	ldr	r3, [pc, #232]	@ (80052c0 <USBD_CDC_DeInit+0xf8>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f002 fb64 	bl	80078a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80051e0:	4b37      	ldr	r3, [pc, #220]	@ (80052c0 <USBD_CDC_DeInit+0xf8>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f003 020f 	and.w	r2, r3, #15
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3324      	adds	r3, #36	@ 0x24
 80051f6:	2200      	movs	r2, #0
 80051f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80051fa:	4b32      	ldr	r3, [pc, #200]	@ (80052c4 <USBD_CDC_DeInit+0xfc>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f002 fb51 	bl	80078a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005206:	4b2f      	ldr	r3, [pc, #188]	@ (80052c4 <USBD_CDC_DeInit+0xfc>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	f003 020f 	and.w	r2, r3, #15
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800521e:	2200      	movs	r2, #0
 8005220:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005222:	4b29      	ldr	r3, [pc, #164]	@ (80052c8 <USBD_CDC_DeInit+0x100>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f002 fb3d 	bl	80078a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800522e:	4b26      	ldr	r3, [pc, #152]	@ (80052c8 <USBD_CDC_DeInit+0x100>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f003 020f 	and.w	r2, r3, #15
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	3324      	adds	r3, #36	@ 0x24
 8005244:	2200      	movs	r2, #0
 8005246:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005248:	4b1f      	ldr	r3, [pc, #124]	@ (80052c8 <USBD_CDC_DeInit+0x100>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 020f 	and.w	r2, r3, #15
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3326      	adds	r3, #38	@ 0x26
 800525e:	2200      	movs	r2, #0
 8005260:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	32b0      	adds	r2, #176	@ 0xb0
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01f      	beq.n	80052b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	33b0      	adds	r3, #176	@ 0xb0
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	32b0      	adds	r2, #176	@ 0xb0
 8005292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005296:	4618      	mov	r0, r3
 8005298:	f002 fcea 	bl	8007c70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	32b0      	adds	r2, #176	@ 0xb0
 80052a6:	2100      	movs	r1, #0
 80052a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000093 	.word	0x20000093
 80052c4:	20000094 	.word	0x20000094
 80052c8:	20000095 	.word	0x20000095

080052cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	32b0      	adds	r2, #176	@ 0xb0
 80052e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0bf      	b.n	800547c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005304:	2b00      	cmp	r3, #0
 8005306:	d050      	beq.n	80053aa <USBD_CDC_Setup+0xde>
 8005308:	2b20      	cmp	r3, #32
 800530a:	f040 80af 	bne.w	800546c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	88db      	ldrh	r3, [r3, #6]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d03a      	beq.n	800538c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	b25b      	sxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	da1b      	bge.n	8005358 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	33b0      	adds	r3, #176	@ 0xb0
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005336:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	88d2      	ldrh	r2, [r2, #6]
 800533c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	88db      	ldrh	r3, [r3, #6]
 8005342:	2b07      	cmp	r3, #7
 8005344:	bf28      	it	cs
 8005346:	2307      	movcs	r3, #7
 8005348:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	89fa      	ldrh	r2, [r7, #14]
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 fdbd 	bl	8006ed0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005356:	e090      	b.n	800547a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	785a      	ldrb	r2, [r3, #1]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	88db      	ldrh	r3, [r3, #6]
 8005366:	2b3f      	cmp	r3, #63	@ 0x3f
 8005368:	d803      	bhi.n	8005372 <USBD_CDC_Setup+0xa6>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	88db      	ldrh	r3, [r3, #6]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	e000      	b.n	8005374 <USBD_CDC_Setup+0xa8>
 8005372:	2240      	movs	r2, #64	@ 0x40
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800537a:	6939      	ldr	r1, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005382:	461a      	mov	r2, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fdcf 	bl	8006f28 <USBD_CtlPrepareRx>
      break;
 800538a:	e076      	b.n	800547a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	33b0      	adds	r3, #176	@ 0xb0
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	7850      	ldrb	r0, [r2, #1]
 80053a2:	2200      	movs	r2, #0
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	4798      	blx	r3
      break;
 80053a8:	e067      	b.n	800547a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b0b      	cmp	r3, #11
 80053b0:	d851      	bhi.n	8005456 <USBD_CDC_Setup+0x18a>
 80053b2:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <USBD_CDC_Setup+0xec>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053e9 	.word	0x080053e9
 80053bc:	08005465 	.word	0x08005465
 80053c0:	08005457 	.word	0x08005457
 80053c4:	08005457 	.word	0x08005457
 80053c8:	08005457 	.word	0x08005457
 80053cc:	08005457 	.word	0x08005457
 80053d0:	08005457 	.word	0x08005457
 80053d4:	08005457 	.word	0x08005457
 80053d8:	08005457 	.word	0x08005457
 80053dc:	08005457 	.word	0x08005457
 80053e0:	08005413 	.word	0x08005413
 80053e4:	0800543d 	.word	0x0800543d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d107      	bne.n	8005404 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053f4:	f107 030a 	add.w	r3, r7, #10
 80053f8:	2202      	movs	r2, #2
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 fd67 	bl	8006ed0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005402:	e032      	b.n	800546a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fce5 	bl	8006dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800540c:	2303      	movs	r3, #3
 800540e:	75fb      	strb	r3, [r7, #23]
          break;
 8005410:	e02b      	b.n	800546a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b03      	cmp	r3, #3
 800541c:	d107      	bne.n	800542e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800541e:	f107 030d 	add.w	r3, r7, #13
 8005422:	2201      	movs	r2, #1
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 fd52 	bl	8006ed0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800542c:	e01d      	b.n	800546a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 fcd0 	bl	8006dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005436:	2303      	movs	r3, #3
 8005438:	75fb      	strb	r3, [r7, #23]
          break;
 800543a:	e016      	b.n	800546a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b03      	cmp	r3, #3
 8005446:	d00f      	beq.n	8005468 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fcc3 	bl	8006dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005450:	2303      	movs	r3, #3
 8005452:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005454:	e008      	b.n	8005468 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fcbc 	bl	8006dd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800545e:	2303      	movs	r3, #3
 8005460:	75fb      	strb	r3, [r7, #23]
          break;
 8005462:	e002      	b.n	800546a <USBD_CDC_Setup+0x19e>
          break;
 8005464:	bf00      	nop
 8005466:	e008      	b.n	800547a <USBD_CDC_Setup+0x1ae>
          break;
 8005468:	bf00      	nop
      }
      break;
 800546a:	e006      	b.n	800547a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 fcb1 	bl	8006dd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	75fb      	strb	r3, [r7, #23]
      break;
 8005478:	bf00      	nop
  }

  return (uint8_t)ret;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005496:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	32b0      	adds	r2, #176	@ 0xb0
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e065      	b.n	800557a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	32b0      	adds	r2, #176	@ 0xb0
 80054b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	3318      	adds	r3, #24
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02f      	beq.n	8005538 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	f003 020f 	and.w	r2, r3, #15
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	3318      	adds	r3, #24
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	f003 010f 	and.w	r1, r3, #15
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	460b      	mov	r3, r1
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	440b      	add	r3, r1
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4403      	add	r3, r0
 8005500:	331c      	adds	r3, #28
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	fbb2 f1f3 	udiv	r1, r2, r3
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	d112      	bne.n	8005538 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	f003 020f 	and.w	r2, r3, #15
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	3318      	adds	r3, #24
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800552a:	78f9      	ldrb	r1, [r7, #3]
 800552c:	2300      	movs	r3, #0
 800552e:	2200      	movs	r2, #0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 fabd 	bl	8007ab0 <USBD_LL_Transmit>
 8005536:	e01f      	b.n	8005578 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	33b0      	adds	r3, #176	@ 0xb0
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d010      	beq.n	8005578 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	33b0      	adds	r3, #176	@ 0xb0
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	32b0      	adds	r2, #176	@ 0xb0
 8005598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	32b0      	adds	r2, #176	@ 0xb0
 80055a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e01a      	b.n	80055ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f002 fae9 	bl	8007b90 <USBD_LL_GetRxDataSize>
 80055be:	4602      	mov	r2, r0
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	33b0      	adds	r3, #176	@ 0xb0
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80055e4:	4611      	mov	r1, r2
 80055e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	32b0      	adds	r2, #176	@ 0xb0
 8005604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005608:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005610:	2303      	movs	r3, #3
 8005612:	e024      	b.n	800565e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	33b0      	adds	r3, #176	@ 0xb0
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d019      	beq.n	800565c <USBD_CDC_EP0_RxReady+0x6a>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800562e:	2bff      	cmp	r3, #255	@ 0xff
 8005630:	d014      	beq.n	800565c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	33b0      	adds	r3, #176	@ 0xb0
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800564a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005652:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22ff      	movs	r2, #255	@ 0xff
 8005658:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005670:	2182      	movs	r1, #130	@ 0x82
 8005672:	4818      	ldr	r0, [pc, #96]	@ (80056d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005674:	f000 fd4f 	bl	8006116 <USBD_GetEpDesc>
 8005678:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800567a:	2101      	movs	r1, #1
 800567c:	4815      	ldr	r0, [pc, #84]	@ (80056d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800567e:	f000 fd4a 	bl	8006116 <USBD_GetEpDesc>
 8005682:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005684:	2181      	movs	r1, #129	@ 0x81
 8005686:	4813      	ldr	r0, [pc, #76]	@ (80056d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005688:	f000 fd45 	bl	8006116 <USBD_GetEpDesc>
 800568c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2210      	movs	r2, #16
 8005698:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056a8:	711a      	strb	r2, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d006      	beq.n	80056c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056bc:	711a      	strb	r2, [r3, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2243      	movs	r2, #67	@ 0x43
 80056c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056c8:	4b02      	ldr	r3, [pc, #8]	@ (80056d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000050 	.word	0x20000050

080056d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056e0:	2182      	movs	r1, #130	@ 0x82
 80056e2:	4818      	ldr	r0, [pc, #96]	@ (8005744 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056e4:	f000 fd17 	bl	8006116 <USBD_GetEpDesc>
 80056e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056ea:	2101      	movs	r1, #1
 80056ec:	4815      	ldr	r0, [pc, #84]	@ (8005744 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056ee:	f000 fd12 	bl	8006116 <USBD_GetEpDesc>
 80056f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056f4:	2181      	movs	r1, #129	@ 0x81
 80056f6:	4813      	ldr	r0, [pc, #76]	@ (8005744 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056f8:	f000 fd0d 	bl	8006116 <USBD_GetEpDesc>
 80056fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2210      	movs	r2, #16
 8005708:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d006      	beq.n	800571e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2200      	movs	r2, #0
 8005714:	711a      	strb	r2, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f042 0202 	orr.w	r2, r2, #2
 800571c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d006      	beq.n	8005732 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	711a      	strb	r2, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f042 0202 	orr.w	r2, r2, #2
 8005730:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2243      	movs	r2, #67	@ 0x43
 8005736:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005738:	4b02      	ldr	r3, [pc, #8]	@ (8005744 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000050 	.word	0x20000050

08005748 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005750:	2182      	movs	r1, #130	@ 0x82
 8005752:	4818      	ldr	r0, [pc, #96]	@ (80057b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005754:	f000 fcdf 	bl	8006116 <USBD_GetEpDesc>
 8005758:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800575a:	2101      	movs	r1, #1
 800575c:	4815      	ldr	r0, [pc, #84]	@ (80057b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800575e:	f000 fcda 	bl	8006116 <USBD_GetEpDesc>
 8005762:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005764:	2181      	movs	r1, #129	@ 0x81
 8005766:	4813      	ldr	r0, [pc, #76]	@ (80057b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005768:	f000 fcd5 	bl	8006116 <USBD_GetEpDesc>
 800576c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2210      	movs	r2, #16
 8005778:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d006      	beq.n	800578e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2200      	movs	r2, #0
 8005784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005788:	711a      	strb	r2, [r3, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d006      	beq.n	80057a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800579c:	711a      	strb	r2, [r3, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2243      	movs	r2, #67	@ 0x43
 80057a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057a8:	4b02      	ldr	r3, [pc, #8]	@ (80057b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000050 	.word	0x20000050

080057b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	220a      	movs	r2, #10
 80057c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057c6:	4b03      	ldr	r3, [pc, #12]	@ (80057d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	2000000c 	.word	0x2000000c

080057d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e009      	b.n	8005800 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	33b0      	adds	r3, #176	@ 0xb0
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	32b0      	adds	r2, #176	@ 0xb0
 8005822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005826:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800582e:	2303      	movs	r3, #3
 8005830:	e008      	b.n	8005844 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	32b0      	adds	r2, #176	@ 0xb0
 8005864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005868:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005870:	2303      	movs	r3, #3
 8005872:	e004      	b.n	800587e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	32b0      	adds	r2, #176	@ 0xb0
 800589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e025      	b.n	80058fe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11f      	bne.n	80058fc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2201      	movs	r2, #1
 80058c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80058c4:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <USBD_CDC_TransmitPacket+0x7c>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 020f 	and.w	r2, r3, #15
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4403      	add	r3, r0
 80058de:	3318      	adds	r3, #24
 80058e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80058e2:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <USBD_CDC_TransmitPacket+0x7c>)
 80058e4:	7819      	ldrb	r1, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f002 f8dc 	bl	8007ab0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000093 	.word	0x20000093

0800590c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	32b0      	adds	r2, #176	@ 0xb0
 800591e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005922:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	32b0      	adds	r2, #176	@ 0xb0
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005936:	2303      	movs	r3, #3
 8005938:	e018      	b.n	800596c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	7c1b      	ldrb	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005942:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <USBD_CDC_ReceivePacket+0x68>)
 8005944:	7819      	ldrb	r1, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800594c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f002 f8e5 	bl	8007b20 <USBD_LL_PrepareReceive>
 8005956:	e008      	b.n	800596a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <USBD_CDC_ReceivePacket+0x68>)
 800595a:	7819      	ldrb	r1, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005962:	2340      	movs	r3, #64	@ 0x40
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f002 f8db 	bl	8007b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000094 	.word	0x20000094

08005978 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	e01f      	b.n	80059d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	79fa      	ldrb	r2, [r7, #7]
 80059c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f001 feb3 	bl	8007730 <USBD_LL_Init>
 80059ca:	4603      	mov	r3, r0
 80059cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e025      	b.n	8005a3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	32ae      	adds	r2, #174	@ 0xae
 8005a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00f      	beq.n	8005a2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	32ae      	adds	r2, #174	@ 0xae
 8005a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	f107 020e 	add.w	r2, r7, #14
 8005a20:	4610      	mov	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	4602      	mov	r2, r0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 febb 	bl	80077c8 <USBD_LL_Start>
 8005a52:	4603      	mov	r3, r0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	4611      	mov	r1, r2
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 f936 	bl	8006d62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d01a      	beq.n	8005b50 <USBD_LL_SetupStage+0x72>
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d822      	bhi.n	8005b64 <USBD_LL_SetupStage+0x86>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <USBD_LL_SetupStage+0x4a>
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d00a      	beq.n	8005b3c <USBD_LL_SetupStage+0x5e>
 8005b26:	e01d      	b.n	8005b64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb63 	bl	80061fc <USBD_StdDevReq>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3a:	e020      	b.n	8005b7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fbcb 	bl	80062e0 <USBD_StdItfReq>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4e:	e016      	b.n	8005b7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fc2d 	bl	80063b8 <USBD_StdEPReq>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]
      break;
 8005b62:	e00c      	b.n	8005b7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 fece 	bl	8007914 <USBD_LL_StallEP>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7c:	bf00      	nop
  }

  return ret;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	460b      	mov	r3, r1
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b9a:	7afb      	ldrb	r3, [r7, #11]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d16e      	bne.n	8005c7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	f040 8098 	bne.w	8005ce4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d913      	bls.n	8005be8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	1ad2      	subs	r2, r2, r3
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	bf28      	it	cs
 8005bda:	4613      	movcs	r3, r2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f001 f9be 	bl	8006f62 <USBD_CtlContinueRx>
 8005be6:	e07d      	b.n	8005ce4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005bee:	f003 031f 	and.w	r3, r3, #31
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d014      	beq.n	8005c20 <USBD_LL_DataOutStage+0x98>
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d81d      	bhi.n	8005c36 <USBD_LL_DataOutStage+0xae>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <USBD_LL_DataOutStage+0x7c>
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d003      	beq.n	8005c0a <USBD_LL_DataOutStage+0x82>
 8005c02:	e018      	b.n	8005c36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75bb      	strb	r3, [r7, #22]
            break;
 8005c08:	e018      	b.n	8005c3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	4619      	mov	r1, r3
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fa64 	bl	80060e2 <USBD_CoreFindIF>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75bb      	strb	r3, [r7, #22]
            break;
 8005c1e:	e00d      	b.n	8005c3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fa66 	bl	80060fc <USBD_CoreFindEP>
 8005c30:	4603      	mov	r3, r0
 8005c32:	75bb      	strb	r3, [r7, #22]
            break;
 8005c34:	e002      	b.n	8005c3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75bb      	strb	r3, [r7, #22]
            break;
 8005c3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005c3c:	7dbb      	ldrb	r3, [r7, #22]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d119      	bne.n	8005c76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d113      	bne.n	8005c76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c4e:	7dba      	ldrb	r2, [r7, #22]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	32ae      	adds	r2, #174	@ 0xae
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005c5e:	7dba      	ldrb	r2, [r7, #22]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c66:	7dba      	ldrb	r2, [r7, #22]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	32ae      	adds	r2, #174	@ 0xae
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f001 f984 	bl	8006f84 <USBD_CtlSendStatus>
 8005c7c:	e032      	b.n	8005ce4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fa37 	bl	80060fc <USBD_CoreFindEP>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c92:	7dbb      	ldrb	r3, [r7, #22]
 8005c94:	2bff      	cmp	r3, #255	@ 0xff
 8005c96:	d025      	beq.n	8005ce4 <USBD_LL_DataOutStage+0x15c>
 8005c98:	7dbb      	ldrb	r3, [r7, #22]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d122      	bne.n	8005ce4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d117      	bne.n	8005cda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005caa:	7dba      	ldrb	r2, [r7, #22]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	32ae      	adds	r2, #174	@ 0xae
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00f      	beq.n	8005cda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005cba:	7dba      	ldrb	r2, [r7, #22]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005cc2:	7dba      	ldrb	r2, [r7, #22]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	32ae      	adds	r2, #174	@ 0xae
 8005cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	7afa      	ldrb	r2, [r7, #11]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	4798      	blx	r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	e000      	b.n	8005ce6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005cfc:	7afb      	ldrb	r3, [r7, #11]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d16f      	bne.n	8005de2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3314      	adds	r3, #20
 8005d06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d15a      	bne.n	8005dc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d914      	bls.n	8005d48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f001 f8e6 	bl	8006f06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2100      	movs	r1, #0
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f001 feed 	bl	8007b20 <USBD_LL_PrepareReceive>
 8005d46:	e03f      	b.n	8005dc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d11c      	bne.n	8005d8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d316      	bcc.n	8005d8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d20f      	bcs.n	8005d8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2100      	movs	r1, #0
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f001 f8c7 	bl	8006f06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d80:	2300      	movs	r3, #0
 8005d82:	2200      	movs	r2, #0
 8005d84:	2100      	movs	r1, #0
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f001 feca 	bl	8007b20 <USBD_LL_PrepareReceive>
 8005d8c:	e01c      	b.n	8005dc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d10f      	bne.n	8005dba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f001 fda9 	bl	8007914 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f001 f8f1 	bl	8006faa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d03a      	beq.n	8005e48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7ff fe42 	bl	8005a5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005de0:	e032      	b.n	8005e48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005de2:	7afb      	ldrb	r3, [r7, #11]
 8005de4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f985 	bl	80060fc <USBD_CoreFindEP>
 8005df2:	4603      	mov	r3, r0
 8005df4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	2bff      	cmp	r3, #255	@ 0xff
 8005dfa:	d025      	beq.n	8005e48 <USBD_LL_DataInStage+0x15a>
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d122      	bne.n	8005e48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d11c      	bne.n	8005e48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005e0e:	7dfa      	ldrb	r2, [r7, #23]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	32ae      	adds	r2, #174	@ 0xae
 8005e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d014      	beq.n	8005e48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005e1e:	7dfa      	ldrb	r2, [r7, #23]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005e26:	7dfa      	ldrb	r2, [r7, #23]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	32ae      	adds	r2, #174	@ 0xae
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	7afa      	ldrb	r2, [r7, #11]
 8005e34:	4611      	mov	r1, r2
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	4798      	blx	r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005e3e:	7dbb      	ldrb	r3, [r7, #22]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e44:	7dbb      	ldrb	r3, [r7, #22]
 8005e46:	e000      	b.n	8005e4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d014      	beq.n	8005eb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6852      	ldr	r2, [r2, #4]
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eb8:	2340      	movs	r3, #64	@ 0x40
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 fcb4 	bl	800782c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2240      	movs	r2, #64	@ 0x40
 8005ed0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ed4:	2340      	movs	r3, #64	@ 0x40
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2180      	movs	r1, #128	@ 0x80
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fca6 	bl	800782c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2240      	movs	r2, #64	@ 0x40
 8005eea:	621a      	str	r2, [r3, #32]

  return ret;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d006      	beq.n	8005f38 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d106      	bne.n	8005f70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d110      	bne.n	8005fb4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	32ae      	adds	r2, #174	@ 0xae
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e01c      	b.n	800601a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d115      	bne.n	8006018 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32ae      	adds	r2, #174	@ 0xae
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	32ae      	adds	r2, #174	@ 0xae
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	4611      	mov	r1, r2
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	32ae      	adds	r2, #174	@ 0xae
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006040:	2303      	movs	r3, #3
 8006042:	e01c      	b.n	800607e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b03      	cmp	r3, #3
 800604e:	d115      	bne.n	800607c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32ae      	adds	r2, #174	@ 0xae
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32ae      	adds	r2, #174	@ 0xae
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	4611      	mov	r1, r2
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00e      	beq.n	80060d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6852      	ldr	r2, [r2, #4]
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	4611      	mov	r1, r2
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	4798      	blx	r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80060d4:	2303      	movs	r3, #3
 80060d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006108:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	460b      	mov	r3, r1
 8006120:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	885b      	ldrh	r3, [r3, #2]
 8006132:	b29b      	uxth	r3, r3
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	4293      	cmp	r3, r2
 800613a:	d91f      	bls.n	800617c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006142:	e013      	b.n	800616c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006144:	f107 030a 	add.w	r3, r7, #10
 8006148:	4619      	mov	r1, r3
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f000 f81b 	bl	8006186 <USBD_GetNextDesc>
 8006150:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b05      	cmp	r3, #5
 8006158:	d108      	bne.n	800616c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	789b      	ldrb	r3, [r3, #2]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	429a      	cmp	r2, r3
 8006166:	d008      	beq.n	800617a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	885b      	ldrh	r3, [r3, #2]
 8006170:	b29a      	uxth	r2, r3
 8006172:	897b      	ldrh	r3, [r7, #10]
 8006174:	429a      	cmp	r2, r3
 8006176:	d8e5      	bhi.n	8006144 <USBD_GetEpDesc+0x2e>
 8006178:	e000      	b.n	800617c <USBD_GetEpDesc+0x66>
          break;
 800617a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800617c:	693b      	ldr	r3, [r7, #16]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	7812      	ldrb	r2, [r2, #0]
 800619c:	4413      	add	r3, r2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80061be:	b480      	push	{r7}
 80061c0:	b087      	sub	sp, #28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3301      	adds	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061dc:	8a3b      	ldrh	r3, [r7, #16]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	b21a      	sxth	r2, r3
 80061e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061ec:	89fb      	ldrh	r3, [r7, #14]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006212:	2b40      	cmp	r3, #64	@ 0x40
 8006214:	d005      	beq.n	8006222 <USBD_StdDevReq+0x26>
 8006216:	2b40      	cmp	r3, #64	@ 0x40
 8006218:	d857      	bhi.n	80062ca <USBD_StdDevReq+0xce>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00f      	beq.n	800623e <USBD_StdDevReq+0x42>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d153      	bne.n	80062ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	32ae      	adds	r2, #174	@ 0xae
 800622c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
      break;
 800623c:	e04a      	b.n	80062d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b09      	cmp	r3, #9
 8006244:	d83b      	bhi.n	80062be <USBD_StdDevReq+0xc2>
 8006246:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <USBD_StdDevReq+0x50>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	080062a1 	.word	0x080062a1
 8006250:	080062b5 	.word	0x080062b5
 8006254:	080062bf 	.word	0x080062bf
 8006258:	080062ab 	.word	0x080062ab
 800625c:	080062bf 	.word	0x080062bf
 8006260:	0800627f 	.word	0x0800627f
 8006264:	08006275 	.word	0x08006275
 8006268:	080062bf 	.word	0x080062bf
 800626c:	08006297 	.word	0x08006297
 8006270:	08006289 	.word	0x08006289
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa3c 	bl	80066f4 <USBD_GetDescriptor>
          break;
 800627c:	e024      	b.n	80062c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fbcb 	bl	8006a1c <USBD_SetAddress>
          break;
 8006286:	e01f      	b.n	80062c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fc0a 	bl	8006aa4 <USBD_SetConfig>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]
          break;
 8006294:	e018      	b.n	80062c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fcad 	bl	8006bf8 <USBD_GetConfig>
          break;
 800629e:	e013      	b.n	80062c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fcde 	bl	8006c64 <USBD_GetStatus>
          break;
 80062a8:	e00e      	b.n	80062c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd0d 	bl	8006ccc <USBD_SetFeature>
          break;
 80062b2:	e009      	b.n	80062c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fd31 	bl	8006d1e <USBD_ClrFeature>
          break;
 80062bc:	e004      	b.n	80062c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fd88 	bl	8006dd6 <USBD_CtlError>
          break;
 80062c6:	bf00      	nop
      }
      break;
 80062c8:	e004      	b.n	80062d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fd82 	bl	8006dd6 <USBD_CtlError>
      break;
 80062d2:	bf00      	nop
  }

  return ret;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop

080062e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062f6:	2b40      	cmp	r3, #64	@ 0x40
 80062f8:	d005      	beq.n	8006306 <USBD_StdItfReq+0x26>
 80062fa:	2b40      	cmp	r3, #64	@ 0x40
 80062fc:	d852      	bhi.n	80063a4 <USBD_StdItfReq+0xc4>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <USBD_StdItfReq+0x26>
 8006302:	2b20      	cmp	r3, #32
 8006304:	d14e      	bne.n	80063a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	2b02      	cmp	r3, #2
 8006312:	d840      	bhi.n	8006396 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	889b      	ldrh	r3, [r3, #4]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d836      	bhi.n	800638c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	889b      	ldrh	r3, [r3, #4]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fedb 	bl	80060e2 <USBD_CoreFindIF>
 800632c:	4603      	mov	r3, r0
 800632e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2bff      	cmp	r3, #255	@ 0xff
 8006334:	d01d      	beq.n	8006372 <USBD_StdItfReq+0x92>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11a      	bne.n	8006372 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800633c:	7bba      	ldrb	r2, [r7, #14]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	32ae      	adds	r2, #174	@ 0xae
 8006342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00f      	beq.n	800636c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800634c:	7bba      	ldrb	r2, [r7, #14]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006354:	7bba      	ldrb	r2, [r7, #14]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	32ae      	adds	r2, #174	@ 0xae
 800635a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800636a:	e004      	b.n	8006376 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006370:	e001      	b.n	8006376 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006372:	2303      	movs	r3, #3
 8006374:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	88db      	ldrh	r3, [r3, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d110      	bne.n	80063a0 <USBD_StdItfReq+0xc0>
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10d      	bne.n	80063a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fdfd 	bl	8006f84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800638a:	e009      	b.n	80063a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fd21 	bl	8006dd6 <USBD_CtlError>
          break;
 8006394:	e004      	b.n	80063a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fd1c 	bl	8006dd6 <USBD_CtlError>
          break;
 800639e:	e000      	b.n	80063a2 <USBD_StdItfReq+0xc2>
          break;
 80063a0:	bf00      	nop
      }
      break;
 80063a2:	e004      	b.n	80063ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fd15 	bl	8006dd6 <USBD_CtlError>
      break;
 80063ac:	bf00      	nop
  }

  return ret;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	889b      	ldrh	r3, [r3, #4]
 80063ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063d4:	2b40      	cmp	r3, #64	@ 0x40
 80063d6:	d007      	beq.n	80063e8 <USBD_StdEPReq+0x30>
 80063d8:	2b40      	cmp	r3, #64	@ 0x40
 80063da:	f200 817f 	bhi.w	80066dc <USBD_StdEPReq+0x324>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d02a      	beq.n	8006438 <USBD_StdEPReq+0x80>
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	f040 817a 	bne.w	80066dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fe85 	bl	80060fc <USBD_CoreFindEP>
 80063f2:	4603      	mov	r3, r0
 80063f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063f6:	7b7b      	ldrb	r3, [r7, #13]
 80063f8:	2bff      	cmp	r3, #255	@ 0xff
 80063fa:	f000 8174 	beq.w	80066e6 <USBD_StdEPReq+0x32e>
 80063fe:	7b7b      	ldrb	r3, [r7, #13]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 8170 	bne.w	80066e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006406:	7b7a      	ldrb	r2, [r7, #13]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800640e:	7b7a      	ldrb	r2, [r7, #13]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	32ae      	adds	r2, #174	@ 0xae
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8163 	beq.w	80066e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006420:	7b7a      	ldrb	r2, [r7, #13]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32ae      	adds	r2, #174	@ 0xae
 8006426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006436:	e156      	b.n	80066e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d008      	beq.n	8006452 <USBD_StdEPReq+0x9a>
 8006440:	2b03      	cmp	r3, #3
 8006442:	f300 8145 	bgt.w	80066d0 <USBD_StdEPReq+0x318>
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 809b 	beq.w	8006582 <USBD_StdEPReq+0x1ca>
 800644c:	2b01      	cmp	r3, #1
 800644e:	d03c      	beq.n	80064ca <USBD_StdEPReq+0x112>
 8006450:	e13e      	b.n	80066d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d002      	beq.n	8006464 <USBD_StdEPReq+0xac>
 800645e:	2b03      	cmp	r3, #3
 8006460:	d016      	beq.n	8006490 <USBD_StdEPReq+0xd8>
 8006462:	e02c      	b.n	80064be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <USBD_StdEPReq+0xce>
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b80      	cmp	r3, #128	@ 0x80
 800646e:	d00a      	beq.n	8006486 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fa4d 	bl	8007914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800647a:	2180      	movs	r1, #128	@ 0x80
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fa49 	bl	8007914 <USBD_LL_StallEP>
 8006482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006484:	e020      	b.n	80064c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fca4 	bl	8006dd6 <USBD_CtlError>
              break;
 800648e:	e01b      	b.n	80064c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	885b      	ldrh	r3, [r3, #2]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10e      	bne.n	80064b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00b      	beq.n	80064b6 <USBD_StdEPReq+0xfe>
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	2b80      	cmp	r3, #128	@ 0x80
 80064a2:	d008      	beq.n	80064b6 <USBD_StdEPReq+0xfe>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	88db      	ldrh	r3, [r3, #6]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fa2f 	bl	8007914 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fd64 	bl	8006f84 <USBD_CtlSendStatus>

              break;
 80064bc:	e004      	b.n	80064c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fc88 	bl	8006dd6 <USBD_CtlError>
              break;
 80064c6:	bf00      	nop
          }
          break;
 80064c8:	e107      	b.n	80066da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d002      	beq.n	80064dc <USBD_StdEPReq+0x124>
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d016      	beq.n	8006508 <USBD_StdEPReq+0x150>
 80064da:	e04b      	b.n	8006574 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00d      	beq.n	80064fe <USBD_StdEPReq+0x146>
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b80      	cmp	r3, #128	@ 0x80
 80064e6:	d00a      	beq.n	80064fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fa11 	bl	8007914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064f2:	2180      	movs	r1, #128	@ 0x80
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 fa0d 	bl	8007914 <USBD_LL_StallEP>
 80064fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064fc:	e040      	b.n	8006580 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fc68 	bl	8006dd6 <USBD_CtlError>
              break;
 8006506:	e03b      	b.n	8006580 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	885b      	ldrh	r3, [r3, #2]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d136      	bne.n	800657e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 fa2e 	bl	8007980 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fd2d 	bl	8006f84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fde4 	bl	80060fc <USBD_CoreFindEP>
 8006534:	4603      	mov	r3, r0
 8006536:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006538:	7b7b      	ldrb	r3, [r7, #13]
 800653a:	2bff      	cmp	r3, #255	@ 0xff
 800653c:	d01f      	beq.n	800657e <USBD_StdEPReq+0x1c6>
 800653e:	7b7b      	ldrb	r3, [r7, #13]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11c      	bne.n	800657e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006544:	7b7a      	ldrb	r2, [r7, #13]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800654c:	7b7a      	ldrb	r2, [r7, #13]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	32ae      	adds	r2, #174	@ 0xae
 8006552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d010      	beq.n	800657e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800655c:	7b7a      	ldrb	r2, [r7, #13]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	32ae      	adds	r2, #174	@ 0xae
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006572:	e004      	b.n	800657e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fc2d 	bl	8006dd6 <USBD_CtlError>
              break;
 800657c:	e000      	b.n	8006580 <USBD_StdEPReq+0x1c8>
              break;
 800657e:	bf00      	nop
          }
          break;
 8006580:	e0ab      	b.n	80066da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d002      	beq.n	8006594 <USBD_StdEPReq+0x1dc>
 800658e:	2b03      	cmp	r3, #3
 8006590:	d032      	beq.n	80065f8 <USBD_StdEPReq+0x240>
 8006592:	e097      	b.n	80066c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <USBD_StdEPReq+0x1f2>
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	2b80      	cmp	r3, #128	@ 0x80
 800659e:	d004      	beq.n	80065aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fc17 	bl	8006dd6 <USBD_CtlError>
                break;
 80065a8:	e091      	b.n	80066ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	da0b      	bge.n	80065ca <USBD_StdEPReq+0x212>
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	3310      	adds	r3, #16
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	3304      	adds	r3, #4
 80065c8:	e00b      	b.n	80065e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	3304      	adds	r3, #4
 80065e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2202      	movs	r2, #2
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fc6d 	bl	8006ed0 <USBD_CtlSendData>
              break;
 80065f6:	e06a      	b.n	80066ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	da11      	bge.n	8006624 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	f003 020f 	and.w	r2, r3, #15
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	3324      	adds	r3, #36	@ 0x24
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d117      	bne.n	800664a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fbda 	bl	8006dd6 <USBD_CtlError>
                  break;
 8006622:	e054      	b.n	80066ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	f003 020f 	and.w	r2, r3, #15
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fbc7 	bl	8006dd6 <USBD_CtlError>
                  break;
 8006648:	e041      	b.n	80066ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800664a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800664e:	2b00      	cmp	r3, #0
 8006650:	da0b      	bge.n	800666a <USBD_StdEPReq+0x2b2>
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	3310      	adds	r3, #16
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	4413      	add	r3, r2
 8006666:	3304      	adds	r3, #4
 8006668:	e00b      	b.n	8006682 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4413      	add	r3, r2
 8006680:	3304      	adds	r3, #4
 8006682:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <USBD_StdEPReq+0x2d8>
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b80      	cmp	r3, #128	@ 0x80
 800668e:	d103      	bne.n	8006698 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e00e      	b.n	80066b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006698:	7bbb      	ldrb	r3, [r7, #14]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f9a5 	bl	80079ec <USBD_LL_IsStallEP>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2201      	movs	r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e002      	b.n	80066b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2202      	movs	r2, #2
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fc07 	bl	8006ed0 <USBD_CtlSendData>
              break;
 80066c2:	e004      	b.n	80066ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fb85 	bl	8006dd6 <USBD_CtlError>
              break;
 80066cc:	bf00      	nop
          }
          break;
 80066ce:	e004      	b.n	80066da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fb7f 	bl	8006dd6 <USBD_CtlError>
          break;
 80066d8:	bf00      	nop
      }
      break;
 80066da:	e005      	b.n	80066e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fb79 	bl	8006dd6 <USBD_CtlError>
      break;
 80066e4:	e000      	b.n	80066e8 <USBD_StdEPReq+0x330>
      break;
 80066e6:	bf00      	nop
  }

  return ret;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	885b      	ldrh	r3, [r3, #2]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	2b0e      	cmp	r3, #14
 8006716:	f200 8152 	bhi.w	80069be <USBD_GetDescriptor+0x2ca>
 800671a:	a201      	add	r2, pc, #4	@ (adr r2, 8006720 <USBD_GetDescriptor+0x2c>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006791 	.word	0x08006791
 8006724:	080067a9 	.word	0x080067a9
 8006728:	080067e9 	.word	0x080067e9
 800672c:	080069bf 	.word	0x080069bf
 8006730:	080069bf 	.word	0x080069bf
 8006734:	0800695f 	.word	0x0800695f
 8006738:	0800698b 	.word	0x0800698b
 800673c:	080069bf 	.word	0x080069bf
 8006740:	080069bf 	.word	0x080069bf
 8006744:	080069bf 	.word	0x080069bf
 8006748:	080069bf 	.word	0x080069bf
 800674c:	080069bf 	.word	0x080069bf
 8006750:	080069bf 	.word	0x080069bf
 8006754:	080069bf 	.word	0x080069bf
 8006758:	0800675d 	.word	0x0800675d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	f107 0108 	add.w	r1, r7, #8
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800677e:	e126      	b.n	80069ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fb27 	bl	8006dd6 <USBD_CtlError>
        err++;
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	3301      	adds	r3, #1
 800678c:	72fb      	strb	r3, [r7, #11]
      break;
 800678e:	e11e      	b.n	80069ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	7c12      	ldrb	r2, [r2, #16]
 800679c:	f107 0108 	add.w	r1, r7, #8
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
 80067a4:	60f8      	str	r0, [r7, #12]
      break;
 80067a6:	e112      	b.n	80069ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7c1b      	ldrb	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10d      	bne.n	80067cc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	f107 0208 	add.w	r2, r7, #8
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
 80067c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	2202      	movs	r2, #2
 80067c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067ca:	e100      	b.n	80069ce <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	f107 0208 	add.w	r2, r7, #8
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
 80067dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	2202      	movs	r2, #2
 80067e4:	701a      	strb	r2, [r3, #0]
      break;
 80067e6:	e0f2      	b.n	80069ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	885b      	ldrh	r3, [r3, #2]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	f200 80ac 	bhi.w	800694c <USBD_GetDescriptor+0x258>
 80067f4:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <USBD_GetDescriptor+0x108>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006815 	.word	0x08006815
 8006800:	08006849 	.word	0x08006849
 8006804:	0800687d 	.word	0x0800687d
 8006808:	080068b1 	.word	0x080068b1
 800680c:	080068e5 	.word	0x080068e5
 8006810:	08006919 	.word	0x08006919
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	7c12      	ldrb	r2, [r2, #16]
 800682c:	f107 0108 	add.w	r1, r7, #8
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
 8006834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006836:	e091      	b.n	800695c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 facb 	bl	8006dd6 <USBD_CtlError>
            err++;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	3301      	adds	r3, #1
 8006844:	72fb      	strb	r3, [r7, #11]
          break;
 8006846:	e089      	b.n	800695c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	7c12      	ldrb	r2, [r2, #16]
 8006860:	f107 0108 	add.w	r1, r7, #8
 8006864:	4610      	mov	r0, r2
 8006866:	4798      	blx	r3
 8006868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800686a:	e077      	b.n	800695c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fab1 	bl	8006dd6 <USBD_CtlError>
            err++;
 8006874:	7afb      	ldrb	r3, [r7, #11]
 8006876:	3301      	adds	r3, #1
 8006878:	72fb      	strb	r3, [r7, #11]
          break;
 800687a:	e06f      	b.n	800695c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	7c12      	ldrb	r2, [r2, #16]
 8006894:	f107 0108 	add.w	r1, r7, #8
 8006898:	4610      	mov	r0, r2
 800689a:	4798      	blx	r3
 800689c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689e:	e05d      	b.n	800695c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa97 	bl	8006dd6 <USBD_CtlError>
            err++;
 80068a8:	7afb      	ldrb	r3, [r7, #11]
 80068aa:	3301      	adds	r3, #1
 80068ac:	72fb      	strb	r3, [r7, #11]
          break;
 80068ae:	e055      	b.n	800695c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00b      	beq.n	80068d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	7c12      	ldrb	r2, [r2, #16]
 80068c8:	f107 0108 	add.w	r1, r7, #8
 80068cc:	4610      	mov	r0, r2
 80068ce:	4798      	blx	r3
 80068d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068d2:	e043      	b.n	800695c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa7d 	bl	8006dd6 <USBD_CtlError>
            err++;
 80068dc:	7afb      	ldrb	r3, [r7, #11]
 80068de:	3301      	adds	r3, #1
 80068e0:	72fb      	strb	r3, [r7, #11]
          break;
 80068e2:	e03b      	b.n	800695c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00b      	beq.n	8006908 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	7c12      	ldrb	r2, [r2, #16]
 80068fc:	f107 0108 	add.w	r1, r7, #8
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
 8006904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006906:	e029      	b.n	800695c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa63 	bl	8006dd6 <USBD_CtlError>
            err++;
 8006910:	7afb      	ldrb	r3, [r7, #11]
 8006912:	3301      	adds	r3, #1
 8006914:	72fb      	strb	r3, [r7, #11]
          break;
 8006916:	e021      	b.n	800695c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	7c12      	ldrb	r2, [r2, #16]
 8006930:	f107 0108 	add.w	r1, r7, #8
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
 8006938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800693a:	e00f      	b.n	800695c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa49 	bl	8006dd6 <USBD_CtlError>
            err++;
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	3301      	adds	r3, #1
 8006948:	72fb      	strb	r3, [r7, #11]
          break;
 800694a:	e007      	b.n	800695c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa41 	bl	8006dd6 <USBD_CtlError>
          err++;
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	3301      	adds	r3, #1
 8006958:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800695a:	bf00      	nop
      }
      break;
 800695c:	e037      	b.n	80069ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	7c1b      	ldrb	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696e:	f107 0208 	add.w	r2, r7, #8
 8006972:	4610      	mov	r0, r2
 8006974:	4798      	blx	r3
 8006976:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006978:	e029      	b.n	80069ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa2a 	bl	8006dd6 <USBD_CtlError>
        err++;
 8006982:	7afb      	ldrb	r3, [r7, #11]
 8006984:	3301      	adds	r3, #1
 8006986:	72fb      	strb	r3, [r7, #11]
      break;
 8006988:	e021      	b.n	80069ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	7c1b      	ldrb	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10d      	bne.n	80069ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699a:	f107 0208 	add.w	r2, r7, #8
 800699e:	4610      	mov	r0, r2
 80069a0:	4798      	blx	r3
 80069a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3301      	adds	r3, #1
 80069a8:	2207      	movs	r2, #7
 80069aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069ac:	e00f      	b.n	80069ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fa10 	bl	8006dd6 <USBD_CtlError>
        err++;
 80069b6:	7afb      	ldrb	r3, [r7, #11]
 80069b8:	3301      	adds	r3, #1
 80069ba:	72fb      	strb	r3, [r7, #11]
      break;
 80069bc:	e007      	b.n	80069ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa08 	bl	8006dd6 <USBD_CtlError>
      err++;
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	3301      	adds	r3, #1
 80069ca:	72fb      	strb	r3, [r7, #11]
      break;
 80069cc:	bf00      	nop
  }

  if (err != 0U)
 80069ce:	7afb      	ldrb	r3, [r7, #11]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11e      	bne.n	8006a12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	88db      	ldrh	r3, [r3, #6]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80069dc:	893b      	ldrh	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00e      	beq.n	8006a00 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88da      	ldrh	r2, [r3, #6]
 80069e6:	893b      	ldrh	r3, [r7, #8]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bf28      	it	cs
 80069ec:	4613      	movcs	r3, r2
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069f2:	893b      	ldrh	r3, [r7, #8]
 80069f4:	461a      	mov	r2, r3
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fa69 	bl	8006ed0 <USBD_CtlSendData>
 80069fe:	e009      	b.n	8006a14 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9e7 	bl	8006dd6 <USBD_CtlError>
 8006a08:	e004      	b.n	8006a14 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 faba 	bl	8006f84 <USBD_CtlSendStatus>
 8006a10:	e000      	b.n	8006a14 <USBD_GetDescriptor+0x320>
    return;
 8006a12:	bf00      	nop
  }
}
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop

08006a1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	889b      	ldrh	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d131      	bne.n	8006a92 <USBD_SetAddress+0x76>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	88db      	ldrh	r3, [r3, #6]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d12d      	bne.n	8006a92 <USBD_SetAddress+0x76>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	885b      	ldrh	r3, [r3, #2]
 8006a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a3c:	d829      	bhi.n	8006a92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	885b      	ldrh	r3, [r3, #2]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d104      	bne.n	8006a60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9bc 	bl	8006dd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5e:	e01d      	b.n	8006a9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7bfa      	ldrb	r2, [r7, #15]
 8006a64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 ffe9 	bl	8007a44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa86 	bl	8006f84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a86:	e009      	b.n	8006a9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a90:	e004      	b.n	8006a9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f99e 	bl	8006dd6 <USBD_CtlError>
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	885b      	ldrh	r3, [r3, #2]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006aba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006abc:	4b4d      	ldr	r3, [pc, #308]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d905      	bls.n	8006ad0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f985 	bl	8006dd6 <USBD_CtlError>
    return USBD_FAIL;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e08c      	b.n	8006bea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d002      	beq.n	8006ae2 <USBD_SetConfig+0x3e>
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d029      	beq.n	8006b34 <USBD_SetConfig+0x90>
 8006ae0:	e075      	b.n	8006bce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ae2:	4b44      	ldr	r3, [pc, #272]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d020      	beq.n	8006b2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006aea:	4b42      	ldr	r3, [pc, #264]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006af4:	4b3f      	ldr	r3, [pc, #252]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fe ffb9 	bl	8005a72 <USBD_SetClassConfig>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f962 	bl	8006dd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b1a:	e065      	b.n	8006be8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa31 	bl	8006f84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2203      	movs	r2, #3
 8006b26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006b2a:	e05d      	b.n	8006be8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa29 	bl	8006f84 <USBD_CtlSendStatus>
      break;
 8006b32:	e059      	b.n	8006be8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b34:	4b2f      	ldr	r3, [pc, #188]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d112      	bne.n	8006b62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006b44:	4b2b      	ldr	r3, [pc, #172]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b4e:	4b29      	ldr	r3, [pc, #164]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fe ffa8 	bl	8005aaa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa12 	bl	8006f84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b60:	e042      	b.n	8006be8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006b62:	4b24      	ldr	r3, [pc, #144]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d02a      	beq.n	8006bc6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fe ff96 	bl	8005aaa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b88:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fe ff6f 	bl	8005a72 <USBD_SetClassConfig>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00f      	beq.n	8006bbe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f918 	bl	8006dd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fe ff7b 	bl	8005aaa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006bbc:	e014      	b.n	8006be8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f9e0 	bl	8006f84 <USBD_CtlSendStatus>
      break;
 8006bc4:	e010      	b.n	8006be8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9dc 	bl	8006f84 <USBD_CtlSendStatus>
      break;
 8006bcc:	e00c      	b.n	8006be8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f900 	bl	8006dd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bd6:	4b07      	ldr	r3, [pc, #28]	@ (8006bf4 <USBD_SetConfig+0x150>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fe ff64 	bl	8005aaa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006be2:	2303      	movs	r3, #3
 8006be4:	73fb      	strb	r3, [r7, #15]
      break;
 8006be6:	bf00      	nop
  }

  return ret;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2000018c 	.word	0x2000018c

08006bf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	88db      	ldrh	r3, [r3, #6]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d004      	beq.n	8006c14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f8e2 	bl	8006dd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c12:	e023      	b.n	8006c5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	dc02      	bgt.n	8006c26 <USBD_GetConfig+0x2e>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	dc03      	bgt.n	8006c2c <USBD_GetConfig+0x34>
 8006c24:	e015      	b.n	8006c52 <USBD_GetConfig+0x5a>
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d00b      	beq.n	8006c42 <USBD_GetConfig+0x4a>
 8006c2a:	e012      	b.n	8006c52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3308      	adds	r3, #8
 8006c36:	2201      	movs	r2, #1
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f948 	bl	8006ed0 <USBD_CtlSendData>
        break;
 8006c40:	e00c      	b.n	8006c5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	2201      	movs	r2, #1
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f940 	bl	8006ed0 <USBD_CtlSendData>
        break;
 8006c50:	e004      	b.n	8006c5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f8be 	bl	8006dd6 <USBD_CtlError>
        break;
 8006c5a:	bf00      	nop
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d81e      	bhi.n	8006cba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	88db      	ldrh	r3, [r3, #6]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d004      	beq.n	8006c8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8a5 	bl	8006dd6 <USBD_CtlError>
        break;
 8006c8c:	e01a      	b.n	8006cc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f043 0202 	orr.w	r2, r3, #2
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	330c      	adds	r3, #12
 8006cae:	2202      	movs	r2, #2
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f90c 	bl	8006ed0 <USBD_CtlSendData>
      break;
 8006cb8:	e004      	b.n	8006cc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f88a 	bl	8006dd6 <USBD_CtlError>
      break;
 8006cc2:	bf00      	nop
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	885b      	ldrh	r3, [r3, #2]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d107      	bne.n	8006cee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f94c 	bl	8006f84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006cec:	e013      	b.n	8006d16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d10b      	bne.n	8006d0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	889b      	ldrh	r3, [r3, #4]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f93c 	bl	8006f84 <USBD_CtlSendStatus>
}
 8006d0c:	e003      	b.n	8006d16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f860 	bl	8006dd6 <USBD_CtlError>
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d80b      	bhi.n	8006d4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	885b      	ldrh	r3, [r3, #2]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10c      	bne.n	8006d58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f91c 	bl	8006f84 <USBD_CtlSendStatus>
      }
      break;
 8006d4c:	e004      	b.n	8006d58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f840 	bl	8006dd6 <USBD_CtlError>
      break;
 8006d56:	e000      	b.n	8006d5a <USBD_ClrFeature+0x3c>
      break;
 8006d58:	bf00      	nop
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	781a      	ldrb	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fa16 	bl	80061be <SWAPBYTE>
 8006d92:	4603      	mov	r3, r0
 8006d94:	461a      	mov	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3301      	adds	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff fa09 	bl	80061be <SWAPBYTE>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff f9fc 	bl	80061be <SWAPBYTE>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	80da      	strh	r2, [r3, #6]
}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006de0:	2180      	movs	r1, #128	@ 0x80
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fd96 	bl	8007914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006de8:	2100      	movs	r1, #0
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fd92 	bl	8007914 <USBD_LL_StallEP>
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d042      	beq.n	8006e94 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006e12:	6938      	ldr	r0, [r7, #16]
 8006e14:	f000 f842 	bl	8006e9c <USBD_GetLen>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e22:	d808      	bhi.n	8006e36 <USBD_GetString+0x3e>
 8006e24:	6938      	ldr	r0, [r7, #16]
 8006e26:	f000 f839 	bl	8006e9c <USBD_GetLen>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	e001      	b.n	8006e3a <USBD_GetString+0x42>
 8006e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	4413      	add	r3, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	4413      	add	r3, r2
 8006e56:	2203      	movs	r2, #3
 8006e58:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e60:	e013      	b.n	8006e8a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	4413      	add	r3, r2
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]
    idx++;
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	3301      	adds	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	4413      	add	r3, r2
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	3301      	adds	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e7      	bne.n	8006e62 <USBD_GetString+0x6a>
 8006e92:	e000      	b.n	8006e96 <USBD_GetString+0x9e>
    return;
 8006e94:	bf00      	nop
  }
}
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006eac:	e005      	b.n	8006eba <USBD_GetLen+0x1e>
  {
    len++;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f5      	bne.n	8006eae <USBD_GetLen+0x12>
  }

  return len;
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fdda 	bl	8007ab0 <USBD_LL_Transmit>

  return USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	2100      	movs	r1, #0
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fdc9 	bl	8007ab0 <USBD_LL_Transmit>

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2203      	movs	r2, #3
 8006f38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	2100      	movs	r1, #0
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fde4 	bl	8007b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	2100      	movs	r1, #0
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 fdd3 	bl	8007b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2204      	movs	r2, #4
 8006f90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f94:	2300      	movs	r3, #0
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fd88 	bl	8007ab0 <USBD_LL_Transmit>

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2205      	movs	r2, #5
 8006fb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fdad 	bl	8007b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4912      	ldr	r1, [pc, #72]	@ (8007020 <MX_USB_DEVICE_Init+0x50>)
 8006fd8:	4812      	ldr	r0, [pc, #72]	@ (8007024 <MX_USB_DEVICE_Init+0x54>)
 8006fda:	f7fe fccd 	bl	8005978 <USBD_Init>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006fe4:	f7f9 fa2b 	bl	800043e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006fe8:	490f      	ldr	r1, [pc, #60]	@ (8007028 <MX_USB_DEVICE_Init+0x58>)
 8006fea:	480e      	ldr	r0, [pc, #56]	@ (8007024 <MX_USB_DEVICE_Init+0x54>)
 8006fec:	f7fe fcf4 	bl	80059d8 <USBD_RegisterClass>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ff6:	f7f9 fa22 	bl	800043e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ffa:	490c      	ldr	r1, [pc, #48]	@ (800702c <MX_USB_DEVICE_Init+0x5c>)
 8006ffc:	4809      	ldr	r0, [pc, #36]	@ (8007024 <MX_USB_DEVICE_Init+0x54>)
 8006ffe:	f7fe fbeb 	bl	80057d8 <USBD_CDC_RegisterInterface>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007008:	f7f9 fa19 	bl	800043e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800700c:	4805      	ldr	r0, [pc, #20]	@ (8007024 <MX_USB_DEVICE_Init+0x54>)
 800700e:	f7fe fd19 	bl	8005a44 <USBD_Start>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007018:	f7f9 fa11 	bl	800043e <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800701c:	bf00      	nop
 800701e:	bd80      	pop	{r7, pc}
 8007020:	200000ac 	.word	0x200000ac
 8007024:	20000190 	.word	0x20000190
 8007028:	20000018 	.word	0x20000018
 800702c:	20000098 	.word	0x20000098

08007030 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007034:	2200      	movs	r2, #0
 8007036:	4907      	ldr	r1, [pc, #28]	@ (8007054 <CDC_Init_FS+0x24>)
 8007038:	4807      	ldr	r0, [pc, #28]	@ (8007058 <CDC_Init_FS+0x28>)
 800703a:	f7fe fbe7 	bl	800580c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800703e:	4907      	ldr	r1, [pc, #28]	@ (800705c <CDC_Init_FS+0x2c>)
 8007040:	4805      	ldr	r0, [pc, #20]	@ (8007058 <CDC_Init_FS+0x28>)
 8007042:	f7fe fc05 	bl	8005850 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007046:	4804      	ldr	r0, [pc, #16]	@ (8007058 <CDC_Init_FS+0x28>)
 8007048:	f7fe fc60 	bl	800590c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800704c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800704e:	4618      	mov	r0, r3
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000c6c 	.word	0x20000c6c
 8007058:	20000190 	.word	0x20000190
 800705c:	2000046c 	.word	0x2000046c

08007060 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007064:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007066:	4618      	mov	r0, r3
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
 800707c:	4613      	mov	r3, r2
 800707e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	2b23      	cmp	r3, #35	@ 0x23
 8007084:	d84a      	bhi.n	800711c <CDC_Control_FS+0xac>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <CDC_Control_FS+0x1c>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	0800711d 	.word	0x0800711d
 8007090:	0800711d 	.word	0x0800711d
 8007094:	0800711d 	.word	0x0800711d
 8007098:	0800711d 	.word	0x0800711d
 800709c:	0800711d 	.word	0x0800711d
 80070a0:	0800711d 	.word	0x0800711d
 80070a4:	0800711d 	.word	0x0800711d
 80070a8:	0800711d 	.word	0x0800711d
 80070ac:	0800711d 	.word	0x0800711d
 80070b0:	0800711d 	.word	0x0800711d
 80070b4:	0800711d 	.word	0x0800711d
 80070b8:	0800711d 	.word	0x0800711d
 80070bc:	0800711d 	.word	0x0800711d
 80070c0:	0800711d 	.word	0x0800711d
 80070c4:	0800711d 	.word	0x0800711d
 80070c8:	0800711d 	.word	0x0800711d
 80070cc:	0800711d 	.word	0x0800711d
 80070d0:	0800711d 	.word	0x0800711d
 80070d4:	0800711d 	.word	0x0800711d
 80070d8:	0800711d 	.word	0x0800711d
 80070dc:	0800711d 	.word	0x0800711d
 80070e0:	0800711d 	.word	0x0800711d
 80070e4:	0800711d 	.word	0x0800711d
 80070e8:	0800711d 	.word	0x0800711d
 80070ec:	0800711d 	.word	0x0800711d
 80070f0:	0800711d 	.word	0x0800711d
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	0800711d 	.word	0x0800711d
 80070fc:	0800711d 	.word	0x0800711d
 8007100:	0800711d 	.word	0x0800711d
 8007104:	0800711d 	.word	0x0800711d
 8007108:	0800711d 	.word	0x0800711d
 800710c:	0800711d 	.word	0x0800711d
 8007110:	0800711d 	.word	0x0800711d
 8007114:	0800711d 	.word	0x0800711d
 8007118:	0800711d 	.word	0x0800711d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800711c:	bf00      	nop
  }

  return (USBD_OK);
 800711e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4805      	ldr	r0, [pc, #20]	@ (8007150 <CDC_Receive_FS+0x24>)
 800713a:	f7fe fb89 	bl	8005850 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800713e:	4804      	ldr	r0, [pc, #16]	@ (8007150 <CDC_Receive_FS+0x24>)
 8007140:	f7fe fbe4 	bl	800590c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007144:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000190 	.word	0x20000190

08007154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007164:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <CDC_Transmit_FS+0x48>)
 8007166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800716a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007176:	2301      	movs	r3, #1
 8007178:	e00b      	b.n	8007192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	461a      	mov	r2, r3
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	4806      	ldr	r0, [pc, #24]	@ (800719c <CDC_Transmit_FS+0x48>)
 8007182:	f7fe fb43 	bl	800580c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007186:	4805      	ldr	r0, [pc, #20]	@ (800719c <CDC_Transmit_FS+0x48>)
 8007188:	f7fe fb80 	bl	800588c <USBD_CDC_TransmitPacket>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000190 	.word	0x20000190

080071a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2212      	movs	r2, #18
 80071d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071d6:	4b03      	ldr	r3, [pc, #12]	@ (80071e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	200000cc 	.word	0x200000cc

080071e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2204      	movs	r2, #4
 80071f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071fa:	4b03      	ldr	r3, [pc, #12]	@ (8007208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	200000ec 	.word	0x200000ec

0800720c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	6039      	str	r1, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4907      	ldr	r1, [pc, #28]	@ (8007240 <USBD_FS_ProductStrDescriptor+0x34>)
 8007222:	4808      	ldr	r0, [pc, #32]	@ (8007244 <USBD_FS_ProductStrDescriptor+0x38>)
 8007224:	f7ff fde8 	bl	8006df8 <USBD_GetString>
 8007228:	e004      	b.n	8007234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4904      	ldr	r1, [pc, #16]	@ (8007240 <USBD_FS_ProductStrDescriptor+0x34>)
 800722e:	4805      	ldr	r0, [pc, #20]	@ (8007244 <USBD_FS_ProductStrDescriptor+0x38>)
 8007230:	f7ff fde2 	bl	8006df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007234:	4b02      	ldr	r3, [pc, #8]	@ (8007240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	2000146c 	.word	0x2000146c
 8007244:	08008604 	.word	0x08008604

08007248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	4904      	ldr	r1, [pc, #16]	@ (8007268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007258:	4804      	ldr	r0, [pc, #16]	@ (800726c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800725a:	f7ff fdcd 	bl	8006df8 <USBD_GetString>
  return USBD_StrDesc;
 800725e:	4b02      	ldr	r3, [pc, #8]	@ (8007268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	2000146c 	.word	0x2000146c
 800726c:	0800861c 	.word	0x0800861c

08007270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	221a      	movs	r2, #26
 8007280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007282:	f000 f855 	bl	8007330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007286:	4b02      	ldr	r3, [pc, #8]	@ (8007290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	200000f0 	.word	0x200000f0

08007294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	6039      	str	r1, [r7, #0]
 800729e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	4907      	ldr	r1, [pc, #28]	@ (80072c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072aa:	4808      	ldr	r0, [pc, #32]	@ (80072cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80072ac:	f7ff fda4 	bl	8006df8 <USBD_GetString>
 80072b0:	e004      	b.n	80072bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	4904      	ldr	r1, [pc, #16]	@ (80072c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072b6:	4805      	ldr	r0, [pc, #20]	@ (80072cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80072b8:	f7ff fd9e 	bl	8006df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072bc:	4b02      	ldr	r3, [pc, #8]	@ (80072c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	2000146c 	.word	0x2000146c
 80072cc:	08008630 	.word	0x08008630

080072d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	4907      	ldr	r1, [pc, #28]	@ (8007304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072e6:	4808      	ldr	r0, [pc, #32]	@ (8007308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072e8:	f7ff fd86 	bl	8006df8 <USBD_GetString>
 80072ec:	e004      	b.n	80072f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	4904      	ldr	r1, [pc, #16]	@ (8007304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072f2:	4805      	ldr	r0, [pc, #20]	@ (8007308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072f4:	f7ff fd80 	bl	8006df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072f8:	4b02      	ldr	r3, [pc, #8]	@ (8007304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	2000146c 	.word	0x2000146c
 8007308:	0800863c 	.word	0x0800863c

0800730c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	220c      	movs	r2, #12
 800731c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800731e:	4b03      	ldr	r3, [pc, #12]	@ (800732c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	200000e0 	.word	0x200000e0

08007330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007336:	4b0f      	ldr	r3, [pc, #60]	@ (8007374 <Get_SerialNum+0x44>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800733c:	4b0e      	ldr	r3, [pc, #56]	@ (8007378 <Get_SerialNum+0x48>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007342:	4b0e      	ldr	r3, [pc, #56]	@ (800737c <Get_SerialNum+0x4c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007356:	2208      	movs	r2, #8
 8007358:	4909      	ldr	r1, [pc, #36]	@ (8007380 <Get_SerialNum+0x50>)
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f814 	bl	8007388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007360:	2204      	movs	r2, #4
 8007362:	4908      	ldr	r1, [pc, #32]	@ (8007384 <Get_SerialNum+0x54>)
 8007364:	68b8      	ldr	r0, [r7, #8]
 8007366:	f000 f80f 	bl	8007388 <IntToUnicode>
  }
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	1fff7590 	.word	0x1fff7590
 8007378:	1fff7594 	.word	0x1fff7594
 800737c:	1fff7598 	.word	0x1fff7598
 8007380:	200000f2 	.word	0x200000f2
 8007384:	20000102 	.word	0x20000102

08007388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]
 800739e:	e027      	b.n	80073f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	0f1b      	lsrs	r3, r3, #28
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d80b      	bhi.n	80073c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	4619      	mov	r1, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	440b      	add	r3, r1
 80073b8:	3230      	adds	r2, #48	@ 0x30
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	e00a      	b.n	80073d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	0f1b      	lsrs	r3, r3, #28
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4619      	mov	r1, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	440b      	add	r3, r1
 80073d0:	3237      	adds	r2, #55	@ 0x37
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	3301      	adds	r3, #1
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4413      	add	r3, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	3301      	adds	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
 80073f0:	7dfa      	ldrb	r2, [r7, #23]
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d3d3      	bcc.n	80073a0 <IntToUnicode+0x18>
  }
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b0b0      	sub	sp, #192	@ 0xc0
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007410:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	609a      	str	r2, [r3, #8]
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007420:	f107 0314 	add.w	r3, r7, #20
 8007424:	2298      	movs	r2, #152	@ 0x98
 8007426:	2100      	movs	r1, #0
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fe29 	bl	8008080 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007436:	d173      	bne.n	8007520 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800743c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800743e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007442:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007446:	2303      	movs	r3, #3
 8007448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800744a:	2301      	movs	r3, #1
 800744c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800744e:	230c      	movs	r3, #12
 8007450:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007452:	2302      	movs	r3, #2
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007456:	2302      	movs	r3, #2
 8007458:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800745a:	2302      	movs	r3, #2
 800745c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800745e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007462:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007464:	f107 0314 	add.w	r3, r7, #20
 8007468:	4618      	mov	r0, r3
 800746a:	f7fb fdf7 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007474:	f7f8 ffe3 	bl	800043e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007478:	4b2b      	ldr	r3, [pc, #172]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 800747a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800747c:	4a2a      	ldr	r2, [pc, #168]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007484:	4b28      	ldr	r3, [pc, #160]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 8007486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007490:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007498:	2302      	movs	r3, #2
 800749a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a4:	2303      	movs	r3, #3
 80074a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074aa:	230a      	movs	r3, #10
 80074ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80074b4:	4619      	mov	r1, r3
 80074b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80074ba:	f7f9 fa93 	bl	80009e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074be:	4b1a      	ldr	r3, [pc, #104]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 80074c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c2:	4a19      	ldr	r2, [pc, #100]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 80074c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80074c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074ca:	4b17      	ldr	r3, [pc, #92]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074d6:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 80074d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d114      	bne.n	800750c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074e2:	4b11      	ldr	r3, [pc, #68]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 80074e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e6:	4a10      	ldr	r2, [pc, #64]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 80074e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80074ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 80074f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80074fa:	f7fa fe91 	bl	8002220 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80074fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 8007500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007502:	4a09      	ldr	r2, [pc, #36]	@ (8007528 <HAL_PCD_MspInit+0x120>)
 8007504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007508:	6593      	str	r3, [r2, #88]	@ 0x58
 800750a:	e001      	b.n	8007510 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800750c:	f7fa fe88 	bl	8002220 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	2043      	movs	r0, #67	@ 0x43
 8007516:	f7f9 fa2e 	bl	8000976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800751a:	2043      	movs	r0, #67	@ 0x43
 800751c:	f7f9 fa47 	bl	80009ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007520:	bf00      	nop
 8007522:	37c0      	adds	r7, #192	@ 0xc0
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40021000 	.word	0x40021000

0800752c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f7fe facb 	bl	8005ade <USBD_LL_SetupStage>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	4619      	mov	r1, r3
 800757a:	f7fe fb05 	bl	8005b88 <USBD_LL_DataOutStage>
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	3320      	adds	r3, #32
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	4619      	mov	r1, r3
 80075ae:	f7fe fb9e 	bl	8005cee <USBD_LL_DataInStage>
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fcd8 	bl	8005f7e <USBD_LL_SOF>
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075de:	2301      	movs	r3, #1
 80075e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	79db      	ldrb	r3, [r3, #7]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d001      	beq.n	80075ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075ea:	f7f8 ff28 	bl	800043e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075f4:	7bfa      	ldrb	r2, [r7, #15]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fc7c 	bl	8005ef6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fc24 	bl	8005e52 <USBD_LL_Reset>
}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fc6b 	bl	8005f16 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7adb      	ldrb	r3, [r3, #11]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007648:	4b04      	ldr	r3, [pc, #16]	@ (800765c <HAL_PCD_SuspendCallback+0x48>)
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	4a03      	ldr	r2, [pc, #12]	@ (800765c <HAL_PCD_SuspendCallback+0x48>)
 800764e:	f043 0306 	orr.w	r3, r3, #6
 8007652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	e000ed00 	.word	0xe000ed00

08007660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6812      	ldr	r2, [r2, #0]
 8007676:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800767a:	f023 0301 	bic.w	r3, r3, #1
 800767e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7adb      	ldrb	r3, [r3, #11]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007688:	4b08      	ldr	r3, [pc, #32]	@ (80076ac <HAL_PCD_ResumeCallback+0x4c>)
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	4a07      	ldr	r2, [pc, #28]	@ (80076ac <HAL_PCD_ResumeCallback+0x4c>)
 800768e:	f023 0306 	bic.w	r3, r3, #6
 8007692:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007694:	f000 faf6 	bl	8007c84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fc55 	bl	8005f4e <USBD_LL_Resume>
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	e000ed00 	.word	0xe000ed00

080076b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fcab 	bl	8006022 <USBD_LL_IsoOUTIncomplete>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fc67 	bl	8005fbe <USBD_LL_IsoINIncomplete>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fcbd 	bl	8006086 <USBD_LL_DevConnected>
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fcba 	bl	800609c <USBD_LL_DevDisconnected>
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d13c      	bne.n	80077ba <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007740:	4a20      	ldr	r2, [pc, #128]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1e      	ldr	r2, [pc, #120]	@ (80077c4 <USBD_LL_Init+0x94>)
 800774c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007750:	4b1c      	ldr	r3, [pc, #112]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007752:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007758:	4b1a      	ldr	r3, [pc, #104]	@ (80077c4 <USBD_LL_Init+0x94>)
 800775a:	2206      	movs	r2, #6
 800775c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800775e:	4b19      	ldr	r3, [pc, #100]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007760:	2202      	movs	r2, #2
 8007762:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007764:	4b17      	ldr	r3, [pc, #92]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007766:	2202      	movs	r2, #2
 8007768:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800776a:	4b16      	ldr	r3, [pc, #88]	@ (80077c4 <USBD_LL_Init+0x94>)
 800776c:	2200      	movs	r2, #0
 800776e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007770:	4b14      	ldr	r3, [pc, #80]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007772:	2200      	movs	r2, #0
 8007774:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007776:	4b13      	ldr	r3, [pc, #76]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007778:	2200      	movs	r2, #0
 800777a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800777c:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <USBD_LL_Init+0x94>)
 800777e:	2200      	movs	r2, #0
 8007780:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007782:	4b10      	ldr	r3, [pc, #64]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007784:	2200      	movs	r2, #0
 8007786:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007788:	4b0e      	ldr	r3, [pc, #56]	@ (80077c4 <USBD_LL_Init+0x94>)
 800778a:	2200      	movs	r2, #0
 800778c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800778e:	480d      	ldr	r0, [pc, #52]	@ (80077c4 <USBD_LL_Init+0x94>)
 8007790:	f7f9 faec 	bl	8000d6c <HAL_PCD_Init>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800779a:	f7f8 fe50 	bl	800043e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800779e:	2180      	movs	r1, #128	@ 0x80
 80077a0:	4808      	ldr	r0, [pc, #32]	@ (80077c4 <USBD_LL_Init+0x94>)
 80077a2:	f7fa fc44 	bl	800202e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077a6:	2240      	movs	r2, #64	@ 0x40
 80077a8:	2100      	movs	r1, #0
 80077aa:	4806      	ldr	r0, [pc, #24]	@ (80077c4 <USBD_LL_Init+0x94>)
 80077ac:	f7fa fbf8 	bl	8001fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077b0:	2280      	movs	r2, #128	@ 0x80
 80077b2:	2101      	movs	r1, #1
 80077b4:	4803      	ldr	r0, [pc, #12]	@ (80077c4 <USBD_LL_Init+0x94>)
 80077b6:	f7fa fbf3 	bl	8001fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	2000166c 	.word	0x2000166c

080077c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077de:	4618      	mov	r0, r3
 80077e0:	f7f9 fbd3 	bl	8000f8a <HAL_PCD_Start>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d816      	bhi.n	800781c <USBD_LL_Start+0x54>
 80077ee:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <USBD_LL_Start+0x2c>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007805 	.word	0x08007805
 80077f8:	0800780b 	.word	0x0800780b
 80077fc:	08007811 	.word	0x08007811
 8007800:	08007817 	.word	0x08007817
    case HAL_OK :
      usb_status = USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
    break;
 8007808:	e00b      	b.n	8007822 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800780a:	2303      	movs	r3, #3
 800780c:	73fb      	strb	r3, [r7, #15]
    break;
 800780e:	e008      	b.n	8007822 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007810:	2301      	movs	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
    break;
 8007814:	e005      	b.n	8007822 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007816:	2303      	movs	r3, #3
 8007818:	73fb      	strb	r3, [r7, #15]
    break;
 800781a:	e002      	b.n	8007822 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800781c:	2303      	movs	r3, #3
 800781e:	73fb      	strb	r3, [r7, #15]
    break;
 8007820:	bf00      	nop
  }
  return usb_status;
 8007822:	7bfb      	ldrb	r3, [r7, #15]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	4603      	mov	r3, r0
 800783c:	70fb      	strb	r3, [r7, #3]
 800783e:	460b      	mov	r3, r1
 8007840:	70bb      	strb	r3, [r7, #2]
 8007842:	4613      	mov	r3, r2
 8007844:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007854:	78bb      	ldrb	r3, [r7, #2]
 8007856:	883a      	ldrh	r2, [r7, #0]
 8007858:	78f9      	ldrb	r1, [r7, #3]
 800785a:	f7fa f87f 	bl	800195c <HAL_PCD_EP_Open>
 800785e:	4603      	mov	r3, r0
 8007860:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d817      	bhi.n	8007898 <USBD_LL_OpenEP+0x6c>
 8007868:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <USBD_LL_OpenEP+0x44>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007881 	.word	0x08007881
 8007874:	08007887 	.word	0x08007887
 8007878:	0800788d 	.word	0x0800788d
 800787c:	08007893 	.word	0x08007893
    case HAL_OK :
      usb_status = USBD_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
    break;
 8007884:	e00b      	b.n	800789e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	73fb      	strb	r3, [r7, #15]
    break;
 800788a:	e008      	b.n	800789e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
    break;
 8007890:	e005      	b.n	800789e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007892:	2303      	movs	r3, #3
 8007894:	73fb      	strb	r3, [r7, #15]
    break;
 8007896:	e002      	b.n	800789e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	73fb      	strb	r3, [r7, #15]
    break;
 800789c:	bf00      	nop
  }
  return usb_status;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	4611      	mov	r1, r2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fa f8b2 	bl	8001a30 <HAL_PCD_EP_Close>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d816      	bhi.n	8007904 <USBD_LL_CloseEP+0x5c>
 80078d6:	a201      	add	r2, pc, #4	@ (adr r2, 80078dc <USBD_LL_CloseEP+0x34>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	080078f3 	.word	0x080078f3
 80078e4:	080078f9 	.word	0x080078f9
 80078e8:	080078ff 	.word	0x080078ff
    case HAL_OK :
      usb_status = USBD_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
    break;
 80078f0:	e00b      	b.n	800790a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	73fb      	strb	r3, [r7, #15]
    break;
 80078f6:	e008      	b.n	800790a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078f8:	2301      	movs	r3, #1
 80078fa:	73fb      	strb	r3, [r7, #15]
    break;
 80078fc:	e005      	b.n	800790a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078fe:	2303      	movs	r3, #3
 8007900:	73fb      	strb	r3, [r7, #15]
    break;
 8007902:	e002      	b.n	800790a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007904:	2303      	movs	r3, #3
 8007906:	73fb      	strb	r3, [r7, #15]
    break;
 8007908:	bf00      	nop
  }
  return usb_status;
 800790a:	7bfb      	ldrb	r3, [r7, #15]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f7fa f941 	bl	8001bba <HAL_PCD_EP_SetStall>
 8007938:	4603      	mov	r3, r0
 800793a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b03      	cmp	r3, #3
 8007940:	d816      	bhi.n	8007970 <USBD_LL_StallEP+0x5c>
 8007942:	a201      	add	r2, pc, #4	@ (adr r2, 8007948 <USBD_LL_StallEP+0x34>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	08007959 	.word	0x08007959
 800794c:	0800795f 	.word	0x0800795f
 8007950:	08007965 	.word	0x08007965
 8007954:	0800796b 	.word	0x0800796b
    case HAL_OK :
      usb_status = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
    break;
 800795c:	e00b      	b.n	8007976 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800795e:	2303      	movs	r3, #3
 8007960:	73fb      	strb	r3, [r7, #15]
    break;
 8007962:	e008      	b.n	8007976 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007964:	2301      	movs	r3, #1
 8007966:	73fb      	strb	r3, [r7, #15]
    break;
 8007968:	e005      	b.n	8007976 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
    break;
 800796e:	e002      	b.n	8007976 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	73fb      	strb	r3, [r7, #15]
    break;
 8007974:	bf00      	nop
  }
  return usb_status;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fa f96d 	bl	8001c7e <HAL_PCD_EP_ClrStall>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d816      	bhi.n	80079dc <USBD_LL_ClearStallEP+0x5c>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <USBD_LL_ClearStallEP+0x34>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079c5 	.word	0x080079c5
 80079b8:	080079cb 	.word	0x080079cb
 80079bc:	080079d1 	.word	0x080079d1
 80079c0:	080079d7 	.word	0x080079d7
    case HAL_OK :
      usb_status = USBD_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]
    break;
 80079c8:	e00b      	b.n	80079e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	73fb      	strb	r3, [r7, #15]
    break;
 80079ce:	e008      	b.n	80079e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
    break;
 80079d4:	e005      	b.n	80079e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079d6:	2303      	movs	r3, #3
 80079d8:	73fb      	strb	r3, [r7, #15]
    break;
 80079da:	e002      	b.n	80079e2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80079dc:	2303      	movs	r3, #3
 80079de:	73fb      	strb	r3, [r7, #15]
    break;
 80079e0:	bf00      	nop
  }
  return usb_status;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da0b      	bge.n	8007a20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	4613      	mov	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	3316      	adds	r3, #22
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	e00b      	b.n	8007a38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007a36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7f9 ff56 	bl	8001914 <HAL_PCD_SetAddress>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d816      	bhi.n	8007aa0 <USBD_LL_SetUSBAddress+0x5c>
 8007a72:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <USBD_LL_SetUSBAddress+0x34>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007a8f 	.word	0x08007a8f
 8007a80:	08007a95 	.word	0x08007a95
 8007a84:	08007a9b 	.word	0x08007a9b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8c:	e00b      	b.n	8007aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	73fb      	strb	r3, [r7, #15]
    break;
 8007a92:	e008      	b.n	8007aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
    break;
 8007a98:	e005      	b.n	8007aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a9e:	e002      	b.n	8007aa6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa4:	bf00      	nop
  }
  return usb_status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	460b      	mov	r3, r1
 8007abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ace:	7af9      	ldrb	r1, [r7, #11]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	f7fa f840 	bl	8001b58 <HAL_PCD_EP_Transmit>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007adc:	7dbb      	ldrb	r3, [r7, #22]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d816      	bhi.n	8007b10 <USBD_LL_Transmit+0x60>
 8007ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae8 <USBD_LL_Transmit+0x38>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007af9 	.word	0x08007af9
 8007aec:	08007aff 	.word	0x08007aff
 8007af0:	08007b05 	.word	0x08007b05
 8007af4:	08007b0b 	.word	0x08007b0b
    case HAL_OK :
      usb_status = USBD_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75fb      	strb	r3, [r7, #23]
    break;
 8007afc:	e00b      	b.n	8007b16 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007afe:	2303      	movs	r3, #3
 8007b00:	75fb      	strb	r3, [r7, #23]
    break;
 8007b02:	e008      	b.n	8007b16 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b04:	2301      	movs	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
    break;
 8007b08:	e005      	b.n	8007b16 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	75fb      	strb	r3, [r7, #23]
    break;
 8007b0e:	e002      	b.n	8007b16 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	75fb      	strb	r3, [r7, #23]
    break;
 8007b14:	bf00      	nop
  }
  return usb_status;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	607a      	str	r2, [r7, #4]
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b3e:	7af9      	ldrb	r1, [r7, #11]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	f7f9 ffbe 	bl	8001ac4 <HAL_PCD_EP_Receive>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007b4c:	7dbb      	ldrb	r3, [r7, #22]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d816      	bhi.n	8007b80 <USBD_LL_PrepareReceive+0x60>
 8007b52:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <USBD_LL_PrepareReceive+0x38>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b6f 	.word	0x08007b6f
 8007b60:	08007b75 	.word	0x08007b75
 8007b64:	08007b7b 	.word	0x08007b7b
    case HAL_OK :
      usb_status = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75fb      	strb	r3, [r7, #23]
    break;
 8007b6c:	e00b      	b.n	8007b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	75fb      	strb	r3, [r7, #23]
    break;
 8007b72:	e008      	b.n	8007b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
    break;
 8007b78:	e005      	b.n	8007b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	75fb      	strb	r3, [r7, #23]
    break;
 8007b7e:	e002      	b.n	8007b86 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	75fb      	strb	r3, [r7, #23]
    break;
 8007b84:	bf00      	nop
  }
  return usb_status;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7f9 ffbe 	bl	8001b28 <HAL_PCD_EP_GetRxCount>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <HAL_PCDEx_LPM_Callback+0x18>
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d01f      	beq.n	8007c0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007bce:	e03b      	b.n	8007c48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7adb      	ldrb	r3, [r3, #11]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d007      	beq.n	8007be8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007bd8:	f000 f854 	bl	8007c84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8007c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8007be2:	f023 0306 	bic.w	r3, r3, #6
 8007be6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe f9a1 	bl	8005f4e <USBD_LL_Resume>
    break;
 8007c0c:	e01c      	b.n	8007c48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe f972 	bl	8005f16 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7adb      	ldrb	r3, [r3, #11]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c3a:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	4a04      	ldr	r2, [pc, #16]	@ (8007c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8007c40:	f043 0306 	orr.w	r3, r3, #6
 8007c44:	6113      	str	r3, [r2, #16]
    break;
 8007c46:	bf00      	nop
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	e000ed00 	.word	0xe000ed00

08007c54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c5c:	4b03      	ldr	r3, [pc, #12]	@ (8007c6c <USBD_static_malloc+0x18>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20001b50 	.word	0x20001b50

08007c70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]

}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007c88:	f7f8 fad8 	bl	800023c <SystemClock_Config>
}
 8007c8c:	bf00      	nop
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <std>:
 8007c90:	2300      	movs	r3, #0
 8007c92:	b510      	push	{r4, lr}
 8007c94:	4604      	mov	r4, r0
 8007c96:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c9e:	6083      	str	r3, [r0, #8]
 8007ca0:	8181      	strh	r1, [r0, #12]
 8007ca2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ca4:	81c2      	strh	r2, [r0, #14]
 8007ca6:	6183      	str	r3, [r0, #24]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	2208      	movs	r2, #8
 8007cac:	305c      	adds	r0, #92	@ 0x5c
 8007cae:	f000 f9e7 	bl	8008080 <memset>
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce8 <std+0x58>)
 8007cb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <std+0x5c>)
 8007cb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cba:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <std+0x60>)
 8007cbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <std+0x64>)
 8007cc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <std+0x68>)
 8007cc4:	6224      	str	r4, [r4, #32]
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d006      	beq.n	8007cd8 <std+0x48>
 8007cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cce:	4294      	cmp	r4, r2
 8007cd0:	d002      	beq.n	8007cd8 <std+0x48>
 8007cd2:	33d0      	adds	r3, #208	@ 0xd0
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	d105      	bne.n	8007ce4 <std+0x54>
 8007cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce0:	f000 ba46 	b.w	8008170 <__retarget_lock_init_recursive>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	08007ed1 	.word	0x08007ed1
 8007cec:	08007ef3 	.word	0x08007ef3
 8007cf0:	08007f2b 	.word	0x08007f2b
 8007cf4:	08007f4f 	.word	0x08007f4f
 8007cf8:	20001d70 	.word	0x20001d70

08007cfc <stdio_exit_handler>:
 8007cfc:	4a02      	ldr	r2, [pc, #8]	@ (8007d08 <stdio_exit_handler+0xc>)
 8007cfe:	4903      	ldr	r1, [pc, #12]	@ (8007d0c <stdio_exit_handler+0x10>)
 8007d00:	4803      	ldr	r0, [pc, #12]	@ (8007d10 <stdio_exit_handler+0x14>)
 8007d02:	f000 b869 	b.w	8007dd8 <_fwalk_sglue>
 8007d06:	bf00      	nop
 8007d08:	2000010c 	.word	0x2000010c
 8007d0c:	08008471 	.word	0x08008471
 8007d10:	2000011c 	.word	0x2000011c

08007d14 <cleanup_stdio>:
 8007d14:	6841      	ldr	r1, [r0, #4]
 8007d16:	4b0c      	ldr	r3, [pc, #48]	@ (8007d48 <cleanup_stdio+0x34>)
 8007d18:	4299      	cmp	r1, r3
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	d001      	beq.n	8007d24 <cleanup_stdio+0x10>
 8007d20:	f000 fba6 	bl	8008470 <_fflush_r>
 8007d24:	68a1      	ldr	r1, [r4, #8]
 8007d26:	4b09      	ldr	r3, [pc, #36]	@ (8007d4c <cleanup_stdio+0x38>)
 8007d28:	4299      	cmp	r1, r3
 8007d2a:	d002      	beq.n	8007d32 <cleanup_stdio+0x1e>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fb9f 	bl	8008470 <_fflush_r>
 8007d32:	68e1      	ldr	r1, [r4, #12]
 8007d34:	4b06      	ldr	r3, [pc, #24]	@ (8007d50 <cleanup_stdio+0x3c>)
 8007d36:	4299      	cmp	r1, r3
 8007d38:	d004      	beq.n	8007d44 <cleanup_stdio+0x30>
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d40:	f000 bb96 	b.w	8008470 <_fflush_r>
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	bf00      	nop
 8007d48:	20001d70 	.word	0x20001d70
 8007d4c:	20001dd8 	.word	0x20001dd8
 8007d50:	20001e40 	.word	0x20001e40

08007d54 <global_stdio_init.part.0>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <global_stdio_init.part.0+0x30>)
 8007d58:	4c0b      	ldr	r4, [pc, #44]	@ (8007d88 <global_stdio_init.part.0+0x34>)
 8007d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d8c <global_stdio_init.part.0+0x38>)
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	2200      	movs	r2, #0
 8007d62:	2104      	movs	r1, #4
 8007d64:	f7ff ff94 	bl	8007c90 <std>
 8007d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	2109      	movs	r1, #9
 8007d70:	f7ff ff8e 	bl	8007c90 <std>
 8007d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d78:	2202      	movs	r2, #2
 8007d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d7e:	2112      	movs	r1, #18
 8007d80:	f7ff bf86 	b.w	8007c90 <std>
 8007d84:	20001ea8 	.word	0x20001ea8
 8007d88:	20001d70 	.word	0x20001d70
 8007d8c:	08007cfd 	.word	0x08007cfd

08007d90 <__sfp_lock_acquire>:
 8007d90:	4801      	ldr	r0, [pc, #4]	@ (8007d98 <__sfp_lock_acquire+0x8>)
 8007d92:	f000 b9ee 	b.w	8008172 <__retarget_lock_acquire_recursive>
 8007d96:	bf00      	nop
 8007d98:	20001eb1 	.word	0x20001eb1

08007d9c <__sfp_lock_release>:
 8007d9c:	4801      	ldr	r0, [pc, #4]	@ (8007da4 <__sfp_lock_release+0x8>)
 8007d9e:	f000 b9e9 	b.w	8008174 <__retarget_lock_release_recursive>
 8007da2:	bf00      	nop
 8007da4:	20001eb1 	.word	0x20001eb1

08007da8 <__sinit>:
 8007da8:	b510      	push	{r4, lr}
 8007daa:	4604      	mov	r4, r0
 8007dac:	f7ff fff0 	bl	8007d90 <__sfp_lock_acquire>
 8007db0:	6a23      	ldr	r3, [r4, #32]
 8007db2:	b11b      	cbz	r3, 8007dbc <__sinit+0x14>
 8007db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db8:	f7ff bff0 	b.w	8007d9c <__sfp_lock_release>
 8007dbc:	4b04      	ldr	r3, [pc, #16]	@ (8007dd0 <__sinit+0x28>)
 8007dbe:	6223      	str	r3, [r4, #32]
 8007dc0:	4b04      	ldr	r3, [pc, #16]	@ (8007dd4 <__sinit+0x2c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1f5      	bne.n	8007db4 <__sinit+0xc>
 8007dc8:	f7ff ffc4 	bl	8007d54 <global_stdio_init.part.0>
 8007dcc:	e7f2      	b.n	8007db4 <__sinit+0xc>
 8007dce:	bf00      	nop
 8007dd0:	08007d15 	.word	0x08007d15
 8007dd4:	20001ea8 	.word	0x20001ea8

08007dd8 <_fwalk_sglue>:
 8007dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	4607      	mov	r7, r0
 8007dde:	4688      	mov	r8, r1
 8007de0:	4614      	mov	r4, r2
 8007de2:	2600      	movs	r6, #0
 8007de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007de8:	f1b9 0901 	subs.w	r9, r9, #1
 8007dec:	d505      	bpl.n	8007dfa <_fwalk_sglue+0x22>
 8007dee:	6824      	ldr	r4, [r4, #0]
 8007df0:	2c00      	cmp	r4, #0
 8007df2:	d1f7      	bne.n	8007de4 <_fwalk_sglue+0xc>
 8007df4:	4630      	mov	r0, r6
 8007df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d907      	bls.n	8007e10 <_fwalk_sglue+0x38>
 8007e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e04:	3301      	adds	r3, #1
 8007e06:	d003      	beq.n	8007e10 <_fwalk_sglue+0x38>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	47c0      	blx	r8
 8007e0e:	4306      	orrs	r6, r0
 8007e10:	3568      	adds	r5, #104	@ 0x68
 8007e12:	e7e9      	b.n	8007de8 <_fwalk_sglue+0x10>

08007e14 <_puts_r>:
 8007e14:	6a03      	ldr	r3, [r0, #32]
 8007e16:	b570      	push	{r4, r5, r6, lr}
 8007e18:	6884      	ldr	r4, [r0, #8]
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	460e      	mov	r6, r1
 8007e1e:	b90b      	cbnz	r3, 8007e24 <_puts_r+0x10>
 8007e20:	f7ff ffc2 	bl	8007da8 <__sinit>
 8007e24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e26:	07db      	lsls	r3, r3, #31
 8007e28:	d405      	bmi.n	8007e36 <_puts_r+0x22>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	0598      	lsls	r0, r3, #22
 8007e2e:	d402      	bmi.n	8007e36 <_puts_r+0x22>
 8007e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e32:	f000 f99e 	bl	8008172 <__retarget_lock_acquire_recursive>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	0719      	lsls	r1, r3, #28
 8007e3a:	d502      	bpl.n	8007e42 <_puts_r+0x2e>
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d135      	bne.n	8007eae <_puts_r+0x9a>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4628      	mov	r0, r5
 8007e46:	f000 f8c5 	bl	8007fd4 <__swsetup_r>
 8007e4a:	b380      	cbz	r0, 8007eae <_puts_r+0x9a>
 8007e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e52:	07da      	lsls	r2, r3, #31
 8007e54:	d405      	bmi.n	8007e62 <_puts_r+0x4e>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	059b      	lsls	r3, r3, #22
 8007e5a:	d402      	bmi.n	8007e62 <_puts_r+0x4e>
 8007e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e5e:	f000 f989 	bl	8008174 <__retarget_lock_release_recursive>
 8007e62:	4628      	mov	r0, r5
 8007e64:	bd70      	pop	{r4, r5, r6, pc}
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	da04      	bge.n	8007e74 <_puts_r+0x60>
 8007e6a:	69a2      	ldr	r2, [r4, #24]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	dc17      	bgt.n	8007ea0 <_puts_r+0x8c>
 8007e70:	290a      	cmp	r1, #10
 8007e72:	d015      	beq.n	8007ea0 <_puts_r+0x8c>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	7019      	strb	r1, [r3, #0]
 8007e7c:	68a3      	ldr	r3, [r4, #8]
 8007e7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e82:	3b01      	subs	r3, #1
 8007e84:	60a3      	str	r3, [r4, #8]
 8007e86:	2900      	cmp	r1, #0
 8007e88:	d1ed      	bne.n	8007e66 <_puts_r+0x52>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da11      	bge.n	8007eb2 <_puts_r+0x9e>
 8007e8e:	4622      	mov	r2, r4
 8007e90:	210a      	movs	r1, #10
 8007e92:	4628      	mov	r0, r5
 8007e94:	f000 f85f 	bl	8007f56 <__swbuf_r>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d0d7      	beq.n	8007e4c <_puts_r+0x38>
 8007e9c:	250a      	movs	r5, #10
 8007e9e:	e7d7      	b.n	8007e50 <_puts_r+0x3c>
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 f857 	bl	8007f56 <__swbuf_r>
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d1e7      	bne.n	8007e7c <_puts_r+0x68>
 8007eac:	e7ce      	b.n	8007e4c <_puts_r+0x38>
 8007eae:	3e01      	subs	r6, #1
 8007eb0:	e7e4      	b.n	8007e7c <_puts_r+0x68>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	6022      	str	r2, [r4, #0]
 8007eb8:	220a      	movs	r2, #10
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e7ee      	b.n	8007e9c <_puts_r+0x88>
	...

08007ec0 <puts>:
 8007ec0:	4b02      	ldr	r3, [pc, #8]	@ (8007ecc <puts+0xc>)
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	f7ff bfa5 	b.w	8007e14 <_puts_r>
 8007eca:	bf00      	nop
 8007ecc:	20000118 	.word	0x20000118

08007ed0 <__sread>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	f000 f8fc 	bl	80080d4 <_read_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	bfab      	itete	ge
 8007ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee4:	181b      	addge	r3, r3, r0
 8007ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eea:	bfac      	ite	ge
 8007eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eee:	81a3      	strhlt	r3, [r4, #12]
 8007ef0:	bd10      	pop	{r4, pc}

08007ef2 <__swrite>:
 8007ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	898b      	ldrh	r3, [r1, #12]
 8007efa:	05db      	lsls	r3, r3, #23
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	4616      	mov	r6, r2
 8007f02:	d505      	bpl.n	8007f10 <__swrite+0x1e>
 8007f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f08:	2302      	movs	r3, #2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f000 f8d0 	bl	80080b0 <_lseek_r>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	463b      	mov	r3, r7
 8007f20:	4628      	mov	r0, r5
 8007f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f26:	f000 b8e7 	b.w	80080f8 <_write_r>

08007f2a <__sseek>:
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f32:	f000 f8bd 	bl	80080b0 <_lseek_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	bf15      	itete	ne
 8007f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f46:	81a3      	strheq	r3, [r4, #12]
 8007f48:	bf18      	it	ne
 8007f4a:	81a3      	strhne	r3, [r4, #12]
 8007f4c:	bd10      	pop	{r4, pc}

08007f4e <__sclose>:
 8007f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f52:	f000 b89d 	b.w	8008090 <_close_r>

08007f56 <__swbuf_r>:
 8007f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f58:	460e      	mov	r6, r1
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	b118      	cbz	r0, 8007f68 <__swbuf_r+0x12>
 8007f60:	6a03      	ldr	r3, [r0, #32]
 8007f62:	b90b      	cbnz	r3, 8007f68 <__swbuf_r+0x12>
 8007f64:	f7ff ff20 	bl	8007da8 <__sinit>
 8007f68:	69a3      	ldr	r3, [r4, #24]
 8007f6a:	60a3      	str	r3, [r4, #8]
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	071a      	lsls	r2, r3, #28
 8007f70:	d501      	bpl.n	8007f76 <__swbuf_r+0x20>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	b943      	cbnz	r3, 8007f88 <__swbuf_r+0x32>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f82b 	bl	8007fd4 <__swsetup_r>
 8007f7e:	b118      	cbz	r0, 8007f88 <__swbuf_r+0x32>
 8007f80:	f04f 37ff 	mov.w	r7, #4294967295
 8007f84:	4638      	mov	r0, r7
 8007f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	1a98      	subs	r0, r3, r2
 8007f8e:	6963      	ldr	r3, [r4, #20]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	4283      	cmp	r3, r0
 8007f94:	4637      	mov	r7, r6
 8007f96:	dc05      	bgt.n	8007fa4 <__swbuf_r+0x4e>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 fa68 	bl	8008470 <_fflush_r>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d1ed      	bne.n	8007f80 <__swbuf_r+0x2a>
 8007fa4:	68a3      	ldr	r3, [r4, #8]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	60a3      	str	r3, [r4, #8]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	701e      	strb	r6, [r3, #0]
 8007fb2:	6962      	ldr	r2, [r4, #20]
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d004      	beq.n	8007fc4 <__swbuf_r+0x6e>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	07db      	lsls	r3, r3, #31
 8007fbe:	d5e1      	bpl.n	8007f84 <__swbuf_r+0x2e>
 8007fc0:	2e0a      	cmp	r6, #10
 8007fc2:	d1df      	bne.n	8007f84 <__swbuf_r+0x2e>
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 fa52 	bl	8008470 <_fflush_r>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d0d9      	beq.n	8007f84 <__swbuf_r+0x2e>
 8007fd0:	e7d6      	b.n	8007f80 <__swbuf_r+0x2a>
	...

08007fd4 <__swsetup_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4b29      	ldr	r3, [pc, #164]	@ (800807c <__swsetup_r+0xa8>)
 8007fd8:	4605      	mov	r5, r0
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	460c      	mov	r4, r1
 8007fde:	b118      	cbz	r0, 8007fe8 <__swsetup_r+0x14>
 8007fe0:	6a03      	ldr	r3, [r0, #32]
 8007fe2:	b90b      	cbnz	r3, 8007fe8 <__swsetup_r+0x14>
 8007fe4:	f7ff fee0 	bl	8007da8 <__sinit>
 8007fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fec:	0719      	lsls	r1, r3, #28
 8007fee:	d422      	bmi.n	8008036 <__swsetup_r+0x62>
 8007ff0:	06da      	lsls	r2, r3, #27
 8007ff2:	d407      	bmi.n	8008004 <__swsetup_r+0x30>
 8007ff4:	2209      	movs	r2, #9
 8007ff6:	602a      	str	r2, [r5, #0]
 8007ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8008002:	e033      	b.n	800806c <__swsetup_r+0x98>
 8008004:	0758      	lsls	r0, r3, #29
 8008006:	d512      	bpl.n	800802e <__swsetup_r+0x5a>
 8008008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800800a:	b141      	cbz	r1, 800801e <__swsetup_r+0x4a>
 800800c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008010:	4299      	cmp	r1, r3
 8008012:	d002      	beq.n	800801a <__swsetup_r+0x46>
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f8af 	bl	8008178 <_free_r>
 800801a:	2300      	movs	r3, #0
 800801c:	6363      	str	r3, [r4, #52]	@ 0x34
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	2300      	movs	r3, #0
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f043 0308 	orr.w	r3, r3, #8
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	b94b      	cbnz	r3, 800804e <__swsetup_r+0x7a>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008044:	d003      	beq.n	800804e <__swsetup_r+0x7a>
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f000 fa5f 	bl	800850c <__smakebuf_r>
 800804e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008052:	f013 0201 	ands.w	r2, r3, #1
 8008056:	d00a      	beq.n	800806e <__swsetup_r+0x9a>
 8008058:	2200      	movs	r2, #0
 800805a:	60a2      	str	r2, [r4, #8]
 800805c:	6962      	ldr	r2, [r4, #20]
 800805e:	4252      	negs	r2, r2
 8008060:	61a2      	str	r2, [r4, #24]
 8008062:	6922      	ldr	r2, [r4, #16]
 8008064:	b942      	cbnz	r2, 8008078 <__swsetup_r+0xa4>
 8008066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800806a:	d1c5      	bne.n	8007ff8 <__swsetup_r+0x24>
 800806c:	bd38      	pop	{r3, r4, r5, pc}
 800806e:	0799      	lsls	r1, r3, #30
 8008070:	bf58      	it	pl
 8008072:	6962      	ldrpl	r2, [r4, #20]
 8008074:	60a2      	str	r2, [r4, #8]
 8008076:	e7f4      	b.n	8008062 <__swsetup_r+0x8e>
 8008078:	2000      	movs	r0, #0
 800807a:	e7f7      	b.n	800806c <__swsetup_r+0x98>
 800807c:	20000118 	.word	0x20000118

08008080 <memset>:
 8008080:	4402      	add	r2, r0
 8008082:	4603      	mov	r3, r0
 8008084:	4293      	cmp	r3, r2
 8008086:	d100      	bne.n	800808a <memset+0xa>
 8008088:	4770      	bx	lr
 800808a:	f803 1b01 	strb.w	r1, [r3], #1
 800808e:	e7f9      	b.n	8008084 <memset+0x4>

08008090 <_close_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	@ (80080ac <_close_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7f8 fa51 	bl	8000542 <_close>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_close_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_close_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20001eac 	.word	0x20001eac

080080b0 <_lseek_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	@ (80080d0 <_lseek_r+0x20>)
 80080b4:	4604      	mov	r4, r0
 80080b6:	4608      	mov	r0, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7f8 fa66 	bl	8000590 <_lseek>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_lseek_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_lseek_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20001eac 	.word	0x20001eac

080080d4 <_read_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	@ (80080f4 <_read_r+0x20>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7f8 fa10 	bl	8000508 <_read>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_read_r+0x1e>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_read_r+0x1e>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	20001eac 	.word	0x20001eac

080080f8 <_write_r>:
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4d07      	ldr	r5, [pc, #28]	@ (8008118 <_write_r+0x20>)
 80080fc:	4604      	mov	r4, r0
 80080fe:	4608      	mov	r0, r1
 8008100:	4611      	mov	r1, r2
 8008102:	2200      	movs	r2, #0
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f7f8 f988 	bl	800041c <_write>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_write_r+0x1e>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_write_r+0x1e>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	20001eac 	.word	0x20001eac

0800811c <__errno>:
 800811c:	4b01      	ldr	r3, [pc, #4]	@ (8008124 <__errno+0x8>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000118 	.word	0x20000118

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	@ (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	@ (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	@ (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	@ (800816c <__libc_init_array+0x44>)
 800813c:	f000 fa54 	bl	80085e8 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	0800868c 	.word	0x0800868c
 8008164:	0800868c 	.word	0x0800868c
 8008168:	0800868c 	.word	0x0800868c
 800816c:	08008690 	.word	0x08008690

08008170 <__retarget_lock_init_recursive>:
 8008170:	4770      	bx	lr

08008172 <__retarget_lock_acquire_recursive>:
 8008172:	4770      	bx	lr

08008174 <__retarget_lock_release_recursive>:
 8008174:	4770      	bx	lr
	...

08008178 <_free_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4605      	mov	r5, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	d041      	beq.n	8008204 <_free_r+0x8c>
 8008180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008184:	1f0c      	subs	r4, r1, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfb8      	it	lt
 800818a:	18e4      	addlt	r4, r4, r3
 800818c:	f000 f8e0 	bl	8008350 <__malloc_lock>
 8008190:	4a1d      	ldr	r2, [pc, #116]	@ (8008208 <_free_r+0x90>)
 8008192:	6813      	ldr	r3, [r2, #0]
 8008194:	b933      	cbnz	r3, 80081a4 <_free_r+0x2c>
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	6014      	str	r4, [r2, #0]
 800819a:	4628      	mov	r0, r5
 800819c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a0:	f000 b8dc 	b.w	800835c <__malloc_unlock>
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	d908      	bls.n	80081ba <_free_r+0x42>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	1821      	adds	r1, r4, r0
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf01      	itttt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	1809      	addeq	r1, r1, r0
 80081b6:	6021      	streq	r1, [r4, #0]
 80081b8:	e7ed      	b.n	8008196 <_free_r+0x1e>
 80081ba:	461a      	mov	r2, r3
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	b10b      	cbz	r3, 80081c4 <_free_r+0x4c>
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d9fa      	bls.n	80081ba <_free_r+0x42>
 80081c4:	6811      	ldr	r1, [r2, #0]
 80081c6:	1850      	adds	r0, r2, r1
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d10b      	bne.n	80081e4 <_free_r+0x6c>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	4401      	add	r1, r0
 80081d0:	1850      	adds	r0, r2, r1
 80081d2:	4283      	cmp	r3, r0
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	d1e0      	bne.n	800819a <_free_r+0x22>
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	6053      	str	r3, [r2, #4]
 80081de:	4408      	add	r0, r1
 80081e0:	6010      	str	r0, [r2, #0]
 80081e2:	e7da      	b.n	800819a <_free_r+0x22>
 80081e4:	d902      	bls.n	80081ec <_free_r+0x74>
 80081e6:	230c      	movs	r3, #12
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	e7d6      	b.n	800819a <_free_r+0x22>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	1821      	adds	r1, r4, r0
 80081f0:	428b      	cmp	r3, r1
 80081f2:	bf04      	itt	eq
 80081f4:	6819      	ldreq	r1, [r3, #0]
 80081f6:	685b      	ldreq	r3, [r3, #4]
 80081f8:	6063      	str	r3, [r4, #4]
 80081fa:	bf04      	itt	eq
 80081fc:	1809      	addeq	r1, r1, r0
 80081fe:	6021      	streq	r1, [r4, #0]
 8008200:	6054      	str	r4, [r2, #4]
 8008202:	e7ca      	b.n	800819a <_free_r+0x22>
 8008204:	bd38      	pop	{r3, r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	20001eb8 	.word	0x20001eb8

0800820c <sbrk_aligned>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	4e0f      	ldr	r6, [pc, #60]	@ (800824c <sbrk_aligned+0x40>)
 8008210:	460c      	mov	r4, r1
 8008212:	6831      	ldr	r1, [r6, #0]
 8008214:	4605      	mov	r5, r0
 8008216:	b911      	cbnz	r1, 800821e <sbrk_aligned+0x12>
 8008218:	f000 f9d6 	bl	80085c8 <_sbrk_r>
 800821c:	6030      	str	r0, [r6, #0]
 800821e:	4621      	mov	r1, r4
 8008220:	4628      	mov	r0, r5
 8008222:	f000 f9d1 	bl	80085c8 <_sbrk_r>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d103      	bne.n	8008232 <sbrk_aligned+0x26>
 800822a:	f04f 34ff 	mov.w	r4, #4294967295
 800822e:	4620      	mov	r0, r4
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	1cc4      	adds	r4, r0, #3
 8008234:	f024 0403 	bic.w	r4, r4, #3
 8008238:	42a0      	cmp	r0, r4
 800823a:	d0f8      	beq.n	800822e <sbrk_aligned+0x22>
 800823c:	1a21      	subs	r1, r4, r0
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f9c2 	bl	80085c8 <_sbrk_r>
 8008244:	3001      	adds	r0, #1
 8008246:	d1f2      	bne.n	800822e <sbrk_aligned+0x22>
 8008248:	e7ef      	b.n	800822a <sbrk_aligned+0x1e>
 800824a:	bf00      	nop
 800824c:	20001eb4 	.word	0x20001eb4

08008250 <_malloc_r>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	1ccd      	adds	r5, r1, #3
 8008256:	f025 0503 	bic.w	r5, r5, #3
 800825a:	3508      	adds	r5, #8
 800825c:	2d0c      	cmp	r5, #12
 800825e:	bf38      	it	cc
 8008260:	250c      	movcc	r5, #12
 8008262:	2d00      	cmp	r5, #0
 8008264:	4606      	mov	r6, r0
 8008266:	db01      	blt.n	800826c <_malloc_r+0x1c>
 8008268:	42a9      	cmp	r1, r5
 800826a:	d904      	bls.n	8008276 <_malloc_r+0x26>
 800826c:	230c      	movs	r3, #12
 800826e:	6033      	str	r3, [r6, #0]
 8008270:	2000      	movs	r0, #0
 8008272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800834c <_malloc_r+0xfc>
 800827a:	f000 f869 	bl	8008350 <__malloc_lock>
 800827e:	f8d8 3000 	ldr.w	r3, [r8]
 8008282:	461c      	mov	r4, r3
 8008284:	bb44      	cbnz	r4, 80082d8 <_malloc_r+0x88>
 8008286:	4629      	mov	r1, r5
 8008288:	4630      	mov	r0, r6
 800828a:	f7ff ffbf 	bl	800820c <sbrk_aligned>
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	4604      	mov	r4, r0
 8008292:	d158      	bne.n	8008346 <_malloc_r+0xf6>
 8008294:	f8d8 4000 	ldr.w	r4, [r8]
 8008298:	4627      	mov	r7, r4
 800829a:	2f00      	cmp	r7, #0
 800829c:	d143      	bne.n	8008326 <_malloc_r+0xd6>
 800829e:	2c00      	cmp	r4, #0
 80082a0:	d04b      	beq.n	800833a <_malloc_r+0xea>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	4639      	mov	r1, r7
 80082a6:	4630      	mov	r0, r6
 80082a8:	eb04 0903 	add.w	r9, r4, r3
 80082ac:	f000 f98c 	bl	80085c8 <_sbrk_r>
 80082b0:	4581      	cmp	r9, r0
 80082b2:	d142      	bne.n	800833a <_malloc_r+0xea>
 80082b4:	6821      	ldr	r1, [r4, #0]
 80082b6:	1a6d      	subs	r5, r5, r1
 80082b8:	4629      	mov	r1, r5
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7ff ffa6 	bl	800820c <sbrk_aligned>
 80082c0:	3001      	adds	r0, #1
 80082c2:	d03a      	beq.n	800833a <_malloc_r+0xea>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	442b      	add	r3, r5
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	f8d8 3000 	ldr.w	r3, [r8]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	bb62      	cbnz	r2, 800832c <_malloc_r+0xdc>
 80082d2:	f8c8 7000 	str.w	r7, [r8]
 80082d6:	e00f      	b.n	80082f8 <_malloc_r+0xa8>
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	1b52      	subs	r2, r2, r5
 80082dc:	d420      	bmi.n	8008320 <_malloc_r+0xd0>
 80082de:	2a0b      	cmp	r2, #11
 80082e0:	d917      	bls.n	8008312 <_malloc_r+0xc2>
 80082e2:	1961      	adds	r1, r4, r5
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	6025      	str	r5, [r4, #0]
 80082e8:	bf18      	it	ne
 80082ea:	6059      	strne	r1, [r3, #4]
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	bf08      	it	eq
 80082f0:	f8c8 1000 	streq.w	r1, [r8]
 80082f4:	5162      	str	r2, [r4, r5]
 80082f6:	604b      	str	r3, [r1, #4]
 80082f8:	4630      	mov	r0, r6
 80082fa:	f000 f82f 	bl	800835c <__malloc_unlock>
 80082fe:	f104 000b 	add.w	r0, r4, #11
 8008302:	1d23      	adds	r3, r4, #4
 8008304:	f020 0007 	bic.w	r0, r0, #7
 8008308:	1ac2      	subs	r2, r0, r3
 800830a:	bf1c      	itt	ne
 800830c:	1a1b      	subne	r3, r3, r0
 800830e:	50a3      	strne	r3, [r4, r2]
 8008310:	e7af      	b.n	8008272 <_malloc_r+0x22>
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	42a3      	cmp	r3, r4
 8008316:	bf0c      	ite	eq
 8008318:	f8c8 2000 	streq.w	r2, [r8]
 800831c:	605a      	strne	r2, [r3, #4]
 800831e:	e7eb      	b.n	80082f8 <_malloc_r+0xa8>
 8008320:	4623      	mov	r3, r4
 8008322:	6864      	ldr	r4, [r4, #4]
 8008324:	e7ae      	b.n	8008284 <_malloc_r+0x34>
 8008326:	463c      	mov	r4, r7
 8008328:	687f      	ldr	r7, [r7, #4]
 800832a:	e7b6      	b.n	800829a <_malloc_r+0x4a>
 800832c:	461a      	mov	r2, r3
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	42a3      	cmp	r3, r4
 8008332:	d1fb      	bne.n	800832c <_malloc_r+0xdc>
 8008334:	2300      	movs	r3, #0
 8008336:	6053      	str	r3, [r2, #4]
 8008338:	e7de      	b.n	80082f8 <_malloc_r+0xa8>
 800833a:	230c      	movs	r3, #12
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	4630      	mov	r0, r6
 8008340:	f000 f80c 	bl	800835c <__malloc_unlock>
 8008344:	e794      	b.n	8008270 <_malloc_r+0x20>
 8008346:	6005      	str	r5, [r0, #0]
 8008348:	e7d6      	b.n	80082f8 <_malloc_r+0xa8>
 800834a:	bf00      	nop
 800834c:	20001eb8 	.word	0x20001eb8

08008350 <__malloc_lock>:
 8008350:	4801      	ldr	r0, [pc, #4]	@ (8008358 <__malloc_lock+0x8>)
 8008352:	f7ff bf0e 	b.w	8008172 <__retarget_lock_acquire_recursive>
 8008356:	bf00      	nop
 8008358:	20001eb0 	.word	0x20001eb0

0800835c <__malloc_unlock>:
 800835c:	4801      	ldr	r0, [pc, #4]	@ (8008364 <__malloc_unlock+0x8>)
 800835e:	f7ff bf09 	b.w	8008174 <__retarget_lock_release_recursive>
 8008362:	bf00      	nop
 8008364:	20001eb0 	.word	0x20001eb0

08008368 <__sflush_r>:
 8008368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	0716      	lsls	r6, r2, #28
 8008372:	4605      	mov	r5, r0
 8008374:	460c      	mov	r4, r1
 8008376:	d454      	bmi.n	8008422 <__sflush_r+0xba>
 8008378:	684b      	ldr	r3, [r1, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc02      	bgt.n	8008384 <__sflush_r+0x1c>
 800837e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	dd48      	ble.n	8008416 <__sflush_r+0xae>
 8008384:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008386:	2e00      	cmp	r6, #0
 8008388:	d045      	beq.n	8008416 <__sflush_r+0xae>
 800838a:	2300      	movs	r3, #0
 800838c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008390:	682f      	ldr	r7, [r5, #0]
 8008392:	6a21      	ldr	r1, [r4, #32]
 8008394:	602b      	str	r3, [r5, #0]
 8008396:	d030      	beq.n	80083fa <__sflush_r+0x92>
 8008398:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	0759      	lsls	r1, r3, #29
 800839e:	d505      	bpl.n	80083ac <__sflush_r+0x44>
 80083a0:	6863      	ldr	r3, [r4, #4]
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083a6:	b10b      	cbz	r3, 80083ac <__sflush_r+0x44>
 80083a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	2300      	movs	r3, #0
 80083ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083b0:	6a21      	ldr	r1, [r4, #32]
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b0      	blx	r6
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	d106      	bne.n	80083ca <__sflush_r+0x62>
 80083bc:	6829      	ldr	r1, [r5, #0]
 80083be:	291d      	cmp	r1, #29
 80083c0:	d82b      	bhi.n	800841a <__sflush_r+0xb2>
 80083c2:	4a2a      	ldr	r2, [pc, #168]	@ (800846c <__sflush_r+0x104>)
 80083c4:	410a      	asrs	r2, r1
 80083c6:	07d6      	lsls	r6, r2, #31
 80083c8:	d427      	bmi.n	800841a <__sflush_r+0xb2>
 80083ca:	2200      	movs	r2, #0
 80083cc:	6062      	str	r2, [r4, #4]
 80083ce:	04d9      	lsls	r1, r3, #19
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	6022      	str	r2, [r4, #0]
 80083d4:	d504      	bpl.n	80083e0 <__sflush_r+0x78>
 80083d6:	1c42      	adds	r2, r0, #1
 80083d8:	d101      	bne.n	80083de <__sflush_r+0x76>
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b903      	cbnz	r3, 80083e0 <__sflush_r+0x78>
 80083de:	6560      	str	r0, [r4, #84]	@ 0x54
 80083e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083e2:	602f      	str	r7, [r5, #0]
 80083e4:	b1b9      	cbz	r1, 8008416 <__sflush_r+0xae>
 80083e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083ea:	4299      	cmp	r1, r3
 80083ec:	d002      	beq.n	80083f4 <__sflush_r+0x8c>
 80083ee:	4628      	mov	r0, r5
 80083f0:	f7ff fec2 	bl	8008178 <_free_r>
 80083f4:	2300      	movs	r3, #0
 80083f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f8:	e00d      	b.n	8008416 <__sflush_r+0xae>
 80083fa:	2301      	movs	r3, #1
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b0      	blx	r6
 8008400:	4602      	mov	r2, r0
 8008402:	1c50      	adds	r0, r2, #1
 8008404:	d1c9      	bne.n	800839a <__sflush_r+0x32>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0c6      	beq.n	800839a <__sflush_r+0x32>
 800840c:	2b1d      	cmp	r3, #29
 800840e:	d001      	beq.n	8008414 <__sflush_r+0xac>
 8008410:	2b16      	cmp	r3, #22
 8008412:	d11e      	bne.n	8008452 <__sflush_r+0xea>
 8008414:	602f      	str	r7, [r5, #0]
 8008416:	2000      	movs	r0, #0
 8008418:	e022      	b.n	8008460 <__sflush_r+0xf8>
 800841a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800841e:	b21b      	sxth	r3, r3
 8008420:	e01b      	b.n	800845a <__sflush_r+0xf2>
 8008422:	690f      	ldr	r7, [r1, #16]
 8008424:	2f00      	cmp	r7, #0
 8008426:	d0f6      	beq.n	8008416 <__sflush_r+0xae>
 8008428:	0793      	lsls	r3, r2, #30
 800842a:	680e      	ldr	r6, [r1, #0]
 800842c:	bf08      	it	eq
 800842e:	694b      	ldreq	r3, [r1, #20]
 8008430:	600f      	str	r7, [r1, #0]
 8008432:	bf18      	it	ne
 8008434:	2300      	movne	r3, #0
 8008436:	eba6 0807 	sub.w	r8, r6, r7
 800843a:	608b      	str	r3, [r1, #8]
 800843c:	f1b8 0f00 	cmp.w	r8, #0
 8008440:	dde9      	ble.n	8008416 <__sflush_r+0xae>
 8008442:	6a21      	ldr	r1, [r4, #32]
 8008444:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008446:	4643      	mov	r3, r8
 8008448:	463a      	mov	r2, r7
 800844a:	4628      	mov	r0, r5
 800844c:	47b0      	blx	r6
 800844e:	2800      	cmp	r0, #0
 8008450:	dc08      	bgt.n	8008464 <__sflush_r+0xfc>
 8008452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	f04f 30ff 	mov.w	r0, #4294967295
 8008460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008464:	4407      	add	r7, r0
 8008466:	eba8 0800 	sub.w	r8, r8, r0
 800846a:	e7e7      	b.n	800843c <__sflush_r+0xd4>
 800846c:	dfbffffe 	.word	0xdfbffffe

08008470 <_fflush_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	690b      	ldr	r3, [r1, #16]
 8008474:	4605      	mov	r5, r0
 8008476:	460c      	mov	r4, r1
 8008478:	b913      	cbnz	r3, 8008480 <_fflush_r+0x10>
 800847a:	2500      	movs	r5, #0
 800847c:	4628      	mov	r0, r5
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	b118      	cbz	r0, 800848a <_fflush_r+0x1a>
 8008482:	6a03      	ldr	r3, [r0, #32]
 8008484:	b90b      	cbnz	r3, 800848a <_fflush_r+0x1a>
 8008486:	f7ff fc8f 	bl	8007da8 <__sinit>
 800848a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0f3      	beq.n	800847a <_fflush_r+0xa>
 8008492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008494:	07d0      	lsls	r0, r2, #31
 8008496:	d404      	bmi.n	80084a2 <_fflush_r+0x32>
 8008498:	0599      	lsls	r1, r3, #22
 800849a:	d402      	bmi.n	80084a2 <_fflush_r+0x32>
 800849c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800849e:	f7ff fe68 	bl	8008172 <__retarget_lock_acquire_recursive>
 80084a2:	4628      	mov	r0, r5
 80084a4:	4621      	mov	r1, r4
 80084a6:	f7ff ff5f 	bl	8008368 <__sflush_r>
 80084aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084ac:	07da      	lsls	r2, r3, #31
 80084ae:	4605      	mov	r5, r0
 80084b0:	d4e4      	bmi.n	800847c <_fflush_r+0xc>
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	059b      	lsls	r3, r3, #22
 80084b6:	d4e1      	bmi.n	800847c <_fflush_r+0xc>
 80084b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ba:	f7ff fe5b 	bl	8008174 <__retarget_lock_release_recursive>
 80084be:	e7dd      	b.n	800847c <_fflush_r+0xc>

080084c0 <__swhatbuf_r>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	460c      	mov	r4, r1
 80084c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c8:	2900      	cmp	r1, #0
 80084ca:	b096      	sub	sp, #88	@ 0x58
 80084cc:	4615      	mov	r5, r2
 80084ce:	461e      	mov	r6, r3
 80084d0:	da0d      	bge.n	80084ee <__swhatbuf_r+0x2e>
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084d8:	f04f 0100 	mov.w	r1, #0
 80084dc:	bf14      	ite	ne
 80084de:	2340      	movne	r3, #64	@ 0x40
 80084e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084e4:	2000      	movs	r0, #0
 80084e6:	6031      	str	r1, [r6, #0]
 80084e8:	602b      	str	r3, [r5, #0]
 80084ea:	b016      	add	sp, #88	@ 0x58
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
 80084ee:	466a      	mov	r2, sp
 80084f0:	f000 f848 	bl	8008584 <_fstat_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dbec      	blt.n	80084d2 <__swhatbuf_r+0x12>
 80084f8:	9901      	ldr	r1, [sp, #4]
 80084fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008502:	4259      	negs	r1, r3
 8008504:	4159      	adcs	r1, r3
 8008506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800850a:	e7eb      	b.n	80084e4 <__swhatbuf_r+0x24>

0800850c <__smakebuf_r>:
 800850c:	898b      	ldrh	r3, [r1, #12]
 800850e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008510:	079d      	lsls	r5, r3, #30
 8008512:	4606      	mov	r6, r0
 8008514:	460c      	mov	r4, r1
 8008516:	d507      	bpl.n	8008528 <__smakebuf_r+0x1c>
 8008518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	6123      	str	r3, [r4, #16]
 8008520:	2301      	movs	r3, #1
 8008522:	6163      	str	r3, [r4, #20]
 8008524:	b003      	add	sp, #12
 8008526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008528:	ab01      	add	r3, sp, #4
 800852a:	466a      	mov	r2, sp
 800852c:	f7ff ffc8 	bl	80084c0 <__swhatbuf_r>
 8008530:	9f00      	ldr	r7, [sp, #0]
 8008532:	4605      	mov	r5, r0
 8008534:	4639      	mov	r1, r7
 8008536:	4630      	mov	r0, r6
 8008538:	f7ff fe8a 	bl	8008250 <_malloc_r>
 800853c:	b948      	cbnz	r0, 8008552 <__smakebuf_r+0x46>
 800853e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008542:	059a      	lsls	r2, r3, #22
 8008544:	d4ee      	bmi.n	8008524 <__smakebuf_r+0x18>
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	f043 0302 	orr.w	r3, r3, #2
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	e7e2      	b.n	8008518 <__smakebuf_r+0xc>
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	6020      	str	r0, [r4, #0]
 8008556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008562:	b15b      	cbz	r3, 800857c <__smakebuf_r+0x70>
 8008564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008568:	4630      	mov	r0, r6
 800856a:	f000 f81d 	bl	80085a8 <_isatty_r>
 800856e:	b128      	cbz	r0, 800857c <__smakebuf_r+0x70>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	431d      	orrs	r5, r3
 8008580:	81a5      	strh	r5, [r4, #12]
 8008582:	e7cf      	b.n	8008524 <__smakebuf_r+0x18>

08008584 <_fstat_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	@ (80085a4 <_fstat_r+0x20>)
 8008588:	2300      	movs	r3, #0
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f7f7 ffe2 	bl	800055a <_fstat>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d102      	bne.n	80085a0 <_fstat_r+0x1c>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	b103      	cbz	r3, 80085a0 <_fstat_r+0x1c>
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	20001eac 	.word	0x20001eac

080085a8 <_isatty_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d06      	ldr	r5, [pc, #24]	@ (80085c4 <_isatty_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	f7f7 ffe1 	bl	800057a <_isatty>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_isatty_r+0x1a>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_isatty_r+0x1a>
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	20001eac 	.word	0x20001eac

080085c8 <_sbrk_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d06      	ldr	r5, [pc, #24]	@ (80085e4 <_sbrk_r+0x1c>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7f7 ffea 	bl	80005ac <_sbrk>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_sbrk_r+0x1a>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_sbrk_r+0x1a>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20001eac 	.word	0x20001eac

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr


Science_Module_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0800b1a8  0800b1a8  0000c1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b46c  0800b46c  0000d168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b46c  0800b46c  0000c46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b474  0800b474  0000d168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b474  0800b474  0000c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b478  0800b478  0000c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800b47c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e9c  20000168  0800b5e4  0000d168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002004  0800b5e4  0000e004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e42  00000000  00000000  0000d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b5  00000000  00000000  00023fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00027990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001005  00000000  00000000  00028ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f056  00000000  00000000  00029ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019349  00000000  00000000  00058efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110bf6  00000000  00000000  00072244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006458  00000000  00000000  00182e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001892d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000168 	.word	0x20000168
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b190 	.word	0x0800b190

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000016c 	.word	0x2000016c
 80001fc:	0800b190 	.word	0x0800b190

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	@ 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2uiz>:
 800089c:	004a      	lsls	r2, r1, #1
 800089e:	d211      	bcs.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008a4:	d211      	bcs.n	80008ca <__aeabi_d2uiz+0x2e>
 80008a6:	d50d      	bpl.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b0:	d40e      	bmi.n	80008d0 <__aeabi_d2uiz+0x34>
 80008b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008be:	fa23 f002 	lsr.w	r0, r3, r2
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ce:	d102      	bne.n	80008d6 <__aeabi_d2uiz+0x3a>
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	4770      	bx	lr
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	4770      	bx	lr

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fe1d 	bl	800151e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f826 	bl	8000934 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f8a8 	bl	8000a3c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008ec:	f007 fde2 	bl	80084b4 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80008f0:	f000 f86e 	bl	80009d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  DWT_DelayInit();
 80008f4:	f000 f956 	bl	8000ba4 <DWT_DelayInit>
  HAL_Delay(1000);
 80008f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008fc:	f000 fe84 	bl	8001608 <HAL_Delay>
  printf("> ");
 8000900:	480a      	ldr	r0, [pc, #40]	@ (800092c <main+0x50>)
 8000902:	f008 fefd 	bl	8009700 <iprintf>

  // begin timer6 ISR
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <main+0x54>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f06f 0201 	mvn.w	r2, #1
 800090e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8000910:	4807      	ldr	r0, [pc, #28]	@ (8000930 <main+0x54>)
 8000912:	f004 f87d 	bl	8004a10 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Update_LED();
 8000916:	f000 f999 	bl	8000c4c <Update_LED>
    PumpCtrl();
 800091a:	f000 fa03 	bl	8000d24 <PumpCtrl>
    ValveCtrl();
 800091e:	f000 fbb1 	bl	8001084 <ValveCtrl>
    Timer6_test();
 8000922:	f000 f9bf 	bl	8000ca4 <Timer6_test>
    Update_LED();
 8000926:	bf00      	nop
 8000928:	e7f5      	b.n	8000916 <main+0x3a>
 800092a:	bf00      	nop
 800092c:	0800b1a8 	.word	0x0800b1a8
 8000930:	20000184 	.word	0x20000184

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b098      	sub	sp, #96	@ 0x60
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2248      	movs	r2, #72	@ 0x48
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f009 f870 	bl	8009a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000956:	2000      	movs	r0, #0
 8000958:	f002 faec 	bl	8002f34 <HAL_PWREx_ControlVoltageScaling>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000962:	f000 fc85 	bl	8001270 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000974:	2303      	movs	r3, #3
 8000976:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 800097c:	231e      	movs	r3, #30
 800097e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fb83 	bl	800309c <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800099c:	f000 fc68 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2303      	movs	r3, #3
 80009a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2105      	movs	r1, #5
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 ffeb 	bl	8003994 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c4:	f000 fc54 	bl	8001270 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3760      	adds	r7, #96	@ 0x60
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_TIM6_Init+0x64>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	@ (8000a38 <MX_TIM6_Init+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_TIM6_Init+0x64>)
 80009e8:	2277      	movs	r2, #119	@ 0x77
 80009ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_TIM6_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_TIM6_Init+0x64>)
 80009f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_TIM6_Init+0x64>)
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <MX_TIM6_Init+0x64>)
 8000a02:	f003 ffad 	bl	8004960 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a0c:	f000 fc30 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_TIM6_Init+0x64>)
 8000a1e:	f004 fa3d 	bl	8004e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fc22 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000184 	.word	0x20000184
 8000a38:	40001000 	.word	0x40001000

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b48      	ldr	r3, [pc, #288]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a47      	ldr	r2, [pc, #284]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b45      	ldr	r3, [pc, #276]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a41      	ldr	r2, [pc, #260]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b3f      	ldr	r3, [pc, #252]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b3c      	ldr	r3, [pc, #240]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a3b      	ldr	r2, [pc, #236]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a35      	ldr	r2, [pc, #212]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VAL3_Pin|VAL2_Pin|VAL1_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000ab8:	482f      	ldr	r0, [pc, #188]	@ (8000b78 <MX_GPIO_Init+0x13c>)
 8000aba:	f001 f86d 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SM_EN_Pin|SM_DIR_Pin|SM_PUL_Pin|AM_EN_Pin
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f001 f866 	bl	8001b98 <HAL_GPIO_WritePin>
                          |VM_EN_Pin|P1_LS_RL_Pin|P1_LS_LR_Pin|P1_HS_LR_Pin
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_HS_RL_Pin|P2_HS_RL_Pin|P2_HS_LR_Pin|P2_LS_RL_Pin
 8000acc:	2200      	movs	r2, #0
 8000ace:	f64f 017f 	movw	r1, #63615	@ 0xf87f
 8000ad2:	482a      	ldr	r0, [pc, #168]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000ad4:	f001 f860 	bl	8001b98 <HAL_GPIO_WritePin>
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|VAL6_Pin|VAL5_Pin|VAL4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VAL3_Pin VAL2_Pin VAL1_Pin */
  GPIO_InitStruct.Pin = VAL3_Pin|VAL2_Pin|VAL1_Pin;
 8000ad8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4821      	ldr	r0, [pc, #132]	@ (8000b78 <MX_GPIO_Init+0x13c>)
 8000af2:	f000 febf 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM_EN_Pin SM_DIR_Pin SM_PUL_Pin AM_EN_Pin
                           VM_EN_Pin P1_LS_RL_Pin P1_LS_LR_Pin P1_HS_LR_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = SM_EN_Pin|SM_DIR_Pin|SM_PUL_Pin|AM_EN_Pin
 8000af6:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000afa:	617b      	str	r3, [r7, #20]
                          |VM_EN_Pin|P1_LS_RL_Pin|P1_LS_LR_Pin|P1_HS_LR_Pin
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b12:	f000 feaf 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_HS_RL_Pin P2_HS_RL_Pin P2_HS_LR_Pin P2_LS_RL_Pin
                           P3_LS_RL_Pin P3_LS_LR_Pin P3_HS_LR_Pin P3_HS_RL_Pin
                           LED2_Pin VAL6_Pin VAL5_Pin VAL4_Pin */
  GPIO_InitStruct.Pin = P1_HS_RL_Pin|P2_HS_RL_Pin|P2_HS_LR_Pin|P2_LS_RL_Pin
 8000b16:	f64f 037f 	movw	r3, #63615	@ 0xf87f
 8000b1a:	617b      	str	r3, [r7, #20]
                          |P3_LS_RL_Pin|P3_LS_LR_Pin|P3_HS_LR_Pin|P3_HS_RL_Pin
                          |LED2_Pin|VAL6_Pin|VAL5_Pin|VAL4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000b30:	f000 fea0 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : P2_LS_LR_Pin */
  GPIO_InitStruct.Pin = P2_LS_LR_Pin;
 8000b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(P2_LS_LR_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000b4c:	f000 fe92 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLOW3_Pin FLOW2_Pin FLOW1_Pin */
  GPIO_InitStruct.Pin = FLOW3_Pin|FLOW2_Pin|FLOW1_Pin;
 8000b50:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b56:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000b68:	f000 fe84 	bl	8001874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	48000400 	.word	0x48000400

08000b80 <_write>:

/* USER CODE BEGIN 4 */
/************************ SYSTEM FUNCTIONS (ISR) ************************/
int _write(int file, char *ptr, int len) 
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	68b8      	ldr	r0, [r7, #8]
 8000b94:	f007 ff54 	bl	8008a40 <CDC_Transmit_FS>
  return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <DWT_DelayInit>:

static void DWT_DelayInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <DWT_DelayInit+0x28>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <DWT_DelayInit+0x28>)
 8000bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bb2:	60d3      	str	r3, [r2, #12]
    DWT->CTRL         |= DWT_CTRL_CYCCNTENA_Msk;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <DWT_DelayInit+0x2c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <DWT_DelayInit+0x2c>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000edf0 	.word	0xe000edf0
 8000bd0:	e0001000 	.word	0xe0001000

08000bd4 <Delay_us>:

// Delay in microseconds
static inline void Delay_us(uint32_t us)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <Delay_us+0x40>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (HAL_RCC_GetHCLKFreq()/1000000);
 8000be2:	f003 f89d 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <Delay_us+0x44>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	0c9a      	lsrs	r2, r3, #18
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000bf8:	bf00      	nop
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <Delay_us+0x40>)
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f8      	bhi.n	8000bfa <Delay_us+0x26>
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e0001000 	.word	0xe0001000
 8000c18:	431bde83 	.word	0x431bde83

08000c1c <HAL_TIM_PeriodElapsedCallback>:

// INTERRUPT CALLBACKS
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) //check if timer6 IT flag
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a07      	ldr	r2, [pc, #28]	@ (8000c44 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d104      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    tim6_overflow++;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c34:	6013      	str	r3, [r2, #0]
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000184 	.word	0x20000184
 8000c48:	200001d8 	.word	0x200001d8

08000c4c <Update_LED>:
}

/************************ HELPER FUNCTIONS ************************/

void Update_LED(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  if (LED1) HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <Update_LED+0x4c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d007      	beq.n	8000c68 <Update_LED+0x1c>
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f000 ff99 	bl	8001b98 <HAL_GPIO_WritePin>
 8000c66:	e006      	b.n	8000c76 <Update_LED+0x2a>
  else HAL_GPIO_WritePin(GPIOA, LED1_Pin, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c72:	f000 ff91 	bl	8001b98 <HAL_GPIO_WritePin>
  if (LED2) HAL_GPIO_WritePin(GPIOB, LED2_Pin, 1);
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <Update_LED+0x50>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d005      	beq.n	8000c8a <Update_LED+0x3e>
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2108      	movs	r1, #8
 8000c82:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <Update_LED+0x54>)
 8000c84:	f000 ff88 	bl	8001b98 <HAL_GPIO_WritePin>
  else HAL_GPIO_WritePin(GPIOB, LED2_Pin, 0);
}
 8000c88:	e004      	b.n	8000c94 <Update_LED+0x48>
  else HAL_GPIO_WritePin(GPIOB, LED2_Pin, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <Update_LED+0x54>)
 8000c90:	f000 ff82 	bl	8001b98 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200001d0 	.word	0x200001d0
 8000c9c:	200001d1 	.word	0x200001d1
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <Timer6_test>:

void Timer6_test(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  if (Timer6_flag)
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <Timer6_test+0x40>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d017      	beq.n	8000ce0 <Timer6_test+0x3c>
  {
    tim6_val = Get_timer6_us();
 8000cb0:	f000 f822 	bl	8000cf8 <Get_timer6_us>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <Timer6_test+0x44>)
 8000cb8:	6013      	str	r3, [r2, #0]
    while(Get_timer6_us() - tim6_val < 10e6);
 8000cba:	bf00      	nop
 8000cbc:	f000 f81c 	bl	8000cf8 <Get_timer6_us>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <Timer6_test+0x44>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <Timer6_test+0x48>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d3f6      	bcc.n	8000cbc <Timer6_test+0x18>
    printf("10 seconds reached\r\n");
 8000cce:	4808      	ldr	r0, [pc, #32]	@ (8000cf0 <Timer6_test+0x4c>)
 8000cd0:	f008 fd7e 	bl	80097d0 <puts>
    LED2 = 1; 
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <Timer6_test+0x50>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    Timer6_flag = 0; 
 8000cda:	4b02      	ldr	r3, [pc, #8]	@ (8000ce4 <Timer6_test+0x40>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200001d2 	.word	0x200001d2
 8000ce8:	200001d4 	.word	0x200001d4
 8000cec:	00989680 	.word	0x00989680
 8000cf0:	0800b1ac 	.word	0x0800b1ac
 8000cf4:	200001d1 	.word	0x200001d1

08000cf8 <Get_timer6_us>:

uint32_t Get_timer6_us(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  int temp = __HAL_TIM_GET_COUNTER(&htim6);
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <Get_timer6_us+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d04:	607b      	str	r3, [r7, #4]
  return tim6_overflow * 65536 + temp;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <Get_timer6_us+0x28>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	041a      	lsls	r2, r3, #16
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4413      	add	r3, r2
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000184 	.word	0x20000184
 8000d20:	200001d8 	.word	0x200001d8

08000d24 <PumpCtrl>:

void PumpCtrl(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  if (pump1.status)
 8000d28:	4b3b      	ldr	r3, [pc, #236]	@ (8000e18 <PumpCtrl+0xf4>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d022      	beq.n	8000d76 <PumpCtrl+0x52>
  {
    if (Get_timer6_us() - pump1.start_us < pump1.duration_us)
 8000d30:	f7ff ffe2 	bl	8000cf8 <Get_timer6_us>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <PumpCtrl+0xf4>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	1ad2      	subs	r2, r2, r3
 8000d3c:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <PumpCtrl+0xf4>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d206      	bcs.n	8000d52 <PumpCtrl+0x2e>
    {
      PumpGPIO(3);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f875 	bl	8000e34 <PumpGPIO>
      LED2 = 1; 
 8000d4a:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <PumpCtrl+0xf8>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	e011      	b.n	8000d76 <PumpCtrl+0x52>
    }
    else 
    {
      LED2 = 0; 
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <PumpCtrl+0xf8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
      pump1.status = 0; 
 8000d58:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <PumpCtrl+0xf4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
      pump1.start_us = 0; 
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <PumpCtrl+0xf4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
      pump1.duration_us = 0; 
 8000d64:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <PumpCtrl+0xf4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
      Pumpoff(3);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f92c 	bl	8000fc8 <Pumpoff>
      printf("Pump 1 done!\r\n");
 8000d70:	482b      	ldr	r0, [pc, #172]	@ (8000e20 <PumpCtrl+0xfc>)
 8000d72:	f008 fd2d 	bl	80097d0 <puts>
    }
  }

  if (pump2.status)
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <PumpCtrl+0x100>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d022      	beq.n	8000dc4 <PumpCtrl+0xa0>
  {
    if (Get_timer6_us() - pump2.start_us < pump2.duration_us)
 8000d7e:	f7ff ffbb 	bl	8000cf8 <Get_timer6_us>
 8000d82:	4602      	mov	r2, r0
 8000d84:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <PumpCtrl+0x100>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	1ad2      	subs	r2, r2, r3
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <PumpCtrl+0x100>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d206      	bcs.n	8000da0 <PumpCtrl+0x7c>
    {
      PumpGPIO(3);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f000 f84e 	bl	8000e34 <PumpGPIO>
      LED2 = 1; 
 8000d98:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <PumpCtrl+0xf8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e011      	b.n	8000dc4 <PumpCtrl+0xa0>
    }
    else 
    {
      LED2 = 0;  
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <PumpCtrl+0xf8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
      pump2.status = 0; 
 8000da6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <PumpCtrl+0x100>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
      pump2.start_us = 0; 
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <PumpCtrl+0x100>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
      pump2.duration_us = 0; 
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <PumpCtrl+0x100>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
      Pumpoff(3);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f905 	bl	8000fc8 <Pumpoff>
      printf("Pump 2 done!\r\n");
 8000dbe:	481a      	ldr	r0, [pc, #104]	@ (8000e28 <PumpCtrl+0x104>)
 8000dc0:	f008 fd06 	bl	80097d0 <puts>
    }
  }
  
  if (pump3.status)
 8000dc4:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <PumpCtrl+0x108>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d022      	beq.n	8000e12 <PumpCtrl+0xee>
  {
    if (Get_timer6_us() - pump3.start_us < pump3.duration_us)
 8000dcc:	f7ff ff94 	bl	8000cf8 <Get_timer6_us>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <PumpCtrl+0x108>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <PumpCtrl+0x108>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d206      	bcs.n	8000dee <PumpCtrl+0xca>
    {
      PumpGPIO(3);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f827 	bl	8000e34 <PumpGPIO>
      LED2 = 1; 
 8000de6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <PumpCtrl+0xf8>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
      pump3.duration_us = 0; 
      Pumpoff(3);
      printf("Pump 3 done!\r\n");
    }
  }
}
 8000dec:	e011      	b.n	8000e12 <PumpCtrl+0xee>
      LED2 = 0; 
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <PumpCtrl+0xf8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
      pump3.status = 0; 
 8000df4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <PumpCtrl+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
      pump3.start_us = 0; 
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <PumpCtrl+0x108>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
      pump3.duration_us = 0; 
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <PumpCtrl+0x108>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
      Pumpoff(3);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f000 f8de 	bl	8000fc8 <Pumpoff>
      printf("Pump 3 done!\r\n");
 8000e0c:	4808      	ldr	r0, [pc, #32]	@ (8000e30 <PumpCtrl+0x10c>)
 8000e0e:	f008 fcdf 	bl	80097d0 <puts>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200001dc 	.word	0x200001dc
 8000e1c:	200001d1 	.word	0x200001d1
 8000e20:	0800b1c0 	.word	0x0800b1c0
 8000e24:	200001e8 	.word	0x200001e8
 8000e28:	0800b1d0 	.word	0x0800b1d0
 8000e2c:	200001f4 	.word	0x200001f4
 8000e30:	0800b1e0 	.word	0x0800b1e0

08000e34 <PumpGPIO>:

void PumpGPIO(uint8_t pumpnum)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  switch(pumpnum)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d05e      	beq.n	8000f02 <PumpGPIO+0xce>
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	f300 8089 	bgt.w	8000f5c <PumpGPIO+0x128>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d002      	beq.n	8000e54 <PumpGPIO+0x20>
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d02c      	beq.n	8000eac <PumpGPIO+0x78>
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 1);
      }
      break; 
  }
}
 8000e52:	e083      	b.n	8000f5c <PumpGPIO+0x128>
        Pumpoff(1);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 f8b7 	bl	8000fc8 <Pumpoff>
        BootstrapCharge(1,pump1.dir); 
 8000e5a:	4b42      	ldr	r3, [pc, #264]	@ (8000f64 <PumpGPIO+0x130>)
 8000e5c:	785b      	ldrb	r3, [r3, #1]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 f887 	bl	8000f74 <BootstrapCharge>
        Delay_us(1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff feb4 	bl	8000bd4 <Delay_us>
        Pumpoff(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 f8ab 	bl	8000fc8 <Pumpoff>
        if (pump1.dir) // 1 is LR
 8000e72:	4b3c      	ldr	r3, [pc, #240]	@ (8000f64 <PumpGPIO+0x130>)
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00c      	beq.n	8000e94 <PumpGPIO+0x60>
          HAL_GPIO_WritePin(GPIOA, P1_LS_LR_Pin, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2140      	movs	r1, #64	@ 0x40
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e82:	f000 fe89 	bl	8001b98 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, P1_HS_LR_Pin, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8e:	f000 fe83 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8000e92:	e063      	b.n	8000f5c <PumpGPIO+0x128>
          HAL_GPIO_WritePin(GPIOA, P1_LS_RL_Pin, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2120      	movs	r1, #32
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f000 fe7c 	bl	8001b98 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, P1_HS_RL_Pin, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4830      	ldr	r0, [pc, #192]	@ (8000f68 <PumpGPIO+0x134>)
 8000ea6:	f000 fe77 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8000eaa:	e057      	b.n	8000f5c <PumpGPIO+0x128>
      Pumpoff(2);
 8000eac:	2002      	movs	r0, #2
 8000eae:	f000 f88b 	bl	8000fc8 <Pumpoff>
      BootstrapCharge(2,pump2.dir); 
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <PumpGPIO+0x138>)
 8000eb4:	785b      	ldrb	r3, [r3, #1]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f85b 	bl	8000f74 <BootstrapCharge>
      Delay_us(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fe88 	bl	8000bd4 <Delay_us>
      Pumpoff(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f000 f87f 	bl	8000fc8 <Pumpoff>
      if (pump2.dir) // 1 is LR
 8000eca:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <PumpGPIO+0x138>)
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <PumpGPIO+0xb6>
        HAL_GPIO_WritePin(GPIOB, P2_LS_LR_Pin, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ed8:	4823      	ldr	r0, [pc, #140]	@ (8000f68 <PumpGPIO+0x134>)
 8000eda:	f000 fe5d 	bl	8001b98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P2_HS_LR_Pin, 1);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4821      	ldr	r0, [pc, #132]	@ (8000f68 <PumpGPIO+0x134>)
 8000ee4:	f000 fe58 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8000ee8:	e038      	b.n	8000f5c <PumpGPIO+0x128>
        HAL_GPIO_WritePin(GPIOB, P2_LS_RL_Pin, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef0:	481d      	ldr	r0, [pc, #116]	@ (8000f68 <PumpGPIO+0x134>)
 8000ef2:	f000 fe51 	bl	8001b98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P2_HS_RL_Pin, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2102      	movs	r1, #2
 8000efa:	481b      	ldr	r0, [pc, #108]	@ (8000f68 <PumpGPIO+0x134>)
 8000efc:	f000 fe4c 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8000f00:	e02c      	b.n	8000f5c <PumpGPIO+0x128>
      Pumpoff(3);
 8000f02:	2003      	movs	r0, #3
 8000f04:	f000 f860 	bl	8000fc8 <Pumpoff>
      BootstrapCharge(3,pump3.dir); 
 8000f08:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <PumpGPIO+0x13c>)
 8000f0a:	785b      	ldrb	r3, [r3, #1]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 f830 	bl	8000f74 <BootstrapCharge>
      Delay_us(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fe5d 	bl	8000bd4 <Delay_us>
      Pumpoff(3);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 f854 	bl	8000fc8 <Pumpoff>
      if (pump3.dir) // 1 is LR
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <PumpGPIO+0x13c>)
 8000f22:	785b      	ldrb	r3, [r3, #1]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00c      	beq.n	8000f42 <PumpGPIO+0x10e>
        HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f2e:	480e      	ldr	r0, [pc, #56]	@ (8000f68 <PumpGPIO+0x134>)
 8000f30:	f000 fe32 	bl	8001b98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f3a:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <PumpGPIO+0x134>)
 8000f3c:	f000 fe2c 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8000f40:	e00b      	b.n	8000f5a <PumpGPIO+0x126>
        HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <PumpGPIO+0x134>)
 8000f4a:	f000 fe25 	bl	8001b98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <PumpGPIO+0x134>)
 8000f56:	f000 fe1f 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8000f5a:	bf00      	nop
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001dc 	.word	0x200001dc
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	200001e8 	.word	0x200001e8
 8000f70:	200001f4 	.word	0x200001f4

08000f74 <BootstrapCharge>:

void BootstrapCharge(uint8_t pumpnum, uint8_t dir)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
  switch(pumpnum)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d005      	beq.n	8000f96 <BootstrapCharge+0x22>
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	dc15      	bgt.n	8000fba <BootstrapCharge+0x46>
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d012      	beq.n	8000fb8 <BootstrapCharge+0x44>
 8000f92:	2b02      	cmp	r3, #2
  {
    case 1: 
      break;
    case 2: 
      break; 
 8000f94:	e011      	b.n	8000fba <BootstrapCharge+0x46>
    case 3:
      if (dir) HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 1);
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <BootstrapCharge+0x36>
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa2:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <BootstrapCharge+0x50>)
 8000fa4:	f000 fdf8 	bl	8001b98 <HAL_GPIO_WritePin>
      else HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
      break;
 8000fa8:	e007      	b.n	8000fba <BootstrapCharge+0x46>
      else HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <BootstrapCharge+0x50>)
 8000fb2:	f000 fdf1 	bl	8001b98 <HAL_GPIO_WritePin>
      break;
 8000fb6:	e000      	b.n	8000fba <BootstrapCharge+0x46>
      break;
 8000fb8:	bf00      	nop
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <Pumpoff>:

void Pumpoff(uint8_t pumpnum)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  switch(pumpnum)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d035      	beq.n	8001044 <Pumpoff+0x7c>
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	dc4c      	bgt.n	8001076 <Pumpoff+0xae>
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d002      	beq.n	8000fe6 <Pumpoff+0x1e>
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d018      	beq.n	8001016 <Pumpoff+0x4e>
      HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 0);
      HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, 0);
      HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 0);
      break; 
  }
}
 8000fe4:	e047      	b.n	8001076 <Pumpoff+0xae>
      HAL_GPIO_WritePin(GPIOA, P1_LS_RL_Pin, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2120      	movs	r1, #32
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f000 fdd3 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, P1_LS_LR_Pin, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2140      	movs	r1, #64	@ 0x40
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f000 fdcd 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, P1_HS_LR_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f000 fdc7 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P1_HS_RL_Pin, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	481c      	ldr	r0, [pc, #112]	@ (8001080 <Pumpoff+0xb8>)
 8001010:	f000 fdc2 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8001014:	e02f      	b.n	8001076 <Pumpoff+0xae>
      HAL_GPIO_WritePin(GPIOB, P2_LS_RL_Pin, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101c:	4818      	ldr	r0, [pc, #96]	@ (8001080 <Pumpoff+0xb8>)
 800101e:	f000 fdbb 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P2_LS_LR_Pin, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001028:	4815      	ldr	r0, [pc, #84]	@ (8001080 <Pumpoff+0xb8>)
 800102a:	f000 fdb5 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P2_HS_LR_Pin, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2104      	movs	r1, #4
 8001032:	4813      	ldr	r0, [pc, #76]	@ (8001080 <Pumpoff+0xb8>)
 8001034:	f000 fdb0 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P2_HS_RL_Pin, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2102      	movs	r1, #2
 800103c:	4810      	ldr	r0, [pc, #64]	@ (8001080 <Pumpoff+0xb8>)
 800103e:	f000 fdab 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8001042:	e018      	b.n	8001076 <Pumpoff+0xae>
      HAL_GPIO_WritePin(GPIOB, P3_LS_RL_Pin, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <Pumpoff+0xb8>)
 800104c:	f000 fda4 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P3_LS_LR_Pin, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001056:	480a      	ldr	r0, [pc, #40]	@ (8001080 <Pumpoff+0xb8>)
 8001058:	f000 fd9e 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P3_HS_LR_Pin, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001062:	4807      	ldr	r0, [pc, #28]	@ (8001080 <Pumpoff+0xb8>)
 8001064:	f000 fd98 	bl	8001b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, P3_HS_RL_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <Pumpoff+0xb8>)
 8001070:	f000 fd92 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8001074:	bf00      	nop
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	48000400 	.word	0x48000400

08001084 <ValveCtrl>:
    flow[i].flow_rate = (9 * flow[i].pulse_duration + 800) / 640; 
  }
}

void ValveCtrl(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 6; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e05c      	b.n	800114a <ValveCtrl+0xc6>
  {
    if (valve[i].status)
 8001090:	79fa      	ldrb	r2, [r7, #7]
 8001092:	4932      	ldr	r1, [pc, #200]	@ (800115c <ValveCtrl+0xd8>)
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d04f      	beq.n	8001144 <ValveCtrl+0xc0>
    {
      if (Get_timer6_us()-valve[i].start_us < valve[i].duration_us)
 80010a4:	f7ff fe28 	bl	8000cf8 <Get_timer6_us>
 80010a8:	4601      	mov	r1, r0
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	482b      	ldr	r0, [pc, #172]	@ (800115c <ValveCtrl+0xd8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4403      	add	r3, r0
 80010b8:	3304      	adds	r3, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	1ac9      	subs	r1, r1, r3
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	4826      	ldr	r0, [pc, #152]	@ (800115c <ValveCtrl+0xd8>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4403      	add	r3, r0
 80010cc:	3308      	adds	r3, #8
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d20a      	bcs.n	80010ea <ValveCtrl+0x66>
      {
        ValveGPIO(i+1,1);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2101      	movs	r1, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f843 	bl	8001168 <ValveGPIO>
        LED1 = 1;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <ValveCtrl+0xdc>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e02c      	b.n	8001144 <ValveCtrl+0xc0>
      }
      else
      {
        LED1 = 0;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <ValveCtrl+0xdc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
        valve[i].status = 0; 
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	491a      	ldr	r1, [pc, #104]	@ (800115c <ValveCtrl+0xd8>)
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
        valve[i].start_us = 0; 
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	4915      	ldr	r1, [pc, #84]	@ (800115c <ValveCtrl+0xd8>)
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3304      	adds	r3, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
        valve[i].duration_us = 0; 
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	4910      	ldr	r1, [pc, #64]	@ (800115c <ValveCtrl+0xd8>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3308      	adds	r3, #8
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
        ValveGPIO(i+1,0);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	3301      	adds	r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f818 	bl	8001168 <ValveGPIO>
        printf("Valve %d stopped\r\n", i+1);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	4619      	mov	r1, r3
 800113e:	4809      	ldr	r0, [pc, #36]	@ (8001164 <ValveCtrl+0xe0>)
 8001140:	f008 fade 	bl	8009700 <iprintf>
  for (uint8_t i = 0; i < 6; i++)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	3301      	adds	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b05      	cmp	r3, #5
 800114e:	d99f      	bls.n	8001090 <ValveCtrl+0xc>
      }
    }
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000200 	.word	0x20000200
 8001160:	200001d0 	.word	0x200001d0
 8001164:	0800b1f0 	.word	0x0800b1f0

08001168 <ValveGPIO>:

void ValveGPIO(uint8_t valvenum, uint8_t state)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
  switch(valvenum){
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	3b01      	subs	r3, #1
 800117c:	2b05      	cmp	r3, #5
 800117e:	d86f      	bhi.n	8001260 <ValveGPIO+0xf8>
 8001180:	a201      	add	r2, pc, #4	@ (adr r2, 8001188 <ValveGPIO+0x20>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	080011a1 	.word	0x080011a1
 800118c:	080011c3 	.word	0x080011c3
 8001190:	080011e5 	.word	0x080011e5
 8001194:	08001207 	.word	0x08001207
 8001198:	08001225 	.word	0x08001225
 800119c:	08001243 	.word	0x08001243
    case 1: 
      if (state)  HAL_GPIO_WritePin(GPIOC, VAL1_Pin,1);
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <ValveGPIO+0x4c>
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ac:	482e      	ldr	r0, [pc, #184]	@ (8001268 <ValveGPIO+0x100>)
 80011ae:	f000 fcf3 	bl	8001b98 <HAL_GPIO_WritePin>
      else        HAL_GPIO_WritePin(GPIOC, VAL1_Pin,0);
      break; 
 80011b2:	e055      	b.n	8001260 <ValveGPIO+0xf8>
      else        HAL_GPIO_WritePin(GPIOC, VAL1_Pin,0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ba:	482b      	ldr	r0, [pc, #172]	@ (8001268 <ValveGPIO+0x100>)
 80011bc:	f000 fcec 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 80011c0:	e04e      	b.n	8001260 <ValveGPIO+0xf8>
    case 2: 
      if (state)  HAL_GPIO_WritePin(GPIOC, VAL2_Pin,1);
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <ValveGPIO+0x6e>
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ce:	4826      	ldr	r0, [pc, #152]	@ (8001268 <ValveGPIO+0x100>)
 80011d0:	f000 fce2 	bl	8001b98 <HAL_GPIO_WritePin>
      else        HAL_GPIO_WritePin(GPIOC, VAL2_Pin,0);
      break;
 80011d4:	e044      	b.n	8001260 <ValveGPIO+0xf8>
      else        HAL_GPIO_WritePin(GPIOC, VAL2_Pin,0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011dc:	4822      	ldr	r0, [pc, #136]	@ (8001268 <ValveGPIO+0x100>)
 80011de:	f000 fcdb 	bl	8001b98 <HAL_GPIO_WritePin>
      break;
 80011e2:	e03d      	b.n	8001260 <ValveGPIO+0xf8>
    case 3: 
      if (state)  HAL_GPIO_WritePin(GPIOC, VAL3_Pin,1);
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ValveGPIO+0x90>
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f0:	481d      	ldr	r0, [pc, #116]	@ (8001268 <ValveGPIO+0x100>)
 80011f2:	f000 fcd1 	bl	8001b98 <HAL_GPIO_WritePin>
      else        HAL_GPIO_WritePin(GPIOC, VAL3_Pin,0);
      break; 
 80011f6:	e033      	b.n	8001260 <ValveGPIO+0xf8>
      else        HAL_GPIO_WritePin(GPIOC, VAL3_Pin,0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011fe:	481a      	ldr	r0, [pc, #104]	@ (8001268 <ValveGPIO+0x100>)
 8001200:	f000 fcca 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8001204:	e02c      	b.n	8001260 <ValveGPIO+0xf8>
    case 4: 
      if (state)  HAL_GPIO_WritePin(GPIOB, VAL4_Pin,1);
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <ValveGPIO+0xb0>
 800120c:	2201      	movs	r2, #1
 800120e:	2140      	movs	r1, #64	@ 0x40
 8001210:	4816      	ldr	r0, [pc, #88]	@ (800126c <ValveGPIO+0x104>)
 8001212:	f000 fcc1 	bl	8001b98 <HAL_GPIO_WritePin>
      else        HAL_GPIO_WritePin(GPIOB, VAL4_Pin,0);
      break;  
 8001216:	e023      	b.n	8001260 <ValveGPIO+0xf8>
      else        HAL_GPIO_WritePin(GPIOB, VAL4_Pin,0);
 8001218:	2200      	movs	r2, #0
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	4813      	ldr	r0, [pc, #76]	@ (800126c <ValveGPIO+0x104>)
 800121e:	f000 fcbb 	bl	8001b98 <HAL_GPIO_WritePin>
      break;  
 8001222:	e01d      	b.n	8001260 <ValveGPIO+0xf8>
    case 5: 
      if (state)  HAL_GPIO_WritePin(GPIOB, VAL5_Pin,1);
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <ValveGPIO+0xce>
 800122a:	2201      	movs	r2, #1
 800122c:	2120      	movs	r1, #32
 800122e:	480f      	ldr	r0, [pc, #60]	@ (800126c <ValveGPIO+0x104>)
 8001230:	f000 fcb2 	bl	8001b98 <HAL_GPIO_WritePin>
      else        HAL_GPIO_WritePin(GPIOB, VAL5_Pin,0);
      break; 
 8001234:	e014      	b.n	8001260 <ValveGPIO+0xf8>
      else        HAL_GPIO_WritePin(GPIOB, VAL5_Pin,0);
 8001236:	2200      	movs	r2, #0
 8001238:	2120      	movs	r1, #32
 800123a:	480c      	ldr	r0, [pc, #48]	@ (800126c <ValveGPIO+0x104>)
 800123c:	f000 fcac 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 8001240:	e00e      	b.n	8001260 <ValveGPIO+0xf8>
    case 6: 
      if (state)  HAL_GPIO_WritePin(GPIOB, VAL6_Pin,1);
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <ValveGPIO+0xec>
 8001248:	2201      	movs	r2, #1
 800124a:	2110      	movs	r1, #16
 800124c:	4807      	ldr	r0, [pc, #28]	@ (800126c <ValveGPIO+0x104>)
 800124e:	f000 fca3 	bl	8001b98 <HAL_GPIO_WritePin>
      else        HAL_GPIO_WritePin(GPIOB, VAL6_Pin,0);
      break; 
 8001252:	e004      	b.n	800125e <ValveGPIO+0xf6>
      else        HAL_GPIO_WritePin(GPIOB, VAL6_Pin,0);
 8001254:	2200      	movs	r2, #0
 8001256:	2110      	movs	r1, #16
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <ValveGPIO+0x104>)
 800125a:	f000 fc9d 	bl	8001b98 <HAL_GPIO_WritePin>
      break; 
 800125e:	bf00      	nop
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	48000800 	.word	0x48000800
 800126c:	48000400 	.word	0x48000400

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_MspInit+0x44>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001286:	4a0e      	ldr	r2, [pc, #56]	@ (80012c0 <HAL_MspInit+0x44>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6613      	str	r3, [r2, #96]	@ 0x60
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_MspInit+0x44>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_MspInit+0x44>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_MspInit+0x44>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_MspInit+0x44>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <HAL_TIM_Base_MspInit+0x44>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d113      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2036      	movs	r0, #54	@ 0x36
 80012f4:	f000 fa87 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f8:	2036      	movs	r0, #54	@ 0x36
 80012fa:	f000 faa0 	bl	800183e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40001000 	.word	0x40001000
 800130c:	40021000 	.word	0x40021000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <NMI_Handler+0x4>

08001318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <MemManage_Handler+0x4>

08001328 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <UsageFault_Handler+0x4>

08001338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f92f 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <TIM6_DAC_IRQHandler+0x10>)
 8001376:	f003 fbbb 	bl	8004af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000184 	.word	0x20000184

08001384 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <OTG_FS_IRQHandler+0x10>)
 800138a:	f000 fd5b 	bl	8001e44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200017b4 	.word	0x200017b4

08001398 <_read>:
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e00a      	b.n	80013c0 <_read+0x28>
 80013aa:	f3af 8000 	nop.w
 80013ae:	4601      	mov	r1, r0
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60ba      	str	r2, [r7, #8]
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf0      	blt.n	80013aa <_read+0x12>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_close>:
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_fstat>:
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	2300      	movs	r3, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_isatty>:
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	2301      	movs	r3, #1
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_lseek>:
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	2300      	movs	r3, #0
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
 800146c:	f008 fb2a 	bl	8009ac4 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20050000 	.word	0x20050000
 800149c:	00000400 	.word	0x00000400
 80014a0:	20000248 	.word	0x20000248
 80014a4:	20002008 	.word	0x20002008

080014a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopForever+0x2>
 80014d0:	f7ff ffea 	bl	80014a8 <SystemInit>
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopForever+0x6>)
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopForever+0xa>)
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopForever+0xe>)
 80014da:	2300      	movs	r3, #0
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:
 80014de:	58d4      	ldr	r4, [r2, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:
 80014e4:	18c4      	adds	r4, r0, r3
 80014e6:	428c      	cmp	r4, r1
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopForever+0x12>)
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopForever+0x16>)
 80014ee:	2300      	movs	r3, #0
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:
 80014f6:	42a2      	cmp	r2, r4
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>
 80014fa:	f008 fae9 	bl	8009ad0 <__libc_init_array>
 80014fe:	f7ff f9ed 	bl	80008dc <main>

08001502 <LoopForever>:
 8001502:	e7fe      	b.n	8001502 <LoopForever>
 8001504:	20050000 	.word	0x20050000
 8001508:	20000000 	.word	0x20000000
 800150c:	20000168 	.word	0x20000168
 8001510:	0800b47c 	.word	0x0800b47c
 8001514:	20000168 	.word	0x20000168
 8001518:	20002004 	.word	0x20002004

0800151c <ADC1_2_IRQHandler>:
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>

0800151e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f961 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f80e 	bl	8001550 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	e001      	b.n	8001544 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001540:	f7ff fe9c 	bl	800127c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001544:	79fb      	ldrb	r3, [r7, #7]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_InitTick+0x6c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d023      	beq.n	80015ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_InitTick+0x70>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <HAL_InitTick+0x6c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f96d 	bl	800185a <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d809      	bhi.n	80015a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 f937 	bl	8001806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001598:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <HAL_InitTick+0x74>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e007      	b.n	80015b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e004      	b.n	80015b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	e001      	b.n	80015b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	2000024c 	.word	0x2000024c

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2000024c 	.word	0x2000024c

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d005      	beq.n	800162e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_Delay+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162e:	bf00      	nop
 8001630:	f7ff ffde 	bl	80015f0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8f7      	bhi.n	8001630 <HAL_Delay+0x28>
  {
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	@ (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	@ (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff29 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff3e 	bl	8001698 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff31 	bl	80016b4 <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001882:	e166      	b.n	8001b52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8158 	beq.w	8001b4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d005      	beq.n	80018b4 <HAL_GPIO_Init+0x40>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d130      	bne.n	8001916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ea:	2201      	movs	r2, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	f003 0201 	and.w	r2, r3, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b03      	cmp	r3, #3
 8001920:	d017      	beq.n	8001952 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d123      	bne.n	80019a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	6939      	ldr	r1, [r7, #16]
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80b2 	beq.w	8001b4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e8:	4b61      	ldr	r3, [pc, #388]	@ (8001b70 <HAL_GPIO_Init+0x2fc>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ec:	4a60      	ldr	r2, [pc, #384]	@ (8001b70 <HAL_GPIO_Init+0x2fc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b70 <HAL_GPIO_Init+0x2fc>)
 80019f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a00:	4a5c      	ldr	r2, [pc, #368]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a2a:	d02b      	beq.n	8001a84 <HAL_GPIO_Init+0x210>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a52      	ldr	r2, [pc, #328]	@ (8001b78 <HAL_GPIO_Init+0x304>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d025      	beq.n	8001a80 <HAL_GPIO_Init+0x20c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a51      	ldr	r2, [pc, #324]	@ (8001b7c <HAL_GPIO_Init+0x308>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d01f      	beq.n	8001a7c <HAL_GPIO_Init+0x208>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a50      	ldr	r2, [pc, #320]	@ (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d019      	beq.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a4f      	ldr	r2, [pc, #316]	@ (8001b84 <HAL_GPIO_Init+0x310>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x200>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b88 <HAL_GPIO_Init+0x314>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1fc>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4d      	ldr	r2, [pc, #308]	@ (8001b8c <HAL_GPIO_Init+0x318>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1f8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b90 <HAL_GPIO_Init+0x31c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1f4>
 8001a64:	2307      	movs	r3, #7
 8001a66:	e00e      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a68:	2308      	movs	r3, #8
 8001a6a:	e00c      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	e00a      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a70:	2305      	movs	r3, #5
 8001a72:	e008      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e006      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e004      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a84:	2300      	movs	r3, #0
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	f002 0203 	and.w	r2, r2, #3
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a96:	4937      	ldr	r1, [pc, #220]	@ (8001b74 <HAL_GPIO_Init+0x300>)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ac8:	4a32      	ldr	r2, [pc, #200]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001af2:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001af8:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b46:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <HAL_GPIO_Init+0x320>)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f47f ae91 	bne.w	8001884 <HAL_GPIO_Init+0x10>
  }
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010000 	.word	0x40010000
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	48000800 	.word	0x48000800
 8001b80:	48000c00 	.word	0x48000c00
 8001b84:	48001000 	.word	0x48001000
 8001b88:	48001400 	.word	0x48001400
 8001b8c:	48001800 	.word	0x48001800
 8001b90:	48001c00 	.word	0x48001c00
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e101      	b.n	8001dde <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f007 f880 	bl	8008cf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fac9 	bl	800519e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7c1a      	ldrb	r2, [r3, #16]
 8001c14:	f88d 2000 	strb.w	r2, [sp]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1c:	f003 f9e4 	bl	8004fe8 <USB_CoreInit>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0d5      	b.n	8001dde <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fac1 	bl	80051c0 <USB_SetCurrentMode>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0c6      	b.n	8001dde <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e04a      	b.n	8001cec <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	3315      	adds	r3, #21
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3314      	adds	r3, #20
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	b298      	uxth	r0, r3
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	332e      	adds	r3, #46	@ 0x2e
 8001c92:	4602      	mov	r2, r0
 8001c94:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	331c      	adds	r3, #28
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3320      	adds	r3, #32
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	3324      	adds	r3, #36	@ 0x24
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	791b      	ldrb	r3, [r3, #4]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d3af      	bcc.n	8001c56 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e044      	b.n	8001d86 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	3301      	adds	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3b5      	bcc.n	8001cfc <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7c1a      	ldrb	r2, [r3, #16]
 8001d98:	f88d 2000 	strb.w	r2, [sp]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da0:	f003 fa5a 	bl	8005258 <USB_DevInit>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e013      	b.n	8001dde <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7b1b      	ldrb	r3, [r3, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f001 f86d 	bl	8002eac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 fa11 	bl	80061fe <USB_DevDisconnect>

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_PCD_Start+0x1c>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e01c      	b.n	8001e3c <HAL_PCD_Start+0x56>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7b5b      	ldrb	r3, [r3, #13]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 f9aa 	bl	800517c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 f9c5 	bl	80061bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b08d      	sub	sp, #52	@ 0x34
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 fa83 	bl	8006366 <USB_GetMode>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 8481 	bne.w	800276a <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 f9e7 	bl	8006240 <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8477 	beq.w	8002768 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 f9d4 	bl	8006240 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f002 0202 	and.w	r2, r2, #2
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 f9c2 	bl	8006240 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d161      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0210 	bic.w	r2, r2, #16
 8001ed4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	0c5b      	lsrs	r3, r3, #17
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d124      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d035      	beq.n	8001f7a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	6a38      	ldr	r0, [r7, #32]
 8001f22:	f003 fff9 	bl	8005f18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f32:	441a      	add	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f44:	441a      	add	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	615a      	str	r2, [r3, #20]
 8001f4a:	e016      	b.n	8001f7a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	0c5b      	lsrs	r3, r3, #17
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	2b06      	cmp	r3, #6
 8001f56:	d110      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f5e:	2208      	movs	r2, #8
 8001f60:	4619      	mov	r1, r3
 8001f62:	6a38      	ldr	r0, [r7, #32]
 8001f64:	f003 ffd8 	bl	8005f18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f74:	441a      	add	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0210 	orr.w	r2, r2, #16
 8001f88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 f956 	bl	8006240 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f9a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f9e:	f040 80a7 	bne.w	80020f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 f95b 	bl	8006266 <USB_ReadDevAllOutEpInterrupt>
 8001fb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001fb2:	e099      	b.n	80020e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 808e 	beq.w	80020dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 f97f 	bl	80062ce <USB_ReadDevOutEPInterrupt>
 8001fd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00c      	beq.n	8001ff6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2301      	movs	r3, #1
 8001fec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fe81 	bl	8002cf8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800200c:	461a      	mov	r2, r3
 800200e:	2308      	movs	r3, #8
 8002010:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002012:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 febd 	bl	8002d94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002030:	461a      	mov	r2, r3
 8002032:	2310      	movs	r3, #16
 8002034:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d030      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002048:	2b80      	cmp	r3, #128	@ 0x80
 800204a:	d109      	bne.n	8002060 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800205a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	78db      	ldrb	r3, [r3, #3]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d108      	bne.n	8002090 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	b2db      	uxtb	r3, r3
 8002088:	4619      	mov	r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f006 ff86 	bl	8008f9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800209c:	461a      	mov	r2, r3
 800209e:	2302      	movs	r3, #2
 80020a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020b8:	461a      	mov	r2, r3
 80020ba:	2320      	movs	r3, #32
 80020bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d4:	461a      	mov	r2, r3
 80020d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	3301      	adds	r3, #1
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f47f af62 	bne.w	8001fb4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 f8a3 	bl	8006240 <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002100:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002104:	f040 80a4 	bne.w	8002250 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 f8c4 	bl	800629a <USB_ReadDevAllInEpInterrupt>
 8002112:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002118:	e096      	b.n	8002248 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 808b 	beq.w	800223c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f004 f8ea 	bl	800630a <USB_ReadDevInEPInterrupt>
 8002136:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d020      	beq.n	8002184 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	2201      	movs	r2, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	69f9      	ldr	r1, [r7, #28]
 800215e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002162:	4013      	ands	r3, r2
 8002164:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002172:	461a      	mov	r2, r3
 8002174:	2301      	movs	r3, #1
 8002176:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f006 fe77 	bl	8008e72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800219a:	461a      	mov	r2, r3
 800219c:	2308      	movs	r3, #8
 800219e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021b6:	461a      	mov	r2, r3
 80021b8:	2310      	movs	r3, #16
 80021ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021d2:	461a      	mov	r2, r3
 80021d4:	2340      	movs	r3, #64	@ 0x40
 80021d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d023      	beq.n	800222a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021e4:	6a38      	ldr	r0, [r7, #32]
 80021e6:	f003 f97f 	bl	80054e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	3310      	adds	r3, #16
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	3304      	adds	r3, #4
 80021fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	78db      	ldrb	r3, [r3, #3]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d108      	bne.n	8002218 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f006 fed4 	bl	8008fc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002224:	461a      	mov	r2, r3
 8002226:	2302      	movs	r3, #2
 8002228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fcd6 	bl	8002be8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	3301      	adds	r3, #1
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	f47f af65 	bne.w	800211a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f003 fff3 	bl	8006240 <USB_ReadInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002264:	d122      	bne.n	80022ac <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800228c:	2100      	movs	r1, #0
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f007 f908 	bl	80094a4 <HAL_PCDEx_LPM_Callback>
 8002294:	e002      	b.n	800229c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f006 fe58 	bl	8008f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80022aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 ffc5 	bl	8006240 <USB_ReadInterrupts>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022c0:	d112      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f006 fe14 	bl	8008f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80022e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 ffa7 	bl	8006240 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022fc:	d121      	bne.n	8002342 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800230c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002314:	2b00      	cmp	r3, #0
 8002316:	d111      	bne.n	800233c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002332:	2101      	movs	r1, #1
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f007 f8b5 	bl	80094a4 <HAL_PCDEx_LPM_Callback>
 800233a:	e002      	b.n	8002342 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f006 fddf 	bl	8008f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 ff7a 	bl	8006240 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002356:	f040 80b6 	bne.w	80024c6 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2110      	movs	r1, #16
 8002374:	4618      	mov	r0, r3
 8002376:	f003 f8b7 	bl	80054e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800237e:	e046      	b.n	800240e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800238c:	461a      	mov	r2, r3
 800238e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002392:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023a4:	0151      	lsls	r1, r2, #5
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	440a      	add	r2, r1
 80023aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80023ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d8:	0151      	lsls	r1, r2, #5
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	440a      	add	r2, r1
 80023de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80023e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023f8:	0151      	lsls	r1, r2, #5
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	440a      	add	r2, r1
 80023fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002406:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240a:	3301      	adds	r3, #1
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	791b      	ldrb	r3, [r3, #4]
 8002412:	461a      	mov	r2, r3
 8002414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002416:	4293      	cmp	r3, r2
 8002418:	d3b2      	bcc.n	8002380 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002428:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800242c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7bdb      	ldrb	r3, [r3, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800243c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002446:	f043 030b 	orr.w	r3, r3, #11
 800244a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800245c:	f043 030b 	orr.w	r3, r3, #11
 8002460:	6453      	str	r3, [r2, #68]	@ 0x44
 8002462:	e015      	b.n	8002490 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002472:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002476:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800247a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800248a:	f043 030b 	orr.w	r3, r3, #11
 800248e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800249e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80024a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f003 ff89 	bl	80063c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 feb8 	bl	8006240 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024da:	d123      	bne.n	8002524 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 ff4e 	bl	8006382 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f875 	bl	80055da <USB_GetDevSpeed>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681c      	ldr	r4, [r3, #0]
 80024fc:	f001 fc10 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8002500:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002506:	461a      	mov	r2, r3
 8002508:	4620      	mov	r0, r4
 800250a:	f002 fd9b 	bl	8005044 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f006 fcd7 	bl	8008ec2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fe89 	bl	8006240 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b08      	cmp	r3, #8
 8002536:	d10a      	bne.n	800254e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f006 fcb4 	bl	8008ea6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f002 0208 	and.w	r2, r2, #8
 800254c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fe74 	bl	8006240 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255e:	2b80      	cmp	r3, #128	@ 0x80
 8002560:	d123      	bne.n	80025aa <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800256e:	2301      	movs	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
 8002572:	e014      	b.n	800259e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 faf7 	bl	8002b86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	3301      	adds	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	461a      	mov	r2, r3
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d3e4      	bcc.n	8002574 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fe46 	bl	8006240 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025be:	d13c      	bne.n	800263a <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c0:	2301      	movs	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c4:	e02b      	b.n	800261e <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3318      	adds	r3, #24
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d115      	bne.n	8002618 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da12      	bge.n	8002618 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3317      	adds	r3, #23
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fab7 	bl	8002b86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	3301      	adds	r3, #1
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	791b      	ldrb	r3, [r3, #4]
 8002622:	461a      	mov	r2, r3
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	4293      	cmp	r3, r2
 8002628:	d3cd      	bcc.n	80025c6 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f003 fdfe 	bl	8006240 <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800264e:	d156      	bne.n	80026fe <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002650:	2301      	movs	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
 8002654:	e045      	b.n	80026e2 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d12e      	bne.n	80026dc <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800267e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002680:	2b00      	cmp	r3, #0
 8002682:	da2b      	bge.n	80026dc <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002690:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002694:	429a      	cmp	r2, r3
 8002696:	d121      	bne.n	80026dc <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d8:	6053      	str	r3, [r2, #4]
            break;
 80026da:	e008      	b.n	80026ee <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	3301      	adds	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	791b      	ldrb	r3, [r3, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d3b3      	bcc.n	8002656 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80026fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fd9c 	bl	8006240 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002712:	d10a      	bne.n	800272a <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f006 fc65 	bl	8008fe4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fd86 	bl	8006240 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b04      	cmp	r3, #4
 800273c:	d115      	bne.n	800276a <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f006 fc55 	bl	8009000 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	e000      	b.n	800276a <HAL_PCD_IRQHandler+0x926>
      return;
 8002768:	bf00      	nop
    }
  }
}
 800276a:	3734      	adds	r7, #52	@ 0x34
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}

08002770 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_PCD_SetAddress+0x1a>
 8002786:	2302      	movs	r3, #2
 8002788:	e012      	b.n	80027b0 <HAL_PCD_SetAddress+0x40>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 fce5 	bl	8006170 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	70fb      	strb	r3, [r7, #3]
 80027ca:	460b      	mov	r3, r1
 80027cc:	803b      	strh	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da0f      	bge.n	80027fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3310      	adds	r3, #16
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	705a      	strb	r2, [r3, #1]
 80027fc:	e00f      	b.n	800281e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 020f 	and.w	r2, r3, #15
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	3304      	adds	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800282a:	883b      	ldrh	r3, [r7, #0]
 800282c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	78ba      	ldrb	r2, [r7, #2]
 8002838:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800284c:	78bb      	ldrb	r3, [r7, #2]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d102      	bne.n	8002858 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_PCD_EP_Open+0xae>
 8002862:	2302      	movs	r3, #2
 8002864:	e00e      	b.n	8002884 <HAL_PCD_EP_Open+0xcc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68f9      	ldr	r1, [r7, #12]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fecf 	bl	8005618 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002882:	7afb      	ldrb	r3, [r7, #11]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289c:	2b00      	cmp	r3, #0
 800289e:	da0f      	bge.n	80028c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3310      	adds	r3, #16
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	705a      	strb	r2, [r3, #1]
 80028be:	e00f      	b.n	80028e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 020f 	and.w	r2, r3, #15
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_PCD_EP_Close+0x6e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e00e      	b.n	8002918 <HAL_PCD_EP_Close+0x8c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	f002 ff0d 	bl	8005728 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	460b      	mov	r3, r1
 800292e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2200      	movs	r2, #0
 8002960:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	b2da      	uxtb	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6979      	ldr	r1, [r7, #20]
 8002974:	4618      	mov	r0, r3
 8002976:	f002 ffb3 	bl	80058e0 <USB_EPStartXfer>

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	f003 020f 	and.w	r2, r3, #15
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	3310      	adds	r3, #16
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	3304      	adds	r3, #4
 80029da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2201      	movs	r2, #1
 80029f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6979      	ldr	r1, [r7, #20]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 ff6a 	bl	80058e0 <USB_EPStartXfer>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	7912      	ldrb	r2, [r2, #4]
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04e      	b.n	8002ad2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da0f      	bge.n	8002a5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	f003 020f 	and.w	r2, r3, #15
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	3310      	adds	r3, #16
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	3304      	adds	r3, #4
 8002a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	705a      	strb	r2, [r3, #1]
 8002a5a:	e00d      	b.n	8002a78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3304      	adds	r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_PCD_EP_SetStall+0x82>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e01c      	b.n	8002ad2 <HAL_PCD_EP_SetStall+0xbc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 fa8e 	bl	8005fc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d108      	bne.n	8002ac8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f003 fc80 	bl	80063c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	7912      	ldrb	r2, [r2, #4]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e042      	b.n	8002b7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	da0f      	bge.n	8002b20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3310      	adds	r3, #16
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	705a      	strb	r2, [r3, #1]
 8002b1e:	e00f      	b.n	8002b40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 020f 	and.w	r2, r3, #15
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_EP_ClrStall+0x86>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e00e      	b.n	8002b7e <HAL_PCD_EP_ClrStall+0xa4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fa98 	bl	80060a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da0c      	bge.n	8002bb4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 020f 	and.w	r2, r3, #15
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	3310      	adds	r3, #16
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e00c      	b.n	8002bce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68f9      	ldr	r1, [r7, #12]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 f8bb 	bl	8005d50 <USB_EPStopXfer>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bde:	7afb      	ldrb	r3, [r7, #11]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	3310      	adds	r3, #16
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d901      	bls.n	8002c20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e067      	b.n	8002cf0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d902      	bls.n	8002c3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	3303      	adds	r3, #3
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c44:	e026      	b.n	8002c94 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d902      	bls.n	8002c62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3303      	adds	r3, #3
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68d9      	ldr	r1, [r3, #12]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f003 f914 	bl	8005ea4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	441a      	add	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	441a      	add	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d809      	bhi.n	8002cbe <PCD_WriteEmptyTxFifo+0xd6>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d203      	bcs.n	8002cbe <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1c3      	bne.n	8002c46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d811      	bhi.n	8002cee <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	6939      	ldr	r1, [r7, #16]
 8002ce6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cea:	4013      	ands	r3, r2
 8002cec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	333c      	adds	r3, #60	@ 0x3c
 8002d10:	3304      	adds	r3, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <PCD_EP_OutXfrComplete_int+0x98>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d124      	bne.n	8002d78 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d44:	461a      	mov	r2, r3
 8002d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d4a:	6093      	str	r3, [r2, #8]
 8002d4c:	e01a      	b.n	8002d84 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	2320      	movs	r3, #32
 8002d68:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f006 f863 	bl	8008e3c <HAL_PCD_DataOutStageCallback>
 8002d76:	e005      	b.n	8002d84 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f006 f85c 	bl	8008e3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	4f54310a 	.word	0x4f54310a

08002d94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	333c      	adds	r3, #60	@ 0x3c
 8002dac:	3304      	adds	r3, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <PCD_EP_OutSetupPacket_int+0x64>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d90e      	bls.n	8002de8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de0:	461a      	mov	r2, r3
 8002de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002de6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f006 f815 	bl	8008e18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	4f54300a 	.word	0x4f54300a

08002dfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e1a:	883b      	ldrh	r3, [r7, #0]
 8002e1c:	0419      	lsls	r1, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e28:	e028      	b.n	8002e7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	4413      	add	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e00d      	b.n	8002e5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	3340      	adds	r3, #64	@ 0x40
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	3301      	adds	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d3ec      	bcc.n	8002e3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e64:	883b      	ldrh	r3, [r7, #0]
 8002e66:	0418      	lsls	r0, r3, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6819      	ldr	r1, [r3, #0]
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	4302      	orrs	r2, r0
 8002e74:	3340      	adds	r3, #64	@ 0x40
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ede:	f043 0303 	orr.w	r3, r3, #3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f04:	d102      	bne.n	8002f0c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f0a:	e00b      	b.n	8002f24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f0c:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1a:	d102      	bne.n	8002f22 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f20:	e000      	b.n	8002f24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f22:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40007000 	.word	0x40007000

08002f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d141      	bne.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f42:	4b4b      	ldr	r3, [pc, #300]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4e:	d131      	bne.n	8002fb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f50:	4b47      	ldr	r3, [pc, #284]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f56:	4a46      	ldr	r2, [pc, #280]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f60:	4b43      	ldr	r3, [pc, #268]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f68:	4a41      	ldr	r2, [pc, #260]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f70:	4b40      	ldr	r3, [pc, #256]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2232      	movs	r2, #50	@ 0x32
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	0c9b      	lsrs	r3, r3, #18
 8002f82:	3301      	adds	r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f86:	e002      	b.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8e:	4b38      	ldr	r3, [pc, #224]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d102      	bne.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f2      	bne.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fa2:	4b33      	ldr	r3, [pc, #204]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d158      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e057      	b.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fba:	4a2d      	ldr	r2, [pc, #180]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fc4:	e04d      	b.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fcc:	d141      	bne.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fce:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d131      	bne.n	8003040 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fdc:	4b24      	ldr	r3, [pc, #144]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fe2:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fec:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2232      	movs	r2, #50	@ 0x32
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	4a1c      	ldr	r2, [pc, #112]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	0c9b      	lsrs	r3, r3, #18
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003012:	e002      	b.n	800301a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3b01      	subs	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301a:	4b15      	ldr	r3, [pc, #84]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	d102      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f2      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303a:	d112      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e011      	b.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003046:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003050:	e007      	b.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003052:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003060:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40007000 	.word	0x40007000
 8003074:	20000000 	.word	0x20000000
 8003078:	431bde83 	.word	0x431bde83

0800307c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800308a:	6053      	str	r3, [r2, #4]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40007000 	.word	0x40007000

0800309c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	@ 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f000 bc68 	b.w	8003980 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b0:	4b97      	ldr	r3, [pc, #604]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ba:	4b95      	ldr	r3, [pc, #596]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80e6 	beq.w	800329e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_RCC_OscConfig+0x4c>
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	f040 808d 	bne.w	80031fa <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	f040 8089 	bne.w	80031fa <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e8:	4b89      	ldr	r3, [pc, #548]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d006      	beq.n	8003102 <HAL_RCC_OscConfig+0x66>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f000 bc3f 	b.w	8003980 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003106:	4b82      	ldr	r3, [pc, #520]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_RCC_OscConfig+0x80>
 8003112:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800311a:	e005      	b.n	8003128 <HAL_RCC_OscConfig+0x8c>
 800311c:	4b7c      	ldr	r3, [pc, #496]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003128:	4293      	cmp	r3, r2
 800312a:	d224      	bcs.n	8003176 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fe01 	bl	8003d38 <RCC_SetFlashLatencyFromMSIRange>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f000 bc1f 	b.w	8003980 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003142:	4b73      	ldr	r3, [pc, #460]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a72      	ldr	r2, [pc, #456]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b70      	ldr	r3, [pc, #448]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	496d      	ldr	r1, [pc, #436]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003160:	4b6b      	ldr	r3, [pc, #428]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	4968      	ldr	r1, [pc, #416]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
 8003174:	e025      	b.n	80031c2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003176:	4b66      	ldr	r3, [pc, #408]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a65      	ldr	r2, [pc, #404]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b63      	ldr	r3, [pc, #396]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	4960      	ldr	r1, [pc, #384]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003194:	4b5e      	ldr	r3, [pc, #376]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	495b      	ldr	r1, [pc, #364]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fdc0 	bl	8003d38 <RCC_SetFlashLatencyFromMSIRange>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e3de      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031c2:	f000 fd21 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b51      	ldr	r3, [pc, #324]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4950      	ldr	r1, [pc, #320]	@ (8003314 <HAL_RCC_OscConfig+0x278>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	4a4e      	ldr	r2, [pc, #312]	@ (8003318 <HAL_RCC_OscConfig+0x27c>)
 80031e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031e2:	4b4e      	ldr	r3, [pc, #312]	@ (800331c <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe f9b2 	bl	8001550 <HAL_InitTick>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d052      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	e3c2      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d032      	beq.n	8003268 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003202:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a42      	ldr	r2, [pc, #264]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800320e:	f7fe f9ef 	bl	80015f0 <HAL_GetTick>
 8003212:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003216:	f7fe f9eb 	bl	80015f0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e3ab      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003228:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003234:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800323a:	f043 0308 	orr.w	r3, r3, #8
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b33      	ldr	r3, [pc, #204]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	4930      	ldr	r1, [pc, #192]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003252:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	492b      	ldr	r1, [pc, #172]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
 8003266:	e01a      	b.n	800329e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003268:	4b29      	ldr	r3, [pc, #164]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a28      	ldr	r2, [pc, #160]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003274:	f7fe f9bc 	bl	80015f0 <HAL_GetTick>
 8003278:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800327c:	f7fe f9b8 	bl	80015f0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e378      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800328e:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x1e0>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d073      	beq.n	8003392 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d10e      	bne.n	80032d4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d10b      	bne.n	80032d4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d063      	beq.n	8003390 <HAL_RCC_OscConfig+0x2f4>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d15f      	bne.n	8003390 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e355      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x250>
 80032de:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e025      	b.n	8003338 <HAL_RCC_OscConfig+0x29c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032f4:	d114      	bne.n	8003320 <HAL_RCC_OscConfig+0x284>
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80032fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a02      	ldr	r2, [pc, #8]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e013      	b.n	8003338 <HAL_RCC_OscConfig+0x29c>
 8003310:	40021000 	.word	0x40021000
 8003314:	0800b2dc 	.word	0x0800b2dc
 8003318:	20000000 	.word	0x20000000
 800331c:	20000004 	.word	0x20000004
 8003320:	4b8f      	ldr	r3, [pc, #572]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a8e      	ldr	r2, [pc, #568]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b8c      	ldr	r3, [pc, #560]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a8b      	ldr	r2, [pc, #556]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe f956 	bl	80015f0 <HAL_GetTick>
 8003344:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe f952 	bl	80015f0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	@ 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e312      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335a:	4b81      	ldr	r3, [pc, #516]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x2ac>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe f942 	bl	80015f0 <HAL_GetTick>
 800336c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe f93e 	bl	80015f0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	@ 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e2fe      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003382:	4b77      	ldr	r3, [pc, #476]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d060      	beq.n	8003460 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_OscConfig+0x314>
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d119      	bne.n	80033de <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d116      	bne.n	80033de <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_OscConfig+0x32c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e2db      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b65      	ldr	r3, [pc, #404]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4962      	ldr	r1, [pc, #392]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033dc:	e040      	b.n	8003460 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d023      	beq.n	800342e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe f8fd 	bl	80015f0 <HAL_GetTick>
 80033f6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fa:	f7fe f8f9 	bl	80015f0 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e2b9      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340c:	4b54      	ldr	r3, [pc, #336]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003418:	4b51      	ldr	r3, [pc, #324]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	494e      	ldr	r1, [pc, #312]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e018      	b.n	8003460 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342e:	4b4c      	ldr	r3, [pc, #304]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4b      	ldr	r2, [pc, #300]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe f8d9 	bl	80015f0 <HAL_GetTick>
 800343e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe f8d5 	bl	80015f0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e295      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003454:	4b42      	ldr	r3, [pc, #264]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8082 	beq.w	8003572 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d05f      	beq.n	8003536 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003476:	4b3a      	ldr	r3, [pc, #232]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	429a      	cmp	r2, r3
 800348a:	d037      	beq.n	80034fc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e26d      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01b      	beq.n	80034e6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80034ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034be:	f7fe f897 	bl	80015f0 <HAL_GetTick>
 80034c2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c6:	f7fe f893 	bl	80015f0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b11      	cmp	r3, #17
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e253      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d8:	4b21      	ldr	r3, [pc, #132]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ef      	bne.n	80034c6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80034e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ec:	f023 0210 	bic.w	r2, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	491a      	ldr	r1, [pc, #104]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fc:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fe f870 	bl	80015f0 <HAL_GetTick>
 8003510:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003514:	f7fe f86c 	bl	80015f0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b11      	cmp	r3, #17
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e22c      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003526:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ef      	beq.n	8003514 <HAL_RCC_OscConfig+0x478>
 8003534:	e01d      	b.n	8003572 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003536:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800353c:	4a08      	ldr	r2, [pc, #32]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe f853 	bl	80015f0 <HAL_GetTick>
 800354a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe f84f 	bl	80015f0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b11      	cmp	r3, #17
 800355a:	d903      	bls.n	8003564 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e20f      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
 8003560:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003564:	4b83      	ldr	r3, [pc, #524]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ed      	bne.n	800354e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80bd 	beq.w	80036fa <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003586:	4b7b      	ldr	r3, [pc, #492]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10e      	bne.n	80035b0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	4b78      	ldr	r3, [pc, #480]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	4a77      	ldr	r2, [pc, #476]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	@ 0x58
 800359e:	4b75      	ldr	r3, [pc, #468]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b0:	4b71      	ldr	r3, [pc, #452]	@ (8003778 <HAL_RCC_OscConfig+0x6dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d118      	bne.n	80035ee <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035bc:	4b6e      	ldr	r3, [pc, #440]	@ (8003778 <HAL_RCC_OscConfig+0x6dc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a6d      	ldr	r2, [pc, #436]	@ (8003778 <HAL_RCC_OscConfig+0x6dc>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c8:	f7fe f812 	bl	80015f0 <HAL_GetTick>
 80035cc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d0:	f7fe f80e 	bl	80015f0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1ce      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e2:	4b65      	ldr	r3, [pc, #404]	@ (8003778 <HAL_RCC_OscConfig+0x6dc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02c      	beq.n	8003654 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80035fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003600:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360c:	4959      	ldr	r1, [pc, #356]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003620:	4b54      	ldr	r3, [pc, #336]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003626:	4a53      	ldr	r2, [pc, #332]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003630:	4b50      	ldr	r3, [pc, #320]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	4a4f      	ldr	r2, [pc, #316]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003640:	e018      	b.n	8003674 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003642:	4b4c      	ldr	r3, [pc, #304]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003648:	4a4a      	ldr	r2, [pc, #296]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003652:	e00f      	b.n	8003674 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003654:	4b47      	ldr	r3, [pc, #284]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365a:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003664:	4b43      	ldr	r3, [pc, #268]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	4a42      	ldr	r2, [pc, #264]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d016      	beq.n	80036aa <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fd ffb8 	bl	80015f0 <HAL_GetTick>
 8003680:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd ffb4 	bl	80015f0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e172      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369a:	4b36      	ldr	r3, [pc, #216]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ed      	beq.n	8003684 <HAL_RCC_OscConfig+0x5e8>
 80036a8:	e01d      	b.n	80036e6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fd ffa1 	bl	80015f0 <HAL_GetTick>
 80036ae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd ff9d 	bl	80015f0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e15b      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ed      	bne.n	80036b2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80036d6:	4b27      	ldr	r3, [pc, #156]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036dc:	4a25      	ldr	r2, [pc, #148]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 80036de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b21      	ldr	r3, [pc, #132]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f2:	4a20      	ldr	r2, [pc, #128]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d041      	beq.n	800378a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01c      	beq.n	8003748 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800370e:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003710:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003714:	4a17      	ldr	r2, [pc, #92]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fd ff67 	bl	80015f0 <HAL_GetTick>
 8003722:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003726:	f7fd ff63 	bl	80015f0 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e123      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003738:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 800373a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ef      	beq.n	8003726 <HAL_RCC_OscConfig+0x68a>
 8003746:	e020      	b.n	800378a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003748:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 800374a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800374e:	4a09      	ldr	r2, [pc, #36]	@ (8003774 <HAL_RCC_OscConfig+0x6d8>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fd ff4a 	bl	80015f0 <HAL_GetTick>
 800375c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800375e:	e00d      	b.n	800377c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003760:	f7fd ff46 	bl	80015f0 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d906      	bls.n	800377c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e106      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800377c:	4b82      	ldr	r3, [pc, #520]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 800377e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ea      	bne.n	8003760 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80f5 	beq.w	800397e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	2b02      	cmp	r3, #2
 800379a:	f040 80cb 	bne.w	8003934 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800379e:	4b7a      	ldr	r3, [pc, #488]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0203 	and.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d12c      	bne.n	800380c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037bc:	3b01      	subs	r3, #1
 80037be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d123      	bne.n	800380c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d11b      	bne.n	800380c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d113      	bne.n	800380c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d109      	bne.n	800380c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	3b01      	subs	r3, #1
 8003806:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d06d      	beq.n	80038e8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d068      	beq.n	80038e4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003812:	4b5d      	ldr	r3, [pc, #372]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800381e:	4b5a      	ldr	r3, [pc, #360]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0a8      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800382e:	4b56      	ldr	r3, [pc, #344]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a55      	ldr	r2, [pc, #340]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003834:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003838:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800383a:	f7fd fed9 	bl	80015f0 <HAL_GetTick>
 800383e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7fd fed5 	bl	80015f0 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e095      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003854:	4b4c      	ldr	r3, [pc, #304]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003860:	4b49      	ldr	r3, [pc, #292]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b49      	ldr	r3, [pc, #292]	@ (800398c <HAL_RCC_OscConfig+0x8f0>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003870:	3a01      	subs	r2, #1
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800387a:	0212      	lsls	r2, r2, #8
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003882:	0852      	lsrs	r2, r2, #1
 8003884:	3a01      	subs	r2, #1
 8003886:	0552      	lsls	r2, r2, #21
 8003888:	4311      	orrs	r1, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800388e:	0852      	lsrs	r2, r2, #1
 8003890:	3a01      	subs	r2, #1
 8003892:	0652      	lsls	r2, r2, #25
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800389a:	06d2      	lsls	r2, r2, #27
 800389c:	430a      	orrs	r2, r1
 800389e:	493a      	ldr	r1, [pc, #232]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038a4:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a37      	ldr	r2, [pc, #220]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b0:	4b35      	ldr	r3, [pc, #212]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a34      	ldr	r2, [pc, #208]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038bc:	f7fd fe98 	bl	80015f0 <HAL_GetTick>
 80038c0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd fe94 	bl	80015f0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e054      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e2:	e04c      	b.n	800397e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04b      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e8:	4b27      	ldr	r3, [pc, #156]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d144      	bne.n	800397e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a20      	ldr	r2, [pc, #128]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390c:	f7fd fe70 	bl	80015f0 <HAL_GetTick>
 8003910:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fe6c 	bl	80015f0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e02c      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x878>
 8003932:	e024      	b.n	800397e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d01f      	beq.n	800397a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a12      	ldr	r2, [pc, #72]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fd fe53 	bl	80015f0 <HAL_GetTick>
 800394a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fd fe4f 	bl	80015f0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4905      	ldr	r1, [pc, #20]	@ (8003988 <HAL_RCC_OscConfig+0x8ec>)
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <HAL_RCC_OscConfig+0x8f4>)
 8003974:	4013      	ands	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
 8003978:	e001      	b.n	800397e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3728      	adds	r7, #40	@ 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	019d800c 	.word	0x019d800c
 8003990:	feeefffc 	.word	0xfeeefffc

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e11d      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b90      	ldr	r3, [pc, #576]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d910      	bls.n	80039dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b8d      	ldr	r3, [pc, #564]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 020f 	bic.w	r2, r3, #15
 80039c2:	498b      	ldr	r1, [pc, #556]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b89      	ldr	r3, [pc, #548]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e105      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	4b81      	ldr	r3, [pc, #516]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d908      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	497b      	ldr	r1, [pc, #492]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d079      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d11e      	bne.n	8003a5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1e:	4b75      	ldr	r3, [pc, #468]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0dc      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003a2e:	f000 f9dd 	bl	8003dec <RCC_GetSysClockFreqFromPLLSource>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4a70      	ldr	r2, [pc, #448]	@ (8003bf8 <HAL_RCC_ClockConfig+0x264>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d946      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d140      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a46:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a4e:	4a69      	ldr	r2, [pc, #420]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a56:	2380      	movs	r3, #128	@ 0x80
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e035      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a64:	4b63      	ldr	r3, [pc, #396]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d115      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0b9      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0ad      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8c:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0a5      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a9c:	f000 f8b4 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4a55      	ldr	r2, [pc, #340]	@ (8003bf8 <HAL_RCC_ClockConfig+0x264>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d90f      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003aa8:	4b52      	ldr	r3, [pc, #328]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003abc:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 0203 	bic.w	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4947      	ldr	r1, [pc, #284]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ada:	f7fd fd89 	bl	80015f0 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae2:	f7fd fd85 	bl	80015f0 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e077      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af8:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 020c 	and.w	r2, r3, #12
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d1eb      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b80      	cmp	r3, #128	@ 0x80
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b10:	4b38      	ldr	r3, [pc, #224]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a37      	ldr	r2, [pc, #220]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d010      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b31      	ldr	r3, [pc, #196]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d208      	bcs.n	8003b4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	492b      	ldr	r1, [pc, #172]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4a:	4b29      	ldr	r3, [pc, #164]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d210      	bcs.n	8003b7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b58:	4b25      	ldr	r3, [pc, #148]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 020f 	bic.w	r2, r3, #15
 8003b60:	4923      	ldr	r1, [pc, #140]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b68:	4b21      	ldr	r3, [pc, #132]	@ (8003bf0 <HAL_RCC_ClockConfig+0x25c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e036      	b.n	8003be8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b86:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4918      	ldr	r1, [pc, #96]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4910      	ldr	r1, [pc, #64]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bb8:	f000 f826 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <HAL_RCC_ClockConfig+0x260>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	490c      	ldr	r1, [pc, #48]	@ (8003bfc <HAL_RCC_ClockConfig+0x268>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c00 <HAL_RCC_ClockConfig+0x26c>)
 8003bd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <HAL_RCC_ClockConfig+0x270>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fd fcb7 	bl	8001550 <HAL_InitTick>
 8003be2:	4603      	mov	r3, r0
 8003be4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	04c4b400 	.word	0x04c4b400
 8003bfc:	0800b2dc 	.word	0x0800b2dc
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	@ 0x24
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c16:	4b3e      	ldr	r3, [pc, #248]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c20:	4b3b      	ldr	r3, [pc, #236]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x34>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d121      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d11e      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c3c:	4b34      	ldr	r3, [pc, #208]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c48:	4b31      	ldr	r3, [pc, #196]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e005      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c58:	4b2d      	ldr	r3, [pc, #180]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c64:	4a2b      	ldr	r2, [pc, #172]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d102      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c80:	4b25      	ldr	r3, [pc, #148]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e004      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c8c:	4b23      	ldr	r3, [pc, #140]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d134      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c96:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0xa6>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d003      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8003cac:	e005      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cae:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cb0:	617b      	str	r3, [r7, #20]
      break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cb4:	4b19      	ldr	r3, [pc, #100]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003cb6:	617b      	str	r3, [r7, #20]
      break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	617b      	str	r3, [r7, #20]
      break;
 8003cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	3301      	adds	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	fb03 f202 	mul.w	r2, r3, r2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	0e5b      	lsrs	r3, r3, #25
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d00:	69bb      	ldr	r3, [r7, #24]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	@ 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	0800b2ec 	.word	0x0800b2ec
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000

08003d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f8d0 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
 8003d56:	e014      	b.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b22      	ldr	r3, [pc, #136]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	4a21      	ldr	r2, [pc, #132]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d64:	4b1f      	ldr	r3, [pc, #124]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d70:	f7ff f8c0 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 8003d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d10b      	bne.n	8003da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d913      	bls.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d94:	d902      	bls.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d96:	2302      	movs	r3, #2
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	e00d      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	e00a      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003da6:	d902      	bls.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003da8:	2302      	movs	r3, #2
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e004      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b70      	cmp	r3, #112	@ 0x70
 8003db2:	d101      	bne.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003db4:	2301      	movs	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 020f 	bic.w	r2, r3, #15
 8003dc0:	4909      	ldr	r1, [pc, #36]	@ (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dc8:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d001      	beq.n	8003dda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40022000 	.word	0x40022000

08003dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003df2:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d00b      	beq.n	8003e1a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d825      	bhi.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d008      	beq.n	8003e20 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d11f      	bne.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e14:	4b25      	ldr	r3, [pc, #148]	@ (8003eac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e16:	613b      	str	r3, [r7, #16]
    break;
 8003e18:	e01f      	b.n	8003e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e1a:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e1c:	613b      	str	r3, [r7, #16]
    break;
 8003e1e:	e01c      	b.n	8003e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e005      	b.n	8003e48 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003e48:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e50:	613b      	str	r3, [r7, #16]
    break;
 8003e52:	e002      	b.n	8003e5a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
    break;
 8003e58:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	3301      	adds	r3, #1
 8003e66:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e68:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	fb03 f202 	mul.w	r2, r3, r2
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e80:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0e5b      	lsrs	r3, r3, #25
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e9a:	683b      	ldr	r3, [r7, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	007a1200 	.word	0x007a1200
 8003eb4:	0800b2ec 	.word	0x0800b2ec

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d040      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ed8:	2b80      	cmp	r3, #128	@ 0x80
 8003eda:	d02a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003edc:	2b80      	cmp	r3, #128	@ 0x80
 8003ede:	d825      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ee0:	2b60      	cmp	r3, #96	@ 0x60
 8003ee2:	d026      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ee4:	2b60      	cmp	r3, #96	@ 0x60
 8003ee6:	d821      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d006      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003eec:	2b40      	cmp	r3, #64	@ 0x40
 8003eee:	d81d      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003ef8:	e018      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003efa:	4b89      	ldr	r3, [pc, #548]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a88      	ldr	r2, [pc, #544]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f06:	e015      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fb3e 	bl	8004590 <RCCEx_PLLSAI1_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f18:	e00c      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3320      	adds	r3, #32
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fc29 	bl	8004778 <RCCEx_PLLSAI2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	74fb      	strb	r3, [r7, #19]
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f3a:	4b79      	ldr	r3, [pc, #484]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f40:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f48:	4975      	ldr	r1, [pc, #468]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f50:	e001      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d047      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6a:	d030      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f70:	d82a      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f76:	d02a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7c:	d824      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f82:	d008      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f88:	d81e      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f94:	e018      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f96:	4b62      	ldr	r3, [pc, #392]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a61      	ldr	r2, [pc, #388]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa2:	e015      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 faf0 	bl	8004590 <RCCEx_PLLSAI1_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb4:	e00c      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3320      	adds	r3, #32
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fbdb 	bl	8004778 <RCCEx_PLLSAI2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	74fb      	strb	r3, [r7, #19]
      break;
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd6:	4b52      	ldr	r3, [pc, #328]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	494e      	ldr	r1, [pc, #312]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003fec:	e001      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 809f 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004004:	4b46      	ldr	r3, [pc, #280]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6593      	str	r3, [r2, #88]	@ 0x58
 8004026:	4b3e      	ldr	r3, [pc, #248]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004032:	2301      	movs	r3, #1
 8004034:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004036:	4b3b      	ldr	r3, [pc, #236]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3a      	ldr	r2, [pc, #232]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004040:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004042:	f7fd fad5 	bl	80015f0 <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004048:	e009      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd fad1 	bl	80015f0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d902      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	74fb      	strb	r3, [r7, #19]
        break;
 800405c:	e005      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800405e:	4b31      	ldr	r3, [pc, #196]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ef      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d15b      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01f      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	429a      	cmp	r2, r3
 800408c:	d019      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800408e:	4b24      	ldr	r3, [pc, #144]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004098:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800409a:	4b21      	ldr	r3, [pc, #132]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ba:	4a19      	ldr	r2, [pc, #100]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d016      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fa90 	bl	80015f0 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	e00b      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fd fa8c 	bl	80015f0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d902      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	74fb      	strb	r3, [r7, #19]
            break;
 80040ea:	e006      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0ec      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10c      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004100:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004106:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004110:	4903      	ldr	r1, [pc, #12]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004118:	e008      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	74bb      	strb	r3, [r7, #18]
 800411e:	e005      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800412c:	7c7b      	ldrb	r3, [r7, #17]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4ba0      	ldr	r3, [pc, #640]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	4a9f      	ldr	r2, [pc, #636]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800413c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414a:	4b9a      	ldr	r3, [pc, #616]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f023 0203 	bic.w	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	4996      	ldr	r1, [pc, #600]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800416c:	4b91      	ldr	r3, [pc, #580]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f023 020c 	bic.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	498e      	ldr	r1, [pc, #568]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800418e:	4b89      	ldr	r3, [pc, #548]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	4985      	ldr	r1, [pc, #532]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b0:	4b80      	ldr	r3, [pc, #512]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	497d      	ldr	r1, [pc, #500]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d2:	4b78      	ldr	r3, [pc, #480]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e0:	4974      	ldr	r1, [pc, #464]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f4:	4b6f      	ldr	r3, [pc, #444]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004202:	496c      	ldr	r1, [pc, #432]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004216:	4b67      	ldr	r3, [pc, #412]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004224:	4963      	ldr	r1, [pc, #396]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004238:	4b5e      	ldr	r3, [pc, #376]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004246:	495b      	ldr	r1, [pc, #364]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425a:	4b56      	ldr	r3, [pc, #344]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	4952      	ldr	r1, [pc, #328]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800427c:	4b4d      	ldr	r3, [pc, #308]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	494a      	ldr	r1, [pc, #296]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429e:	4b45      	ldr	r3, [pc, #276]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	4941      	ldr	r1, [pc, #260]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042c0:	4b3c      	ldr	r3, [pc, #240]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ce:	4939      	ldr	r1, [pc, #228]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d028      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e2:	4b34      	ldr	r3, [pc, #208]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f0:	4930      	ldr	r1, [pc, #192]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004300:	d106      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004302:	4b2c      	ldr	r3, [pc, #176]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004308:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430c:	60d3      	str	r3, [r2, #12]
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004318:	d10c      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	2101      	movs	r1, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f935 	bl	8004590 <RCCEx_PLLSAI1_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d04d      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004348:	d108      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800434a:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004350:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004356:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800435a:	e012      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800435c:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004362:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004364:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004368:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800437a:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438a:	d106      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a08      	ldr	r2, [pc, #32]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
 8004398:	e020      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800439e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a2:	d109      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043a4:	4b03      	ldr	r3, [pc, #12]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a02      	ldr	r2, [pc, #8]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ae:	60d3      	str	r3, [r2, #12]
 80043b0:	e014      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2101      	movs	r1, #1
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f8e1 	bl	8004590 <RCCEx_PLLSAI1_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d028      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043e8:	4b68      	ldr	r3, [pc, #416]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f6:	4965      	ldr	r1, [pc, #404]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004406:	d106      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004408:	4b60      	ldr	r3, [pc, #384]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a5f      	ldr	r2, [pc, #380]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800440e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004412:	60d3      	str	r3, [r2, #12]
 8004414:	e011      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800441e:	d10c      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f8b2 	bl	8004590 <RCCEx_PLLSAI1_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004446:	4b51      	ldr	r3, [pc, #324]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004456:	494d      	ldr	r1, [pc, #308]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f88d 	bl	8004590 <RCCEx_PLLSAI1_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004490:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004496:	f023 0204 	bic.w	r2, r3, #4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a0:	493a      	ldr	r1, [pc, #232]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044b4:	4b35      	ldr	r3, [pc, #212]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ba:	f023 0218 	bic.w	r2, r3, #24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	4931      	ldr	r1, [pc, #196]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d035      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044d8:	4b2c      	ldr	r3, [pc, #176]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e4:	f7fd f884 	bl	80015f0 <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044ea:	e009      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044ec:	f7fd f880 	bl	80015f0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d902      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	74fb      	strb	r3, [r7, #19]
        break;
 80044fe:	e005      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004500:	4b22      	ldr	r3, [pc, #136]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ef      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d113      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004512:	4b1e      	ldr	r3, [pc, #120]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004522:	491a      	ldr	r1, [pc, #104]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3320      	adds	r3, #32
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f921 	bl	8004778 <RCCEx_PLLSAI2_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800453a:	7cfb      	ldrb	r3, [r7, #19]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d017      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004550:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004552:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004556:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004560:	490a      	ldr	r1, [pc, #40]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004572:	d105      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a04      	ldr	r2, [pc, #16]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004580:	7cbb      	ldrb	r3, [r7, #18]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000

08004590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800459e:	4b72      	ldr	r3, [pc, #456]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00e      	beq.n	80045c8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0203 	and.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d103      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
       ||
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d142      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e03f      	b.n	8004648 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d018      	beq.n	8004602 <RCCEx_PLLSAI1_Config+0x72>
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d825      	bhi.n	8004620 <RCCEx_PLLSAI1_Config+0x90>
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d002      	beq.n	80045de <RCCEx_PLLSAI1_Config+0x4e>
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d009      	beq.n	80045f0 <RCCEx_PLLSAI1_Config+0x60>
 80045dc:	e020      	b.n	8004620 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045de:	4b62      	ldr	r3, [pc, #392]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11d      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ee:	e01a      	b.n	8004626 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d116      	bne.n	800462a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004600:	e013      	b.n	800462a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004602:	4b59      	ldr	r3, [pc, #356]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800460e:	4b56      	ldr	r3, [pc, #344]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800461e:	e006      	b.n	800462e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
      break;
 8004624:	e004      	b.n	8004630 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004626:	bf00      	nop
 8004628:	e002      	b.n	8004630 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800462e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004636:	4b4c      	ldr	r3, [pc, #304]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4949      	ldr	r1, [pc, #292]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004644:	4313      	orrs	r3, r2
 8004646:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 8086 	bne.w	800475c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004650:	4b45      	ldr	r3, [pc, #276]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a44      	ldr	r2, [pc, #272]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800465a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465c:	f7fc ffc8 	bl	80015f0 <HAL_GetTick>
 8004660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004662:	e009      	b.n	8004678 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004664:	f7fc ffc4 	bl	80015f0 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d902      	bls.n	8004678 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	73fb      	strb	r3, [r7, #15]
        break;
 8004676:	e005      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004678:	4b3b      	ldr	r3, [pc, #236]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ef      	bne.n	8004664 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d168      	bne.n	800475c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d113      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004690:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	4b35      	ldr	r3, [pc, #212]	@ (800476c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004696:	4013      	ands	r3, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6892      	ldr	r2, [r2, #8]
 800469c:	0211      	lsls	r1, r2, #8
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68d2      	ldr	r2, [r2, #12]
 80046a2:	06d2      	lsls	r2, r2, #27
 80046a4:	4311      	orrs	r1, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6852      	ldr	r2, [r2, #4]
 80046aa:	3a01      	subs	r2, #1
 80046ac:	0112      	lsls	r2, r2, #4
 80046ae:	430a      	orrs	r2, r1
 80046b0:	492d      	ldr	r1, [pc, #180]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	610b      	str	r3, [r1, #16]
 80046b6:	e02d      	b.n	8004714 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d115      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046be:	4b2a      	ldr	r3, [pc, #168]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6892      	ldr	r2, [r2, #8]
 80046ca:	0211      	lsls	r1, r2, #8
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6912      	ldr	r2, [r2, #16]
 80046d0:	0852      	lsrs	r2, r2, #1
 80046d2:	3a01      	subs	r2, #1
 80046d4:	0552      	lsls	r2, r2, #21
 80046d6:	4311      	orrs	r1, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6852      	ldr	r2, [r2, #4]
 80046dc:	3a01      	subs	r2, #1
 80046de:	0112      	lsls	r2, r2, #4
 80046e0:	430a      	orrs	r2, r1
 80046e2:	4921      	ldr	r1, [pc, #132]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
 80046e8:	e014      	b.n	8004714 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6892      	ldr	r2, [r2, #8]
 80046f6:	0211      	lsls	r1, r2, #8
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6952      	ldr	r2, [r2, #20]
 80046fc:	0852      	lsrs	r2, r2, #1
 80046fe:	3a01      	subs	r2, #1
 8004700:	0652      	lsls	r2, r2, #25
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6852      	ldr	r2, [r2, #4]
 8004708:	3a01      	subs	r2, #1
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	430a      	orrs	r2, r1
 800470e:	4916      	ldr	r1, [pc, #88]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004710:	4313      	orrs	r3, r2
 8004712:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004714:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a13      	ldr	r2, [pc, #76]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 800471a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800471e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fc ff66 	bl	80015f0 <HAL_GetTick>
 8004724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004726:	e009      	b.n	800473c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004728:	f7fc ff62 	bl	80015f0 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d902      	bls.n	800473c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	73fb      	strb	r3, [r7, #15]
          break;
 800473a:	e005      	b.n	8004748 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800473c:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ef      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800474e:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	4904      	ldr	r1, [pc, #16]	@ (8004768 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	07ff800f 	.word	0x07ff800f
 8004770:	ff9f800f 	.word	0xff9f800f
 8004774:	f9ff800f 	.word	0xf9ff800f

08004778 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004786:	4b72      	ldr	r3, [pc, #456]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00e      	beq.n	80047b0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004792:	4b6f      	ldr	r3, [pc, #444]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0203 	and.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d103      	bne.n	80047aa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
       ||
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d142      	bne.n	8004830 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
 80047ae:	e03f      	b.n	8004830 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d018      	beq.n	80047ea <RCCEx_PLLSAI2_Config+0x72>
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d825      	bhi.n	8004808 <RCCEx_PLLSAI2_Config+0x90>
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d002      	beq.n	80047c6 <RCCEx_PLLSAI2_Config+0x4e>
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d009      	beq.n	80047d8 <RCCEx_PLLSAI2_Config+0x60>
 80047c4:	e020      	b.n	8004808 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047c6:	4b62      	ldr	r3, [pc, #392]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11d      	bne.n	800480e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d6:	e01a      	b.n	800480e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047d8:	4b5d      	ldr	r3, [pc, #372]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d116      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e8:	e013      	b.n	8004812 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ea:	4b59      	ldr	r3, [pc, #356]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047f6:	4b56      	ldr	r3, [pc, #344]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004806:	e006      	b.n	8004816 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e004      	b.n	8004818 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004816:	bf00      	nop
    }

    if(status == HAL_OK)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d108      	bne.n	8004830 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800481e:	4b4c      	ldr	r3, [pc, #304]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4949      	ldr	r1, [pc, #292]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 800482c:	4313      	orrs	r3, r2
 800482e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 8086 	bne.w	8004944 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004838:	4b45      	ldr	r3, [pc, #276]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a44      	ldr	r2, [pc, #272]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fc fed4 	bl	80015f0 <HAL_GetTick>
 8004848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800484a:	e009      	b.n	8004860 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800484c:	f7fc fed0 	bl	80015f0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d902      	bls.n	8004860 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	73fb      	strb	r3, [r7, #15]
        break;
 800485e:	e005      	b.n	800486c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004860:	4b3b      	ldr	r3, [pc, #236]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ef      	bne.n	800484c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d168      	bne.n	8004944 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d113      	bne.n	80048a0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004878:	4b35      	ldr	r3, [pc, #212]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	4b35      	ldr	r3, [pc, #212]	@ (8004954 <RCCEx_PLLSAI2_Config+0x1dc>)
 800487e:	4013      	ands	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6892      	ldr	r2, [r2, #8]
 8004884:	0211      	lsls	r1, r2, #8
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	06d2      	lsls	r2, r2, #27
 800488c:	4311      	orrs	r1, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6852      	ldr	r2, [r2, #4]
 8004892:	3a01      	subs	r2, #1
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	430a      	orrs	r2, r1
 8004898:	492d      	ldr	r1, [pc, #180]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	614b      	str	r3, [r1, #20]
 800489e:	e02d      	b.n	80048fc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d115      	bne.n	80048d2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004958 <RCCEx_PLLSAI2_Config+0x1e0>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	0211      	lsls	r1, r2, #8
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6912      	ldr	r2, [r2, #16]
 80048b8:	0852      	lsrs	r2, r2, #1
 80048ba:	3a01      	subs	r2, #1
 80048bc:	0552      	lsls	r2, r2, #21
 80048be:	4311      	orrs	r1, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6852      	ldr	r2, [r2, #4]
 80048c4:	3a01      	subs	r2, #1
 80048c6:	0112      	lsls	r2, r2, #4
 80048c8:	430a      	orrs	r2, r1
 80048ca:	4921      	ldr	r1, [pc, #132]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	614b      	str	r3, [r1, #20]
 80048d0:	e014      	b.n	80048fc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	4b21      	ldr	r3, [pc, #132]	@ (800495c <RCCEx_PLLSAI2_Config+0x1e4>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6892      	ldr	r2, [r2, #8]
 80048de:	0211      	lsls	r1, r2, #8
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6952      	ldr	r2, [r2, #20]
 80048e4:	0852      	lsrs	r2, r2, #1
 80048e6:	3a01      	subs	r2, #1
 80048e8:	0652      	lsls	r2, r2, #25
 80048ea:	4311      	orrs	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6852      	ldr	r2, [r2, #4]
 80048f0:	3a01      	subs	r2, #1
 80048f2:	0112      	lsls	r2, r2, #4
 80048f4:	430a      	orrs	r2, r1
 80048f6:	4916      	ldr	r1, [pc, #88]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048fc:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a13      	ldr	r2, [pc, #76]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fc fe72 	bl	80015f0 <HAL_GetTick>
 800490c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800490e:	e009      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004910:	f7fc fe6e 	bl	80015f0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	73fb      	strb	r3, [r7, #15]
          break;
 8004922:	e005      	b.n	8004930 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004924:	4b0a      	ldr	r3, [pc, #40]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ef      	beq.n	8004910 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	4904      	ldr	r1, [pc, #16]	@ (8004950 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004940:	4313      	orrs	r3, r2
 8004942:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
 8004954:	07ff800f 	.word	0x07ff800f
 8004958:	ff9f800f 	.word	0xff9f800f
 800495c:	f9ff800f 	.word	0xf9ff800f

08004960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e049      	b.n	8004a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fc9c 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 f9d6 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d001      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e04f      	b.n	8004ac8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a23      	ldr	r2, [pc, #140]	@ (8004ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01d      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x76>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a52:	d018      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x76>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x76>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <HAL_TIM_Base_Start_IT+0xcc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x76>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x76>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x76>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a19      	ldr	r2, [pc, #100]	@ (8004ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d115      	bne.n	8004ab2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <HAL_TIM_Base_Start_IT+0xdc>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d015      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0xb4>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9e:	d011      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab0:	e008      	b.n	8004ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00
 8004ae4:	40013400 	.word	0x40013400
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	00010007 	.word	0x00010007

08004af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d020      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0202 	mvn.w	r2, #2
 8004b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8e9 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8db 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f8ec 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d020      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0204 	mvn.w	r2, #4
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8c3 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8b5 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f8c6 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d020      	beq.n	8004bec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0208 	mvn.w	r2, #8
 8004bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f89d 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f88f 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8a0 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d020      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0210 	mvn.w	r2, #16
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f877 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f869 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f87a 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0201 	mvn.w	r2, #1
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fb ffe0 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f99b 	bl	8004fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00c      	beq.n	8004cae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f993 	bl	8004fd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f834 	bl	8004d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f06f 0220 	mvn.w	r2, #32
 8004cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f95b 	bl	8004fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a46      	ldr	r2, [pc, #280]	@ (8004e7c <TIM_Base_SetConfig+0x12c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6e:	d00f      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a43      	ldr	r2, [pc, #268]	@ (8004e80 <TIM_Base_SetConfig+0x130>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a42      	ldr	r2, [pc, #264]	@ (8004e84 <TIM_Base_SetConfig+0x134>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a41      	ldr	r2, [pc, #260]	@ (8004e88 <TIM_Base_SetConfig+0x138>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a40      	ldr	r2, [pc, #256]	@ (8004e8c <TIM_Base_SetConfig+0x13c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d108      	bne.n	8004da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a35      	ldr	r2, [pc, #212]	@ (8004e7c <TIM_Base_SetConfig+0x12c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db0:	d01b      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a32      	ldr	r2, [pc, #200]	@ (8004e80 <TIM_Base_SetConfig+0x130>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d017      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a31      	ldr	r2, [pc, #196]	@ (8004e84 <TIM_Base_SetConfig+0x134>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a30      	ldr	r2, [pc, #192]	@ (8004e88 <TIM_Base_SetConfig+0x138>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e8c <TIM_Base_SetConfig+0x13c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004e90 <TIM_Base_SetConfig+0x140>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e94 <TIM_Base_SetConfig+0x144>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0x9a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <TIM_Base_SetConfig+0x148>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <TIM_Base_SetConfig+0x12c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00f      	beq.n	8004e48 <TIM_Base_SetConfig+0xf8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a18      	ldr	r2, [pc, #96]	@ (8004e8c <TIM_Base_SetConfig+0x13c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <TIM_Base_SetConfig+0xf8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <TIM_Base_SetConfig+0x140>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <TIM_Base_SetConfig+0xf8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <TIM_Base_SetConfig+0x144>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0xf8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a15      	ldr	r2, [pc, #84]	@ (8004e98 <TIM_Base_SetConfig+0x148>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40013400 	.word	0x40013400
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800

08004e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e068      	b.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1e      	ldr	r2, [pc, #120]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01d      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f26:	d018      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a18      	ldr	r2, [pc, #96]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a14      	ldr	r2, [pc, #80]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d10c      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40014000 	.word	0x40014000

08004fac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fe8:	b084      	sub	sp, #16
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	f107 001c 	add.w	r0, r7, #28
 8004ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f001 fa26 	bl	8006458 <USB_CoreReset>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005010:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	@ 0x38
 8005024:	e005      	b.n	8005032 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800503e:	b004      	add	sp, #16
 8005040:	4770      	bx	lr
	...

08005044 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d165      	bne.n	8005124 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a3e      	ldr	r2, [pc, #248]	@ (8005154 <USB_SetTurnaroundTime+0x110>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d906      	bls.n	800506e <USB_SetTurnaroundTime+0x2a>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4a3d      	ldr	r2, [pc, #244]	@ (8005158 <USB_SetTurnaroundTime+0x114>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d202      	bcs.n	800506e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005068:	230f      	movs	r3, #15
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e05c      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4a39      	ldr	r2, [pc, #228]	@ (8005158 <USB_SetTurnaroundTime+0x114>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d306      	bcc.n	8005084 <USB_SetTurnaroundTime+0x40>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4a38      	ldr	r2, [pc, #224]	@ (800515c <USB_SetTurnaroundTime+0x118>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d202      	bcs.n	8005084 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800507e:	230e      	movs	r3, #14
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e051      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a35      	ldr	r2, [pc, #212]	@ (800515c <USB_SetTurnaroundTime+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d306      	bcc.n	800509a <USB_SetTurnaroundTime+0x56>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4a34      	ldr	r2, [pc, #208]	@ (8005160 <USB_SetTurnaroundTime+0x11c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d202      	bcs.n	800509a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005094:	230d      	movs	r3, #13
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e046      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <USB_SetTurnaroundTime+0x11c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d306      	bcc.n	80050b0 <USB_SetTurnaroundTime+0x6c>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005164 <USB_SetTurnaroundTime+0x120>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d802      	bhi.n	80050b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050aa:	230c      	movs	r3, #12
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e03b      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005164 <USB_SetTurnaroundTime+0x120>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d906      	bls.n	80050c6 <USB_SetTurnaroundTime+0x82>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005168 <USB_SetTurnaroundTime+0x124>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d802      	bhi.n	80050c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050c0:	230b      	movs	r3, #11
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e030      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a27      	ldr	r2, [pc, #156]	@ (8005168 <USB_SetTurnaroundTime+0x124>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d906      	bls.n	80050dc <USB_SetTurnaroundTime+0x98>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4a26      	ldr	r2, [pc, #152]	@ (800516c <USB_SetTurnaroundTime+0x128>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d802      	bhi.n	80050dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050d6:	230a      	movs	r3, #10
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e025      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a23      	ldr	r2, [pc, #140]	@ (800516c <USB_SetTurnaroundTime+0x128>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d906      	bls.n	80050f2 <USB_SetTurnaroundTime+0xae>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4a22      	ldr	r2, [pc, #136]	@ (8005170 <USB_SetTurnaroundTime+0x12c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d202      	bcs.n	80050f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050ec:	2309      	movs	r3, #9
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e01a      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005170 <USB_SetTurnaroundTime+0x12c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d306      	bcc.n	8005108 <USB_SetTurnaroundTime+0xc4>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005174 <USB_SetTurnaroundTime+0x130>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d802      	bhi.n	8005108 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005102:	2308      	movs	r3, #8
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e00f      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a1a      	ldr	r2, [pc, #104]	@ (8005174 <USB_SetTurnaroundTime+0x130>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d906      	bls.n	800511e <USB_SetTurnaroundTime+0xda>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a19      	ldr	r2, [pc, #100]	@ (8005178 <USB_SetTurnaroundTime+0x134>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d202      	bcs.n	800511e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005118:	2307      	movs	r3, #7
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e004      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800511e:	2306      	movs	r3, #6
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e001      	b.n	8005128 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005124:	2309      	movs	r3, #9
 8005126:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	029b      	lsls	r3, r3, #10
 800513c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	00d8acbf 	.word	0x00d8acbf
 8005158:	00e4e1c0 	.word	0x00e4e1c0
 800515c:	00f42400 	.word	0x00f42400
 8005160:	01067380 	.word	0x01067380
 8005164:	011a499f 	.word	0x011a499f
 8005168:	01312cff 	.word	0x01312cff
 800516c:	014ca43f 	.word	0x014ca43f
 8005170:	016e3600 	.word	0x016e3600
 8005174:	01a6ab1f 	.word	0x01a6ab1f
 8005178:	01e84800 	.word	0x01e84800

0800517c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d115      	bne.n	800520e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051ee:	200a      	movs	r0, #10
 80051f0:	f7fc fa0a 	bl	8001608 <HAL_Delay>
      ms += 10U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	330a      	adds	r3, #10
 80051f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 f8b3 	bl	8006366 <USB_GetMode>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d01e      	beq.n	8005244 <USB_SetCurrentMode+0x84>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2bc7      	cmp	r3, #199	@ 0xc7
 800520a:	d9f0      	bls.n	80051ee <USB_SetCurrentMode+0x2e>
 800520c:	e01a      	b.n	8005244 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d115      	bne.n	8005240 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005220:	200a      	movs	r0, #10
 8005222:	f7fc f9f1 	bl	8001608 <HAL_Delay>
      ms += 10U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	330a      	adds	r3, #10
 800522a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 f89a 	bl	8006366 <USB_GetMode>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <USB_SetCurrentMode+0x84>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2bc7      	cmp	r3, #199	@ 0xc7
 800523c:	d9f0      	bls.n	8005220 <USB_SetCurrentMode+0x60>
 800523e:	e001      	b.n	8005244 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e005      	b.n	8005250 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2bc8      	cmp	r3, #200	@ 0xc8
 8005248:	d101      	bne.n	800524e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005258:	b084      	sub	sp, #16
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e009      	b.n	800528c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3340      	adds	r3, #64	@ 0x40
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3301      	adds	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b0e      	cmp	r3, #14
 8005290:	d9f2      	bls.n	8005278 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005292:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11c      	bne.n	80052d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e005      	b.n	80052e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052e6:	461a      	mov	r2, r3
 80052e8:	2300      	movs	r3, #0
 80052ea:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052ec:	2103      	movs	r1, #3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f95a 	bl	80055a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052f4:	2110      	movs	r1, #16
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8f6 	bl	80054e8 <USB_FlushTxFifo>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f920 	bl	800554c <USB_FlushRxFifo>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005334:	461a      	mov	r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e043      	b.n	80053c8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005356:	d118      	bne.n	800538a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536a:	461a      	mov	r2, r3
 800536c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e013      	b.n	800539c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005380:	461a      	mov	r2, r3
 8005382:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e008      	b.n	800539c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005396:	461a      	mov	r2, r3
 8005398:	2300      	movs	r3, #0
 800539a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a8:	461a      	mov	r2, r3
 80053aa:	2300      	movs	r3, #0
 80053ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ba:	461a      	mov	r2, r3
 80053bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3301      	adds	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053cc:	461a      	mov	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d3b5      	bcc.n	8005340 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	e043      	b.n	8005462 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053f0:	d118      	bne.n	8005424 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e013      	b.n	8005436 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800541a:	461a      	mov	r2, r3
 800541c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e008      	b.n	8005436 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005430:	461a      	mov	r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005442:	461a      	mov	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005454:	461a      	mov	r2, r3
 8005456:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800545a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	3301      	adds	r3, #1
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005466:	461a      	mov	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4293      	cmp	r3, r2
 800546c:	d3b5      	bcc.n	80053da <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005480:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800548e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f043 0210 	orr.w	r2, r3, #16
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	4b10      	ldr	r3, [pc, #64]	@ (80054e4 <USB_DevInit+0x28c>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f043 0208 	orr.w	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d107      	bne.n	80054d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054cc:	f043 0304 	orr.w	r3, r3, #4
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054e0:	b004      	add	sp, #16
 80054e2:	4770      	bx	lr
 80054e4:	803c3800 	.word	0x803c3800

080054e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3301      	adds	r3, #1
 80054fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005502:	d901      	bls.n	8005508 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e01b      	b.n	8005540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	daf2      	bge.n	80054f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	019b      	lsls	r3, r3, #6
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800552c:	d901      	bls.n	8005532 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e006      	b.n	8005540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b20      	cmp	r3, #32
 800553c:	d0f0      	beq.n	8005520 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3301      	adds	r3, #1
 800555c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005564:	d901      	bls.n	800556a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e018      	b.n	800559c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	daf2      	bge.n	8005558 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2210      	movs	r2, #16
 800557a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005588:	d901      	bls.n	800558e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e006      	b.n	800559c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b10      	cmp	r3, #16
 8005598:	d0f0      	beq.n	800557c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0306 	and.w	r3, r3, #6
 80055f2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d002      	beq.n	8005600 <USB_GetDevSpeed+0x26>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d102      	bne.n	8005606 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005600:	2302      	movs	r3, #2
 8005602:	75fb      	strb	r3, [r7, #23]
 8005604:	e001      	b.n	800560a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005606:	230f      	movs	r3, #15
 8005608:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
}
 800560c:	4618      	mov	r0, r3
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d13a      	bne.n	80056aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	b29b      	uxth	r3, r3
 800564c:	68f9      	ldr	r1, [r7, #12]
 800564e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005652:	4313      	orrs	r3, r2
 8005654:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d155      	bne.n	8005718 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	791b      	ldrb	r3, [r3, #4]
 8005686:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005688:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	059b      	lsls	r3, r3, #22
 800568e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005690:	4313      	orrs	r3, r2
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800569e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	e036      	b.n	8005718 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	2101      	movs	r1, #1
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11a      	bne.n	8005718 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	791b      	ldrb	r3, [r3, #4]
 80056fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056fe:	430b      	orrs	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005716:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
	...

08005728 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d161      	bne.n	8005808 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800575a:	d11f      	bne.n	800579c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005776:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800577a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	440a      	add	r2, r1
 8005792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005796:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800579a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f303 	lsl.w	r3, r1, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057bc:	4013      	ands	r3, r2
 80057be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057e0:	4013      	ands	r3, r2
 80057e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	0159      	lsls	r1, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	440b      	add	r3, r1
 80057fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fe:	4619      	mov	r1, r3
 8005800:	4b35      	ldr	r3, [pc, #212]	@ (80058d8 <USB_DeactivateEndpoint+0x1b0>)
 8005802:	4013      	ands	r3, r2
 8005804:	600b      	str	r3, [r1, #0]
 8005806:	e060      	b.n	80058ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800581a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800581e:	d11f      	bne.n	8005860 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800583a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800583e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800585a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800585e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2101      	movs	r1, #1
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	43db      	mvns	r3, r3
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005880:	4013      	ands	r3, r2
 8005882:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2101      	movs	r1, #1
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	43db      	mvns	r3, r3
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058a4:	4013      	ands	r3, r2
 80058a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	0159      	lsls	r1, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	440b      	add	r3, r1
 80058be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c2:	4619      	mov	r1, r3
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <USB_DeactivateEndpoint+0x1b4>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	ec337800 	.word	0xec337800
 80058dc:	eff37800 	.word	0xeff37800

080058e0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 812d 	bne.w	8005b58 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d132      	bne.n	800596c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005920:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005924:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005964:	0cdb      	lsrs	r3, r3, #19
 8005966:	04db      	lsls	r3, r3, #19
 8005968:	6113      	str	r3, [r2, #16]
 800596a:	e097      	b.n	8005a9c <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005986:	0cdb      	lsrs	r3, r3, #19
 8005988:	04db      	lsls	r3, r3, #19
 800598a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d11a      	bne.n	80059ec <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d903      	bls.n	80059ca <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059e8:	6113      	str	r3, [r2, #16]
 80059ea:	e044      	b.n	8005a76 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4413      	add	r3, r2
 80059f6:	1e5a      	subs	r2, r3, #1
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	89fb      	ldrh	r3, [r7, #14]
 8005a12:	04d9      	lsls	r1, r3, #19
 8005a14:	4b8f      	ldr	r3, [pc, #572]	@ (8005c54 <USB_EPStartXfer+0x374>)
 8005a16:	400b      	ands	r3, r1
 8005a18:	6939      	ldr	r1, [r7, #16]
 8005a1a:	0148      	lsls	r0, r1, #5
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	4401      	add	r1, r0
 8005a20:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a24:	4313      	orrs	r3, r2
 8005a26:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d122      	bne.n	8005a76 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005a4e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	89fb      	ldrh	r3, [r7, #14]
 8005a60:	075b      	lsls	r3, r3, #29
 8005a62:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	0148      	lsls	r0, r1, #5
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	4401      	add	r1, r0
 8005a6e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a8c:	6939      	ldr	r1, [r7, #16]
 8005a8e:	0148      	lsls	r0, r1, #5
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	4401      	add	r1, r0
 8005a94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ab6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005aba:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	791b      	ldrb	r3, [r3, #4]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d015      	beq.n	8005af0 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 813a 	beq.w	8005d42 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	2101      	movs	r1, #1
 8005ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aea:	4313      	orrs	r3, r2
 8005aec:	634b      	str	r3, [r1, #52]	@ 0x34
 8005aee:	e128      	b.n	8005d42 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d110      	bne.n	8005b22 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e00f      	b.n	8005b42 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68d9      	ldr	r1, [r3, #12]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781a      	ldrb	r2, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f9a7 	bl	8005ea4 <USB_WritePacket>
 8005b56:	e0f4      	b.n	8005d42 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b72:	0cdb      	lsrs	r3, r3, #19
 8005b74:	04db      	lsls	r3, r3, #19
 8005b76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b9a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d12f      	bne.n	8005c02 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bd0:	6939      	ldr	r1, [r7, #16]
 8005bd2:	0148      	lsls	r0, r1, #5
 8005bd4:	6979      	ldr	r1, [r7, #20]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bfe:	6113      	str	r3, [r2, #16]
 8005c00:	e062      	b.n	8005cc8 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d126      	bne.n	8005c58 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c20:	6939      	ldr	r1, [r7, #16]
 8005c22:	0148      	lsls	r0, r1, #5
 8005c24:	6979      	ldr	r1, [r7, #20]
 8005c26:	4401      	add	r1, r0
 8005c28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c4e:	6113      	str	r3, [r2, #16]
 8005c50:	e03a      	b.n	8005cc8 <USB_EPStartXfer+0x3e8>
 8005c52:	bf00      	nop
 8005c54:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	1e5a      	subs	r2, r3, #1
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	89fa      	ldrh	r2, [r7, #14]
 8005c74:	fb03 f202 	mul.w	r2, r3, r2
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	89fb      	ldrh	r3, [r7, #14]
 8005c8c:	04d9      	lsls	r1, r3, #19
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d4c <USB_EPStartXfer+0x46c>)
 8005c90:	400b      	ands	r3, r1
 8005c92:	6939      	ldr	r1, [r7, #16]
 8005c94:	0148      	lsls	r0, r1, #5
 8005c96:	6979      	ldr	r1, [r7, #20]
 8005c98:	4401      	add	r1, r0
 8005c9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb8:	6939      	ldr	r1, [r7, #16]
 8005cba:	0148      	lsls	r0, r1, #5
 8005cbc:	6979      	ldr	r1, [r7, #20]
 8005cbe:	4401      	add	r1, r0
 8005cc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d128      	bne.n	8005d22 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d110      	bne.n	8005d02 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e00f      	b.n	8005d22 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d20:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	1ff80000 	.word	0x1ff80000

08005d50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d14a      	bne.n	8005e04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d86:	f040 8086 	bne.w	8005e96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005da8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d902      	bls.n	8005de8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
          break;
 8005de6:	e056      	b.n	8005e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e00:	d0e7      	beq.n	8005dd2 <USB_EPStopXfer+0x82>
 8005e02:	e048      	b.n	8005e96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e1c:	d13b      	bne.n	8005e96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d902      	bls.n	8005e7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
          break;
 8005e7a:	e00c      	b.n	8005e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e94:	d0e7      	beq.n	8005e66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	@ 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	71fb      	strb	r3, [r7, #7]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005ec2:	88bb      	ldrh	r3, [r7, #4]
 8005ec4:	3303      	adds	r3, #3
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	e018      	b.n	8005f02 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	031a      	lsls	r2, r3, #12
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005edc:	461a      	mov	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	3301      	adds	r3, #1
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d3e2      	bcc.n	8005ed0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3724      	adds	r7, #36	@ 0x24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b08b      	sub	sp, #44	@ 0x2c
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	089b      	lsrs	r3, r3, #2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	e014      	b.n	8005f6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	3301      	adds	r3, #1
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	3301      	adds	r3, #1
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	3301      	adds	r3, #1
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	3301      	adds	r3, #1
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	623b      	str	r3, [r7, #32]
 8005f6e:	6a3a      	ldr	r2, [r7, #32]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3e6      	bcc.n	8005f44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f76:	8bfb      	ldrh	r3, [r7, #30]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01e      	beq.n	8005fba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f86:	461a      	mov	r2, r3
 8005f88:	f107 0310 	add.w	r3, r7, #16
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	701a      	strb	r2, [r3, #0]
      i++;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	3301      	adds	r3, #1
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005fae:	8bfb      	ldrh	r3, [r7, #30]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005fb4:	8bfb      	ldrh	r3, [r7, #30]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1ea      	bne.n	8005f90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	372c      	adds	r7, #44	@ 0x2c
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d12c      	bne.n	800603e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	db12      	blt.n	800601c <USB_EPSetStall+0x54>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00f      	beq.n	800601c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006016:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800601a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006036:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e02b      	b.n	8006096 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	db12      	blt.n	8006076 <USB_EPSetStall+0xae>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006070:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006074:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006090:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d128      	bne.n	8006112 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	791b      	ldrb	r3, [r3, #4]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d003      	beq.n	80060f0 <USB_EPClearStall+0x4c>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	791b      	ldrb	r3, [r3, #4]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d138      	bne.n	8006162 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800610a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e027      	b.n	8006162 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800612c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006130:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	791b      	ldrb	r3, [r3, #4]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d003      	beq.n	8006142 <USB_EPClearStall+0x9e>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	791b      	ldrb	r3, [r3, #4]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d10f      	bne.n	8006162 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800615c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006160:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800618e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006192:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80061a4:	68f9      	ldr	r1, [r7, #12]
 80061a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061aa:	4313      	orrs	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061ea:	f023 0302 	bic.w	r3, r3, #2
 80061ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006218:	f023 0303 	bic.w	r3, r3, #3
 800621c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800622c:	f043 0302 	orr.w	r3, r3, #2
 8006230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4013      	ands	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006258:	68fb      	ldr	r3, [r7, #12]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	4013      	ands	r3, r2
 8006288:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	0c1b      	lsrs	r3, r3, #16
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	b29b      	uxth	r3, r3
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4013      	ands	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062fc:	68bb      	ldr	r3, [r7, #8]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800630a:	b480      	push	{r7}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	fa22 f303 	lsr.w	r3, r2, r3
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	b2db      	uxtb	r3, r3
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4013      	ands	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006358:	68bb      	ldr	r3, [r7, #8]
}
 800635a:	4618      	mov	r0, r3
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0301 	and.w	r3, r3, #1
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	333c      	adds	r3, #60	@ 0x3c
 80063da:	3304      	adds	r3, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006454 <USB_EP0_OutStart+0x8c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d90a      	bls.n	80063fe <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063f8:	d101      	bne.n	80063fe <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e024      	b.n	8006448 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	2300      	movs	r3, #0
 8006408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006418:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800641c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800642c:	f043 0318 	orr.w	r3, r3, #24
 8006430:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006440:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006444:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	4f54300a 	.word	0x4f54300a

08006458 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006470:	d901      	bls.n	8006476 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e01b      	b.n	80064ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	daf2      	bge.n	8006464 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f043 0201 	orr.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800649a:	d901      	bls.n	80064a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e006      	b.n	80064ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d0f0      	beq.n	800648e <USB_CoreReset+0x36>

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80064cc:	f003 f838 	bl	8009540 <USBD_static_malloc>
 80064d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	32b0      	adds	r2, #176	@ 0xb0
 80064e2:	2100      	movs	r1, #0
 80064e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064e8:	2302      	movs	r3, #2
 80064ea:	e0d4      	b.n	8006696 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80064f0:	2100      	movs	r1, #0
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f003 fa98 	bl	8009a28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32b0      	adds	r2, #176	@ 0xb0
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32b0      	adds	r2, #176	@ 0xb0
 8006512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	7c1b      	ldrb	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d138      	bne.n	8006596 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006524:	4b5e      	ldr	r3, [pc, #376]	@ (80066a0 <USBD_CDC_Init+0x1e4>)
 8006526:	7819      	ldrb	r1, [r3, #0]
 8006528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800652c:	2202      	movs	r2, #2
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f002 fdf2 	bl	8009118 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006534:	4b5a      	ldr	r3, [pc, #360]	@ (80066a0 <USBD_CDC_Init+0x1e4>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 020f 	and.w	r2, r3, #15
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3324      	adds	r3, #36	@ 0x24
 800654a:	2201      	movs	r2, #1
 800654c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800654e:	4b55      	ldr	r3, [pc, #340]	@ (80066a4 <USBD_CDC_Init+0x1e8>)
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006556:	2202      	movs	r2, #2
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f002 fddd 	bl	8009118 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800655e:	4b51      	ldr	r3, [pc, #324]	@ (80066a4 <USBD_CDC_Init+0x1e8>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f003 020f 	and.w	r2, r3, #15
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006576:	2201      	movs	r2, #1
 8006578:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800657a:	4b4b      	ldr	r3, [pc, #300]	@ (80066a8 <USBD_CDC_Init+0x1ec>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	3326      	adds	r3, #38	@ 0x26
 8006590:	2210      	movs	r2, #16
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e035      	b.n	8006602 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006596:	4b42      	ldr	r3, [pc, #264]	@ (80066a0 <USBD_CDC_Init+0x1e4>)
 8006598:	7819      	ldrb	r1, [r3, #0]
 800659a:	2340      	movs	r3, #64	@ 0x40
 800659c:	2202      	movs	r2, #2
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f002 fdba 	bl	8009118 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065a4:	4b3e      	ldr	r3, [pc, #248]	@ (80066a0 <USBD_CDC_Init+0x1e4>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3324      	adds	r3, #36	@ 0x24
 80065ba:	2201      	movs	r2, #1
 80065bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065be:	4b39      	ldr	r3, [pc, #228]	@ (80066a4 <USBD_CDC_Init+0x1e8>)
 80065c0:	7819      	ldrb	r1, [r3, #0]
 80065c2:	2340      	movs	r3, #64	@ 0x40
 80065c4:	2202      	movs	r2, #2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 fda6 	bl	8009118 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065cc:	4b35      	ldr	r3, [pc, #212]	@ (80066a4 <USBD_CDC_Init+0x1e8>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f003 020f 	and.w	r2, r3, #15
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065e4:	2201      	movs	r2, #1
 80065e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065e8:	4b2f      	ldr	r3, [pc, #188]	@ (80066a8 <USBD_CDC_Init+0x1ec>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3326      	adds	r3, #38	@ 0x26
 80065fe:	2210      	movs	r2, #16
 8006600:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006602:	4b29      	ldr	r3, [pc, #164]	@ (80066a8 <USBD_CDC_Init+0x1ec>)
 8006604:	7819      	ldrb	r1, [r3, #0]
 8006606:	2308      	movs	r3, #8
 8006608:	2203      	movs	r2, #3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f002 fd84 	bl	8009118 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006610:	4b25      	ldr	r3, [pc, #148]	@ (80066a8 <USBD_CDC_Init+0x1ec>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	3324      	adds	r3, #36	@ 0x24
 8006626:	2201      	movs	r2, #1
 8006628:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	33b0      	adds	r3, #176	@ 0xb0
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006660:	2302      	movs	r3, #2
 8006662:	e018      	b.n	8006696 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7c1b      	ldrb	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800666c:	4b0d      	ldr	r3, [pc, #52]	@ (80066a4 <USBD_CDC_Init+0x1e8>)
 800666e:	7819      	ldrb	r1, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fec6 	bl	800940c <USBD_LL_PrepareReceive>
 8006680:	e008      	b.n	8006694 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006682:	4b08      	ldr	r3, [pc, #32]	@ (80066a4 <USBD_CDC_Init+0x1e8>)
 8006684:	7819      	ldrb	r1, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800668c:	2340      	movs	r3, #64	@ 0x40
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f002 febc 	bl	800940c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000093 	.word	0x20000093
 80066a4:	20000094 	.word	0x20000094
 80066a8:	20000095 	.word	0x20000095

080066ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80066b8:	4b3a      	ldr	r3, [pc, #232]	@ (80067a4 <USBD_CDC_DeInit+0xf8>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f002 fd68 	bl	8009194 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066c4:	4b37      	ldr	r3, [pc, #220]	@ (80067a4 <USBD_CDC_DeInit+0xf8>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3324      	adds	r3, #36	@ 0x24
 80066da:	2200      	movs	r2, #0
 80066dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066de:	4b32      	ldr	r3, [pc, #200]	@ (80067a8 <USBD_CDC_DeInit+0xfc>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f002 fd55 	bl	8009194 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066ea:	4b2f      	ldr	r3, [pc, #188]	@ (80067a8 <USBD_CDC_DeInit+0xfc>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f003 020f 	and.w	r2, r3, #15
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006702:	2200      	movs	r2, #0
 8006704:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006706:	4b29      	ldr	r3, [pc, #164]	@ (80067ac <USBD_CDC_DeInit+0x100>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f002 fd41 	bl	8009194 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006712:	4b26      	ldr	r3, [pc, #152]	@ (80067ac <USBD_CDC_DeInit+0x100>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	f003 020f 	and.w	r2, r3, #15
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	3324      	adds	r3, #36	@ 0x24
 8006728:	2200      	movs	r2, #0
 800672a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800672c:	4b1f      	ldr	r3, [pc, #124]	@ (80067ac <USBD_CDC_DeInit+0x100>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	3326      	adds	r3, #38	@ 0x26
 8006742:	2200      	movs	r2, #0
 8006744:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	32b0      	adds	r2, #176	@ 0xb0
 8006750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01f      	beq.n	8006798 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	33b0      	adds	r3, #176	@ 0xb0
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32b0      	adds	r2, #176	@ 0xb0
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	4618      	mov	r0, r3
 800677c:	f002 feee 	bl	800955c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32b0      	adds	r2, #176	@ 0xb0
 800678a:	2100      	movs	r1, #0
 800678c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000093 	.word	0x20000093
 80067a8:	20000094 	.word	0x20000094
 80067ac:	20000095 	.word	0x20000095

080067b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	32b0      	adds	r2, #176	@ 0xb0
 80067c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	e0bf      	b.n	8006960 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d050      	beq.n	800688e <USBD_CDC_Setup+0xde>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	f040 80af 	bne.w	8006950 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	88db      	ldrh	r3, [r3, #6]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d03a      	beq.n	8006870 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b25b      	sxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	da1b      	bge.n	800683c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	33b0      	adds	r3, #176	@ 0xb0
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800681a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	88d2      	ldrh	r2, [r2, #6]
 8006820:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b07      	cmp	r3, #7
 8006828:	bf28      	it	cs
 800682a:	2307      	movcs	r3, #7
 800682c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	89fa      	ldrh	r2, [r7, #14]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fdbd 	bl	80083b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800683a:	e090      	b.n	800695e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785a      	ldrb	r2, [r3, #1]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	2b3f      	cmp	r3, #63	@ 0x3f
 800684c:	d803      	bhi.n	8006856 <USBD_CDC_Setup+0xa6>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	88db      	ldrh	r3, [r3, #6]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	e000      	b.n	8006858 <USBD_CDC_Setup+0xa8>
 8006856:	2240      	movs	r2, #64	@ 0x40
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800685e:	6939      	ldr	r1, [r7, #16]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006866:	461a      	mov	r2, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fdcf 	bl	800840c <USBD_CtlPrepareRx>
      break;
 800686e:	e076      	b.n	800695e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	33b0      	adds	r3, #176	@ 0xb0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	7850      	ldrb	r0, [r2, #1]
 8006886:	2200      	movs	r2, #0
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	4798      	blx	r3
      break;
 800688c:	e067      	b.n	800695e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b0b      	cmp	r3, #11
 8006894:	d851      	bhi.n	800693a <USBD_CDC_Setup+0x18a>
 8006896:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <USBD_CDC_Setup+0xec>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068cd 	.word	0x080068cd
 80068a0:	08006949 	.word	0x08006949
 80068a4:	0800693b 	.word	0x0800693b
 80068a8:	0800693b 	.word	0x0800693b
 80068ac:	0800693b 	.word	0x0800693b
 80068b0:	0800693b 	.word	0x0800693b
 80068b4:	0800693b 	.word	0x0800693b
 80068b8:	0800693b 	.word	0x0800693b
 80068bc:	0800693b 	.word	0x0800693b
 80068c0:	0800693b 	.word	0x0800693b
 80068c4:	080068f7 	.word	0x080068f7
 80068c8:	08006921 	.word	0x08006921
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d107      	bne.n	80068e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068d8:	f107 030a 	add.w	r3, r7, #10
 80068dc:	2202      	movs	r2, #2
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fd67 	bl	80083b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068e6:	e032      	b.n	800694e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fce5 	bl	80082ba <USBD_CtlError>
            ret = USBD_FAIL;
 80068f0:	2303      	movs	r3, #3
 80068f2:	75fb      	strb	r3, [r7, #23]
          break;
 80068f4:	e02b      	b.n	800694e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d107      	bne.n	8006912 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006902:	f107 030d 	add.w	r3, r7, #13
 8006906:	2201      	movs	r2, #1
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fd52 	bl	80083b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006910:	e01d      	b.n	800694e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fcd0 	bl	80082ba <USBD_CtlError>
            ret = USBD_FAIL;
 800691a:	2303      	movs	r3, #3
 800691c:	75fb      	strb	r3, [r7, #23]
          break;
 800691e:	e016      	b.n	800694e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d00f      	beq.n	800694c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fcc3 	bl	80082ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006938:	e008      	b.n	800694c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fcbc 	bl	80082ba <USBD_CtlError>
          ret = USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	75fb      	strb	r3, [r7, #23]
          break;
 8006946:	e002      	b.n	800694e <USBD_CDC_Setup+0x19e>
          break;
 8006948:	bf00      	nop
 800694a:	e008      	b.n	800695e <USBD_CDC_Setup+0x1ae>
          break;
 800694c:	bf00      	nop
      }
      break;
 800694e:	e006      	b.n	800695e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fcb1 	bl	80082ba <USBD_CtlError>
      ret = USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	75fb      	strb	r3, [r7, #23]
      break;
 800695c:	bf00      	nop
  }

  return (uint8_t)ret;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800697a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32b0      	adds	r2, #176	@ 0xb0
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800698e:	2303      	movs	r3, #3
 8006990:	e065      	b.n	8006a5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	32b0      	adds	r2, #176	@ 0xb0
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 020f 	and.w	r2, r3, #15
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	3318      	adds	r3, #24
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02f      	beq.n	8006a1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	3318      	adds	r3, #24
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 010f 	and.w	r1, r3, #15
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	460b      	mov	r3, r1
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	440b      	add	r3, r1
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4403      	add	r3, r0
 80069e4:	331c      	adds	r3, #28
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d112      	bne.n	8006a1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 020f 	and.w	r2, r3, #15
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	3318      	adds	r3, #24
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a0e:	78f9      	ldrb	r1, [r7, #3]
 8006a10:	2300      	movs	r3, #0
 8006a12:	2200      	movs	r2, #0
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f002 fcc1 	bl	800939c <USBD_LL_Transmit>
 8006a1a:	e01f      	b.n	8006a5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	33b0      	adds	r3, #176	@ 0xb0
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d010      	beq.n	8006a5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	33b0      	adds	r3, #176	@ 0xb0
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	32b0      	adds	r2, #176	@ 0xb0
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	32b0      	adds	r2, #176	@ 0xb0
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e01a      	b.n	8006ace <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 fced 	bl	800947c <USBD_LL_GetRxDataSize>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	33b0      	adds	r3, #176	@ 0xb0
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ac8:	4611      	mov	r1, r2
 8006aca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	32b0      	adds	r2, #176	@ 0xb0
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e024      	b.n	8006b42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	33b0      	adds	r3, #176	@ 0xb0
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d019      	beq.n	8006b40 <USBD_CDC_EP0_RxReady+0x6a>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006b12:	2bff      	cmp	r3, #255	@ 0xff
 8006b14:	d014      	beq.n	8006b40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	33b0      	adds	r3, #176	@ 0xb0
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	22ff      	movs	r2, #255	@ 0xff
 8006b3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b54:	2182      	movs	r1, #130	@ 0x82
 8006b56:	4818      	ldr	r0, [pc, #96]	@ (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b58:	f000 fd4f 	bl	80075fa <USBD_GetEpDesc>
 8006b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b5e:	2101      	movs	r1, #1
 8006b60:	4815      	ldr	r0, [pc, #84]	@ (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b62:	f000 fd4a 	bl	80075fa <USBD_GetEpDesc>
 8006b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b68:	2181      	movs	r1, #129	@ 0x81
 8006b6a:	4813      	ldr	r0, [pc, #76]	@ (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b6c:	f000 fd45 	bl	80075fa <USBD_GetEpDesc>
 8006b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b8c:	711a      	strb	r2, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d006      	beq.n	8006ba6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ba0:	711a      	strb	r2, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2243      	movs	r2, #67	@ 0x43
 8006baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bac:	4b02      	ldr	r3, [pc, #8]	@ (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000050 	.word	0x20000050

08006bbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bc4:	2182      	movs	r1, #130	@ 0x82
 8006bc6:	4818      	ldr	r0, [pc, #96]	@ (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bc8:	f000 fd17 	bl	80075fa <USBD_GetEpDesc>
 8006bcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4815      	ldr	r0, [pc, #84]	@ (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bd2:	f000 fd12 	bl	80075fa <USBD_GetEpDesc>
 8006bd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bd8:	2181      	movs	r1, #129	@ 0x81
 8006bda:	4813      	ldr	r0, [pc, #76]	@ (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bdc:	f000 fd0d 	bl	80075fa <USBD_GetEpDesc>
 8006be0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2210      	movs	r2, #16
 8006bec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d006      	beq.n	8006c02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	711a      	strb	r2, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f042 0202 	orr.w	r2, r2, #2
 8006c00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d006      	beq.n	8006c16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	711a      	strb	r2, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f042 0202 	orr.w	r2, r2, #2
 8006c14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2243      	movs	r2, #67	@ 0x43
 8006c1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c1c:	4b02      	ldr	r3, [pc, #8]	@ (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000050 	.word	0x20000050

08006c2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c34:	2182      	movs	r1, #130	@ 0x82
 8006c36:	4818      	ldr	r0, [pc, #96]	@ (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c38:	f000 fcdf 	bl	80075fa <USBD_GetEpDesc>
 8006c3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4815      	ldr	r0, [pc, #84]	@ (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c42:	f000 fcda 	bl	80075fa <USBD_GetEpDesc>
 8006c46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c48:	2181      	movs	r1, #129	@ 0x81
 8006c4a:	4813      	ldr	r0, [pc, #76]	@ (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c4c:	f000 fcd5 	bl	80075fa <USBD_GetEpDesc>
 8006c50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d006      	beq.n	8006c72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c6c:	711a      	strb	r2, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d006      	beq.n	8006c86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c80:	711a      	strb	r2, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2243      	movs	r2, #67	@ 0x43
 8006c8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c8c:	4b02      	ldr	r3, [pc, #8]	@ (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000050 	.word	0x20000050

08006c9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006caa:	4b03      	ldr	r3, [pc, #12]	@ (8006cb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	2000000c 	.word	0x2000000c

08006cbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e009      	b.n	8006ce4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	33b0      	adds	r3, #176	@ 0xb0
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	32b0      	adds	r2, #176	@ 0xb0
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e008      	b.n	8006d28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	32b0      	adds	r2, #176	@ 0xb0
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e004      	b.n	8006d62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	32b0      	adds	r2, #176	@ 0xb0
 8006d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d86:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e025      	b.n	8006de2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d11f      	bne.n	8006de0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006da8:	4b10      	ldr	r3, [pc, #64]	@ (8006dec <USBD_CDC_TransmitPacket+0x7c>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 020f 	and.w	r2, r3, #15
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4403      	add	r3, r0
 8006dc2:	3318      	adds	r3, #24
 8006dc4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006dc6:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <USBD_CDC_TransmitPacket+0x7c>)
 8006dc8:	7819      	ldrb	r1, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f002 fae0 	bl	800939c <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000093 	.word	0x20000093

08006df0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	32b0      	adds	r2, #176	@ 0xb0
 8006e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	32b0      	adds	r2, #176	@ 0xb0
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e018      	b.n	8006e50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7c1b      	ldrb	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e26:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <USBD_CDC_ReceivePacket+0x68>)
 8006e28:	7819      	ldrb	r1, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f002 fae9 	bl	800940c <USBD_LL_PrepareReceive>
 8006e3a:	e008      	b.n	8006e4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e3c:	4b06      	ldr	r3, [pc, #24]	@ (8006e58 <USBD_CDC_ReceivePacket+0x68>)
 8006e3e:	7819      	ldrb	r1, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e46:	2340      	movs	r3, #64	@ 0x40
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f002 fadf 	bl	800940c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000094 	.word	0x20000094

08006e5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e01f      	b.n	8006eb4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	79fa      	ldrb	r2, [r7, #7]
 8006ea6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f002 f8b7 	bl	800901c <USBD_LL_Init>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e025      	b.n	8006f20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32ae      	adds	r2, #174	@ 0xae
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00f      	beq.n	8006f10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	32ae      	adds	r2, #174	@ 0xae
 8006efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	f107 020e 	add.w	r2, r7, #14
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	4602      	mov	r2, r0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f002 f8bf 	bl	80090b4 <USBD_LL_Start>
 8006f36:	4603      	mov	r3, r0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	4611      	mov	r1, r2
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 f936 	bl	8008246 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d01a      	beq.n	8007034 <USBD_LL_SetupStage+0x72>
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d822      	bhi.n	8007048 <USBD_LL_SetupStage+0x86>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <USBD_LL_SetupStage+0x4a>
 8007006:	2b01      	cmp	r3, #1
 8007008:	d00a      	beq.n	8007020 <USBD_LL_SetupStage+0x5e>
 800700a:	e01d      	b.n	8007048 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb63 	bl	80076e0 <USBD_StdDevReq>
 800701a:	4603      	mov	r3, r0
 800701c:	73fb      	strb	r3, [r7, #15]
      break;
 800701e:	e020      	b.n	8007062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fbcb 	bl	80077c4 <USBD_StdItfReq>
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
      break;
 8007032:	e016      	b.n	8007062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fc2d 	bl	800789c <USBD_StdEPReq>
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
      break;
 8007046:	e00c      	b.n	8007062 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800704e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007052:	b2db      	uxtb	r3, r3
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f002 f8d2 	bl	8009200 <USBD_LL_StallEP>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
      break;
 8007060:	bf00      	nop
  }

  return ret;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	460b      	mov	r3, r1
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d16e      	bne.n	8007162 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800708a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007092:	2b03      	cmp	r3, #3
 8007094:	f040 8098 	bne.w	80071c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d913      	bls.n	80070cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	1ad2      	subs	r2, r2, r3
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	4293      	cmp	r3, r2
 80070bc:	bf28      	it	cs
 80070be:	4613      	movcs	r3, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f001 f9be 	bl	8008446 <USBD_CtlContinueRx>
 80070ca:	e07d      	b.n	80071c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d014      	beq.n	8007104 <USBD_LL_DataOutStage+0x98>
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d81d      	bhi.n	800711a <USBD_LL_DataOutStage+0xae>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <USBD_LL_DataOutStage+0x7c>
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d003      	beq.n	80070ee <USBD_LL_DataOutStage+0x82>
 80070e6:	e018      	b.n	800711a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	75bb      	strb	r3, [r7, #22]
            break;
 80070ec:	e018      	b.n	8007120 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fa64 	bl	80075c6 <USBD_CoreFindIF>
 80070fe:	4603      	mov	r3, r0
 8007100:	75bb      	strb	r3, [r7, #22]
            break;
 8007102:	e00d      	b.n	8007120 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800710a:	b2db      	uxtb	r3, r3
 800710c:	4619      	mov	r1, r3
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fa66 	bl	80075e0 <USBD_CoreFindEP>
 8007114:	4603      	mov	r3, r0
 8007116:	75bb      	strb	r3, [r7, #22]
            break;
 8007118:	e002      	b.n	8007120 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	75bb      	strb	r3, [r7, #22]
            break;
 800711e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007120:	7dbb      	ldrb	r3, [r7, #22]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d119      	bne.n	800715a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d113      	bne.n	800715a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007132:	7dba      	ldrb	r2, [r7, #22]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	32ae      	adds	r2, #174	@ 0xae
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007142:	7dba      	ldrb	r2, [r7, #22]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800714a:	7dba      	ldrb	r2, [r7, #22]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	32ae      	adds	r2, #174	@ 0xae
 8007150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f001 f984 	bl	8008468 <USBD_CtlSendStatus>
 8007160:	e032      	b.n	80071c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007162:	7afb      	ldrb	r3, [r7, #11]
 8007164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007168:	b2db      	uxtb	r3, r3
 800716a:	4619      	mov	r1, r3
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fa37 	bl	80075e0 <USBD_CoreFindEP>
 8007172:	4603      	mov	r3, r0
 8007174:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007176:	7dbb      	ldrb	r3, [r7, #22]
 8007178:	2bff      	cmp	r3, #255	@ 0xff
 800717a:	d025      	beq.n	80071c8 <USBD_LL_DataOutStage+0x15c>
 800717c:	7dbb      	ldrb	r3, [r7, #22]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d122      	bne.n	80071c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b03      	cmp	r3, #3
 800718c:	d117      	bne.n	80071be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800718e:	7dba      	ldrb	r2, [r7, #22]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	32ae      	adds	r2, #174	@ 0xae
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00f      	beq.n	80071be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800719e:	7dba      	ldrb	r2, [r7, #22]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80071a6:	7dba      	ldrb	r2, [r7, #22]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	32ae      	adds	r2, #174	@ 0xae
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	7afa      	ldrb	r2, [r7, #11]
 80071b4:	4611      	mov	r1, r2
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	4798      	blx	r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	e000      	b.n	80071ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	460b      	mov	r3, r1
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d16f      	bne.n	80072c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3314      	adds	r3, #20
 80071ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d15a      	bne.n	80072ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d914      	bls.n	800722c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	461a      	mov	r2, r3
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f001 f8e6 	bl	80083ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800721e:	2300      	movs	r3, #0
 8007220:	2200      	movs	r2, #0
 8007222:	2100      	movs	r1, #0
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f002 f8f1 	bl	800940c <USBD_LL_PrepareReceive>
 800722a:	e03f      	b.n	80072ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	429a      	cmp	r2, r3
 8007236:	d11c      	bne.n	8007272 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007240:	429a      	cmp	r2, r3
 8007242:	d316      	bcc.n	8007272 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800724e:	429a      	cmp	r2, r3
 8007250:	d20f      	bcs.n	8007272 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007252:	2200      	movs	r2, #0
 8007254:	2100      	movs	r1, #0
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f001 f8c7 	bl	80083ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007264:	2300      	movs	r3, #0
 8007266:	2200      	movs	r2, #0
 8007268:	2100      	movs	r1, #0
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f002 f8ce 	bl	800940c <USBD_LL_PrepareReceive>
 8007270:	e01c      	b.n	80072ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b03      	cmp	r3, #3
 800727c:	d10f      	bne.n	800729e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800729e:	2180      	movs	r1, #128	@ 0x80
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f001 ffad 	bl	8009200 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f001 f8f1 	bl	800848e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d03a      	beq.n	800732c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff fe42 	bl	8006f40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072c4:	e032      	b.n	800732c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f985 	bl	80075e0 <USBD_CoreFindEP>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2bff      	cmp	r3, #255	@ 0xff
 80072de:	d025      	beq.n	800732c <USBD_LL_DataInStage+0x15a>
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d122      	bne.n	800732c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d11c      	bne.n	800732c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072f2:	7dfa      	ldrb	r2, [r7, #23]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	32ae      	adds	r2, #174	@ 0xae
 80072f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d014      	beq.n	800732c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007302:	7dfa      	ldrb	r2, [r7, #23]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800730a:	7dfa      	ldrb	r2, [r7, #23]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	32ae      	adds	r2, #174	@ 0xae
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	7afa      	ldrb	r2, [r7, #11]
 8007318:	4611      	mov	r1, r2
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	4798      	blx	r3
 800731e:	4603      	mov	r3, r0
 8007320:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007322:	7dbb      	ldrb	r3, [r7, #22]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007328:	7dbb      	ldrb	r3, [r7, #22]
 800732a:	e000      	b.n	800732e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d014      	beq.n	800739c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00e      	beq.n	800739c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6852      	ldr	r2, [r2, #4]
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	4611      	mov	r1, r2
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007398:	2303      	movs	r3, #3
 800739a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800739c:	2340      	movs	r3, #64	@ 0x40
 800739e:	2200      	movs	r2, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 feb8 	bl	8009118 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2240      	movs	r2, #64	@ 0x40
 80073b4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073b8:	2340      	movs	r3, #64	@ 0x40
 80073ba:	2200      	movs	r2, #0
 80073bc:	2180      	movs	r1, #128	@ 0x80
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f001 feaa 	bl	8009118 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2240      	movs	r2, #64	@ 0x40
 80073ce:	621a      	str	r2, [r3, #32]

  return ret;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b04      	cmp	r3, #4
 800740c:	d006      	beq.n	800741c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007414:	b2da      	uxtb	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b04      	cmp	r3, #4
 8007444:	d106      	bne.n	8007454 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800744c:	b2da      	uxtb	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b03      	cmp	r3, #3
 8007474:	d110      	bne.n	8007498 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	32ae      	adds	r2, #174	@ 0xae
 80074b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e01c      	b.n	80074fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d115      	bne.n	80074fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32ae      	adds	r2, #174	@ 0xae
 80074da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	32ae      	adds	r2, #174	@ 0xae
 80074ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	78fa      	ldrb	r2, [r7, #3]
 80074f6:	4611      	mov	r1, r2
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	32ae      	adds	r2, #174	@ 0xae
 800751c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007524:	2303      	movs	r3, #3
 8007526:	e01c      	b.n	8007562 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b03      	cmp	r3, #3
 8007532:	d115      	bne.n	8007560 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	32ae      	adds	r2, #174	@ 0xae
 800753e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32ae      	adds	r2, #174	@ 0xae
 8007552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	4611      	mov	r1, r2
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00e      	beq.n	80075bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6852      	ldr	r2, [r2, #4]
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	4611      	mov	r1, r2
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	b29b      	uxth	r3, r3
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	4293      	cmp	r3, r2
 800761e:	d91f      	bls.n	8007660 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007626:	e013      	b.n	8007650 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007628:	f107 030a 	add.w	r3, r7, #10
 800762c:	4619      	mov	r1, r3
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	f000 f81b 	bl	800766a <USBD_GetNextDesc>
 8007634:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b05      	cmp	r3, #5
 800763c:	d108      	bne.n	8007650 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	789b      	ldrb	r3, [r3, #2]
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	429a      	cmp	r2, r3
 800764a:	d008      	beq.n	800765e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	885b      	ldrh	r3, [r3, #2]
 8007654:	b29a      	uxth	r2, r3
 8007656:	897b      	ldrh	r3, [r7, #10]
 8007658:	429a      	cmp	r2, r3
 800765a:	d8e5      	bhi.n	8007628 <USBD_GetEpDesc+0x2e>
 800765c:	e000      	b.n	8007660 <USBD_GetEpDesc+0x66>
          break;
 800765e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007660:	693b      	ldr	r3, [r7, #16]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	7812      	ldrb	r2, [r2, #0]
 8007680:	4413      	add	r3, r2
 8007682:	b29a      	uxth	r2, r3
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b087      	sub	sp, #28
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	3301      	adds	r3, #1
 80076b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076c0:	8a3b      	ldrh	r3, [r7, #16]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	b21a      	sxth	r2, r3
 80076c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	b21b      	sxth	r3, r3
 80076ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076d0:	89fb      	ldrh	r3, [r7, #14]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076f6:	2b40      	cmp	r3, #64	@ 0x40
 80076f8:	d005      	beq.n	8007706 <USBD_StdDevReq+0x26>
 80076fa:	2b40      	cmp	r3, #64	@ 0x40
 80076fc:	d857      	bhi.n	80077ae <USBD_StdDevReq+0xce>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00f      	beq.n	8007722 <USBD_StdDevReq+0x42>
 8007702:	2b20      	cmp	r3, #32
 8007704:	d153      	bne.n	80077ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	32ae      	adds	r2, #174	@ 0xae
 8007710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
      break;
 8007720:	e04a      	b.n	80077b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	2b09      	cmp	r3, #9
 8007728:	d83b      	bhi.n	80077a2 <USBD_StdDevReq+0xc2>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <USBD_StdDevReq+0x50>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007785 	.word	0x08007785
 8007734:	08007799 	.word	0x08007799
 8007738:	080077a3 	.word	0x080077a3
 800773c:	0800778f 	.word	0x0800778f
 8007740:	080077a3 	.word	0x080077a3
 8007744:	08007763 	.word	0x08007763
 8007748:	08007759 	.word	0x08007759
 800774c:	080077a3 	.word	0x080077a3
 8007750:	0800777b 	.word	0x0800777b
 8007754:	0800776d 	.word	0x0800776d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa3c 	bl	8007bd8 <USBD_GetDescriptor>
          break;
 8007760:	e024      	b.n	80077ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fbcb 	bl	8007f00 <USBD_SetAddress>
          break;
 800776a:	e01f      	b.n	80077ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc0a 	bl	8007f88 <USBD_SetConfig>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
          break;
 8007778:	e018      	b.n	80077ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fcad 	bl	80080dc <USBD_GetConfig>
          break;
 8007782:	e013      	b.n	80077ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fcde 	bl	8008148 <USBD_GetStatus>
          break;
 800778c:	e00e      	b.n	80077ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fd0d 	bl	80081b0 <USBD_SetFeature>
          break;
 8007796:	e009      	b.n	80077ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fd31 	bl	8008202 <USBD_ClrFeature>
          break;
 80077a0:	e004      	b.n	80077ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fd88 	bl	80082ba <USBD_CtlError>
          break;
 80077aa:	bf00      	nop
      }
      break;
 80077ac:	e004      	b.n	80077b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fd82 	bl	80082ba <USBD_CtlError>
      break;
 80077b6:	bf00      	nop
  }

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop

080077c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077da:	2b40      	cmp	r3, #64	@ 0x40
 80077dc:	d005      	beq.n	80077ea <USBD_StdItfReq+0x26>
 80077de:	2b40      	cmp	r3, #64	@ 0x40
 80077e0:	d852      	bhi.n	8007888 <USBD_StdItfReq+0xc4>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <USBD_StdItfReq+0x26>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d14e      	bne.n	8007888 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d840      	bhi.n	800787a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	889b      	ldrh	r3, [r3, #4]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d836      	bhi.n	8007870 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	889b      	ldrh	r3, [r3, #4]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff fedb 	bl	80075c6 <USBD_CoreFindIF>
 8007810:	4603      	mov	r3, r0
 8007812:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2bff      	cmp	r3, #255	@ 0xff
 8007818:	d01d      	beq.n	8007856 <USBD_StdItfReq+0x92>
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11a      	bne.n	8007856 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007820:	7bba      	ldrb	r2, [r7, #14]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	32ae      	adds	r2, #174	@ 0xae
 8007826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00f      	beq.n	8007850 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007830:	7bba      	ldrb	r2, [r7, #14]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007838:	7bba      	ldrb	r2, [r7, #14]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	32ae      	adds	r2, #174	@ 0xae
 800783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800784e:	e004      	b.n	800785a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007854:	e001      	b.n	800785a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	88db      	ldrh	r3, [r3, #6]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d110      	bne.n	8007884 <USBD_StdItfReq+0xc0>
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10d      	bne.n	8007884 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fdfd 	bl	8008468 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800786e:	e009      	b.n	8007884 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fd21 	bl	80082ba <USBD_CtlError>
          break;
 8007878:	e004      	b.n	8007884 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fd1c 	bl	80082ba <USBD_CtlError>
          break;
 8007882:	e000      	b.n	8007886 <USBD_StdItfReq+0xc2>
          break;
 8007884:	bf00      	nop
      }
      break;
 8007886:	e004      	b.n	8007892 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fd15 	bl	80082ba <USBD_CtlError>
      break;
 8007890:	bf00      	nop
  }

  return ret;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	889b      	ldrh	r3, [r3, #4]
 80078ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078b8:	2b40      	cmp	r3, #64	@ 0x40
 80078ba:	d007      	beq.n	80078cc <USBD_StdEPReq+0x30>
 80078bc:	2b40      	cmp	r3, #64	@ 0x40
 80078be:	f200 817f 	bhi.w	8007bc0 <USBD_StdEPReq+0x324>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d02a      	beq.n	800791c <USBD_StdEPReq+0x80>
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	f040 817a 	bne.w	8007bc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff fe85 	bl	80075e0 <USBD_CoreFindEP>
 80078d6:	4603      	mov	r3, r0
 80078d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078da:	7b7b      	ldrb	r3, [r7, #13]
 80078dc:	2bff      	cmp	r3, #255	@ 0xff
 80078de:	f000 8174 	beq.w	8007bca <USBD_StdEPReq+0x32e>
 80078e2:	7b7b      	ldrb	r3, [r7, #13]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 8170 	bne.w	8007bca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078ea:	7b7a      	ldrb	r2, [r7, #13]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078f2:	7b7a      	ldrb	r2, [r7, #13]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	32ae      	adds	r2, #174	@ 0xae
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 8163 	beq.w	8007bca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007904:	7b7a      	ldrb	r2, [r7, #13]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	32ae      	adds	r2, #174	@ 0xae
 800790a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800791a:	e156      	b.n	8007bca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b03      	cmp	r3, #3
 8007922:	d008      	beq.n	8007936 <USBD_StdEPReq+0x9a>
 8007924:	2b03      	cmp	r3, #3
 8007926:	f300 8145 	bgt.w	8007bb4 <USBD_StdEPReq+0x318>
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 809b 	beq.w	8007a66 <USBD_StdEPReq+0x1ca>
 8007930:	2b01      	cmp	r3, #1
 8007932:	d03c      	beq.n	80079ae <USBD_StdEPReq+0x112>
 8007934:	e13e      	b.n	8007bb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d002      	beq.n	8007948 <USBD_StdEPReq+0xac>
 8007942:	2b03      	cmp	r3, #3
 8007944:	d016      	beq.n	8007974 <USBD_StdEPReq+0xd8>
 8007946:	e02c      	b.n	80079a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00d      	beq.n	800796a <USBD_StdEPReq+0xce>
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b80      	cmp	r3, #128	@ 0x80
 8007952:	d00a      	beq.n	800796a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 fc51 	bl	8009200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fc4d 	bl	8009200 <USBD_LL_StallEP>
 8007966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007968:	e020      	b.n	80079ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fca4 	bl	80082ba <USBD_CtlError>
              break;
 8007972:	e01b      	b.n	80079ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10e      	bne.n	800799a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <USBD_StdEPReq+0xfe>
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b80      	cmp	r3, #128	@ 0x80
 8007986:	d008      	beq.n	800799a <USBD_StdEPReq+0xfe>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	88db      	ldrh	r3, [r3, #6]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fc33 	bl	8009200 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fd64 	bl	8008468 <USBD_CtlSendStatus>

              break;
 80079a0:	e004      	b.n	80079ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fc88 	bl	80082ba <USBD_CtlError>
              break;
 80079aa:	bf00      	nop
          }
          break;
 80079ac:	e107      	b.n	8007bbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d002      	beq.n	80079c0 <USBD_StdEPReq+0x124>
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d016      	beq.n	80079ec <USBD_StdEPReq+0x150>
 80079be:	e04b      	b.n	8007a58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00d      	beq.n	80079e2 <USBD_StdEPReq+0x146>
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b80      	cmp	r3, #128	@ 0x80
 80079ca:	d00a      	beq.n	80079e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 fc15 	bl	8009200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079d6:	2180      	movs	r1, #128	@ 0x80
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fc11 	bl	8009200 <USBD_LL_StallEP>
 80079de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079e0:	e040      	b.n	8007a64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fc68 	bl	80082ba <USBD_CtlError>
              break;
 80079ea:	e03b      	b.n	8007a64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	885b      	ldrh	r3, [r3, #2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d136      	bne.n	8007a62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 fc32 	bl	800926c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fd2d 	bl	8008468 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fde4 	bl	80075e0 <USBD_CoreFindEP>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a1c:	7b7b      	ldrb	r3, [r7, #13]
 8007a1e:	2bff      	cmp	r3, #255	@ 0xff
 8007a20:	d01f      	beq.n	8007a62 <USBD_StdEPReq+0x1c6>
 8007a22:	7b7b      	ldrb	r3, [r7, #13]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d11c      	bne.n	8007a62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a28:	7b7a      	ldrb	r2, [r7, #13]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a30:	7b7a      	ldrb	r2, [r7, #13]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	32ae      	adds	r2, #174	@ 0xae
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d010      	beq.n	8007a62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a40:	7b7a      	ldrb	r2, [r7, #13]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	32ae      	adds	r2, #174	@ 0xae
 8007a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a56:	e004      	b.n	8007a62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fc2d 	bl	80082ba <USBD_CtlError>
              break;
 8007a60:	e000      	b.n	8007a64 <USBD_StdEPReq+0x1c8>
              break;
 8007a62:	bf00      	nop
          }
          break;
 8007a64:	e0ab      	b.n	8007bbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d002      	beq.n	8007a78 <USBD_StdEPReq+0x1dc>
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d032      	beq.n	8007adc <USBD_StdEPReq+0x240>
 8007a76:	e097      	b.n	8007ba8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d007      	beq.n	8007a8e <USBD_StdEPReq+0x1f2>
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b80      	cmp	r3, #128	@ 0x80
 8007a82:	d004      	beq.n	8007a8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fc17 	bl	80082ba <USBD_CtlError>
                break;
 8007a8c:	e091      	b.n	8007bb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	da0b      	bge.n	8007aae <USBD_StdEPReq+0x212>
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	3310      	adds	r3, #16
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3304      	adds	r3, #4
 8007aac:	e00b      	b.n	8007ac6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fc6d 	bl	80083b4 <USBD_CtlSendData>
              break;
 8007ada:	e06a      	b.n	8007bb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da11      	bge.n	8007b08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	f003 020f 	and.w	r2, r3, #15
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	3324      	adds	r3, #36	@ 0x24
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d117      	bne.n	8007b2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fbda 	bl	80082ba <USBD_CtlError>
                  break;
 8007b06:	e054      	b.n	8007bb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	f003 020f 	and.w	r2, r3, #15
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fbc7 	bl	80082ba <USBD_CtlError>
                  break;
 8007b2c:	e041      	b.n	8007bb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da0b      	bge.n	8007b4e <USBD_StdEPReq+0x2b2>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3310      	adds	r3, #16
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	e00b      	b.n	8007b66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <USBD_StdEPReq+0x2d8>
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b80      	cmp	r3, #128	@ 0x80
 8007b72:	d103      	bne.n	8007b7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e00e      	b.n	8007b9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fba9 	bl	80092d8 <USBD_LL_IsStallEP>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fc07 	bl	80083b4 <USBD_CtlSendData>
              break;
 8007ba6:	e004      	b.n	8007bb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fb85 	bl	80082ba <USBD_CtlError>
              break;
 8007bb0:	bf00      	nop
          }
          break;
 8007bb2:	e004      	b.n	8007bbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fb7f 	bl	80082ba <USBD_CtlError>
          break;
 8007bbc:	bf00      	nop
      }
      break;
 8007bbe:	e005      	b.n	8007bcc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fb79 	bl	80082ba <USBD_CtlError>
      break;
 8007bc8:	e000      	b.n	8007bcc <USBD_StdEPReq+0x330>
      break;
 8007bca:	bf00      	nop
  }

  return ret;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	885b      	ldrh	r3, [r3, #2]
 8007bf2:	0a1b      	lsrs	r3, r3, #8
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	2b0e      	cmp	r3, #14
 8007bfa:	f200 8152 	bhi.w	8007ea2 <USBD_GetDescriptor+0x2ca>
 8007bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007c04 <USBD_GetDescriptor+0x2c>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c75 	.word	0x08007c75
 8007c08:	08007c8d 	.word	0x08007c8d
 8007c0c:	08007ccd 	.word	0x08007ccd
 8007c10:	08007ea3 	.word	0x08007ea3
 8007c14:	08007ea3 	.word	0x08007ea3
 8007c18:	08007e43 	.word	0x08007e43
 8007c1c:	08007e6f 	.word	0x08007e6f
 8007c20:	08007ea3 	.word	0x08007ea3
 8007c24:	08007ea3 	.word	0x08007ea3
 8007c28:	08007ea3 	.word	0x08007ea3
 8007c2c:	08007ea3 	.word	0x08007ea3
 8007c30:	08007ea3 	.word	0x08007ea3
 8007c34:	08007ea3 	.word	0x08007ea3
 8007c38:	08007ea3 	.word	0x08007ea3
 8007c3c:	08007c41 	.word	0x08007c41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7c12      	ldrb	r2, [r2, #16]
 8007c58:	f107 0108 	add.w	r1, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c62:	e126      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb27 	bl	80082ba <USBD_CtlError>
        err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
      break;
 8007c72:	e11e      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7c12      	ldrb	r2, [r2, #16]
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
 8007c88:	60f8      	str	r0, [r7, #12]
      break;
 8007c8a:	e112      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7c1b      	ldrb	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10d      	bne.n	8007cb0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9c:	f107 0208 	add.w	r2, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	2202      	movs	r2, #2
 8007cac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cae:	e100      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb8:	f107 0208 	add.w	r2, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	701a      	strb	r2, [r3, #0]
      break;
 8007cca:	e0f2      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	885b      	ldrh	r3, [r3, #2]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	f200 80ac 	bhi.w	8007e30 <USBD_GetDescriptor+0x258>
 8007cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce0 <USBD_GetDescriptor+0x108>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007cf9 	.word	0x08007cf9
 8007ce4:	08007d2d 	.word	0x08007d2d
 8007ce8:	08007d61 	.word	0x08007d61
 8007cec:	08007d95 	.word	0x08007d95
 8007cf0:	08007dc9 	.word	0x08007dc9
 8007cf4:	08007dfd 	.word	0x08007dfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1a:	e091      	b.n	8007e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 facb 	bl	80082ba <USBD_CtlError>
            err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2a:	e089      	b.n	8007e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4e:	e077      	b.n	8007e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fab1 	bl	80082ba <USBD_CtlError>
            err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5e:	e06f      	b.n	8007e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7c12      	ldrb	r2, [r2, #16]
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4798      	blx	r3
 8007d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d82:	e05d      	b.n	8007e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa97 	bl	80082ba <USBD_CtlError>
            err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
          break;
 8007d92:	e055      	b.n	8007e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7c12      	ldrb	r2, [r2, #16]
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db6:	e043      	b.n	8007e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa7d 	bl	80082ba <USBD_CtlError>
            err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc6:	e03b      	b.n	8007e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dea:	e029      	b.n	8007e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa63 	bl	80082ba <USBD_CtlError>
            err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfa:	e021      	b.n	8007e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1e:	e00f      	b.n	8007e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa49 	bl	80082ba <USBD_CtlError>
            err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2e:	e007      	b.n	8007e40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa41 	bl	80082ba <USBD_CtlError>
          err++;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e3e:	bf00      	nop
      }
      break;
 8007e40:	e037      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7c1b      	ldrb	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e52:	f107 0208 	add.w	r2, r7, #8
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e5c:	e029      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa2a 	bl	80082ba <USBD_CtlError>
        err++;
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e6c:	e021      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	7c1b      	ldrb	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10d      	bne.n	8007e92 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7e:	f107 0208 	add.w	r2, r7, #8
 8007e82:	4610      	mov	r0, r2
 8007e84:	4798      	blx	r3
 8007e86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e90:	e00f      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa10 	bl	80082ba <USBD_CtlError>
        err++;
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007ea0:	e007      	b.n	8007eb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa08 	bl	80082ba <USBD_CtlError>
      err++;
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	3301      	adds	r3, #1
 8007eae:	72fb      	strb	r3, [r7, #11]
      break;
 8007eb0:	bf00      	nop
  }

  if (err != 0U)
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11e      	bne.n	8007ef6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	88db      	ldrh	r3, [r3, #6]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d016      	beq.n	8007eee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007ec0:	893b      	ldrh	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00e      	beq.n	8007ee4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	88da      	ldrh	r2, [r3, #6]
 8007eca:	893b      	ldrh	r3, [r7, #8]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	bf28      	it	cs
 8007ed0:	4613      	movcs	r3, r2
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ed6:	893b      	ldrh	r3, [r7, #8]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa69 	bl	80083b4 <USBD_CtlSendData>
 8007ee2:	e009      	b.n	8007ef8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f9e7 	bl	80082ba <USBD_CtlError>
 8007eec:	e004      	b.n	8007ef8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 faba 	bl	8008468 <USBD_CtlSendStatus>
 8007ef4:	e000      	b.n	8007ef8 <USBD_GetDescriptor+0x320>
    return;
 8007ef6:	bf00      	nop
  }
}
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop

08007f00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	889b      	ldrh	r3, [r3, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d131      	bne.n	8007f76 <USBD_SetAddress+0x76>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	88db      	ldrh	r3, [r3, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d12d      	bne.n	8007f76 <USBD_SetAddress+0x76>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	885b      	ldrh	r3, [r3, #2]
 8007f1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f20:	d829      	bhi.n	8007f76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d104      	bne.n	8007f44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9bc 	bl	80082ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	e01d      	b.n	8007f80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7bfa      	ldrb	r2, [r7, #15]
 8007f48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f9ed 	bl	8009330 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa86 	bl	8008468 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	e009      	b.n	8007f80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f74:	e004      	b.n	8007f80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f99e 	bl	80082ba <USBD_CtlError>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80080d8 <USBD_SetConfig+0x150>)
 8007f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80080d8 <USBD_SetConfig+0x150>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d905      	bls.n	8007fb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f985 	bl	80082ba <USBD_CtlError>
    return USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e08c      	b.n	80080ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d002      	beq.n	8007fc6 <USBD_SetConfig+0x3e>
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d029      	beq.n	8008018 <USBD_SetConfig+0x90>
 8007fc4:	e075      	b.n	80080b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007fc6:	4b44      	ldr	r3, [pc, #272]	@ (80080d8 <USBD_SetConfig+0x150>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d020      	beq.n	8008010 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007fce:	4b42      	ldr	r3, [pc, #264]	@ (80080d8 <USBD_SetConfig+0x150>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80080d8 <USBD_SetConfig+0x150>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fe ffb9 	bl	8006f56 <USBD_SetClassConfig>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d008      	beq.n	8008000 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f962 	bl	80082ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ffe:	e065      	b.n	80080cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fa31 	bl	8008468 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2203      	movs	r2, #3
 800800a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800800e:	e05d      	b.n	80080cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa29 	bl	8008468 <USBD_CtlSendStatus>
      break;
 8008016:	e059      	b.n	80080cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008018:	4b2f      	ldr	r3, [pc, #188]	@ (80080d8 <USBD_SetConfig+0x150>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d112      	bne.n	8008046 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008028:	4b2b      	ldr	r3, [pc, #172]	@ (80080d8 <USBD_SetConfig+0x150>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008032:	4b29      	ldr	r3, [pc, #164]	@ (80080d8 <USBD_SetConfig+0x150>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7fe ffa8 	bl	8006f8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa12 	bl	8008468 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008044:	e042      	b.n	80080cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008046:	4b24      	ldr	r3, [pc, #144]	@ (80080d8 <USBD_SetConfig+0x150>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d02a      	beq.n	80080aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fe ff96 	bl	8006f8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008062:	4b1d      	ldr	r3, [pc, #116]	@ (80080d8 <USBD_SetConfig+0x150>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800806c:	4b1a      	ldr	r3, [pc, #104]	@ (80080d8 <USBD_SetConfig+0x150>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fe ff6f 	bl	8006f56 <USBD_SetClassConfig>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f918 	bl	80082ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fe ff7b 	bl	8006f8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080a0:	e014      	b.n	80080cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f9e0 	bl	8008468 <USBD_CtlSendStatus>
      break;
 80080a8:	e010      	b.n	80080cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f9dc 	bl	8008468 <USBD_CtlSendStatus>
      break;
 80080b0:	e00c      	b.n	80080cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f900 	bl	80082ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080ba:	4b07      	ldr	r3, [pc, #28]	@ (80080d8 <USBD_SetConfig+0x150>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7fe ff64 	bl	8006f8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80080c6:	2303      	movs	r3, #3
 80080c8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ca:	bf00      	nop
  }

  return ret;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000250 	.word	0x20000250

080080dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	88db      	ldrh	r3, [r3, #6]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d004      	beq.n	80080f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f8e2 	bl	80082ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080f6:	e023      	b.n	8008140 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	dc02      	bgt.n	800810a <USBD_GetConfig+0x2e>
 8008104:	2b00      	cmp	r3, #0
 8008106:	dc03      	bgt.n	8008110 <USBD_GetConfig+0x34>
 8008108:	e015      	b.n	8008136 <USBD_GetConfig+0x5a>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d00b      	beq.n	8008126 <USBD_GetConfig+0x4a>
 800810e:	e012      	b.n	8008136 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3308      	adds	r3, #8
 800811a:	2201      	movs	r2, #1
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f948 	bl	80083b4 <USBD_CtlSendData>
        break;
 8008124:	e00c      	b.n	8008140 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	2201      	movs	r2, #1
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f940 	bl	80083b4 <USBD_CtlSendData>
        break;
 8008134:	e004      	b.n	8008140 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f8be 	bl	80082ba <USBD_CtlError>
        break;
 800813e:	bf00      	nop
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	2b02      	cmp	r3, #2
 800815e:	d81e      	bhi.n	800819e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	88db      	ldrh	r3, [r3, #6]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d004      	beq.n	8008172 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8a5 	bl	80082ba <USBD_CtlError>
        break;
 8008170:	e01a      	b.n	80081a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f043 0202 	orr.w	r2, r3, #2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	330c      	adds	r3, #12
 8008192:	2202      	movs	r2, #2
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f90c 	bl	80083b4 <USBD_CtlSendData>
      break;
 800819c:	e004      	b.n	80081a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f88a 	bl	80082ba <USBD_CtlError>
      break;
 80081a6:	bf00      	nop
  }
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d107      	bne.n	80081d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f94c 	bl	8008468 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80081d0:	e013      	b.n	80081fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	885b      	ldrh	r3, [r3, #2]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d10b      	bne.n	80081f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	889b      	ldrh	r3, [r3, #4]
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f93c 	bl	8008468 <USBD_CtlSendStatus>
}
 80081f0:	e003      	b.n	80081fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f860 	bl	80082ba <USBD_CtlError>
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008212:	b2db      	uxtb	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	2b02      	cmp	r3, #2
 8008218:	d80b      	bhi.n	8008232 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d10c      	bne.n	800823c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f91c 	bl	8008468 <USBD_CtlSendStatus>
      }
      break;
 8008230:	e004      	b.n	800823c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f840 	bl	80082ba <USBD_CtlError>
      break;
 800823a:	e000      	b.n	800823e <USBD_ClrFeature+0x3c>
      break;
 800823c:	bf00      	nop
  }
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	781a      	ldrb	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3301      	adds	r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fa16 	bl	80076a2 <SWAPBYTE>
 8008276:	4603      	mov	r3, r0
 8008278:	461a      	mov	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fa09 	bl	80076a2 <SWAPBYTE>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff f9fc 	bl	80076a2 <SWAPBYTE>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	80da      	strh	r2, [r3, #6]
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c4:	2180      	movs	r1, #128	@ 0x80
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 ff9a 	bl	8009200 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 ff96 	bl	8009200 <USBD_LL_StallEP>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d042      	beq.n	8008378 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80082f6:	6938      	ldr	r0, [r7, #16]
 80082f8:	f000 f842 	bl	8008380 <USBD_GetLen>
 80082fc:	4603      	mov	r3, r0
 80082fe:	3301      	adds	r3, #1
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008306:	d808      	bhi.n	800831a <USBD_GetString+0x3e>
 8008308:	6938      	ldr	r0, [r7, #16]
 800830a:	f000 f839 	bl	8008380 <USBD_GetLen>
 800830e:	4603      	mov	r3, r0
 8008310:	3301      	adds	r3, #1
 8008312:	b29b      	uxth	r3, r3
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	e001      	b.n	800831e <USBD_GetString+0x42>
 800831a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	4413      	add	r3, r2
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7812      	ldrb	r2, [r2, #0]
 800832c:	701a      	strb	r2, [r3, #0]
  idx++;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	3301      	adds	r3, #1
 8008332:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	4413      	add	r3, r2
 800833a:	2203      	movs	r2, #3
 800833c:	701a      	strb	r2, [r3, #0]
  idx++;
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	3301      	adds	r3, #1
 8008342:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008344:	e013      	b.n	800836e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	4413      	add	r3, r2
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3301      	adds	r3, #1
 8008356:	613b      	str	r3, [r7, #16]
    idx++;
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	3301      	adds	r3, #1
 800835c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	4413      	add	r3, r2
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
    idx++;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	3301      	adds	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e7      	bne.n	8008346 <USBD_GetString+0x6a>
 8008376:	e000      	b.n	800837a <USBD_GetString+0x9e>
    return;
 8008378:	bf00      	nop
  }
}
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008390:	e005      	b.n	800839e <USBD_GetLen+0x1e>
  {
    len++;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	3301      	adds	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	3301      	adds	r3, #1
 800839c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f5      	bne.n	8008392 <USBD_GetLen+0x12>
  }

  return len;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	2100      	movs	r1, #0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 ffde 	bl	800939c <USBD_LL_Transmit>

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 ffcd 	bl	800939c <USBD_LL_Transmit>

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2203      	movs	r2, #3
 800841c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	2100      	movs	r1, #0
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 ffe8 	bl	800940c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	2100      	movs	r1, #0
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 ffd7 	bl	800940c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2204      	movs	r2, #4
 8008474:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008478:	2300      	movs	r3, #0
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 ff8c 	bl	800939c <USBD_LL_Transmit>

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2205      	movs	r2, #5
 800849a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800849e:	2300      	movs	r3, #0
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 ffb1 	bl	800940c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084b8:	2200      	movs	r2, #0
 80084ba:	4912      	ldr	r1, [pc, #72]	@ (8008504 <MX_USB_DEVICE_Init+0x50>)
 80084bc:	4812      	ldr	r0, [pc, #72]	@ (8008508 <MX_USB_DEVICE_Init+0x54>)
 80084be:	f7fe fccd 	bl	8006e5c <USBD_Init>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084c8:	f7f8 fed2 	bl	8001270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084cc:	490f      	ldr	r1, [pc, #60]	@ (800850c <MX_USB_DEVICE_Init+0x58>)
 80084ce:	480e      	ldr	r0, [pc, #56]	@ (8008508 <MX_USB_DEVICE_Init+0x54>)
 80084d0:	f7fe fcf4 	bl	8006ebc <USBD_RegisterClass>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084da:	f7f8 fec9 	bl	8001270 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084de:	490c      	ldr	r1, [pc, #48]	@ (8008510 <MX_USB_DEVICE_Init+0x5c>)
 80084e0:	4809      	ldr	r0, [pc, #36]	@ (8008508 <MX_USB_DEVICE_Init+0x54>)
 80084e2:	f7fe fbeb 	bl	8006cbc <USBD_CDC_RegisterInterface>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084ec:	f7f8 fec0 	bl	8001270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084f0:	4805      	ldr	r0, [pc, #20]	@ (8008508 <MX_USB_DEVICE_Init+0x54>)
 80084f2:	f7fe fd19 	bl	8006f28 <USBD_Start>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084fc:	f7f8 feb8 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008500:	bf00      	nop
 8008502:	bd80      	pop	{r7, pc}
 8008504:	200000ac 	.word	0x200000ac
 8008508:	20000254 	.word	0x20000254
 800850c:	20000018 	.word	0x20000018
 8008510:	20000098 	.word	0x20000098

08008514 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008518:	2200      	movs	r2, #0
 800851a:	4907      	ldr	r1, [pc, #28]	@ (8008538 <CDC_Init_FS+0x24>)
 800851c:	4807      	ldr	r0, [pc, #28]	@ (800853c <CDC_Init_FS+0x28>)
 800851e:	f7fe fbe7 	bl	8006cf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008522:	4907      	ldr	r1, [pc, #28]	@ (8008540 <CDC_Init_FS+0x2c>)
 8008524:	4805      	ldr	r0, [pc, #20]	@ (800853c <CDC_Init_FS+0x28>)
 8008526:	f7fe fc05 	bl	8006d34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800852a:	4804      	ldr	r0, [pc, #16]	@ (800853c <CDC_Init_FS+0x28>)
 800852c:	f7fe fc60 	bl	8006df0 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8008530:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008532:	4618      	mov	r0, r3
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000db4 	.word	0x20000db4
 800853c:	20000254 	.word	0x20000254
 8008540:	200005b4 	.word	0x200005b4

08008544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800854a:	4618      	mov	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
 8008560:	4613      	mov	r3, r2
 8008562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b23      	cmp	r3, #35	@ 0x23
 8008568:	d84a      	bhi.n	8008600 <CDC_Control_FS+0xac>
 800856a:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <CDC_Control_FS+0x1c>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	08008601 	.word	0x08008601
 8008574:	08008601 	.word	0x08008601
 8008578:	08008601 	.word	0x08008601
 800857c:	08008601 	.word	0x08008601
 8008580:	08008601 	.word	0x08008601
 8008584:	08008601 	.word	0x08008601
 8008588:	08008601 	.word	0x08008601
 800858c:	08008601 	.word	0x08008601
 8008590:	08008601 	.word	0x08008601
 8008594:	08008601 	.word	0x08008601
 8008598:	08008601 	.word	0x08008601
 800859c:	08008601 	.word	0x08008601
 80085a0:	08008601 	.word	0x08008601
 80085a4:	08008601 	.word	0x08008601
 80085a8:	08008601 	.word	0x08008601
 80085ac:	08008601 	.word	0x08008601
 80085b0:	08008601 	.word	0x08008601
 80085b4:	08008601 	.word	0x08008601
 80085b8:	08008601 	.word	0x08008601
 80085bc:	08008601 	.word	0x08008601
 80085c0:	08008601 	.word	0x08008601
 80085c4:	08008601 	.word	0x08008601
 80085c8:	08008601 	.word	0x08008601
 80085cc:	08008601 	.word	0x08008601
 80085d0:	08008601 	.word	0x08008601
 80085d4:	08008601 	.word	0x08008601
 80085d8:	08008601 	.word	0x08008601
 80085dc:	08008601 	.word	0x08008601
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008601 	.word	0x08008601
 80085ec:	08008601 	.word	0x08008601
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008601 	.word	0x08008601
 80085f8:	08008601 	.word	0x08008601
 80085fc:	08008601 	.word	0x08008601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008600:	bf00      	nop
  }

  return (USBD_OK);
 8008602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008610:	b590      	push	{r4, r7, lr}
 8008612:	b0cf      	sub	sp, #316	@ 0x13c
 8008614:	af02      	add	r7, sp, #8
 8008616:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800861a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800861e:	6018      	str	r0, [r3, #0]
 8008620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008624:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008628:	6019      	str	r1, [r3, #0]
  /* USER CODE BEGIN 6 */

    char temp[CMD_BUFFER_SIZE*2];
    uint8_t valid = 0; 
 800862a:	2300      	movs	r3, #0
 800862c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    int pumpnum, status, direction, duration; 
    int valvenum;
  
      for (uint32_t i = 0; i < *Len; i++) {
 8008630:	2300      	movs	r3, #0
 8008632:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8008636:	e1df      	b.n	80089f8 <CDC_Receive_FS+0x3e8>
          char c = (char)Buf[i];
 8008638:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800863c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008646:	4413      	add	r3, r2
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
          uint8_t u = (uint8_t)c;
 800864e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008652:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008656:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800865a:	701a      	strb	r2, [r3, #0]
  
          // Echo every char back
          if (c != '\r' && c != '\n') {
 800865c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008660:	2b0d      	cmp	r3, #13
 8008662:	d01a      	beq.n	800869a <CDC_Receive_FS+0x8a>
 8008664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008668:	2b0a      	cmp	r3, #10
 800866a:	d016      	beq.n	800869a <CDC_Receive_FS+0x8a>
              // block until endpoint is free
              CDC_Transmit_FS(&u, 1);
 800866c:	f107 030f 	add.w	r3, r7, #15
 8008670:	2101      	movs	r1, #1
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f9e4 	bl	8008a40 <CDC_Transmit_FS>
              
              if (command_index < CMD_BUFFER_SIZE - 1) {
 8008678:	4bbf      	ldr	r3, [pc, #764]	@ (8008978 <CDC_Receive_FS+0x368>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b7e      	cmp	r3, #126	@ 0x7e
 800867e:	f200 81b5 	bhi.w	80089ec <CDC_Receive_FS+0x3dc>
                  command_buffer[command_index++] = c;
 8008682:	4bbd      	ldr	r3, [pc, #756]	@ (8008978 <CDC_Receive_FS+0x368>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	b2d1      	uxtb	r1, r2
 800868a:	4abb      	ldr	r2, [pc, #748]	@ (8008978 <CDC_Receive_FS+0x368>)
 800868c:	7011      	strb	r1, [r2, #0]
 800868e:	4619      	mov	r1, r3
 8008690:	4aba      	ldr	r2, [pc, #744]	@ (800897c <CDC_Receive_FS+0x36c>)
 8008692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008696:	5453      	strb	r3, [r2, r1]
 8008698:	e1a9      	b.n	80089ee <CDC_Receive_FS+0x3de>
              }
              continue;
          }
          
          // Terminate command
          command_buffer[command_index] = '\0';
 800869a:	4bb7      	ldr	r3, [pc, #732]	@ (8008978 <CDC_Receive_FS+0x368>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	4bb6      	ldr	r3, [pc, #728]	@ (800897c <CDC_Receive_FS+0x36c>)
 80086a2:	2100      	movs	r1, #0
 80086a4:	5499      	strb	r1, [r3, r2]
  
          if (command_index > 0) {
 80086a6:	4bb4      	ldr	r3, [pc, #720]	@ (8008978 <CDC_Receive_FS+0x368>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 819f 	beq.w	80089ee <CDC_Receive_FS+0x3de>
              // your command logic
              if (strcmp(command_buffer, "LED2 on") == 0) {
 80086b0:	49b3      	ldr	r1, [pc, #716]	@ (8008980 <CDC_Receive_FS+0x370>)
 80086b2:	48b2      	ldr	r0, [pc, #712]	@ (800897c <CDC_Receive_FS+0x36c>)
 80086b4:	f7f7 fda4 	bl	8000200 <strcmp>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <CDC_Receive_FS+0xbc>
                LED2 = 1;
 80086be:	4bb1      	ldr	r3, [pc, #708]	@ (8008984 <CDC_Receive_FS+0x374>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 80086ca:	e00c      	b.n	80086e6 <CDC_Receive_FS+0xd6>
              }
              else if (strcmp(command_buffer, "LED2 off") == 0) {
 80086cc:	49ae      	ldr	r1, [pc, #696]	@ (8008988 <CDC_Receive_FS+0x378>)
 80086ce:	48ab      	ldr	r0, [pc, #684]	@ (800897c <CDC_Receive_FS+0x36c>)
 80086d0:	f7f7 fd96 	bl	8000200 <strcmp>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d105      	bne.n	80086e6 <CDC_Receive_FS+0xd6>
                LED2 = 0;
 80086da:	4baa      	ldr	r3, [pc, #680]	@ (8008984 <CDC_Receive_FS+0x374>)
 80086dc:	2200      	movs	r2, #0
 80086de:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
              }
              
              if (strcmp(command_buffer, "LED1 on") == 0) {
 80086e6:	49a9      	ldr	r1, [pc, #676]	@ (800898c <CDC_Receive_FS+0x37c>)
 80086e8:	48a4      	ldr	r0, [pc, #656]	@ (800897c <CDC_Receive_FS+0x36c>)
 80086ea:	f7f7 fd89 	bl	8000200 <strcmp>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <CDC_Receive_FS+0xf2>
                LED1 = 1;
 80086f4:	4ba6      	ldr	r3, [pc, #664]	@ (8008990 <CDC_Receive_FS+0x380>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 8008700:	e00c      	b.n	800871c <CDC_Receive_FS+0x10c>
              }
              else if (strcmp(command_buffer, "LED1 off") == 0) {
 8008702:	49a4      	ldr	r1, [pc, #656]	@ (8008994 <CDC_Receive_FS+0x384>)
 8008704:	489d      	ldr	r0, [pc, #628]	@ (800897c <CDC_Receive_FS+0x36c>)
 8008706:	f7f7 fd7b 	bl	8000200 <strcmp>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <CDC_Receive_FS+0x10c>
                LED1 = 0;
 8008710:	4b9f      	ldr	r3, [pc, #636]	@ (8008990 <CDC_Receive_FS+0x380>)
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8008716:	2301      	movs	r3, #1
 8008718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
              }
              // Format is "pump 1 1 1 200", "pump pumpnum status direction duration"
              if (sscanf(command_buffer, "pump %d %d %d %d", &pumpnum, &status, &direction, &duration) == 4)
 800871c:	f107 011c 	add.w	r1, r7, #28
 8008720:	f107 0220 	add.w	r2, r7, #32
 8008724:	f107 0314 	add.w	r3, r7, #20
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	f107 0318 	add.w	r3, r7, #24
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	460b      	mov	r3, r1
 8008732:	4999      	ldr	r1, [pc, #612]	@ (8008998 <CDC_Receive_FS+0x388>)
 8008734:	4891      	ldr	r0, [pc, #580]	@ (800897c <CDC_Receive_FS+0x36c>)
 8008736:	f001 f873 	bl	8009820 <siscanf>
 800873a:	4603      	mov	r3, r0
 800873c:	2b04      	cmp	r3, #4
 800873e:	f040 8096 	bne.w	800886e <CDC_Receive_FS+0x25e>
              {
                valid = 1; 
 8008742:	2301      	movs	r3, #1
 8008744:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
                switch(pumpnum)
 8008748:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800874c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b03      	cmp	r3, #3
 8008754:	d05f      	beq.n	8008816 <CDC_Receive_FS+0x206>
 8008756:	2b03      	cmp	r3, #3
 8008758:	f300 8089 	bgt.w	800886e <CDC_Receive_FS+0x25e>
 800875c:	2b01      	cmp	r3, #1
 800875e:	d002      	beq.n	8008766 <CDC_Receive_FS+0x156>
 8008760:	2b02      	cmp	r3, #2
 8008762:	d02c      	beq.n	80087be <CDC_Receive_FS+0x1ae>
 8008764:	e083      	b.n	800886e <CDC_Receive_FS+0x25e>
                {
                  case 1: 
                    pump1.status = status; 
 8008766:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800876a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	4b8a      	ldr	r3, [pc, #552]	@ (800899c <CDC_Receive_FS+0x38c>)
 8008774:	701a      	strb	r2, [r3, #0]
                    pump1.dir = direction; 
 8008776:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800877a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	4b86      	ldr	r3, [pc, #536]	@ (800899c <CDC_Receive_FS+0x38c>)
 8008784:	705a      	strb	r2, [r3, #1]
                    pump1.duration_us = (uint32_t)duration * 1e6; // duration prompted in seconds -> convert to us
 8008786:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800878a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4618      	mov	r0, r3
 8008792:	f7f8 f809 	bl	80007a8 <__aeabi_ui2d>
 8008796:	a376      	add	r3, pc, #472	@ (adr r3, 8008970 <CDC_Receive_FS+0x360>)
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f7f7 fd98 	bl	80002d0 <__aeabi_dmul>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4610      	mov	r0, r2
 80087a6:	4619      	mov	r1, r3
 80087a8:	f7f8 f878 	bl	800089c <__aeabi_d2uiz>
 80087ac:	4603      	mov	r3, r0
 80087ae:	4a7b      	ldr	r2, [pc, #492]	@ (800899c <CDC_Receive_FS+0x38c>)
 80087b0:	6093      	str	r3, [r2, #8]
                    pump1.start_us = Get_timer6_us();
 80087b2:	f7f8 faa1 	bl	8000cf8 <Get_timer6_us>
 80087b6:	4603      	mov	r3, r0
 80087b8:	4a78      	ldr	r2, [pc, #480]	@ (800899c <CDC_Receive_FS+0x38c>)
 80087ba:	6053      	str	r3, [r2, #4]
                    break; 
 80087bc:	e057      	b.n	800886e <CDC_Receive_FS+0x25e>
                  case 2: 
                    pump2.status = status; 
 80087be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	4b75      	ldr	r3, [pc, #468]	@ (80089a0 <CDC_Receive_FS+0x390>)
 80087cc:	701a      	strb	r2, [r3, #0]
                    pump2.dir = direction; 
 80087ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087d2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	4b71      	ldr	r3, [pc, #452]	@ (80089a0 <CDC_Receive_FS+0x390>)
 80087dc:	705a      	strb	r2, [r3, #1]
                    pump2.duration_us = (uint32_t)duration * 1e6; // duration prompted in seconds -> convert to us
 80087de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7f7 ffdd 	bl	80007a8 <__aeabi_ui2d>
 80087ee:	a360      	add	r3, pc, #384	@ (adr r3, 8008970 <CDC_Receive_FS+0x360>)
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f7f7 fd6c 	bl	80002d0 <__aeabi_dmul>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4610      	mov	r0, r2
 80087fe:	4619      	mov	r1, r3
 8008800:	f7f8 f84c 	bl	800089c <__aeabi_d2uiz>
 8008804:	4603      	mov	r3, r0
 8008806:	4a66      	ldr	r2, [pc, #408]	@ (80089a0 <CDC_Receive_FS+0x390>)
 8008808:	6093      	str	r3, [r2, #8]
                    pump2.start_us = Get_timer6_us();
 800880a:	f7f8 fa75 	bl	8000cf8 <Get_timer6_us>
 800880e:	4603      	mov	r3, r0
 8008810:	4a63      	ldr	r2, [pc, #396]	@ (80089a0 <CDC_Receive_FS+0x390>)
 8008812:	6053      	str	r3, [r2, #4]
                    break; 
 8008814:	e02b      	b.n	800886e <CDC_Receive_FS+0x25e>
                  case 3: 
                    pump3.status = status; 
 8008816:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800881a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4b60      	ldr	r3, [pc, #384]	@ (80089a4 <CDC_Receive_FS+0x394>)
 8008824:	701a      	strb	r2, [r3, #0]
                    pump3.dir = direction; 
 8008826:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800882a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	4b5c      	ldr	r3, [pc, #368]	@ (80089a4 <CDC_Receive_FS+0x394>)
 8008834:	705a      	strb	r2, [r3, #1]
                    pump3.duration_us = (uint32_t)duration * 1e6; // duration prompted in seconds -> convert to us
 8008836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800883a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f7f7 ffb1 	bl	80007a8 <__aeabi_ui2d>
 8008846:	a34a      	add	r3, pc, #296	@ (adr r3, 8008970 <CDC_Receive_FS+0x360>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f7 fd40 	bl	80002d0 <__aeabi_dmul>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4610      	mov	r0, r2
 8008856:	4619      	mov	r1, r3
 8008858:	f7f8 f820 	bl	800089c <__aeabi_d2uiz>
 800885c:	4603      	mov	r3, r0
 800885e:	4a51      	ldr	r2, [pc, #324]	@ (80089a4 <CDC_Receive_FS+0x394>)
 8008860:	6093      	str	r3, [r2, #8]
                    pump3.start_us = Get_timer6_us();
 8008862:	f7f8 fa49 	bl	8000cf8 <Get_timer6_us>
 8008866:	4603      	mov	r3, r0
 8008868:	4a4e      	ldr	r2, [pc, #312]	@ (80089a4 <CDC_Receive_FS+0x394>)
 800886a:	6053      	str	r3, [r2, #4]
                    break; 
 800886c:	bf00      	nop
                }
              }
              
              if (sscanf(command_buffer, "valve %d %d %d", &valvenum, &status, &duration) == 3){
 800886e:	f107 011c 	add.w	r1, r7, #28
 8008872:	f107 0210 	add.w	r2, r7, #16
 8008876:	f107 0314 	add.w	r3, r7, #20
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	460b      	mov	r3, r1
 800887e:	494a      	ldr	r1, [pc, #296]	@ (80089a8 <CDC_Receive_FS+0x398>)
 8008880:	483e      	ldr	r0, [pc, #248]	@ (800897c <CDC_Receive_FS+0x36c>)
 8008882:	f000 ffcd 	bl	8009820 <siscanf>
 8008886:	4603      	mov	r3, r0
 8008888:	2b03      	cmp	r3, #3
 800888a:	d149      	bne.n	8008920 <CDC_Receive_FS+0x310>
                valid = 1; 
 800888c:	2301      	movs	r3, #1
 800888e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
                valve[valvenum-1].status = (uint8_t)status; 
 8008892:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008896:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800889a:	6819      	ldr	r1, [r3, #0]
 800889c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	1e5a      	subs	r2, r3, #1
 80088a8:	b2c8      	uxtb	r0, r1
 80088aa:	4940      	ldr	r1, [pc, #256]	@ (80089ac <CDC_Receive_FS+0x39c>)
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	4602      	mov	r2, r0
 80088b8:	701a      	strb	r2, [r3, #0]
                valve[valvenum-1].start_us = Get_timer6_us();
 80088ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	1e5c      	subs	r4, r3, #1
 80088c6:	f7f8 fa17 	bl	8000cf8 <Get_timer6_us>
 80088ca:	4602      	mov	r2, r0
 80088cc:	4937      	ldr	r1, [pc, #220]	@ (80089ac <CDC_Receive_FS+0x39c>)
 80088ce:	4623      	mov	r3, r4
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	4423      	add	r3, r4
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	3304      	adds	r3, #4
 80088da:	601a      	str	r2, [r3, #0]
                valve[valvenum-1].duration_us = (uint32_t)duration * 1e6; 
 80088dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088e0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7f7 ff5e 	bl	80007a8 <__aeabi_ui2d>
 80088ec:	a320      	add	r3, pc, #128	@ (adr r3, 8008970 <CDC_Receive_FS+0x360>)
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f7f7 fced 	bl	80002d0 <__aeabi_dmul>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008902:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	1e5c      	subs	r4, r3, #1
 800890a:	f7f7 ffc7 	bl	800089c <__aeabi_d2uiz>
 800890e:	4602      	mov	r2, r0
 8008910:	4926      	ldr	r1, [pc, #152]	@ (80089ac <CDC_Receive_FS+0x39c>)
 8008912:	4623      	mov	r3, r4
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	4423      	add	r3, r4
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	440b      	add	r3, r1
 800891c:	3308      	adds	r3, #8
 800891e:	601a      	str	r2, [r3, #0]
              }

              // timer test 
              if (strcmp(command_buffer, "Timer on") == 0){
 8008920:	4923      	ldr	r1, [pc, #140]	@ (80089b0 <CDC_Receive_FS+0x3a0>)
 8008922:	4816      	ldr	r0, [pc, #88]	@ (800897c <CDC_Receive_FS+0x36c>)
 8008924:	f7f7 fc6c 	bl	8000200 <strcmp>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d105      	bne.n	800893a <CDC_Receive_FS+0x32a>
                Timer6_flag = 1; 
 800892e:	4b21      	ldr	r3, [pc, #132]	@ (80089b4 <CDC_Receive_FS+0x3a4>)
 8008930:	2201      	movs	r2, #1
 8008932:	701a      	strb	r2, [r3, #0]
                valid = 1; 
 8008934:	2301      	movs	r3, #1
 8008936:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
              }
  
              if (valid)
 800893a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800893e:	2b00      	cmp	r3, #0
 8008940:	d03c      	beq.n	80089bc <CDC_Receive_FS+0x3ac>
              {
                sprintf(temp, "\r\nReceieved: %s\r\n> ", command_buffer);
 8008942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008946:	4a0d      	ldr	r2, [pc, #52]	@ (800897c <CDC_Receive_FS+0x36c>)
 8008948:	491b      	ldr	r1, [pc, #108]	@ (80089b8 <CDC_Receive_FS+0x3a8>)
 800894a:	4618      	mov	r0, r3
 800894c:	f000 ff48 	bl	80097e0 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 8008950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008954:	4618      	mov	r0, r3
 8008956:	f7f7 fc5d 	bl	8000214 <strlen>
 800895a:	4603      	mov	r3, r0
 800895c:	b29a      	uxth	r2, r3
 800895e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f000 f86b 	bl	8008a40 <CDC_Transmit_FS>
 800896a:	e03b      	b.n	80089e4 <CDC_Receive_FS+0x3d4>
 800896c:	f3af 8000 	nop.w
 8008970:	00000000 	.word	0x00000000
 8008974:	412e8480 	.word	0x412e8480
 8008978:	200005b0 	.word	0x200005b0
 800897c:	20000530 	.word	0x20000530
 8008980:	0800b204 	.word	0x0800b204
 8008984:	200001d1 	.word	0x200001d1
 8008988:	0800b20c 	.word	0x0800b20c
 800898c:	0800b218 	.word	0x0800b218
 8008990:	200001d0 	.word	0x200001d0
 8008994:	0800b220 	.word	0x0800b220
 8008998:	0800b22c 	.word	0x0800b22c
 800899c:	200001dc 	.word	0x200001dc
 80089a0:	200001e8 	.word	0x200001e8
 80089a4:	200001f4 	.word	0x200001f4
 80089a8:	0800b240 	.word	0x0800b240
 80089ac:	20000200 	.word	0x20000200
 80089b0:	0800b250 	.word	0x0800b250
 80089b4:	200001d2 	.word	0x200001d2
 80089b8:	0800b25c 	.word	0x0800b25c
              }
              else 
              {
                sprintf(temp, "\r\nError Commaand:%s\r\n> ", command_buffer);
 80089bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a30 <CDC_Receive_FS+0x420>)
 80089c2:	491c      	ldr	r1, [pc, #112]	@ (8008a34 <CDC_Receive_FS+0x424>)
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 ff0b 	bl	80097e0 <siprintf>
                CDC_Transmit_FS((uint8_t*)temp, strlen(temp));
 80089ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f7 fc20 	bl	8000214 <strlen>
 80089d4:	4603      	mov	r3, r0
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f82e 	bl	8008a40 <CDC_Transmit_FS>
              }
              command_index = 0;
 80089e4:	4b14      	ldr	r3, [pc, #80]	@ (8008a38 <CDC_Receive_FS+0x428>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	e000      	b.n	80089ee <CDC_Receive_FS+0x3de>
              continue;
 80089ec:	bf00      	nop
      for (uint32_t i = 0; i < *Len; i++) {
 80089ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089f2:	3301      	adds	r3, #1
 80089f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80089f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	f4ff ae15 	bcc.w	8008638 <CDC_Receive_FS+0x28>
          }
  
      }
  
      // 4) re-arm USB to receive more
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8008a0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a16:	6819      	ldr	r1, [r3, #0]
 8008a18:	4808      	ldr	r0, [pc, #32]	@ (8008a3c <CDC_Receive_FS+0x42c>)
 8008a1a:	f7fe f98b 	bl	8006d34 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a1e:	4807      	ldr	r0, [pc, #28]	@ (8008a3c <CDC_Receive_FS+0x42c>)
 8008a20:	f7fe f9e6 	bl	8006df0 <USBD_CDC_ReceivePacket>
      return USBD_OK;
 8008a24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd90      	pop	{r4, r7, pc}
 8008a30:	20000530 	.word	0x20000530
 8008a34:	0800b270 	.word	0x0800b270
 8008a38:	200005b0 	.word	0x200005b0
 8008a3c:	20000254 	.word	0x20000254

08008a40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a50:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <CDC_Transmit_FS+0x48>)
 8008a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e00b      	b.n	8008a7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a66:	887b      	ldrh	r3, [r7, #2]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4806      	ldr	r0, [pc, #24]	@ (8008a88 <CDC_Transmit_FS+0x48>)
 8008a6e:	f7fe f93f 	bl	8006cf0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a72:	4805      	ldr	r0, [pc, #20]	@ (8008a88 <CDC_Transmit_FS+0x48>)
 8008a74:	f7fe f97c 	bl	8006d70 <USBD_CDC_TransmitPacket>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000254 	.word	0x20000254

08008a8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2212      	movs	r2, #18
 8008ac0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ac2:	4b03      	ldr	r3, [pc, #12]	@ (8008ad0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	200000cc 	.word	0x200000cc

08008ad4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2204      	movs	r2, #4
 8008ae4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ae6:	4b03      	ldr	r3, [pc, #12]	@ (8008af4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	200000ec 	.word	0x200000ec

08008af8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	6039      	str	r1, [r7, #0]
 8008b02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d105      	bne.n	8008b16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	4907      	ldr	r1, [pc, #28]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b0e:	4808      	ldr	r0, [pc, #32]	@ (8008b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b10:	f7ff fbe4 	bl	80082dc <USBD_GetString>
 8008b14:	e004      	b.n	8008b20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4904      	ldr	r1, [pc, #16]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b1a:	4805      	ldr	r0, [pc, #20]	@ (8008b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b1c:	f7ff fbde 	bl	80082dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b20:	4b02      	ldr	r3, [pc, #8]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200015b4 	.word	0x200015b4
 8008b30:	0800b288 	.word	0x0800b288

08008b34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	4904      	ldr	r1, [pc, #16]	@ (8008b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b44:	4804      	ldr	r0, [pc, #16]	@ (8008b58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b46:	f7ff fbc9 	bl	80082dc <USBD_GetString>
  return USBD_StrDesc;
 8008b4a:	4b02      	ldr	r3, [pc, #8]	@ (8008b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	200015b4 	.word	0x200015b4
 8008b58:	0800b2a0 	.word	0x0800b2a0

08008b5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	221a      	movs	r2, #26
 8008b6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b6e:	f000 f855 	bl	8008c1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b72:	4b02      	ldr	r3, [pc, #8]	@ (8008b7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	200000f0 	.word	0x200000f0

08008b80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	6039      	str	r1, [r7, #0]
 8008b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d105      	bne.n	8008b9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4907      	ldr	r1, [pc, #28]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b96:	4808      	ldr	r0, [pc, #32]	@ (8008bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b98:	f7ff fba0 	bl	80082dc <USBD_GetString>
 8008b9c:	e004      	b.n	8008ba8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4904      	ldr	r1, [pc, #16]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ba2:	4805      	ldr	r0, [pc, #20]	@ (8008bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ba4:	f7ff fb9a 	bl	80082dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ba8:	4b02      	ldr	r3, [pc, #8]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	200015b4 	.word	0x200015b4
 8008bb8:	0800b2b4 	.word	0x0800b2b4

08008bbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d105      	bne.n	8008bda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4907      	ldr	r1, [pc, #28]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bd2:	4808      	ldr	r0, [pc, #32]	@ (8008bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bd4:	f7ff fb82 	bl	80082dc <USBD_GetString>
 8008bd8:	e004      	b.n	8008be4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4904      	ldr	r1, [pc, #16]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bde:	4805      	ldr	r0, [pc, #20]	@ (8008bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008be0:	f7ff fb7c 	bl	80082dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be4:	4b02      	ldr	r3, [pc, #8]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200015b4 	.word	0x200015b4
 8008bf4:	0800b2c0 	.word	0x0800b2c0

08008bf8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6039      	str	r1, [r7, #0]
 8008c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	220c      	movs	r2, #12
 8008c08:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008c0a:	4b03      	ldr	r3, [pc, #12]	@ (8008c18 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	200000e0 	.word	0x200000e0

08008c1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c22:	4b0f      	ldr	r3, [pc, #60]	@ (8008c60 <Get_SerialNum+0x44>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c28:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <Get_SerialNum+0x48>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c68 <Get_SerialNum+0x4c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c42:	2208      	movs	r2, #8
 8008c44:	4909      	ldr	r1, [pc, #36]	@ (8008c6c <Get_SerialNum+0x50>)
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 f814 	bl	8008c74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	4908      	ldr	r1, [pc, #32]	@ (8008c70 <Get_SerialNum+0x54>)
 8008c50:	68b8      	ldr	r0, [r7, #8]
 8008c52:	f000 f80f 	bl	8008c74 <IntToUnicode>
  }
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	1fff7590 	.word	0x1fff7590
 8008c64:	1fff7594 	.word	0x1fff7594
 8008c68:	1fff7598 	.word	0x1fff7598
 8008c6c:	200000f2 	.word	0x200000f2
 8008c70:	20000102 	.word	0x20000102

08008c74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c86:	2300      	movs	r3, #0
 8008c88:	75fb      	strb	r3, [r7, #23]
 8008c8a:	e027      	b.n	8008cdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	0f1b      	lsrs	r3, r3, #28
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	d80b      	bhi.n	8008cac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	0f1b      	lsrs	r3, r3, #28
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3230      	adds	r2, #48	@ 0x30
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	e00a      	b.n	8008cc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	0f1b      	lsrs	r3, r3, #28
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	440b      	add	r3, r1
 8008cbc:	3237      	adds	r2, #55	@ 0x37
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	3301      	adds	r3, #1
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	75fb      	strb	r3, [r7, #23]
 8008cdc:	7dfa      	ldrb	r2, [r7, #23]
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d3d3      	bcc.n	8008c8c <IntToUnicode+0x18>
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b0b0      	sub	sp, #192	@ 0xc0
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cfc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	609a      	str	r2, [r3, #8]
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	2298      	movs	r2, #152	@ 0x98
 8008d12:	2100      	movs	r1, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fe87 	bl	8009a28 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d22:	d173      	bne.n	8008e0c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008d2a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008d32:	2303      	movs	r3, #3
 8008d34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008d36:	2301      	movs	r3, #1
 8008d38:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8008d3e:	2302      	movs	r3, #2
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008d42:	2302      	movs	r3, #2
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008d46:	2302      	movs	r3, #2
 8008d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008d4a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d50:	f107 0314 	add.w	r3, r7, #20
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fb f8af 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008d60:	f7f8 fa86 	bl	8001270 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d64:	4b2b      	ldr	r3, [pc, #172]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d68:	4a2a      	ldr	r2, [pc, #168]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d70:	4b28      	ldr	r3, [pc, #160]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d7c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d84:	2302      	movs	r3, #2
 8008d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d90:	2303      	movs	r3, #3
 8008d92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d96:	230a      	movs	r3, #10
 8008d98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008da0:	4619      	mov	r1, r3
 8008da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008da6:	f7f8 fd65 	bl	8001874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008daa:	4b1a      	ldr	r3, [pc, #104]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dae:	4a19      	ldr	r2, [pc, #100]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008db6:	4b17      	ldr	r3, [pc, #92]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dc2:	4b14      	ldr	r3, [pc, #80]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d114      	bne.n	8008df8 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dce:	4b11      	ldr	r3, [pc, #68]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd2:	4a10      	ldr	r2, [pc, #64]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dda:	4b0e      	ldr	r3, [pc, #56]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008de2:	60bb      	str	r3, [r7, #8]
 8008de4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008de6:	f7fa f949 	bl	800307c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dea:	4b0a      	ldr	r3, [pc, #40]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dee:	4a09      	ldr	r2, [pc, #36]	@ (8008e14 <HAL_PCD_MspInit+0x120>)
 8008df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008df6:	e001      	b.n	8008dfc <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008df8:	f7fa f940 	bl	800307c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2100      	movs	r1, #0
 8008e00:	2043      	movs	r0, #67	@ 0x43
 8008e02:	f7f8 fd00 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e06:	2043      	movs	r0, #67	@ 0x43
 8008e08:	f7f8 fd19 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e0c:	bf00      	nop
 8008e0e:	37c0      	adds	r7, #192	@ 0xc0
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	40021000 	.word	0x40021000

08008e18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7fe f8c7 	bl	8006fc2 <USBD_LL_SetupStage>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	78fb      	ldrb	r3, [r7, #3]
 8008e64:	4619      	mov	r1, r3
 8008e66:	f7fe f901 	bl	800706c <USBD_LL_DataOutStage>
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	3320      	adds	r3, #32
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f7fe f99a 	bl	80071d2 <USBD_LL_DataInStage>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fad4 	bl	8007462 <USBD_LL_SOF>
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	79db      	ldrb	r3, [r3, #7]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d001      	beq.n	8008eda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ed6:	f7f8 f9cb 	bl	8001270 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ee0:	7bfa      	ldrb	r2, [r7, #15]
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe fa78 	bl	80073da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fe fa20 	bl	8007336 <USBD_LL_Reset>
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6812      	ldr	r2, [r2, #0]
 8008f16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fa67 	bl	80073fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	7adb      	ldrb	r3, [r3, #11]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f34:	4b04      	ldr	r3, [pc, #16]	@ (8008f48 <HAL_PCD_SuspendCallback+0x48>)
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	4a03      	ldr	r2, [pc, #12]	@ (8008f48 <HAL_PCD_SuspendCallback+0x48>)
 8008f3a:	f043 0306 	orr.w	r3, r3, #6
 8008f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	e000ed00 	.word	0xe000ed00

08008f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6812      	ldr	r2, [r2, #0]
 8008f62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7adb      	ldrb	r3, [r3, #11]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f74:	4b08      	ldr	r3, [pc, #32]	@ (8008f98 <HAL_PCD_ResumeCallback+0x4c>)
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	4a07      	ldr	r2, [pc, #28]	@ (8008f98 <HAL_PCD_ResumeCallback+0x4c>)
 8008f7a:	f023 0306 	bic.w	r3, r3, #6
 8008f7e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008f80:	f000 faf6 	bl	8009570 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fa51 	bl	8007432 <USBD_LL_Resume>
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	e000ed00 	.word	0xe000ed00

08008f9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe faa7 	bl	8007506 <USBD_LL_IsoOUTIncomplete>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fa63 	bl	80074a2 <USBD_LL_IsoINIncomplete>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fab9 	bl	800756a <USBD_LL_DevConnected>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fab6 	bl	8007580 <USBD_LL_DevDisconnected>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d13c      	bne.n	80090a6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800902c:	4a20      	ldr	r2, [pc, #128]	@ (80090b0 <USBD_LL_Init+0x94>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a1e      	ldr	r2, [pc, #120]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009038:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800903c:	4b1c      	ldr	r3, [pc, #112]	@ (80090b0 <USBD_LL_Init+0x94>)
 800903e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009042:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009044:	4b1a      	ldr	r3, [pc, #104]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009046:	2206      	movs	r2, #6
 8009048:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800904a:	4b19      	ldr	r3, [pc, #100]	@ (80090b0 <USBD_LL_Init+0x94>)
 800904c:	2202      	movs	r2, #2
 800904e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009050:	4b17      	ldr	r3, [pc, #92]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009052:	2202      	movs	r2, #2
 8009054:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009056:	4b16      	ldr	r3, [pc, #88]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009058:	2200      	movs	r2, #0
 800905a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800905c:	4b14      	ldr	r3, [pc, #80]	@ (80090b0 <USBD_LL_Init+0x94>)
 800905e:	2200      	movs	r2, #0
 8009060:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009062:	4b13      	ldr	r3, [pc, #76]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009064:	2200      	movs	r2, #0
 8009066:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009068:	4b11      	ldr	r3, [pc, #68]	@ (80090b0 <USBD_LL_Init+0x94>)
 800906a:	2200      	movs	r2, #0
 800906c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800906e:	4b10      	ldr	r3, [pc, #64]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009070:	2200      	movs	r2, #0
 8009072:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009074:	4b0e      	ldr	r3, [pc, #56]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009076:	2200      	movs	r2, #0
 8009078:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800907a:	480d      	ldr	r0, [pc, #52]	@ (80090b0 <USBD_LL_Init+0x94>)
 800907c:	f7f8 fda4 	bl	8001bc8 <HAL_PCD_Init>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009086:	f7f8 f8f3 	bl	8001270 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800908a:	2180      	movs	r1, #128	@ 0x80
 800908c:	4808      	ldr	r0, [pc, #32]	@ (80090b0 <USBD_LL_Init+0x94>)
 800908e:	f7f9 fefc 	bl	8002e8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009092:	2240      	movs	r2, #64	@ 0x40
 8009094:	2100      	movs	r1, #0
 8009096:	4806      	ldr	r0, [pc, #24]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009098:	f7f9 feb0 	bl	8002dfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800909c:	2280      	movs	r2, #128	@ 0x80
 800909e:	2101      	movs	r1, #1
 80090a0:	4803      	ldr	r0, [pc, #12]	@ (80090b0 <USBD_LL_Init+0x94>)
 80090a2:	f7f9 feab 	bl	8002dfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200017b4 	.word	0x200017b4

080090b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f8 fe8b 	bl	8001de6 <HAL_PCD_Start>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d816      	bhi.n	8009108 <USBD_LL_Start+0x54>
 80090da:	a201      	add	r2, pc, #4	@ (adr r2, 80090e0 <USBD_LL_Start+0x2c>)
 80090dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e0:	080090f1 	.word	0x080090f1
 80090e4:	080090f7 	.word	0x080090f7
 80090e8:	080090fd 	.word	0x080090fd
 80090ec:	08009103 	.word	0x08009103
    case HAL_OK :
      usb_status = USBD_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
    break;
 80090f4:	e00b      	b.n	800910e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	73fb      	strb	r3, [r7, #15]
    break;
 80090fa:	e008      	b.n	800910e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090fc:	2301      	movs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009100:	e005      	b.n	800910e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	73fb      	strb	r3, [r7, #15]
    break;
 8009106:	e002      	b.n	800910e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	73fb      	strb	r3, [r7, #15]
    break;
 800910c:	bf00      	nop
  }
  return usb_status;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	461a      	mov	r2, r3
 8009126:	4603      	mov	r3, r0
 8009128:	70fb      	strb	r3, [r7, #3]
 800912a:	460b      	mov	r3, r1
 800912c:	70bb      	strb	r3, [r7, #2]
 800912e:	4613      	mov	r3, r2
 8009130:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009140:	78bb      	ldrb	r3, [r7, #2]
 8009142:	883a      	ldrh	r2, [r7, #0]
 8009144:	78f9      	ldrb	r1, [r7, #3]
 8009146:	f7f9 fb37 	bl	80027b8 <HAL_PCD_EP_Open>
 800914a:	4603      	mov	r3, r0
 800914c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	2b03      	cmp	r3, #3
 8009152:	d817      	bhi.n	8009184 <USBD_LL_OpenEP+0x6c>
 8009154:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <USBD_LL_OpenEP+0x44>)
 8009156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915a:	bf00      	nop
 800915c:	0800916d 	.word	0x0800916d
 8009160:	08009173 	.word	0x08009173
 8009164:	08009179 	.word	0x08009179
 8009168:	0800917f 	.word	0x0800917f
    case HAL_OK :
      usb_status = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]
    break;
 8009170:	e00b      	b.n	800918a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	73fb      	strb	r3, [r7, #15]
    break;
 8009176:	e008      	b.n	800918a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
    break;
 800917c:	e005      	b.n	800918a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800917e:	2303      	movs	r3, #3
 8009180:	73fb      	strb	r3, [r7, #15]
    break;
 8009182:	e002      	b.n	800918a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	73fb      	strb	r3, [r7, #15]
    break;
 8009188:	bf00      	nop
  }
  return usb_status;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f9 fb6a 	bl	800288c <HAL_PCD_EP_Close>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d816      	bhi.n	80091f0 <USBD_LL_CloseEP+0x5c>
 80091c2:	a201      	add	r2, pc, #4	@ (adr r2, 80091c8 <USBD_LL_CloseEP+0x34>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	080091df 	.word	0x080091df
 80091d0:	080091e5 	.word	0x080091e5
 80091d4:	080091eb 	.word	0x080091eb
    case HAL_OK :
      usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	e00b      	b.n	80091f6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	73fb      	strb	r3, [r7, #15]
    break;
 80091e2:	e008      	b.n	80091f6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	e005      	b.n	80091f6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	73fb      	strb	r3, [r7, #15]
    break;
 80091ee:	e002      	b.n	80091f6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80091f0:	2303      	movs	r3, #3
 80091f2:	73fb      	strb	r3, [r7, #15]
    break;
 80091f4:	bf00      	nop
  }
  return usb_status;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f7f9 fbf9 	bl	8002a16 <HAL_PCD_EP_SetStall>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b03      	cmp	r3, #3
 800922c:	d816      	bhi.n	800925c <USBD_LL_StallEP+0x5c>
 800922e:	a201      	add	r2, pc, #4	@ (adr r2, 8009234 <USBD_LL_StallEP+0x34>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009245 	.word	0x08009245
 8009238:	0800924b 	.word	0x0800924b
 800923c:	08009251 	.word	0x08009251
 8009240:	08009257 	.word	0x08009257
    case HAL_OK :
      usb_status = USBD_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	e00b      	b.n	8009262 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800924a:	2303      	movs	r3, #3
 800924c:	73fb      	strb	r3, [r7, #15]
    break;
 800924e:	e008      	b.n	8009262 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009250:	2301      	movs	r3, #1
 8009252:	73fb      	strb	r3, [r7, #15]
    break;
 8009254:	e005      	b.n	8009262 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009256:	2303      	movs	r3, #3
 8009258:	73fb      	strb	r3, [r7, #15]
    break;
 800925a:	e002      	b.n	8009262 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	73fb      	strb	r3, [r7, #15]
    break;
 8009260:	bf00      	nop
  }
  return usb_status;
 8009262:	7bfb      	ldrb	r3, [r7, #15]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009286:	78fa      	ldrb	r2, [r7, #3]
 8009288:	4611      	mov	r1, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7f9 fc25 	bl	8002ada <HAL_PCD_EP_ClrStall>
 8009290:	4603      	mov	r3, r0
 8009292:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009294:	7bbb      	ldrb	r3, [r7, #14]
 8009296:	2b03      	cmp	r3, #3
 8009298:	d816      	bhi.n	80092c8 <USBD_LL_ClearStallEP+0x5c>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <USBD_LL_ClearStallEP+0x34>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092b1 	.word	0x080092b1
 80092a4:	080092b7 	.word	0x080092b7
 80092a8:	080092bd 	.word	0x080092bd
 80092ac:	080092c3 	.word	0x080092c3
    case HAL_OK :
      usb_status = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
    break;
 80092b4:	e00b      	b.n	80092ce <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092b6:	2303      	movs	r3, #3
 80092b8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ba:	e008      	b.n	80092ce <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
    break;
 80092c0:	e005      	b.n	80092ce <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092c2:	2303      	movs	r3, #3
 80092c4:	73fb      	strb	r3, [r7, #15]
    break;
 80092c6:	e002      	b.n	80092ce <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	73fb      	strb	r3, [r7, #15]
    break;
 80092cc:	bf00      	nop
  }
  return usb_status;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	da0b      	bge.n	800930c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	3316      	adds	r3, #22
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	e00b      	b.n	8009324 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009312:	68f9      	ldr	r1, [r7, #12]
 8009314:	4613      	mov	r3, r2
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009322:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7f9 fa0e 	bl	8002770 <HAL_PCD_SetAddress>
 8009354:	4603      	mov	r3, r0
 8009356:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b03      	cmp	r3, #3
 800935c:	d816      	bhi.n	800938c <USBD_LL_SetUSBAddress+0x5c>
 800935e:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <USBD_LL_SetUSBAddress+0x34>)
 8009360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009364:	08009375 	.word	0x08009375
 8009368:	0800937b 	.word	0x0800937b
 800936c:	08009381 	.word	0x08009381
 8009370:	08009387 	.word	0x08009387
    case HAL_OK :
      usb_status = USBD_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
    break;
 8009378:	e00b      	b.n	8009392 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800937a:	2303      	movs	r3, #3
 800937c:	73fb      	strb	r3, [r7, #15]
    break;
 800937e:	e008      	b.n	8009392 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
    break;
 8009384:	e005      	b.n	8009392 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009386:	2303      	movs	r3, #3
 8009388:	73fb      	strb	r3, [r7, #15]
    break;
 800938a:	e002      	b.n	8009392 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	73fb      	strb	r3, [r7, #15]
    break;
 8009390:	bf00      	nop
  }
  return usb_status;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	607a      	str	r2, [r7, #4]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	460b      	mov	r3, r1
 80093aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093ba:	7af9      	ldrb	r1, [r7, #11]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	f7f9 faf8 	bl	80029b4 <HAL_PCD_EP_Transmit>
 80093c4:	4603      	mov	r3, r0
 80093c6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80093c8:	7dbb      	ldrb	r3, [r7, #22]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d816      	bhi.n	80093fc <USBD_LL_Transmit+0x60>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <USBD_LL_Transmit+0x38>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	080093e5 	.word	0x080093e5
 80093d8:	080093eb 	.word	0x080093eb
 80093dc:	080093f1 	.word	0x080093f1
 80093e0:	080093f7 	.word	0x080093f7
    case HAL_OK :
      usb_status = USBD_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	75fb      	strb	r3, [r7, #23]
    break;
 80093e8:	e00b      	b.n	8009402 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093ea:	2303      	movs	r3, #3
 80093ec:	75fb      	strb	r3, [r7, #23]
    break;
 80093ee:	e008      	b.n	8009402 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093f0:	2301      	movs	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]
    break;
 80093f4:	e005      	b.n	8009402 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093f6:	2303      	movs	r3, #3
 80093f8:	75fb      	strb	r3, [r7, #23]
    break;
 80093fa:	e002      	b.n	8009402 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80093fc:	2303      	movs	r3, #3
 80093fe:	75fb      	strb	r3, [r7, #23]
    break;
 8009400:	bf00      	nop
  }
  return usb_status;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	607a      	str	r2, [r7, #4]
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	460b      	mov	r3, r1
 800941a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800942a:	7af9      	ldrb	r1, [r7, #11]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	f7f9 fa76 	bl	8002920 <HAL_PCD_EP_Receive>
 8009434:	4603      	mov	r3, r0
 8009436:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009438:	7dbb      	ldrb	r3, [r7, #22]
 800943a:	2b03      	cmp	r3, #3
 800943c:	d816      	bhi.n	800946c <USBD_LL_PrepareReceive+0x60>
 800943e:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <USBD_LL_PrepareReceive+0x38>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009455 	.word	0x08009455
 8009448:	0800945b 	.word	0x0800945b
 800944c:	08009461 	.word	0x08009461
 8009450:	08009467 	.word	0x08009467
    case HAL_OK :
      usb_status = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	75fb      	strb	r3, [r7, #23]
    break;
 8009458:	e00b      	b.n	8009472 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800945a:	2303      	movs	r3, #3
 800945c:	75fb      	strb	r3, [r7, #23]
    break;
 800945e:	e008      	b.n	8009472 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009460:	2301      	movs	r3, #1
 8009462:	75fb      	strb	r3, [r7, #23]
    break;
 8009464:	e005      	b.n	8009472 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009466:	2303      	movs	r3, #3
 8009468:	75fb      	strb	r3, [r7, #23]
    break;
 800946a:	e002      	b.n	8009472 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800946c:	2303      	movs	r3, #3
 800946e:	75fb      	strb	r3, [r7, #23]
    break;
 8009470:	bf00      	nop
  }
  return usb_status;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7f9 fa76 	bl	8002984 <HAL_PCD_EP_GetRxCount>
 8009498:	4603      	mov	r3, r0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <HAL_PCDEx_LPM_Callback+0x18>
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d01f      	beq.n	80094fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80094ba:	e03b      	b.n	8009534 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7adb      	ldrb	r3, [r3, #11]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d007      	beq.n	80094d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80094c4:	f000 f854 	bl	8009570 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c8:	4b1c      	ldr	r3, [pc, #112]	@ (800953c <HAL_PCDEx_LPM_Callback+0x98>)
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	4a1b      	ldr	r2, [pc, #108]	@ (800953c <HAL_PCDEx_LPM_Callback+0x98>)
 80094ce:	f023 0306 	bic.w	r3, r3, #6
 80094d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	6812      	ldr	r2, [r2, #0]
 80094e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094e6:	f023 0301 	bic.w	r3, r3, #1
 80094ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd ff9d 	bl	8007432 <USBD_LL_Resume>
    break;
 80094f8:	e01c      	b.n	8009534 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800950c:	f043 0301 	orr.w	r3, r3, #1
 8009510:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009518:	4618      	mov	r0, r3
 800951a:	f7fd ff6e 	bl	80073fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	7adb      	ldrb	r3, [r3, #11]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009526:	4b05      	ldr	r3, [pc, #20]	@ (800953c <HAL_PCDEx_LPM_Callback+0x98>)
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	4a04      	ldr	r2, [pc, #16]	@ (800953c <HAL_PCDEx_LPM_Callback+0x98>)
 800952c:	f043 0306 	orr.w	r3, r3, #6
 8009530:	6113      	str	r3, [r2, #16]
    break;
 8009532:	bf00      	nop
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	e000ed00 	.word	0xe000ed00

08009540 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009548:	4b03      	ldr	r3, [pc, #12]	@ (8009558 <USBD_static_malloc+0x18>)
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20001c98 	.word	0x20001c98

0800955c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009574:	f7f7 f9de 	bl	8000934 <SystemClock_Config>
}
 8009578:	bf00      	nop
 800957a:	bd80      	pop	{r7, pc}

0800957c <std>:
 800957c:	2300      	movs	r3, #0
 800957e:	b510      	push	{r4, lr}
 8009580:	4604      	mov	r4, r0
 8009582:	e9c0 3300 	strd	r3, r3, [r0]
 8009586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800958a:	6083      	str	r3, [r0, #8]
 800958c:	8181      	strh	r1, [r0, #12]
 800958e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009590:	81c2      	strh	r2, [r0, #14]
 8009592:	6183      	str	r3, [r0, #24]
 8009594:	4619      	mov	r1, r3
 8009596:	2208      	movs	r2, #8
 8009598:	305c      	adds	r0, #92	@ 0x5c
 800959a:	f000 fa45 	bl	8009a28 <memset>
 800959e:	4b0d      	ldr	r3, [pc, #52]	@ (80095d4 <std+0x58>)
 80095a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80095a2:	4b0d      	ldr	r3, [pc, #52]	@ (80095d8 <std+0x5c>)
 80095a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095a6:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <std+0x60>)
 80095a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095aa:	4b0d      	ldr	r3, [pc, #52]	@ (80095e0 <std+0x64>)
 80095ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <std+0x68>)
 80095b0:	6224      	str	r4, [r4, #32]
 80095b2:	429c      	cmp	r4, r3
 80095b4:	d006      	beq.n	80095c4 <std+0x48>
 80095b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095ba:	4294      	cmp	r4, r2
 80095bc:	d002      	beq.n	80095c4 <std+0x48>
 80095be:	33d0      	adds	r3, #208	@ 0xd0
 80095c0:	429c      	cmp	r4, r3
 80095c2:	d105      	bne.n	80095d0 <std+0x54>
 80095c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095cc:	f000 baa4 	b.w	8009b18 <__retarget_lock_init_recursive>
 80095d0:	bd10      	pop	{r4, pc}
 80095d2:	bf00      	nop
 80095d4:	08009875 	.word	0x08009875
 80095d8:	0800989b 	.word	0x0800989b
 80095dc:	080098d3 	.word	0x080098d3
 80095e0:	080098f7 	.word	0x080098f7
 80095e4:	20001eb8 	.word	0x20001eb8

080095e8 <stdio_exit_handler>:
 80095e8:	4a02      	ldr	r2, [pc, #8]	@ (80095f4 <stdio_exit_handler+0xc>)
 80095ea:	4903      	ldr	r1, [pc, #12]	@ (80095f8 <stdio_exit_handler+0x10>)
 80095ec:	4803      	ldr	r0, [pc, #12]	@ (80095fc <stdio_exit_handler+0x14>)
 80095ee:	f000 b869 	b.w	80096c4 <_fwalk_sglue>
 80095f2:	bf00      	nop
 80095f4:	2000010c 	.word	0x2000010c
 80095f8:	0800ac9d 	.word	0x0800ac9d
 80095fc:	2000011c 	.word	0x2000011c

08009600 <cleanup_stdio>:
 8009600:	6841      	ldr	r1, [r0, #4]
 8009602:	4b0c      	ldr	r3, [pc, #48]	@ (8009634 <cleanup_stdio+0x34>)
 8009604:	4299      	cmp	r1, r3
 8009606:	b510      	push	{r4, lr}
 8009608:	4604      	mov	r4, r0
 800960a:	d001      	beq.n	8009610 <cleanup_stdio+0x10>
 800960c:	f001 fb46 	bl	800ac9c <_fflush_r>
 8009610:	68a1      	ldr	r1, [r4, #8]
 8009612:	4b09      	ldr	r3, [pc, #36]	@ (8009638 <cleanup_stdio+0x38>)
 8009614:	4299      	cmp	r1, r3
 8009616:	d002      	beq.n	800961e <cleanup_stdio+0x1e>
 8009618:	4620      	mov	r0, r4
 800961a:	f001 fb3f 	bl	800ac9c <_fflush_r>
 800961e:	68e1      	ldr	r1, [r4, #12]
 8009620:	4b06      	ldr	r3, [pc, #24]	@ (800963c <cleanup_stdio+0x3c>)
 8009622:	4299      	cmp	r1, r3
 8009624:	d004      	beq.n	8009630 <cleanup_stdio+0x30>
 8009626:	4620      	mov	r0, r4
 8009628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800962c:	f001 bb36 	b.w	800ac9c <_fflush_r>
 8009630:	bd10      	pop	{r4, pc}
 8009632:	bf00      	nop
 8009634:	20001eb8 	.word	0x20001eb8
 8009638:	20001f20 	.word	0x20001f20
 800963c:	20001f88 	.word	0x20001f88

08009640 <global_stdio_init.part.0>:
 8009640:	b510      	push	{r4, lr}
 8009642:	4b0b      	ldr	r3, [pc, #44]	@ (8009670 <global_stdio_init.part.0+0x30>)
 8009644:	4c0b      	ldr	r4, [pc, #44]	@ (8009674 <global_stdio_init.part.0+0x34>)
 8009646:	4a0c      	ldr	r2, [pc, #48]	@ (8009678 <global_stdio_init.part.0+0x38>)
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	4620      	mov	r0, r4
 800964c:	2200      	movs	r2, #0
 800964e:	2104      	movs	r1, #4
 8009650:	f7ff ff94 	bl	800957c <std>
 8009654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009658:	2201      	movs	r2, #1
 800965a:	2109      	movs	r1, #9
 800965c:	f7ff ff8e 	bl	800957c <std>
 8009660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009664:	2202      	movs	r2, #2
 8009666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800966a:	2112      	movs	r1, #18
 800966c:	f7ff bf86 	b.w	800957c <std>
 8009670:	20001ff0 	.word	0x20001ff0
 8009674:	20001eb8 	.word	0x20001eb8
 8009678:	080095e9 	.word	0x080095e9

0800967c <__sfp_lock_acquire>:
 800967c:	4801      	ldr	r0, [pc, #4]	@ (8009684 <__sfp_lock_acquire+0x8>)
 800967e:	f000 ba4c 	b.w	8009b1a <__retarget_lock_acquire_recursive>
 8009682:	bf00      	nop
 8009684:	20001ff9 	.word	0x20001ff9

08009688 <__sfp_lock_release>:
 8009688:	4801      	ldr	r0, [pc, #4]	@ (8009690 <__sfp_lock_release+0x8>)
 800968a:	f000 ba47 	b.w	8009b1c <__retarget_lock_release_recursive>
 800968e:	bf00      	nop
 8009690:	20001ff9 	.word	0x20001ff9

08009694 <__sinit>:
 8009694:	b510      	push	{r4, lr}
 8009696:	4604      	mov	r4, r0
 8009698:	f7ff fff0 	bl	800967c <__sfp_lock_acquire>
 800969c:	6a23      	ldr	r3, [r4, #32]
 800969e:	b11b      	cbz	r3, 80096a8 <__sinit+0x14>
 80096a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a4:	f7ff bff0 	b.w	8009688 <__sfp_lock_release>
 80096a8:	4b04      	ldr	r3, [pc, #16]	@ (80096bc <__sinit+0x28>)
 80096aa:	6223      	str	r3, [r4, #32]
 80096ac:	4b04      	ldr	r3, [pc, #16]	@ (80096c0 <__sinit+0x2c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1f5      	bne.n	80096a0 <__sinit+0xc>
 80096b4:	f7ff ffc4 	bl	8009640 <global_stdio_init.part.0>
 80096b8:	e7f2      	b.n	80096a0 <__sinit+0xc>
 80096ba:	bf00      	nop
 80096bc:	08009601 	.word	0x08009601
 80096c0:	20001ff0 	.word	0x20001ff0

080096c4 <_fwalk_sglue>:
 80096c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c8:	4607      	mov	r7, r0
 80096ca:	4688      	mov	r8, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	2600      	movs	r6, #0
 80096d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096d4:	f1b9 0901 	subs.w	r9, r9, #1
 80096d8:	d505      	bpl.n	80096e6 <_fwalk_sglue+0x22>
 80096da:	6824      	ldr	r4, [r4, #0]
 80096dc:	2c00      	cmp	r4, #0
 80096de:	d1f7      	bne.n	80096d0 <_fwalk_sglue+0xc>
 80096e0:	4630      	mov	r0, r6
 80096e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e6:	89ab      	ldrh	r3, [r5, #12]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d907      	bls.n	80096fc <_fwalk_sglue+0x38>
 80096ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096f0:	3301      	adds	r3, #1
 80096f2:	d003      	beq.n	80096fc <_fwalk_sglue+0x38>
 80096f4:	4629      	mov	r1, r5
 80096f6:	4638      	mov	r0, r7
 80096f8:	47c0      	blx	r8
 80096fa:	4306      	orrs	r6, r0
 80096fc:	3568      	adds	r5, #104	@ 0x68
 80096fe:	e7e9      	b.n	80096d4 <_fwalk_sglue+0x10>

08009700 <iprintf>:
 8009700:	b40f      	push	{r0, r1, r2, r3}
 8009702:	b507      	push	{r0, r1, r2, lr}
 8009704:	4906      	ldr	r1, [pc, #24]	@ (8009720 <iprintf+0x20>)
 8009706:	ab04      	add	r3, sp, #16
 8009708:	6808      	ldr	r0, [r1, #0]
 800970a:	f853 2b04 	ldr.w	r2, [r3], #4
 800970e:	6881      	ldr	r1, [r0, #8]
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	f000 fe4b 	bl	800a3ac <_vfiprintf_r>
 8009716:	b003      	add	sp, #12
 8009718:	f85d eb04 	ldr.w	lr, [sp], #4
 800971c:	b004      	add	sp, #16
 800971e:	4770      	bx	lr
 8009720:	20000118 	.word	0x20000118

08009724 <_puts_r>:
 8009724:	6a03      	ldr	r3, [r0, #32]
 8009726:	b570      	push	{r4, r5, r6, lr}
 8009728:	6884      	ldr	r4, [r0, #8]
 800972a:	4605      	mov	r5, r0
 800972c:	460e      	mov	r6, r1
 800972e:	b90b      	cbnz	r3, 8009734 <_puts_r+0x10>
 8009730:	f7ff ffb0 	bl	8009694 <__sinit>
 8009734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009736:	07db      	lsls	r3, r3, #31
 8009738:	d405      	bmi.n	8009746 <_puts_r+0x22>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	0598      	lsls	r0, r3, #22
 800973e:	d402      	bmi.n	8009746 <_puts_r+0x22>
 8009740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009742:	f000 f9ea 	bl	8009b1a <__retarget_lock_acquire_recursive>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	0719      	lsls	r1, r3, #28
 800974a:	d502      	bpl.n	8009752 <_puts_r+0x2e>
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d135      	bne.n	80097be <_puts_r+0x9a>
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f000 f911 	bl	800997c <__swsetup_r>
 800975a:	b380      	cbz	r0, 80097be <_puts_r+0x9a>
 800975c:	f04f 35ff 	mov.w	r5, #4294967295
 8009760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009762:	07da      	lsls	r2, r3, #31
 8009764:	d405      	bmi.n	8009772 <_puts_r+0x4e>
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	059b      	lsls	r3, r3, #22
 800976a:	d402      	bmi.n	8009772 <_puts_r+0x4e>
 800976c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800976e:	f000 f9d5 	bl	8009b1c <__retarget_lock_release_recursive>
 8009772:	4628      	mov	r0, r5
 8009774:	bd70      	pop	{r4, r5, r6, pc}
 8009776:	2b00      	cmp	r3, #0
 8009778:	da04      	bge.n	8009784 <_puts_r+0x60>
 800977a:	69a2      	ldr	r2, [r4, #24]
 800977c:	429a      	cmp	r2, r3
 800977e:	dc17      	bgt.n	80097b0 <_puts_r+0x8c>
 8009780:	290a      	cmp	r1, #10
 8009782:	d015      	beq.n	80097b0 <_puts_r+0x8c>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	6022      	str	r2, [r4, #0]
 800978a:	7019      	strb	r1, [r3, #0]
 800978c:	68a3      	ldr	r3, [r4, #8]
 800978e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009792:	3b01      	subs	r3, #1
 8009794:	60a3      	str	r3, [r4, #8]
 8009796:	2900      	cmp	r1, #0
 8009798:	d1ed      	bne.n	8009776 <_puts_r+0x52>
 800979a:	2b00      	cmp	r3, #0
 800979c:	da11      	bge.n	80097c2 <_puts_r+0x9e>
 800979e:	4622      	mov	r2, r4
 80097a0:	210a      	movs	r1, #10
 80097a2:	4628      	mov	r0, r5
 80097a4:	f000 f8ab 	bl	80098fe <__swbuf_r>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d0d7      	beq.n	800975c <_puts_r+0x38>
 80097ac:	250a      	movs	r5, #10
 80097ae:	e7d7      	b.n	8009760 <_puts_r+0x3c>
 80097b0:	4622      	mov	r2, r4
 80097b2:	4628      	mov	r0, r5
 80097b4:	f000 f8a3 	bl	80098fe <__swbuf_r>
 80097b8:	3001      	adds	r0, #1
 80097ba:	d1e7      	bne.n	800978c <_puts_r+0x68>
 80097bc:	e7ce      	b.n	800975c <_puts_r+0x38>
 80097be:	3e01      	subs	r6, #1
 80097c0:	e7e4      	b.n	800978c <_puts_r+0x68>
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	6022      	str	r2, [r4, #0]
 80097c8:	220a      	movs	r2, #10
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	e7ee      	b.n	80097ac <_puts_r+0x88>
	...

080097d0 <puts>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	@ (80097dc <puts+0xc>)
 80097d2:	4601      	mov	r1, r0
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f7ff bfa5 	b.w	8009724 <_puts_r>
 80097da:	bf00      	nop
 80097dc:	20000118 	.word	0x20000118

080097e0 <siprintf>:
 80097e0:	b40e      	push	{r1, r2, r3}
 80097e2:	b500      	push	{lr}
 80097e4:	b09c      	sub	sp, #112	@ 0x70
 80097e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80097e8:	9002      	str	r0, [sp, #8]
 80097ea:	9006      	str	r0, [sp, #24]
 80097ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097f0:	4809      	ldr	r0, [pc, #36]	@ (8009818 <siprintf+0x38>)
 80097f2:	9107      	str	r1, [sp, #28]
 80097f4:	9104      	str	r1, [sp, #16]
 80097f6:	4909      	ldr	r1, [pc, #36]	@ (800981c <siprintf+0x3c>)
 80097f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fc:	9105      	str	r1, [sp, #20]
 80097fe:	6800      	ldr	r0, [r0, #0]
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	a902      	add	r1, sp, #8
 8009804:	f000 fae0 	bl	8009dc8 <_svfiprintf_r>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]
 800980e:	b01c      	add	sp, #112	@ 0x70
 8009810:	f85d eb04 	ldr.w	lr, [sp], #4
 8009814:	b003      	add	sp, #12
 8009816:	4770      	bx	lr
 8009818:	20000118 	.word	0x20000118
 800981c:	ffff0208 	.word	0xffff0208

08009820 <siscanf>:
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b530      	push	{r4, r5, lr}
 8009824:	b09c      	sub	sp, #112	@ 0x70
 8009826:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009828:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800982c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009830:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009834:	9002      	str	r0, [sp, #8]
 8009836:	9006      	str	r0, [sp, #24]
 8009838:	f7f6 fcec 	bl	8000214 <strlen>
 800983c:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <siscanf+0x4c>)
 800983e:	9003      	str	r0, [sp, #12]
 8009840:	9007      	str	r0, [sp, #28]
 8009842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009844:	480a      	ldr	r0, [pc, #40]	@ (8009870 <siscanf+0x50>)
 8009846:	9401      	str	r4, [sp, #4]
 8009848:	2300      	movs	r3, #0
 800984a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800984c:	9314      	str	r3, [sp, #80]	@ 0x50
 800984e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009852:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009856:	462a      	mov	r2, r5
 8009858:	4623      	mov	r3, r4
 800985a:	a902      	add	r1, sp, #8
 800985c:	6800      	ldr	r0, [r0, #0]
 800985e:	f000 fc07 	bl	800a070 <__ssvfiscanf_r>
 8009862:	b01c      	add	sp, #112	@ 0x70
 8009864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009868:	b003      	add	sp, #12
 800986a:	4770      	bx	lr
 800986c:	08009897 	.word	0x08009897
 8009870:	20000118 	.word	0x20000118

08009874 <__sread>:
 8009874:	b510      	push	{r4, lr}
 8009876:	460c      	mov	r4, r1
 8009878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987c:	f000 f8fe 	bl	8009a7c <_read_r>
 8009880:	2800      	cmp	r0, #0
 8009882:	bfab      	itete	ge
 8009884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009886:	89a3      	ldrhlt	r3, [r4, #12]
 8009888:	181b      	addge	r3, r3, r0
 800988a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800988e:	bfac      	ite	ge
 8009890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009892:	81a3      	strhlt	r3, [r4, #12]
 8009894:	bd10      	pop	{r4, pc}

08009896 <__seofread>:
 8009896:	2000      	movs	r0, #0
 8009898:	4770      	bx	lr

0800989a <__swrite>:
 800989a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989e:	461f      	mov	r7, r3
 80098a0:	898b      	ldrh	r3, [r1, #12]
 80098a2:	05db      	lsls	r3, r3, #23
 80098a4:	4605      	mov	r5, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	4616      	mov	r6, r2
 80098aa:	d505      	bpl.n	80098b8 <__swrite+0x1e>
 80098ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b0:	2302      	movs	r3, #2
 80098b2:	2200      	movs	r2, #0
 80098b4:	f000 f8d0 	bl	8009a58 <_lseek_r>
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098c2:	81a3      	strh	r3, [r4, #12]
 80098c4:	4632      	mov	r2, r6
 80098c6:	463b      	mov	r3, r7
 80098c8:	4628      	mov	r0, r5
 80098ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ce:	f000 b8e7 	b.w	8009aa0 <_write_r>

080098d2 <__sseek>:
 80098d2:	b510      	push	{r4, lr}
 80098d4:	460c      	mov	r4, r1
 80098d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098da:	f000 f8bd 	bl	8009a58 <_lseek_r>
 80098de:	1c43      	adds	r3, r0, #1
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	bf15      	itete	ne
 80098e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098ee:	81a3      	strheq	r3, [r4, #12]
 80098f0:	bf18      	it	ne
 80098f2:	81a3      	strhne	r3, [r4, #12]
 80098f4:	bd10      	pop	{r4, pc}

080098f6 <__sclose>:
 80098f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fa:	f000 b89d 	b.w	8009a38 <_close_r>

080098fe <__swbuf_r>:
 80098fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009900:	460e      	mov	r6, r1
 8009902:	4614      	mov	r4, r2
 8009904:	4605      	mov	r5, r0
 8009906:	b118      	cbz	r0, 8009910 <__swbuf_r+0x12>
 8009908:	6a03      	ldr	r3, [r0, #32]
 800990a:	b90b      	cbnz	r3, 8009910 <__swbuf_r+0x12>
 800990c:	f7ff fec2 	bl	8009694 <__sinit>
 8009910:	69a3      	ldr	r3, [r4, #24]
 8009912:	60a3      	str	r3, [r4, #8]
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	071a      	lsls	r2, r3, #28
 8009918:	d501      	bpl.n	800991e <__swbuf_r+0x20>
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	b943      	cbnz	r3, 8009930 <__swbuf_r+0x32>
 800991e:	4621      	mov	r1, r4
 8009920:	4628      	mov	r0, r5
 8009922:	f000 f82b 	bl	800997c <__swsetup_r>
 8009926:	b118      	cbz	r0, 8009930 <__swbuf_r+0x32>
 8009928:	f04f 37ff 	mov.w	r7, #4294967295
 800992c:	4638      	mov	r0, r7
 800992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	6922      	ldr	r2, [r4, #16]
 8009934:	1a98      	subs	r0, r3, r2
 8009936:	6963      	ldr	r3, [r4, #20]
 8009938:	b2f6      	uxtb	r6, r6
 800993a:	4283      	cmp	r3, r0
 800993c:	4637      	mov	r7, r6
 800993e:	dc05      	bgt.n	800994c <__swbuf_r+0x4e>
 8009940:	4621      	mov	r1, r4
 8009942:	4628      	mov	r0, r5
 8009944:	f001 f9aa 	bl	800ac9c <_fflush_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	d1ed      	bne.n	8009928 <__swbuf_r+0x2a>
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	3b01      	subs	r3, #1
 8009950:	60a3      	str	r3, [r4, #8]
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	6022      	str	r2, [r4, #0]
 8009958:	701e      	strb	r6, [r3, #0]
 800995a:	6962      	ldr	r2, [r4, #20]
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	429a      	cmp	r2, r3
 8009960:	d004      	beq.n	800996c <__swbuf_r+0x6e>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	07db      	lsls	r3, r3, #31
 8009966:	d5e1      	bpl.n	800992c <__swbuf_r+0x2e>
 8009968:	2e0a      	cmp	r6, #10
 800996a:	d1df      	bne.n	800992c <__swbuf_r+0x2e>
 800996c:	4621      	mov	r1, r4
 800996e:	4628      	mov	r0, r5
 8009970:	f001 f994 	bl	800ac9c <_fflush_r>
 8009974:	2800      	cmp	r0, #0
 8009976:	d0d9      	beq.n	800992c <__swbuf_r+0x2e>
 8009978:	e7d6      	b.n	8009928 <__swbuf_r+0x2a>
	...

0800997c <__swsetup_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4b29      	ldr	r3, [pc, #164]	@ (8009a24 <__swsetup_r+0xa8>)
 8009980:	4605      	mov	r5, r0
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	460c      	mov	r4, r1
 8009986:	b118      	cbz	r0, 8009990 <__swsetup_r+0x14>
 8009988:	6a03      	ldr	r3, [r0, #32]
 800998a:	b90b      	cbnz	r3, 8009990 <__swsetup_r+0x14>
 800998c:	f7ff fe82 	bl	8009694 <__sinit>
 8009990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009994:	0719      	lsls	r1, r3, #28
 8009996:	d422      	bmi.n	80099de <__swsetup_r+0x62>
 8009998:	06da      	lsls	r2, r3, #27
 800999a:	d407      	bmi.n	80099ac <__swsetup_r+0x30>
 800999c:	2209      	movs	r2, #9
 800999e:	602a      	str	r2, [r5, #0]
 80099a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a4:	81a3      	strh	r3, [r4, #12]
 80099a6:	f04f 30ff 	mov.w	r0, #4294967295
 80099aa:	e033      	b.n	8009a14 <__swsetup_r+0x98>
 80099ac:	0758      	lsls	r0, r3, #29
 80099ae:	d512      	bpl.n	80099d6 <__swsetup_r+0x5a>
 80099b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099b2:	b141      	cbz	r1, 80099c6 <__swsetup_r+0x4a>
 80099b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099b8:	4299      	cmp	r1, r3
 80099ba:	d002      	beq.n	80099c2 <__swsetup_r+0x46>
 80099bc:	4628      	mov	r0, r5
 80099be:	f000 f8af 	bl	8009b20 <_free_r>
 80099c2:	2300      	movs	r3, #0
 80099c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80099cc:	81a3      	strh	r3, [r4, #12]
 80099ce:	2300      	movs	r3, #0
 80099d0:	6063      	str	r3, [r4, #4]
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	f043 0308 	orr.w	r3, r3, #8
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	b94b      	cbnz	r3, 80099f6 <__swsetup_r+0x7a>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ec:	d003      	beq.n	80099f6 <__swsetup_r+0x7a>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f001 f9a1 	bl	800ad38 <__smakebuf_r>
 80099f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fa:	f013 0201 	ands.w	r2, r3, #1
 80099fe:	d00a      	beq.n	8009a16 <__swsetup_r+0x9a>
 8009a00:	2200      	movs	r2, #0
 8009a02:	60a2      	str	r2, [r4, #8]
 8009a04:	6962      	ldr	r2, [r4, #20]
 8009a06:	4252      	negs	r2, r2
 8009a08:	61a2      	str	r2, [r4, #24]
 8009a0a:	6922      	ldr	r2, [r4, #16]
 8009a0c:	b942      	cbnz	r2, 8009a20 <__swsetup_r+0xa4>
 8009a0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a12:	d1c5      	bne.n	80099a0 <__swsetup_r+0x24>
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
 8009a16:	0799      	lsls	r1, r3, #30
 8009a18:	bf58      	it	pl
 8009a1a:	6962      	ldrpl	r2, [r4, #20]
 8009a1c:	60a2      	str	r2, [r4, #8]
 8009a1e:	e7f4      	b.n	8009a0a <__swsetup_r+0x8e>
 8009a20:	2000      	movs	r0, #0
 8009a22:	e7f7      	b.n	8009a14 <__swsetup_r+0x98>
 8009a24:	20000118 	.word	0x20000118

08009a28 <memset>:
 8009a28:	4402      	add	r2, r0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d100      	bne.n	8009a32 <memset+0xa>
 8009a30:	4770      	bx	lr
 8009a32:	f803 1b01 	strb.w	r1, [r3], #1
 8009a36:	e7f9      	b.n	8009a2c <memset+0x4>

08009a38 <_close_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	@ (8009a54 <_close_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7f7 fcc5 	bl	80013d2 <_close>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_close_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_close_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20001ff4 	.word	0x20001ff4

08009a58 <_lseek_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	@ (8009a78 <_lseek_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7f7 fcda 	bl	8001420 <_lseek>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_lseek_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_lseek_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	20001ff4 	.word	0x20001ff4

08009a7c <_read_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	@ (8009a9c <_read_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f7 fc84 	bl	8001398 <_read>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_read_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_read_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20001ff4 	.word	0x20001ff4

08009aa0 <_write_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d07      	ldr	r5, [pc, #28]	@ (8009ac0 <_write_r+0x20>)
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	602a      	str	r2, [r5, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f7f7 f866 	bl	8000b80 <_write>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_write_r+0x1e>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_write_r+0x1e>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	20001ff4 	.word	0x20001ff4

08009ac4 <__errno>:
 8009ac4:	4b01      	ldr	r3, [pc, #4]	@ (8009acc <__errno+0x8>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000118 	.word	0x20000118

08009ad0 <__libc_init_array>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8009b08 <__libc_init_array+0x38>)
 8009ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8009b0c <__libc_init_array+0x3c>)
 8009ad6:	1b64      	subs	r4, r4, r5
 8009ad8:	10a4      	asrs	r4, r4, #2
 8009ada:	2600      	movs	r6, #0
 8009adc:	42a6      	cmp	r6, r4
 8009ade:	d109      	bne.n	8009af4 <__libc_init_array+0x24>
 8009ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8009b10 <__libc_init_array+0x40>)
 8009ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8009b14 <__libc_init_array+0x44>)
 8009ae4:	f001 fb54 	bl	800b190 <_init>
 8009ae8:	1b64      	subs	r4, r4, r5
 8009aea:	10a4      	asrs	r4, r4, #2
 8009aec:	2600      	movs	r6, #0
 8009aee:	42a6      	cmp	r6, r4
 8009af0:	d105      	bne.n	8009afe <__libc_init_array+0x2e>
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af8:	4798      	blx	r3
 8009afa:	3601      	adds	r6, #1
 8009afc:	e7ee      	b.n	8009adc <__libc_init_array+0xc>
 8009afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b02:	4798      	blx	r3
 8009b04:	3601      	adds	r6, #1
 8009b06:	e7f2      	b.n	8009aee <__libc_init_array+0x1e>
 8009b08:	0800b474 	.word	0x0800b474
 8009b0c:	0800b474 	.word	0x0800b474
 8009b10:	0800b474 	.word	0x0800b474
 8009b14:	0800b478 	.word	0x0800b478

08009b18 <__retarget_lock_init_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <__retarget_lock_acquire_recursive>:
 8009b1a:	4770      	bx	lr

08009b1c <__retarget_lock_release_recursive>:
 8009b1c:	4770      	bx	lr
	...

08009b20 <_free_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4605      	mov	r5, r0
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d041      	beq.n	8009bac <_free_r+0x8c>
 8009b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2c:	1f0c      	subs	r4, r1, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	bfb8      	it	lt
 8009b32:	18e4      	addlt	r4, r4, r3
 8009b34:	f000 f8e0 	bl	8009cf8 <__malloc_lock>
 8009b38:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb0 <_free_r+0x90>)
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	b933      	cbnz	r3, 8009b4c <_free_r+0x2c>
 8009b3e:	6063      	str	r3, [r4, #4]
 8009b40:	6014      	str	r4, [r2, #0]
 8009b42:	4628      	mov	r0, r5
 8009b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b48:	f000 b8dc 	b.w	8009d04 <__malloc_unlock>
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d908      	bls.n	8009b62 <_free_r+0x42>
 8009b50:	6820      	ldr	r0, [r4, #0]
 8009b52:	1821      	adds	r1, r4, r0
 8009b54:	428b      	cmp	r3, r1
 8009b56:	bf01      	itttt	eq
 8009b58:	6819      	ldreq	r1, [r3, #0]
 8009b5a:	685b      	ldreq	r3, [r3, #4]
 8009b5c:	1809      	addeq	r1, r1, r0
 8009b5e:	6021      	streq	r1, [r4, #0]
 8009b60:	e7ed      	b.n	8009b3e <_free_r+0x1e>
 8009b62:	461a      	mov	r2, r3
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	b10b      	cbz	r3, 8009b6c <_free_r+0x4c>
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	d9fa      	bls.n	8009b62 <_free_r+0x42>
 8009b6c:	6811      	ldr	r1, [r2, #0]
 8009b6e:	1850      	adds	r0, r2, r1
 8009b70:	42a0      	cmp	r0, r4
 8009b72:	d10b      	bne.n	8009b8c <_free_r+0x6c>
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	4401      	add	r1, r0
 8009b78:	1850      	adds	r0, r2, r1
 8009b7a:	4283      	cmp	r3, r0
 8009b7c:	6011      	str	r1, [r2, #0]
 8009b7e:	d1e0      	bne.n	8009b42 <_free_r+0x22>
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	6053      	str	r3, [r2, #4]
 8009b86:	4408      	add	r0, r1
 8009b88:	6010      	str	r0, [r2, #0]
 8009b8a:	e7da      	b.n	8009b42 <_free_r+0x22>
 8009b8c:	d902      	bls.n	8009b94 <_free_r+0x74>
 8009b8e:	230c      	movs	r3, #12
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	e7d6      	b.n	8009b42 <_free_r+0x22>
 8009b94:	6820      	ldr	r0, [r4, #0]
 8009b96:	1821      	adds	r1, r4, r0
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	bf04      	itt	eq
 8009b9c:	6819      	ldreq	r1, [r3, #0]
 8009b9e:	685b      	ldreq	r3, [r3, #4]
 8009ba0:	6063      	str	r3, [r4, #4]
 8009ba2:	bf04      	itt	eq
 8009ba4:	1809      	addeq	r1, r1, r0
 8009ba6:	6021      	streq	r1, [r4, #0]
 8009ba8:	6054      	str	r4, [r2, #4]
 8009baa:	e7ca      	b.n	8009b42 <_free_r+0x22>
 8009bac:	bd38      	pop	{r3, r4, r5, pc}
 8009bae:	bf00      	nop
 8009bb0:	20002000 	.word	0x20002000

08009bb4 <sbrk_aligned>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8009bf4 <sbrk_aligned+0x40>)
 8009bb8:	460c      	mov	r4, r1
 8009bba:	6831      	ldr	r1, [r6, #0]
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	b911      	cbnz	r1, 8009bc6 <sbrk_aligned+0x12>
 8009bc0:	f001 f9a6 	bl	800af10 <_sbrk_r>
 8009bc4:	6030      	str	r0, [r6, #0]
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f001 f9a1 	bl	800af10 <_sbrk_r>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	d103      	bne.n	8009bda <sbrk_aligned+0x26>
 8009bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	1cc4      	adds	r4, r0, #3
 8009bdc:	f024 0403 	bic.w	r4, r4, #3
 8009be0:	42a0      	cmp	r0, r4
 8009be2:	d0f8      	beq.n	8009bd6 <sbrk_aligned+0x22>
 8009be4:	1a21      	subs	r1, r4, r0
 8009be6:	4628      	mov	r0, r5
 8009be8:	f001 f992 	bl	800af10 <_sbrk_r>
 8009bec:	3001      	adds	r0, #1
 8009bee:	d1f2      	bne.n	8009bd6 <sbrk_aligned+0x22>
 8009bf0:	e7ef      	b.n	8009bd2 <sbrk_aligned+0x1e>
 8009bf2:	bf00      	nop
 8009bf4:	20001ffc 	.word	0x20001ffc

08009bf8 <_malloc_r>:
 8009bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	1ccd      	adds	r5, r1, #3
 8009bfe:	f025 0503 	bic.w	r5, r5, #3
 8009c02:	3508      	adds	r5, #8
 8009c04:	2d0c      	cmp	r5, #12
 8009c06:	bf38      	it	cc
 8009c08:	250c      	movcc	r5, #12
 8009c0a:	2d00      	cmp	r5, #0
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	db01      	blt.n	8009c14 <_malloc_r+0x1c>
 8009c10:	42a9      	cmp	r1, r5
 8009c12:	d904      	bls.n	8009c1e <_malloc_r+0x26>
 8009c14:	230c      	movs	r3, #12
 8009c16:	6033      	str	r3, [r6, #0]
 8009c18:	2000      	movs	r0, #0
 8009c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cf4 <_malloc_r+0xfc>
 8009c22:	f000 f869 	bl	8009cf8 <__malloc_lock>
 8009c26:	f8d8 3000 	ldr.w	r3, [r8]
 8009c2a:	461c      	mov	r4, r3
 8009c2c:	bb44      	cbnz	r4, 8009c80 <_malloc_r+0x88>
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4630      	mov	r0, r6
 8009c32:	f7ff ffbf 	bl	8009bb4 <sbrk_aligned>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	4604      	mov	r4, r0
 8009c3a:	d158      	bne.n	8009cee <_malloc_r+0xf6>
 8009c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8009c40:	4627      	mov	r7, r4
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	d143      	bne.n	8009cce <_malloc_r+0xd6>
 8009c46:	2c00      	cmp	r4, #0
 8009c48:	d04b      	beq.n	8009ce2 <_malloc_r+0xea>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	4630      	mov	r0, r6
 8009c50:	eb04 0903 	add.w	r9, r4, r3
 8009c54:	f001 f95c 	bl	800af10 <_sbrk_r>
 8009c58:	4581      	cmp	r9, r0
 8009c5a:	d142      	bne.n	8009ce2 <_malloc_r+0xea>
 8009c5c:	6821      	ldr	r1, [r4, #0]
 8009c5e:	1a6d      	subs	r5, r5, r1
 8009c60:	4629      	mov	r1, r5
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff ffa6 	bl	8009bb4 <sbrk_aligned>
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d03a      	beq.n	8009ce2 <_malloc_r+0xea>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	442b      	add	r3, r5
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	f8d8 3000 	ldr.w	r3, [r8]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	bb62      	cbnz	r2, 8009cd4 <_malloc_r+0xdc>
 8009c7a:	f8c8 7000 	str.w	r7, [r8]
 8009c7e:	e00f      	b.n	8009ca0 <_malloc_r+0xa8>
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	1b52      	subs	r2, r2, r5
 8009c84:	d420      	bmi.n	8009cc8 <_malloc_r+0xd0>
 8009c86:	2a0b      	cmp	r2, #11
 8009c88:	d917      	bls.n	8009cba <_malloc_r+0xc2>
 8009c8a:	1961      	adds	r1, r4, r5
 8009c8c:	42a3      	cmp	r3, r4
 8009c8e:	6025      	str	r5, [r4, #0]
 8009c90:	bf18      	it	ne
 8009c92:	6059      	strne	r1, [r3, #4]
 8009c94:	6863      	ldr	r3, [r4, #4]
 8009c96:	bf08      	it	eq
 8009c98:	f8c8 1000 	streq.w	r1, [r8]
 8009c9c:	5162      	str	r2, [r4, r5]
 8009c9e:	604b      	str	r3, [r1, #4]
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f000 f82f 	bl	8009d04 <__malloc_unlock>
 8009ca6:	f104 000b 	add.w	r0, r4, #11
 8009caa:	1d23      	adds	r3, r4, #4
 8009cac:	f020 0007 	bic.w	r0, r0, #7
 8009cb0:	1ac2      	subs	r2, r0, r3
 8009cb2:	bf1c      	itt	ne
 8009cb4:	1a1b      	subne	r3, r3, r0
 8009cb6:	50a3      	strne	r3, [r4, r2]
 8009cb8:	e7af      	b.n	8009c1a <_malloc_r+0x22>
 8009cba:	6862      	ldr	r2, [r4, #4]
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	bf0c      	ite	eq
 8009cc0:	f8c8 2000 	streq.w	r2, [r8]
 8009cc4:	605a      	strne	r2, [r3, #4]
 8009cc6:	e7eb      	b.n	8009ca0 <_malloc_r+0xa8>
 8009cc8:	4623      	mov	r3, r4
 8009cca:	6864      	ldr	r4, [r4, #4]
 8009ccc:	e7ae      	b.n	8009c2c <_malloc_r+0x34>
 8009cce:	463c      	mov	r4, r7
 8009cd0:	687f      	ldr	r7, [r7, #4]
 8009cd2:	e7b6      	b.n	8009c42 <_malloc_r+0x4a>
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	d1fb      	bne.n	8009cd4 <_malloc_r+0xdc>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	6053      	str	r3, [r2, #4]
 8009ce0:	e7de      	b.n	8009ca0 <_malloc_r+0xa8>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 f80c 	bl	8009d04 <__malloc_unlock>
 8009cec:	e794      	b.n	8009c18 <_malloc_r+0x20>
 8009cee:	6005      	str	r5, [r0, #0]
 8009cf0:	e7d6      	b.n	8009ca0 <_malloc_r+0xa8>
 8009cf2:	bf00      	nop
 8009cf4:	20002000 	.word	0x20002000

08009cf8 <__malloc_lock>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	@ (8009d00 <__malloc_lock+0x8>)
 8009cfa:	f7ff bf0e 	b.w	8009b1a <__retarget_lock_acquire_recursive>
 8009cfe:	bf00      	nop
 8009d00:	20001ff8 	.word	0x20001ff8

08009d04 <__malloc_unlock>:
 8009d04:	4801      	ldr	r0, [pc, #4]	@ (8009d0c <__malloc_unlock+0x8>)
 8009d06:	f7ff bf09 	b.w	8009b1c <__retarget_lock_release_recursive>
 8009d0a:	bf00      	nop
 8009d0c:	20001ff8 	.word	0x20001ff8

08009d10 <__ssputs_r>:
 8009d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d14:	688e      	ldr	r6, [r1, #8]
 8009d16:	461f      	mov	r7, r3
 8009d18:	42be      	cmp	r6, r7
 8009d1a:	680b      	ldr	r3, [r1, #0]
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	4690      	mov	r8, r2
 8009d22:	d82d      	bhi.n	8009d80 <__ssputs_r+0x70>
 8009d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d2c:	d026      	beq.n	8009d7c <__ssputs_r+0x6c>
 8009d2e:	6965      	ldr	r5, [r4, #20]
 8009d30:	6909      	ldr	r1, [r1, #16]
 8009d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d36:	eba3 0901 	sub.w	r9, r3, r1
 8009d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d3e:	1c7b      	adds	r3, r7, #1
 8009d40:	444b      	add	r3, r9
 8009d42:	106d      	asrs	r5, r5, #1
 8009d44:	429d      	cmp	r5, r3
 8009d46:	bf38      	it	cc
 8009d48:	461d      	movcc	r5, r3
 8009d4a:	0553      	lsls	r3, r2, #21
 8009d4c:	d527      	bpl.n	8009d9e <__ssputs_r+0x8e>
 8009d4e:	4629      	mov	r1, r5
 8009d50:	f7ff ff52 	bl	8009bf8 <_malloc_r>
 8009d54:	4606      	mov	r6, r0
 8009d56:	b360      	cbz	r0, 8009db2 <__ssputs_r+0xa2>
 8009d58:	6921      	ldr	r1, [r4, #16]
 8009d5a:	464a      	mov	r2, r9
 8009d5c:	f001 f8e8 	bl	800af30 <memcpy>
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	6126      	str	r6, [r4, #16]
 8009d6e:	6165      	str	r5, [r4, #20]
 8009d70:	444e      	add	r6, r9
 8009d72:	eba5 0509 	sub.w	r5, r5, r9
 8009d76:	6026      	str	r6, [r4, #0]
 8009d78:	60a5      	str	r5, [r4, #8]
 8009d7a:	463e      	mov	r6, r7
 8009d7c:	42be      	cmp	r6, r7
 8009d7e:	d900      	bls.n	8009d82 <__ssputs_r+0x72>
 8009d80:	463e      	mov	r6, r7
 8009d82:	6820      	ldr	r0, [r4, #0]
 8009d84:	4632      	mov	r2, r6
 8009d86:	4641      	mov	r1, r8
 8009d88:	f001 f885 	bl	800ae96 <memmove>
 8009d8c:	68a3      	ldr	r3, [r4, #8]
 8009d8e:	1b9b      	subs	r3, r3, r6
 8009d90:	60a3      	str	r3, [r4, #8]
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	4433      	add	r3, r6
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9e:	462a      	mov	r2, r5
 8009da0:	f001 f8d4 	bl	800af4c <_realloc_r>
 8009da4:	4606      	mov	r6, r0
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1e0      	bne.n	8009d6c <__ssputs_r+0x5c>
 8009daa:	6921      	ldr	r1, [r4, #16]
 8009dac:	4650      	mov	r0, sl
 8009dae:	f7ff feb7 	bl	8009b20 <_free_r>
 8009db2:	230c      	movs	r3, #12
 8009db4:	f8ca 3000 	str.w	r3, [sl]
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	e7e9      	b.n	8009d9a <__ssputs_r+0x8a>
	...

08009dc8 <_svfiprintf_r>:
 8009dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dcc:	4698      	mov	r8, r3
 8009dce:	898b      	ldrh	r3, [r1, #12]
 8009dd0:	061b      	lsls	r3, r3, #24
 8009dd2:	b09d      	sub	sp, #116	@ 0x74
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	4614      	mov	r4, r2
 8009dda:	d510      	bpl.n	8009dfe <_svfiprintf_r+0x36>
 8009ddc:	690b      	ldr	r3, [r1, #16]
 8009dde:	b973      	cbnz	r3, 8009dfe <_svfiprintf_r+0x36>
 8009de0:	2140      	movs	r1, #64	@ 0x40
 8009de2:	f7ff ff09 	bl	8009bf8 <_malloc_r>
 8009de6:	6028      	str	r0, [r5, #0]
 8009de8:	6128      	str	r0, [r5, #16]
 8009dea:	b930      	cbnz	r0, 8009dfa <_svfiprintf_r+0x32>
 8009dec:	230c      	movs	r3, #12
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295
 8009df4:	b01d      	add	sp, #116	@ 0x74
 8009df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfa:	2340      	movs	r3, #64	@ 0x40
 8009dfc:	616b      	str	r3, [r5, #20]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e02:	2320      	movs	r3, #32
 8009e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e0c:	2330      	movs	r3, #48	@ 0x30
 8009e0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fac <_svfiprintf_r+0x1e4>
 8009e12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e16:	f04f 0901 	mov.w	r9, #1
 8009e1a:	4623      	mov	r3, r4
 8009e1c:	469a      	mov	sl, r3
 8009e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e22:	b10a      	cbz	r2, 8009e28 <_svfiprintf_r+0x60>
 8009e24:	2a25      	cmp	r2, #37	@ 0x25
 8009e26:	d1f9      	bne.n	8009e1c <_svfiprintf_r+0x54>
 8009e28:	ebba 0b04 	subs.w	fp, sl, r4
 8009e2c:	d00b      	beq.n	8009e46 <_svfiprintf_r+0x7e>
 8009e2e:	465b      	mov	r3, fp
 8009e30:	4622      	mov	r2, r4
 8009e32:	4629      	mov	r1, r5
 8009e34:	4638      	mov	r0, r7
 8009e36:	f7ff ff6b 	bl	8009d10 <__ssputs_r>
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	f000 80a7 	beq.w	8009f8e <_svfiprintf_r+0x1c6>
 8009e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e42:	445a      	add	r2, fp
 8009e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e46:	f89a 3000 	ldrb.w	r3, [sl]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 809f 	beq.w	8009f8e <_svfiprintf_r+0x1c6>
 8009e50:	2300      	movs	r3, #0
 8009e52:	f04f 32ff 	mov.w	r2, #4294967295
 8009e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e5a:	f10a 0a01 	add.w	sl, sl, #1
 8009e5e:	9304      	str	r3, [sp, #16]
 8009e60:	9307      	str	r3, [sp, #28]
 8009e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e68:	4654      	mov	r4, sl
 8009e6a:	2205      	movs	r2, #5
 8009e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e70:	484e      	ldr	r0, [pc, #312]	@ (8009fac <_svfiprintf_r+0x1e4>)
 8009e72:	f7f6 f9dd 	bl	8000230 <memchr>
 8009e76:	9a04      	ldr	r2, [sp, #16]
 8009e78:	b9d8      	cbnz	r0, 8009eb2 <_svfiprintf_r+0xea>
 8009e7a:	06d0      	lsls	r0, r2, #27
 8009e7c:	bf44      	itt	mi
 8009e7e:	2320      	movmi	r3, #32
 8009e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e84:	0711      	lsls	r1, r2, #28
 8009e86:	bf44      	itt	mi
 8009e88:	232b      	movmi	r3, #43	@ 0x2b
 8009e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e94:	d015      	beq.n	8009ec2 <_svfiprintf_r+0xfa>
 8009e96:	9a07      	ldr	r2, [sp, #28]
 8009e98:	4654      	mov	r4, sl
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	f04f 0c0a 	mov.w	ip, #10
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea6:	3b30      	subs	r3, #48	@ 0x30
 8009ea8:	2b09      	cmp	r3, #9
 8009eaa:	d94b      	bls.n	8009f44 <_svfiprintf_r+0x17c>
 8009eac:	b1b0      	cbz	r0, 8009edc <_svfiprintf_r+0x114>
 8009eae:	9207      	str	r2, [sp, #28]
 8009eb0:	e014      	b.n	8009edc <_svfiprintf_r+0x114>
 8009eb2:	eba0 0308 	sub.w	r3, r0, r8
 8009eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	9304      	str	r3, [sp, #16]
 8009ebe:	46a2      	mov	sl, r4
 8009ec0:	e7d2      	b.n	8009e68 <_svfiprintf_r+0xa0>
 8009ec2:	9b03      	ldr	r3, [sp, #12]
 8009ec4:	1d19      	adds	r1, r3, #4
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	9103      	str	r1, [sp, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bfbb      	ittet	lt
 8009ece:	425b      	neglt	r3, r3
 8009ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ed4:	9307      	strge	r3, [sp, #28]
 8009ed6:	9307      	strlt	r3, [sp, #28]
 8009ed8:	bfb8      	it	lt
 8009eda:	9204      	strlt	r2, [sp, #16]
 8009edc:	7823      	ldrb	r3, [r4, #0]
 8009ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ee0:	d10a      	bne.n	8009ef8 <_svfiprintf_r+0x130>
 8009ee2:	7863      	ldrb	r3, [r4, #1]
 8009ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ee6:	d132      	bne.n	8009f4e <_svfiprintf_r+0x186>
 8009ee8:	9b03      	ldr	r3, [sp, #12]
 8009eea:	1d1a      	adds	r2, r3, #4
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	9203      	str	r2, [sp, #12]
 8009ef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ef4:	3402      	adds	r4, #2
 8009ef6:	9305      	str	r3, [sp, #20]
 8009ef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fbc <_svfiprintf_r+0x1f4>
 8009efc:	7821      	ldrb	r1, [r4, #0]
 8009efe:	2203      	movs	r2, #3
 8009f00:	4650      	mov	r0, sl
 8009f02:	f7f6 f995 	bl	8000230 <memchr>
 8009f06:	b138      	cbz	r0, 8009f18 <_svfiprintf_r+0x150>
 8009f08:	9b04      	ldr	r3, [sp, #16]
 8009f0a:	eba0 000a 	sub.w	r0, r0, sl
 8009f0e:	2240      	movs	r2, #64	@ 0x40
 8009f10:	4082      	lsls	r2, r0
 8009f12:	4313      	orrs	r3, r2
 8009f14:	3401      	adds	r4, #1
 8009f16:	9304      	str	r3, [sp, #16]
 8009f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1c:	4824      	ldr	r0, [pc, #144]	@ (8009fb0 <_svfiprintf_r+0x1e8>)
 8009f1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f22:	2206      	movs	r2, #6
 8009f24:	f7f6 f984 	bl	8000230 <memchr>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d036      	beq.n	8009f9a <_svfiprintf_r+0x1d2>
 8009f2c:	4b21      	ldr	r3, [pc, #132]	@ (8009fb4 <_svfiprintf_r+0x1ec>)
 8009f2e:	bb1b      	cbnz	r3, 8009f78 <_svfiprintf_r+0x1b0>
 8009f30:	9b03      	ldr	r3, [sp, #12]
 8009f32:	3307      	adds	r3, #7
 8009f34:	f023 0307 	bic.w	r3, r3, #7
 8009f38:	3308      	adds	r3, #8
 8009f3a:	9303      	str	r3, [sp, #12]
 8009f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3e:	4433      	add	r3, r6
 8009f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f42:	e76a      	b.n	8009e1a <_svfiprintf_r+0x52>
 8009f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f48:	460c      	mov	r4, r1
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	e7a8      	b.n	8009ea0 <_svfiprintf_r+0xd8>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	3401      	adds	r4, #1
 8009f52:	9305      	str	r3, [sp, #20]
 8009f54:	4619      	mov	r1, r3
 8009f56:	f04f 0c0a 	mov.w	ip, #10
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f60:	3a30      	subs	r2, #48	@ 0x30
 8009f62:	2a09      	cmp	r2, #9
 8009f64:	d903      	bls.n	8009f6e <_svfiprintf_r+0x1a6>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0c6      	beq.n	8009ef8 <_svfiprintf_r+0x130>
 8009f6a:	9105      	str	r1, [sp, #20]
 8009f6c:	e7c4      	b.n	8009ef8 <_svfiprintf_r+0x130>
 8009f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f72:	4604      	mov	r4, r0
 8009f74:	2301      	movs	r3, #1
 8009f76:	e7f0      	b.n	8009f5a <_svfiprintf_r+0x192>
 8009f78:	ab03      	add	r3, sp, #12
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	462a      	mov	r2, r5
 8009f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb8 <_svfiprintf_r+0x1f0>)
 8009f80:	a904      	add	r1, sp, #16
 8009f82:	4638      	mov	r0, r7
 8009f84:	f3af 8000 	nop.w
 8009f88:	1c42      	adds	r2, r0, #1
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	d1d6      	bne.n	8009f3c <_svfiprintf_r+0x174>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	065b      	lsls	r3, r3, #25
 8009f92:	f53f af2d 	bmi.w	8009df0 <_svfiprintf_r+0x28>
 8009f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f98:	e72c      	b.n	8009df4 <_svfiprintf_r+0x2c>
 8009f9a:	ab03      	add	r3, sp, #12
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	4b05      	ldr	r3, [pc, #20]	@ (8009fb8 <_svfiprintf_r+0x1f0>)
 8009fa2:	a904      	add	r1, sp, #16
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	f000 fb87 	bl	800a6b8 <_printf_i>
 8009faa:	e7ed      	b.n	8009f88 <_svfiprintf_r+0x1c0>
 8009fac:	0800b31c 	.word	0x0800b31c
 8009fb0:	0800b326 	.word	0x0800b326
 8009fb4:	00000000 	.word	0x00000000
 8009fb8:	08009d11 	.word	0x08009d11
 8009fbc:	0800b322 	.word	0x0800b322

08009fc0 <_sungetc_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	1c4b      	adds	r3, r1, #1
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	d103      	bne.n	8009fd0 <_sungetc_r+0x10>
 8009fc8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fcc:	4628      	mov	r0, r5
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	8993      	ldrh	r3, [r2, #12]
 8009fd2:	f023 0320 	bic.w	r3, r3, #32
 8009fd6:	8193      	strh	r3, [r2, #12]
 8009fd8:	6853      	ldr	r3, [r2, #4]
 8009fda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009fdc:	b2cd      	uxtb	r5, r1
 8009fde:	b18a      	cbz	r2, 800a004 <_sungetc_r+0x44>
 8009fe0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	dd08      	ble.n	8009ff8 <_sungetc_r+0x38>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	1e5a      	subs	r2, r3, #1
 8009fea:	6022      	str	r2, [r4, #0]
 8009fec:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	6063      	str	r3, [r4, #4]
 8009ff6:	e7e9      	b.n	8009fcc <_sungetc_r+0xc>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	f000 ff12 	bl	800ae22 <__submore>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d0f1      	beq.n	8009fe6 <_sungetc_r+0x26>
 800a002:	e7e1      	b.n	8009fc8 <_sungetc_r+0x8>
 800a004:	6921      	ldr	r1, [r4, #16]
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	b141      	cbz	r1, 800a01c <_sungetc_r+0x5c>
 800a00a:	4291      	cmp	r1, r2
 800a00c:	d206      	bcs.n	800a01c <_sungetc_r+0x5c>
 800a00e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a012:	42a9      	cmp	r1, r5
 800a014:	d102      	bne.n	800a01c <_sungetc_r+0x5c>
 800a016:	3a01      	subs	r2, #1
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	e7ea      	b.n	8009ff2 <_sungetc_r+0x32>
 800a01c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a024:	6363      	str	r3, [r4, #52]	@ 0x34
 800a026:	2303      	movs	r3, #3
 800a028:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a02a:	4623      	mov	r3, r4
 800a02c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	2301      	movs	r3, #1
 800a034:	e7de      	b.n	8009ff4 <_sungetc_r+0x34>

0800a036 <__ssrefill_r>:
 800a036:	b510      	push	{r4, lr}
 800a038:	460c      	mov	r4, r1
 800a03a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a03c:	b169      	cbz	r1, 800a05a <__ssrefill_r+0x24>
 800a03e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a042:	4299      	cmp	r1, r3
 800a044:	d001      	beq.n	800a04a <__ssrefill_r+0x14>
 800a046:	f7ff fd6b 	bl	8009b20 <_free_r>
 800a04a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a04c:	6063      	str	r3, [r4, #4]
 800a04e:	2000      	movs	r0, #0
 800a050:	6360      	str	r0, [r4, #52]	@ 0x34
 800a052:	b113      	cbz	r3, 800a05a <__ssrefill_r+0x24>
 800a054:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	6923      	ldr	r3, [r4, #16]
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	2300      	movs	r3, #0
 800a060:	6063      	str	r3, [r4, #4]
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f043 0320 	orr.w	r3, r3, #32
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	f04f 30ff 	mov.w	r0, #4294967295
 800a06e:	e7f3      	b.n	800a058 <__ssrefill_r+0x22>

0800a070 <__ssvfiscanf_r>:
 800a070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a074:	460c      	mov	r4, r1
 800a076:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a07a:	2100      	movs	r1, #0
 800a07c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a080:	49a5      	ldr	r1, [pc, #660]	@ (800a318 <__ssvfiscanf_r+0x2a8>)
 800a082:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a084:	f10d 0804 	add.w	r8, sp, #4
 800a088:	49a4      	ldr	r1, [pc, #656]	@ (800a31c <__ssvfiscanf_r+0x2ac>)
 800a08a:	4fa5      	ldr	r7, [pc, #660]	@ (800a320 <__ssvfiscanf_r+0x2b0>)
 800a08c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a090:	4606      	mov	r6, r0
 800a092:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	7813      	ldrb	r3, [r2, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 8158 	beq.w	800a34e <__ssvfiscanf_r+0x2de>
 800a09e:	5cf9      	ldrb	r1, [r7, r3]
 800a0a0:	f011 0108 	ands.w	r1, r1, #8
 800a0a4:	f102 0501 	add.w	r5, r2, #1
 800a0a8:	d019      	beq.n	800a0de <__ssvfiscanf_r+0x6e>
 800a0aa:	6863      	ldr	r3, [r4, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dd0f      	ble.n	800a0d0 <__ssvfiscanf_r+0x60>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	781a      	ldrb	r2, [r3, #0]
 800a0b4:	5cba      	ldrb	r2, [r7, r2]
 800a0b6:	0712      	lsls	r2, r2, #28
 800a0b8:	d401      	bmi.n	800a0be <__ssvfiscanf_r+0x4e>
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	e7eb      	b.n	800a096 <__ssvfiscanf_r+0x26>
 800a0be:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a0c0:	3201      	adds	r2, #1
 800a0c2:	9245      	str	r2, [sp, #276]	@ 0x114
 800a0c4:	6862      	ldr	r2, [r4, #4]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	3a01      	subs	r2, #1
 800a0ca:	6062      	str	r2, [r4, #4]
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	e7ec      	b.n	800a0aa <__ssvfiscanf_r+0x3a>
 800a0d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4798      	blx	r3
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d0e9      	beq.n	800a0b0 <__ssvfiscanf_r+0x40>
 800a0dc:	e7ed      	b.n	800a0ba <__ssvfiscanf_r+0x4a>
 800a0de:	2b25      	cmp	r3, #37	@ 0x25
 800a0e0:	d012      	beq.n	800a108 <__ssvfiscanf_r+0x98>
 800a0e2:	4699      	mov	r9, r3
 800a0e4:	6863      	ldr	r3, [r4, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f340 8093 	ble.w	800a212 <__ssvfiscanf_r+0x1a2>
 800a0ec:	6822      	ldr	r2, [r4, #0]
 800a0ee:	7813      	ldrb	r3, [r2, #0]
 800a0f0:	454b      	cmp	r3, r9
 800a0f2:	f040 812c 	bne.w	800a34e <__ssvfiscanf_r+0x2de>
 800a0f6:	6863      	ldr	r3, [r4, #4]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	6063      	str	r3, [r4, #4]
 800a0fc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a0fe:	3201      	adds	r2, #1
 800a100:	3301      	adds	r3, #1
 800a102:	6022      	str	r2, [r4, #0]
 800a104:	9345      	str	r3, [sp, #276]	@ 0x114
 800a106:	e7d8      	b.n	800a0ba <__ssvfiscanf_r+0x4a>
 800a108:	9141      	str	r1, [sp, #260]	@ 0x104
 800a10a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a10c:	7853      	ldrb	r3, [r2, #1]
 800a10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a110:	bf02      	ittt	eq
 800a112:	2310      	moveq	r3, #16
 800a114:	1c95      	addeq	r5, r2, #2
 800a116:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a118:	220a      	movs	r2, #10
 800a11a:	46a9      	mov	r9, r5
 800a11c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a120:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a124:	2b09      	cmp	r3, #9
 800a126:	d91e      	bls.n	800a166 <__ssvfiscanf_r+0xf6>
 800a128:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a324 <__ssvfiscanf_r+0x2b4>
 800a12c:	2203      	movs	r2, #3
 800a12e:	4650      	mov	r0, sl
 800a130:	f7f6 f87e 	bl	8000230 <memchr>
 800a134:	b138      	cbz	r0, 800a146 <__ssvfiscanf_r+0xd6>
 800a136:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a138:	eba0 000a 	sub.w	r0, r0, sl
 800a13c:	2301      	movs	r3, #1
 800a13e:	4083      	lsls	r3, r0
 800a140:	4313      	orrs	r3, r2
 800a142:	9341      	str	r3, [sp, #260]	@ 0x104
 800a144:	464d      	mov	r5, r9
 800a146:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a14a:	2b78      	cmp	r3, #120	@ 0x78
 800a14c:	d806      	bhi.n	800a15c <__ssvfiscanf_r+0xec>
 800a14e:	2b57      	cmp	r3, #87	@ 0x57
 800a150:	d810      	bhi.n	800a174 <__ssvfiscanf_r+0x104>
 800a152:	2b25      	cmp	r3, #37	@ 0x25
 800a154:	d0c5      	beq.n	800a0e2 <__ssvfiscanf_r+0x72>
 800a156:	d857      	bhi.n	800a208 <__ssvfiscanf_r+0x198>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d065      	beq.n	800a228 <__ssvfiscanf_r+0x1b8>
 800a15c:	2303      	movs	r3, #3
 800a15e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a160:	230a      	movs	r3, #10
 800a162:	9342      	str	r3, [sp, #264]	@ 0x108
 800a164:	e078      	b.n	800a258 <__ssvfiscanf_r+0x1e8>
 800a166:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a168:	fb02 1103 	mla	r1, r2, r3, r1
 800a16c:	3930      	subs	r1, #48	@ 0x30
 800a16e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a170:	464d      	mov	r5, r9
 800a172:	e7d2      	b.n	800a11a <__ssvfiscanf_r+0xaa>
 800a174:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a178:	2a20      	cmp	r2, #32
 800a17a:	d8ef      	bhi.n	800a15c <__ssvfiscanf_r+0xec>
 800a17c:	a101      	add	r1, pc, #4	@ (adr r1, 800a184 <__ssvfiscanf_r+0x114>)
 800a17e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a237 	.word	0x0800a237
 800a188:	0800a15d 	.word	0x0800a15d
 800a18c:	0800a15d 	.word	0x0800a15d
 800a190:	0800a291 	.word	0x0800a291
 800a194:	0800a15d 	.word	0x0800a15d
 800a198:	0800a15d 	.word	0x0800a15d
 800a19c:	0800a15d 	.word	0x0800a15d
 800a1a0:	0800a15d 	.word	0x0800a15d
 800a1a4:	0800a15d 	.word	0x0800a15d
 800a1a8:	0800a15d 	.word	0x0800a15d
 800a1ac:	0800a15d 	.word	0x0800a15d
 800a1b0:	0800a2a7 	.word	0x0800a2a7
 800a1b4:	0800a28d 	.word	0x0800a28d
 800a1b8:	0800a20f 	.word	0x0800a20f
 800a1bc:	0800a20f 	.word	0x0800a20f
 800a1c0:	0800a20f 	.word	0x0800a20f
 800a1c4:	0800a15d 	.word	0x0800a15d
 800a1c8:	0800a249 	.word	0x0800a249
 800a1cc:	0800a15d 	.word	0x0800a15d
 800a1d0:	0800a15d 	.word	0x0800a15d
 800a1d4:	0800a15d 	.word	0x0800a15d
 800a1d8:	0800a15d 	.word	0x0800a15d
 800a1dc:	0800a2b7 	.word	0x0800a2b7
 800a1e0:	0800a251 	.word	0x0800a251
 800a1e4:	0800a22f 	.word	0x0800a22f
 800a1e8:	0800a15d 	.word	0x0800a15d
 800a1ec:	0800a15d 	.word	0x0800a15d
 800a1f0:	0800a2b3 	.word	0x0800a2b3
 800a1f4:	0800a15d 	.word	0x0800a15d
 800a1f8:	0800a28d 	.word	0x0800a28d
 800a1fc:	0800a15d 	.word	0x0800a15d
 800a200:	0800a15d 	.word	0x0800a15d
 800a204:	0800a237 	.word	0x0800a237
 800a208:	3b45      	subs	r3, #69	@ 0x45
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d8a6      	bhi.n	800a15c <__ssvfiscanf_r+0xec>
 800a20e:	2305      	movs	r3, #5
 800a210:	e021      	b.n	800a256 <__ssvfiscanf_r+0x1e6>
 800a212:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a214:	4621      	mov	r1, r4
 800a216:	4630      	mov	r0, r6
 800a218:	4798      	blx	r3
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f43f af66 	beq.w	800a0ec <__ssvfiscanf_r+0x7c>
 800a220:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a222:	2800      	cmp	r0, #0
 800a224:	f040 808b 	bne.w	800a33e <__ssvfiscanf_r+0x2ce>
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	e08b      	b.n	800a346 <__ssvfiscanf_r+0x2d6>
 800a22e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a230:	f042 0220 	orr.w	r2, r2, #32
 800a234:	9241      	str	r2, [sp, #260]	@ 0x104
 800a236:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a23c:	9241      	str	r2, [sp, #260]	@ 0x104
 800a23e:	2210      	movs	r2, #16
 800a240:	2b6e      	cmp	r3, #110	@ 0x6e
 800a242:	9242      	str	r2, [sp, #264]	@ 0x108
 800a244:	d902      	bls.n	800a24c <__ssvfiscanf_r+0x1dc>
 800a246:	e005      	b.n	800a254 <__ssvfiscanf_r+0x1e4>
 800a248:	2300      	movs	r3, #0
 800a24a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a24c:	2303      	movs	r3, #3
 800a24e:	e002      	b.n	800a256 <__ssvfiscanf_r+0x1e6>
 800a250:	2308      	movs	r3, #8
 800a252:	9342      	str	r3, [sp, #264]	@ 0x108
 800a254:	2304      	movs	r3, #4
 800a256:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	dd39      	ble.n	800a2d2 <__ssvfiscanf_r+0x262>
 800a25e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a260:	0659      	lsls	r1, r3, #25
 800a262:	d404      	bmi.n	800a26e <__ssvfiscanf_r+0x1fe>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	781a      	ldrb	r2, [r3, #0]
 800a268:	5cba      	ldrb	r2, [r7, r2]
 800a26a:	0712      	lsls	r2, r2, #28
 800a26c:	d438      	bmi.n	800a2e0 <__ssvfiscanf_r+0x270>
 800a26e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a270:	2b02      	cmp	r3, #2
 800a272:	dc47      	bgt.n	800a304 <__ssvfiscanf_r+0x294>
 800a274:	466b      	mov	r3, sp
 800a276:	4622      	mov	r2, r4
 800a278:	a941      	add	r1, sp, #260	@ 0x104
 800a27a:	4630      	mov	r0, r6
 800a27c:	f000 fb3c 	bl	800a8f8 <_scanf_chars>
 800a280:	2801      	cmp	r0, #1
 800a282:	d064      	beq.n	800a34e <__ssvfiscanf_r+0x2de>
 800a284:	2802      	cmp	r0, #2
 800a286:	f47f af18 	bne.w	800a0ba <__ssvfiscanf_r+0x4a>
 800a28a:	e7c9      	b.n	800a220 <__ssvfiscanf_r+0x1b0>
 800a28c:	220a      	movs	r2, #10
 800a28e:	e7d7      	b.n	800a240 <__ssvfiscanf_r+0x1d0>
 800a290:	4629      	mov	r1, r5
 800a292:	4640      	mov	r0, r8
 800a294:	f000 fd8c 	bl	800adb0 <__sccl>
 800a298:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a29e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7d7      	b.n	800a256 <__ssvfiscanf_r+0x1e6>
 800a2a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ac:	9341      	str	r3, [sp, #260]	@ 0x104
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e7d1      	b.n	800a256 <__ssvfiscanf_r+0x1e6>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e7cf      	b.n	800a256 <__ssvfiscanf_r+0x1e6>
 800a2b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a2b8:	06c3      	lsls	r3, r0, #27
 800a2ba:	f53f aefe 	bmi.w	800a0ba <__ssvfiscanf_r+0x4a>
 800a2be:	9b00      	ldr	r3, [sp, #0]
 800a2c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a2c2:	1d19      	adds	r1, r3, #4
 800a2c4:	9100      	str	r1, [sp, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	07c0      	lsls	r0, r0, #31
 800a2ca:	bf4c      	ite	mi
 800a2cc:	801a      	strhmi	r2, [r3, #0]
 800a2ce:	601a      	strpl	r2, [r3, #0]
 800a2d0:	e6f3      	b.n	800a0ba <__ssvfiscanf_r+0x4a>
 800a2d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	4798      	blx	r3
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d0bf      	beq.n	800a25e <__ssvfiscanf_r+0x1ee>
 800a2de:	e79f      	b.n	800a220 <__ssvfiscanf_r+0x1b0>
 800a2e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	9245      	str	r2, [sp, #276]	@ 0x114
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	3a01      	subs	r2, #1
 800a2ea:	2a00      	cmp	r2, #0
 800a2ec:	6062      	str	r2, [r4, #4]
 800a2ee:	dd02      	ble.n	800a2f6 <__ssvfiscanf_r+0x286>
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	e7b6      	b.n	800a264 <__ssvfiscanf_r+0x1f4>
 800a2f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	4798      	blx	r3
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d0b0      	beq.n	800a264 <__ssvfiscanf_r+0x1f4>
 800a302:	e78d      	b.n	800a220 <__ssvfiscanf_r+0x1b0>
 800a304:	2b04      	cmp	r3, #4
 800a306:	dc0f      	bgt.n	800a328 <__ssvfiscanf_r+0x2b8>
 800a308:	466b      	mov	r3, sp
 800a30a:	4622      	mov	r2, r4
 800a30c:	a941      	add	r1, sp, #260	@ 0x104
 800a30e:	4630      	mov	r0, r6
 800a310:	f000 fb4c 	bl	800a9ac <_scanf_i>
 800a314:	e7b4      	b.n	800a280 <__ssvfiscanf_r+0x210>
 800a316:	bf00      	nop
 800a318:	08009fc1 	.word	0x08009fc1
 800a31c:	0800a037 	.word	0x0800a037
 800a320:	0800b36b 	.word	0x0800b36b
 800a324:	0800b322 	.word	0x0800b322
 800a328:	4b0a      	ldr	r3, [pc, #40]	@ (800a354 <__ssvfiscanf_r+0x2e4>)
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f43f aec5 	beq.w	800a0ba <__ssvfiscanf_r+0x4a>
 800a330:	466b      	mov	r3, sp
 800a332:	4622      	mov	r2, r4
 800a334:	a941      	add	r1, sp, #260	@ 0x104
 800a336:	4630      	mov	r0, r6
 800a338:	f3af 8000 	nop.w
 800a33c:	e7a0      	b.n	800a280 <__ssvfiscanf_r+0x210>
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	065b      	lsls	r3, r3, #25
 800a342:	f53f af71 	bmi.w	800a228 <__ssvfiscanf_r+0x1b8>
 800a346:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a350:	e7f9      	b.n	800a346 <__ssvfiscanf_r+0x2d6>
 800a352:	bf00      	nop
 800a354:	00000000 	.word	0x00000000

0800a358 <__sfputc_r>:
 800a358:	6893      	ldr	r3, [r2, #8]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	b410      	push	{r4}
 800a360:	6093      	str	r3, [r2, #8]
 800a362:	da08      	bge.n	800a376 <__sfputc_r+0x1e>
 800a364:	6994      	ldr	r4, [r2, #24]
 800a366:	42a3      	cmp	r3, r4
 800a368:	db01      	blt.n	800a36e <__sfputc_r+0x16>
 800a36a:	290a      	cmp	r1, #10
 800a36c:	d103      	bne.n	800a376 <__sfputc_r+0x1e>
 800a36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a372:	f7ff bac4 	b.w	80098fe <__swbuf_r>
 800a376:	6813      	ldr	r3, [r2, #0]
 800a378:	1c58      	adds	r0, r3, #1
 800a37a:	6010      	str	r0, [r2, #0]
 800a37c:	7019      	strb	r1, [r3, #0]
 800a37e:	4608      	mov	r0, r1
 800a380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <__sfputs_r>:
 800a386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a388:	4606      	mov	r6, r0
 800a38a:	460f      	mov	r7, r1
 800a38c:	4614      	mov	r4, r2
 800a38e:	18d5      	adds	r5, r2, r3
 800a390:	42ac      	cmp	r4, r5
 800a392:	d101      	bne.n	800a398 <__sfputs_r+0x12>
 800a394:	2000      	movs	r0, #0
 800a396:	e007      	b.n	800a3a8 <__sfputs_r+0x22>
 800a398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39c:	463a      	mov	r2, r7
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f7ff ffda 	bl	800a358 <__sfputc_r>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d1f3      	bne.n	800a390 <__sfputs_r+0xa>
 800a3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3ac <_vfiprintf_r>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	460d      	mov	r5, r1
 800a3b2:	b09d      	sub	sp, #116	@ 0x74
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	4698      	mov	r8, r3
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	b118      	cbz	r0, 800a3c4 <_vfiprintf_r+0x18>
 800a3bc:	6a03      	ldr	r3, [r0, #32]
 800a3be:	b90b      	cbnz	r3, 800a3c4 <_vfiprintf_r+0x18>
 800a3c0:	f7ff f968 	bl	8009694 <__sinit>
 800a3c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3c6:	07d9      	lsls	r1, r3, #31
 800a3c8:	d405      	bmi.n	800a3d6 <_vfiprintf_r+0x2a>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	059a      	lsls	r2, r3, #22
 800a3ce:	d402      	bmi.n	800a3d6 <_vfiprintf_r+0x2a>
 800a3d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3d2:	f7ff fba2 	bl	8009b1a <__retarget_lock_acquire_recursive>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	071b      	lsls	r3, r3, #28
 800a3da:	d501      	bpl.n	800a3e0 <_vfiprintf_r+0x34>
 800a3dc:	692b      	ldr	r3, [r5, #16]
 800a3de:	b99b      	cbnz	r3, 800a408 <_vfiprintf_r+0x5c>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7ff faca 	bl	800997c <__swsetup_r>
 800a3e8:	b170      	cbz	r0, 800a408 <_vfiprintf_r+0x5c>
 800a3ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3ec:	07dc      	lsls	r4, r3, #31
 800a3ee:	d504      	bpl.n	800a3fa <_vfiprintf_r+0x4e>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	b01d      	add	sp, #116	@ 0x74
 800a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	0598      	lsls	r0, r3, #22
 800a3fe:	d4f7      	bmi.n	800a3f0 <_vfiprintf_r+0x44>
 800a400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a402:	f7ff fb8b 	bl	8009b1c <__retarget_lock_release_recursive>
 800a406:	e7f3      	b.n	800a3f0 <_vfiprintf_r+0x44>
 800a408:	2300      	movs	r3, #0
 800a40a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a40c:	2320      	movs	r3, #32
 800a40e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a412:	f8cd 800c 	str.w	r8, [sp, #12]
 800a416:	2330      	movs	r3, #48	@ 0x30
 800a418:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5c8 <_vfiprintf_r+0x21c>
 800a41c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a420:	f04f 0901 	mov.w	r9, #1
 800a424:	4623      	mov	r3, r4
 800a426:	469a      	mov	sl, r3
 800a428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a42c:	b10a      	cbz	r2, 800a432 <_vfiprintf_r+0x86>
 800a42e:	2a25      	cmp	r2, #37	@ 0x25
 800a430:	d1f9      	bne.n	800a426 <_vfiprintf_r+0x7a>
 800a432:	ebba 0b04 	subs.w	fp, sl, r4
 800a436:	d00b      	beq.n	800a450 <_vfiprintf_r+0xa4>
 800a438:	465b      	mov	r3, fp
 800a43a:	4622      	mov	r2, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	4630      	mov	r0, r6
 800a440:	f7ff ffa1 	bl	800a386 <__sfputs_r>
 800a444:	3001      	adds	r0, #1
 800a446:	f000 80a7 	beq.w	800a598 <_vfiprintf_r+0x1ec>
 800a44a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a44c:	445a      	add	r2, fp
 800a44e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a450:	f89a 3000 	ldrb.w	r3, [sl]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 809f 	beq.w	800a598 <_vfiprintf_r+0x1ec>
 800a45a:	2300      	movs	r3, #0
 800a45c:	f04f 32ff 	mov.w	r2, #4294967295
 800a460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a464:	f10a 0a01 	add.w	sl, sl, #1
 800a468:	9304      	str	r3, [sp, #16]
 800a46a:	9307      	str	r3, [sp, #28]
 800a46c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a470:	931a      	str	r3, [sp, #104]	@ 0x68
 800a472:	4654      	mov	r4, sl
 800a474:	2205      	movs	r2, #5
 800a476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47a:	4853      	ldr	r0, [pc, #332]	@ (800a5c8 <_vfiprintf_r+0x21c>)
 800a47c:	f7f5 fed8 	bl	8000230 <memchr>
 800a480:	9a04      	ldr	r2, [sp, #16]
 800a482:	b9d8      	cbnz	r0, 800a4bc <_vfiprintf_r+0x110>
 800a484:	06d1      	lsls	r1, r2, #27
 800a486:	bf44      	itt	mi
 800a488:	2320      	movmi	r3, #32
 800a48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a48e:	0713      	lsls	r3, r2, #28
 800a490:	bf44      	itt	mi
 800a492:	232b      	movmi	r3, #43	@ 0x2b
 800a494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a498:	f89a 3000 	ldrb.w	r3, [sl]
 800a49c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a49e:	d015      	beq.n	800a4cc <_vfiprintf_r+0x120>
 800a4a0:	9a07      	ldr	r2, [sp, #28]
 800a4a2:	4654      	mov	r4, sl
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f04f 0c0a 	mov.w	ip, #10
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4b0:	3b30      	subs	r3, #48	@ 0x30
 800a4b2:	2b09      	cmp	r3, #9
 800a4b4:	d94b      	bls.n	800a54e <_vfiprintf_r+0x1a2>
 800a4b6:	b1b0      	cbz	r0, 800a4e6 <_vfiprintf_r+0x13a>
 800a4b8:	9207      	str	r2, [sp, #28]
 800a4ba:	e014      	b.n	800a4e6 <_vfiprintf_r+0x13a>
 800a4bc:	eba0 0308 	sub.w	r3, r0, r8
 800a4c0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	9304      	str	r3, [sp, #16]
 800a4c8:	46a2      	mov	sl, r4
 800a4ca:	e7d2      	b.n	800a472 <_vfiprintf_r+0xc6>
 800a4cc:	9b03      	ldr	r3, [sp, #12]
 800a4ce:	1d19      	adds	r1, r3, #4
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	9103      	str	r1, [sp, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bfbb      	ittet	lt
 800a4d8:	425b      	neglt	r3, r3
 800a4da:	f042 0202 	orrlt.w	r2, r2, #2
 800a4de:	9307      	strge	r3, [sp, #28]
 800a4e0:	9307      	strlt	r3, [sp, #28]
 800a4e2:	bfb8      	it	lt
 800a4e4:	9204      	strlt	r2, [sp, #16]
 800a4e6:	7823      	ldrb	r3, [r4, #0]
 800a4e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4ea:	d10a      	bne.n	800a502 <_vfiprintf_r+0x156>
 800a4ec:	7863      	ldrb	r3, [r4, #1]
 800a4ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4f0:	d132      	bne.n	800a558 <_vfiprintf_r+0x1ac>
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	1d1a      	adds	r2, r3, #4
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	9203      	str	r2, [sp, #12]
 800a4fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4fe:	3402      	adds	r4, #2
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5d8 <_vfiprintf_r+0x22c>
 800a506:	7821      	ldrb	r1, [r4, #0]
 800a508:	2203      	movs	r2, #3
 800a50a:	4650      	mov	r0, sl
 800a50c:	f7f5 fe90 	bl	8000230 <memchr>
 800a510:	b138      	cbz	r0, 800a522 <_vfiprintf_r+0x176>
 800a512:	9b04      	ldr	r3, [sp, #16]
 800a514:	eba0 000a 	sub.w	r0, r0, sl
 800a518:	2240      	movs	r2, #64	@ 0x40
 800a51a:	4082      	lsls	r2, r0
 800a51c:	4313      	orrs	r3, r2
 800a51e:	3401      	adds	r4, #1
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a526:	4829      	ldr	r0, [pc, #164]	@ (800a5cc <_vfiprintf_r+0x220>)
 800a528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a52c:	2206      	movs	r2, #6
 800a52e:	f7f5 fe7f 	bl	8000230 <memchr>
 800a532:	2800      	cmp	r0, #0
 800a534:	d03f      	beq.n	800a5b6 <_vfiprintf_r+0x20a>
 800a536:	4b26      	ldr	r3, [pc, #152]	@ (800a5d0 <_vfiprintf_r+0x224>)
 800a538:	bb1b      	cbnz	r3, 800a582 <_vfiprintf_r+0x1d6>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	3307      	adds	r3, #7
 800a53e:	f023 0307 	bic.w	r3, r3, #7
 800a542:	3308      	adds	r3, #8
 800a544:	9303      	str	r3, [sp, #12]
 800a546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a548:	443b      	add	r3, r7
 800a54a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a54c:	e76a      	b.n	800a424 <_vfiprintf_r+0x78>
 800a54e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a552:	460c      	mov	r4, r1
 800a554:	2001      	movs	r0, #1
 800a556:	e7a8      	b.n	800a4aa <_vfiprintf_r+0xfe>
 800a558:	2300      	movs	r3, #0
 800a55a:	3401      	adds	r4, #1
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	4619      	mov	r1, r3
 800a560:	f04f 0c0a 	mov.w	ip, #10
 800a564:	4620      	mov	r0, r4
 800a566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a56a:	3a30      	subs	r2, #48	@ 0x30
 800a56c:	2a09      	cmp	r2, #9
 800a56e:	d903      	bls.n	800a578 <_vfiprintf_r+0x1cc>
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0c6      	beq.n	800a502 <_vfiprintf_r+0x156>
 800a574:	9105      	str	r1, [sp, #20]
 800a576:	e7c4      	b.n	800a502 <_vfiprintf_r+0x156>
 800a578:	fb0c 2101 	mla	r1, ip, r1, r2
 800a57c:	4604      	mov	r4, r0
 800a57e:	2301      	movs	r3, #1
 800a580:	e7f0      	b.n	800a564 <_vfiprintf_r+0x1b8>
 800a582:	ab03      	add	r3, sp, #12
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	462a      	mov	r2, r5
 800a588:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <_vfiprintf_r+0x228>)
 800a58a:	a904      	add	r1, sp, #16
 800a58c:	4630      	mov	r0, r6
 800a58e:	f3af 8000 	nop.w
 800a592:	4607      	mov	r7, r0
 800a594:	1c78      	adds	r0, r7, #1
 800a596:	d1d6      	bne.n	800a546 <_vfiprintf_r+0x19a>
 800a598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a59a:	07d9      	lsls	r1, r3, #31
 800a59c:	d405      	bmi.n	800a5aa <_vfiprintf_r+0x1fe>
 800a59e:	89ab      	ldrh	r3, [r5, #12]
 800a5a0:	059a      	lsls	r2, r3, #22
 800a5a2:	d402      	bmi.n	800a5aa <_vfiprintf_r+0x1fe>
 800a5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5a6:	f7ff fab9 	bl	8009b1c <__retarget_lock_release_recursive>
 800a5aa:	89ab      	ldrh	r3, [r5, #12]
 800a5ac:	065b      	lsls	r3, r3, #25
 800a5ae:	f53f af1f 	bmi.w	800a3f0 <_vfiprintf_r+0x44>
 800a5b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5b4:	e71e      	b.n	800a3f4 <_vfiprintf_r+0x48>
 800a5b6:	ab03      	add	r3, sp, #12
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4b05      	ldr	r3, [pc, #20]	@ (800a5d4 <_vfiprintf_r+0x228>)
 800a5be:	a904      	add	r1, sp, #16
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 f879 	bl	800a6b8 <_printf_i>
 800a5c6:	e7e4      	b.n	800a592 <_vfiprintf_r+0x1e6>
 800a5c8:	0800b31c 	.word	0x0800b31c
 800a5cc:	0800b326 	.word	0x0800b326
 800a5d0:	00000000 	.word	0x00000000
 800a5d4:	0800a387 	.word	0x0800a387
 800a5d8:	0800b322 	.word	0x0800b322

0800a5dc <_printf_common>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	4698      	mov	r8, r3
 800a5e4:	688a      	ldr	r2, [r1, #8]
 800a5e6:	690b      	ldr	r3, [r1, #16]
 800a5e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bfb8      	it	lt
 800a5f0:	4613      	movlt	r3, r2
 800a5f2:	6033      	str	r3, [r6, #0]
 800a5f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b10a      	cbz	r2, 800a602 <_printf_common+0x26>
 800a5fe:	3301      	adds	r3, #1
 800a600:	6033      	str	r3, [r6, #0]
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	0699      	lsls	r1, r3, #26
 800a606:	bf42      	ittt	mi
 800a608:	6833      	ldrmi	r3, [r6, #0]
 800a60a:	3302      	addmi	r3, #2
 800a60c:	6033      	strmi	r3, [r6, #0]
 800a60e:	6825      	ldr	r5, [r4, #0]
 800a610:	f015 0506 	ands.w	r5, r5, #6
 800a614:	d106      	bne.n	800a624 <_printf_common+0x48>
 800a616:	f104 0a19 	add.w	sl, r4, #25
 800a61a:	68e3      	ldr	r3, [r4, #12]
 800a61c:	6832      	ldr	r2, [r6, #0]
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	42ab      	cmp	r3, r5
 800a622:	dc26      	bgt.n	800a672 <_printf_common+0x96>
 800a624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a628:	6822      	ldr	r2, [r4, #0]
 800a62a:	3b00      	subs	r3, #0
 800a62c:	bf18      	it	ne
 800a62e:	2301      	movne	r3, #1
 800a630:	0692      	lsls	r2, r2, #26
 800a632:	d42b      	bmi.n	800a68c <_printf_common+0xb0>
 800a634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a638:	4641      	mov	r1, r8
 800a63a:	4638      	mov	r0, r7
 800a63c:	47c8      	blx	r9
 800a63e:	3001      	adds	r0, #1
 800a640:	d01e      	beq.n	800a680 <_printf_common+0xa4>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	6922      	ldr	r2, [r4, #16]
 800a646:	f003 0306 	and.w	r3, r3, #6
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	bf02      	ittt	eq
 800a64e:	68e5      	ldreq	r5, [r4, #12]
 800a650:	6833      	ldreq	r3, [r6, #0]
 800a652:	1aed      	subeq	r5, r5, r3
 800a654:	68a3      	ldr	r3, [r4, #8]
 800a656:	bf0c      	ite	eq
 800a658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a65c:	2500      	movne	r5, #0
 800a65e:	4293      	cmp	r3, r2
 800a660:	bfc4      	itt	gt
 800a662:	1a9b      	subgt	r3, r3, r2
 800a664:	18ed      	addgt	r5, r5, r3
 800a666:	2600      	movs	r6, #0
 800a668:	341a      	adds	r4, #26
 800a66a:	42b5      	cmp	r5, r6
 800a66c:	d11a      	bne.n	800a6a4 <_printf_common+0xc8>
 800a66e:	2000      	movs	r0, #0
 800a670:	e008      	b.n	800a684 <_printf_common+0xa8>
 800a672:	2301      	movs	r3, #1
 800a674:	4652      	mov	r2, sl
 800a676:	4641      	mov	r1, r8
 800a678:	4638      	mov	r0, r7
 800a67a:	47c8      	blx	r9
 800a67c:	3001      	adds	r0, #1
 800a67e:	d103      	bne.n	800a688 <_printf_common+0xac>
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a688:	3501      	adds	r5, #1
 800a68a:	e7c6      	b.n	800a61a <_printf_common+0x3e>
 800a68c:	18e1      	adds	r1, r4, r3
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	2030      	movs	r0, #48	@ 0x30
 800a692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a696:	4422      	add	r2, r4
 800a698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a69c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6a0:	3302      	adds	r3, #2
 800a6a2:	e7c7      	b.n	800a634 <_printf_common+0x58>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	47c8      	blx	r9
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d0e6      	beq.n	800a680 <_printf_common+0xa4>
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	e7d9      	b.n	800a66a <_printf_common+0x8e>
	...

0800a6b8 <_printf_i>:
 800a6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	7e0f      	ldrb	r7, [r1, #24]
 800a6be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6c0:	2f78      	cmp	r7, #120	@ 0x78
 800a6c2:	4691      	mov	r9, r2
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	469a      	mov	sl, r3
 800a6ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6ce:	d807      	bhi.n	800a6e0 <_printf_i+0x28>
 800a6d0:	2f62      	cmp	r7, #98	@ 0x62
 800a6d2:	d80a      	bhi.n	800a6ea <_printf_i+0x32>
 800a6d4:	2f00      	cmp	r7, #0
 800a6d6:	f000 80d2 	beq.w	800a87e <_printf_i+0x1c6>
 800a6da:	2f58      	cmp	r7, #88	@ 0x58
 800a6dc:	f000 80b9 	beq.w	800a852 <_printf_i+0x19a>
 800a6e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6e8:	e03a      	b.n	800a760 <_printf_i+0xa8>
 800a6ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6ee:	2b15      	cmp	r3, #21
 800a6f0:	d8f6      	bhi.n	800a6e0 <_printf_i+0x28>
 800a6f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6f8 <_printf_i+0x40>)
 800a6f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6f8:	0800a751 	.word	0x0800a751
 800a6fc:	0800a765 	.word	0x0800a765
 800a700:	0800a6e1 	.word	0x0800a6e1
 800a704:	0800a6e1 	.word	0x0800a6e1
 800a708:	0800a6e1 	.word	0x0800a6e1
 800a70c:	0800a6e1 	.word	0x0800a6e1
 800a710:	0800a765 	.word	0x0800a765
 800a714:	0800a6e1 	.word	0x0800a6e1
 800a718:	0800a6e1 	.word	0x0800a6e1
 800a71c:	0800a6e1 	.word	0x0800a6e1
 800a720:	0800a6e1 	.word	0x0800a6e1
 800a724:	0800a865 	.word	0x0800a865
 800a728:	0800a78f 	.word	0x0800a78f
 800a72c:	0800a81f 	.word	0x0800a81f
 800a730:	0800a6e1 	.word	0x0800a6e1
 800a734:	0800a6e1 	.word	0x0800a6e1
 800a738:	0800a887 	.word	0x0800a887
 800a73c:	0800a6e1 	.word	0x0800a6e1
 800a740:	0800a78f 	.word	0x0800a78f
 800a744:	0800a6e1 	.word	0x0800a6e1
 800a748:	0800a6e1 	.word	0x0800a6e1
 800a74c:	0800a827 	.word	0x0800a827
 800a750:	6833      	ldr	r3, [r6, #0]
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6032      	str	r2, [r6, #0]
 800a758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a75c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a760:	2301      	movs	r3, #1
 800a762:	e09d      	b.n	800a8a0 <_printf_i+0x1e8>
 800a764:	6833      	ldr	r3, [r6, #0]
 800a766:	6820      	ldr	r0, [r4, #0]
 800a768:	1d19      	adds	r1, r3, #4
 800a76a:	6031      	str	r1, [r6, #0]
 800a76c:	0606      	lsls	r6, r0, #24
 800a76e:	d501      	bpl.n	800a774 <_printf_i+0xbc>
 800a770:	681d      	ldr	r5, [r3, #0]
 800a772:	e003      	b.n	800a77c <_printf_i+0xc4>
 800a774:	0645      	lsls	r5, r0, #25
 800a776:	d5fb      	bpl.n	800a770 <_printf_i+0xb8>
 800a778:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	da03      	bge.n	800a788 <_printf_i+0xd0>
 800a780:	232d      	movs	r3, #45	@ 0x2d
 800a782:	426d      	negs	r5, r5
 800a784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a788:	4859      	ldr	r0, [pc, #356]	@ (800a8f0 <_printf_i+0x238>)
 800a78a:	230a      	movs	r3, #10
 800a78c:	e011      	b.n	800a7b2 <_printf_i+0xfa>
 800a78e:	6821      	ldr	r1, [r4, #0]
 800a790:	6833      	ldr	r3, [r6, #0]
 800a792:	0608      	lsls	r0, r1, #24
 800a794:	f853 5b04 	ldr.w	r5, [r3], #4
 800a798:	d402      	bmi.n	800a7a0 <_printf_i+0xe8>
 800a79a:	0649      	lsls	r1, r1, #25
 800a79c:	bf48      	it	mi
 800a79e:	b2ad      	uxthmi	r5, r5
 800a7a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7a2:	4853      	ldr	r0, [pc, #332]	@ (800a8f0 <_printf_i+0x238>)
 800a7a4:	6033      	str	r3, [r6, #0]
 800a7a6:	bf14      	ite	ne
 800a7a8:	230a      	movne	r3, #10
 800a7aa:	2308      	moveq	r3, #8
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7b2:	6866      	ldr	r6, [r4, #4]
 800a7b4:	60a6      	str	r6, [r4, #8]
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	bfa2      	ittt	ge
 800a7ba:	6821      	ldrge	r1, [r4, #0]
 800a7bc:	f021 0104 	bicge.w	r1, r1, #4
 800a7c0:	6021      	strge	r1, [r4, #0]
 800a7c2:	b90d      	cbnz	r5, 800a7c8 <_printf_i+0x110>
 800a7c4:	2e00      	cmp	r6, #0
 800a7c6:	d04b      	beq.n	800a860 <_printf_i+0x1a8>
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7ce:	fb03 5711 	mls	r7, r3, r1, r5
 800a7d2:	5dc7      	ldrb	r7, [r0, r7]
 800a7d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7d8:	462f      	mov	r7, r5
 800a7da:	42bb      	cmp	r3, r7
 800a7dc:	460d      	mov	r5, r1
 800a7de:	d9f4      	bls.n	800a7ca <_printf_i+0x112>
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d10b      	bne.n	800a7fc <_printf_i+0x144>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	07df      	lsls	r7, r3, #31
 800a7e8:	d508      	bpl.n	800a7fc <_printf_i+0x144>
 800a7ea:	6923      	ldr	r3, [r4, #16]
 800a7ec:	6861      	ldr	r1, [r4, #4]
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	bfde      	ittt	le
 800a7f2:	2330      	movle	r3, #48	@ 0x30
 800a7f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7fc:	1b92      	subs	r2, r2, r6
 800a7fe:	6122      	str	r2, [r4, #16]
 800a800:	f8cd a000 	str.w	sl, [sp]
 800a804:	464b      	mov	r3, r9
 800a806:	aa03      	add	r2, sp, #12
 800a808:	4621      	mov	r1, r4
 800a80a:	4640      	mov	r0, r8
 800a80c:	f7ff fee6 	bl	800a5dc <_printf_common>
 800a810:	3001      	adds	r0, #1
 800a812:	d14a      	bne.n	800a8aa <_printf_i+0x1f2>
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b004      	add	sp, #16
 800a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	f043 0320 	orr.w	r3, r3, #32
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	4833      	ldr	r0, [pc, #204]	@ (800a8f4 <_printf_i+0x23c>)
 800a828:	2778      	movs	r7, #120	@ 0x78
 800a82a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	6831      	ldr	r1, [r6, #0]
 800a832:	061f      	lsls	r7, r3, #24
 800a834:	f851 5b04 	ldr.w	r5, [r1], #4
 800a838:	d402      	bmi.n	800a840 <_printf_i+0x188>
 800a83a:	065f      	lsls	r7, r3, #25
 800a83c:	bf48      	it	mi
 800a83e:	b2ad      	uxthmi	r5, r5
 800a840:	6031      	str	r1, [r6, #0]
 800a842:	07d9      	lsls	r1, r3, #31
 800a844:	bf44      	itt	mi
 800a846:	f043 0320 	orrmi.w	r3, r3, #32
 800a84a:	6023      	strmi	r3, [r4, #0]
 800a84c:	b11d      	cbz	r5, 800a856 <_printf_i+0x19e>
 800a84e:	2310      	movs	r3, #16
 800a850:	e7ac      	b.n	800a7ac <_printf_i+0xf4>
 800a852:	4827      	ldr	r0, [pc, #156]	@ (800a8f0 <_printf_i+0x238>)
 800a854:	e7e9      	b.n	800a82a <_printf_i+0x172>
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	f023 0320 	bic.w	r3, r3, #32
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	e7f6      	b.n	800a84e <_printf_i+0x196>
 800a860:	4616      	mov	r6, r2
 800a862:	e7bd      	b.n	800a7e0 <_printf_i+0x128>
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	6825      	ldr	r5, [r4, #0]
 800a868:	6961      	ldr	r1, [r4, #20]
 800a86a:	1d18      	adds	r0, r3, #4
 800a86c:	6030      	str	r0, [r6, #0]
 800a86e:	062e      	lsls	r6, r5, #24
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	d501      	bpl.n	800a878 <_printf_i+0x1c0>
 800a874:	6019      	str	r1, [r3, #0]
 800a876:	e002      	b.n	800a87e <_printf_i+0x1c6>
 800a878:	0668      	lsls	r0, r5, #25
 800a87a:	d5fb      	bpl.n	800a874 <_printf_i+0x1bc>
 800a87c:	8019      	strh	r1, [r3, #0]
 800a87e:	2300      	movs	r3, #0
 800a880:	6123      	str	r3, [r4, #16]
 800a882:	4616      	mov	r6, r2
 800a884:	e7bc      	b.n	800a800 <_printf_i+0x148>
 800a886:	6833      	ldr	r3, [r6, #0]
 800a888:	1d1a      	adds	r2, r3, #4
 800a88a:	6032      	str	r2, [r6, #0]
 800a88c:	681e      	ldr	r6, [r3, #0]
 800a88e:	6862      	ldr	r2, [r4, #4]
 800a890:	2100      	movs	r1, #0
 800a892:	4630      	mov	r0, r6
 800a894:	f7f5 fccc 	bl	8000230 <memchr>
 800a898:	b108      	cbz	r0, 800a89e <_printf_i+0x1e6>
 800a89a:	1b80      	subs	r0, r0, r6
 800a89c:	6060      	str	r0, [r4, #4]
 800a89e:	6863      	ldr	r3, [r4, #4]
 800a8a0:	6123      	str	r3, [r4, #16]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8a8:	e7aa      	b.n	800a800 <_printf_i+0x148>
 800a8aa:	6923      	ldr	r3, [r4, #16]
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	47d0      	blx	sl
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d0ad      	beq.n	800a814 <_printf_i+0x15c>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	079b      	lsls	r3, r3, #30
 800a8bc:	d413      	bmi.n	800a8e6 <_printf_i+0x22e>
 800a8be:	68e0      	ldr	r0, [r4, #12]
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	4298      	cmp	r0, r3
 800a8c4:	bfb8      	it	lt
 800a8c6:	4618      	movlt	r0, r3
 800a8c8:	e7a6      	b.n	800a818 <_printf_i+0x160>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	47d0      	blx	sl
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d09d      	beq.n	800a814 <_printf_i+0x15c>
 800a8d8:	3501      	adds	r5, #1
 800a8da:	68e3      	ldr	r3, [r4, #12]
 800a8dc:	9903      	ldr	r1, [sp, #12]
 800a8de:	1a5b      	subs	r3, r3, r1
 800a8e0:	42ab      	cmp	r3, r5
 800a8e2:	dcf2      	bgt.n	800a8ca <_printf_i+0x212>
 800a8e4:	e7eb      	b.n	800a8be <_printf_i+0x206>
 800a8e6:	2500      	movs	r5, #0
 800a8e8:	f104 0619 	add.w	r6, r4, #25
 800a8ec:	e7f5      	b.n	800a8da <_printf_i+0x222>
 800a8ee:	bf00      	nop
 800a8f0:	0800b32d 	.word	0x0800b32d
 800a8f4:	0800b33e 	.word	0x0800b33e

0800a8f8 <_scanf_chars>:
 800a8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8fc:	4615      	mov	r5, r2
 800a8fe:	688a      	ldr	r2, [r1, #8]
 800a900:	4680      	mov	r8, r0
 800a902:	460c      	mov	r4, r1
 800a904:	b932      	cbnz	r2, 800a914 <_scanf_chars+0x1c>
 800a906:	698a      	ldr	r2, [r1, #24]
 800a908:	2a00      	cmp	r2, #0
 800a90a:	bf14      	ite	ne
 800a90c:	f04f 32ff 	movne.w	r2, #4294967295
 800a910:	2201      	moveq	r2, #1
 800a912:	608a      	str	r2, [r1, #8]
 800a914:	6822      	ldr	r2, [r4, #0]
 800a916:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a9a8 <_scanf_chars+0xb0>
 800a91a:	06d1      	lsls	r1, r2, #27
 800a91c:	bf5f      	itttt	pl
 800a91e:	681a      	ldrpl	r2, [r3, #0]
 800a920:	1d11      	addpl	r1, r2, #4
 800a922:	6019      	strpl	r1, [r3, #0]
 800a924:	6816      	ldrpl	r6, [r2, #0]
 800a926:	2700      	movs	r7, #0
 800a928:	69a0      	ldr	r0, [r4, #24]
 800a92a:	b188      	cbz	r0, 800a950 <_scanf_chars+0x58>
 800a92c:	2801      	cmp	r0, #1
 800a92e:	d107      	bne.n	800a940 <_scanf_chars+0x48>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	6963      	ldr	r3, [r4, #20]
 800a936:	5c9b      	ldrb	r3, [r3, r2]
 800a938:	b953      	cbnz	r3, 800a950 <_scanf_chars+0x58>
 800a93a:	2f00      	cmp	r7, #0
 800a93c:	d031      	beq.n	800a9a2 <_scanf_chars+0xaa>
 800a93e:	e022      	b.n	800a986 <_scanf_chars+0x8e>
 800a940:	2802      	cmp	r0, #2
 800a942:	d120      	bne.n	800a986 <_scanf_chars+0x8e>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a94c:	071b      	lsls	r3, r3, #28
 800a94e:	d41a      	bmi.n	800a986 <_scanf_chars+0x8e>
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	06da      	lsls	r2, r3, #27
 800a954:	bf5e      	ittt	pl
 800a956:	682b      	ldrpl	r3, [r5, #0]
 800a958:	781b      	ldrbpl	r3, [r3, #0]
 800a95a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a95e:	682a      	ldr	r2, [r5, #0]
 800a960:	686b      	ldr	r3, [r5, #4]
 800a962:	3201      	adds	r2, #1
 800a964:	602a      	str	r2, [r5, #0]
 800a966:	68a2      	ldr	r2, [r4, #8]
 800a968:	3b01      	subs	r3, #1
 800a96a:	3a01      	subs	r2, #1
 800a96c:	606b      	str	r3, [r5, #4]
 800a96e:	3701      	adds	r7, #1
 800a970:	60a2      	str	r2, [r4, #8]
 800a972:	b142      	cbz	r2, 800a986 <_scanf_chars+0x8e>
 800a974:	2b00      	cmp	r3, #0
 800a976:	dcd7      	bgt.n	800a928 <_scanf_chars+0x30>
 800a978:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a97c:	4629      	mov	r1, r5
 800a97e:	4640      	mov	r0, r8
 800a980:	4798      	blx	r3
 800a982:	2800      	cmp	r0, #0
 800a984:	d0d0      	beq.n	800a928 <_scanf_chars+0x30>
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	f013 0310 	ands.w	r3, r3, #16
 800a98c:	d105      	bne.n	800a99a <_scanf_chars+0xa2>
 800a98e:	68e2      	ldr	r2, [r4, #12]
 800a990:	3201      	adds	r2, #1
 800a992:	60e2      	str	r2, [r4, #12]
 800a994:	69a2      	ldr	r2, [r4, #24]
 800a996:	b102      	cbz	r2, 800a99a <_scanf_chars+0xa2>
 800a998:	7033      	strb	r3, [r6, #0]
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	443b      	add	r3, r7
 800a99e:	6123      	str	r3, [r4, #16]
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800b36b 	.word	0x0800b36b

0800a9ac <_scanf_i>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	4698      	mov	r8, r3
 800a9b2:	4b74      	ldr	r3, [pc, #464]	@ (800ab84 <_scanf_i+0x1d8>)
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	4682      	mov	sl, r0
 800a9b8:	4616      	mov	r6, r2
 800a9ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	ab03      	add	r3, sp, #12
 800a9c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9c6:	4b70      	ldr	r3, [pc, #448]	@ (800ab88 <_scanf_i+0x1dc>)
 800a9c8:	69a1      	ldr	r1, [r4, #24]
 800a9ca:	4a70      	ldr	r2, [pc, #448]	@ (800ab8c <_scanf_i+0x1e0>)
 800a9cc:	2903      	cmp	r1, #3
 800a9ce:	bf08      	it	eq
 800a9d0:	461a      	moveq	r2, r3
 800a9d2:	68a3      	ldr	r3, [r4, #8]
 800a9d4:	9201      	str	r2, [sp, #4]
 800a9d6:	1e5a      	subs	r2, r3, #1
 800a9d8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a9dc:	bf88      	it	hi
 800a9de:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a9e2:	4627      	mov	r7, r4
 800a9e4:	bf82      	ittt	hi
 800a9e6:	eb03 0905 	addhi.w	r9, r3, r5
 800a9ea:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a9ee:	60a3      	strhi	r3, [r4, #8]
 800a9f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a9f4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a9f8:	bf98      	it	ls
 800a9fa:	f04f 0900 	movls.w	r9, #0
 800a9fe:	6023      	str	r3, [r4, #0]
 800aa00:	463d      	mov	r5, r7
 800aa02:	f04f 0b00 	mov.w	fp, #0
 800aa06:	6831      	ldr	r1, [r6, #0]
 800aa08:	ab03      	add	r3, sp, #12
 800aa0a:	7809      	ldrb	r1, [r1, #0]
 800aa0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aa10:	2202      	movs	r2, #2
 800aa12:	f7f5 fc0d 	bl	8000230 <memchr>
 800aa16:	b328      	cbz	r0, 800aa64 <_scanf_i+0xb8>
 800aa18:	f1bb 0f01 	cmp.w	fp, #1
 800aa1c:	d159      	bne.n	800aad2 <_scanf_i+0x126>
 800aa1e:	6862      	ldr	r2, [r4, #4]
 800aa20:	b92a      	cbnz	r2, 800aa2e <_scanf_i+0x82>
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	2108      	movs	r1, #8
 800aa26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa2a:	6061      	str	r1, [r4, #4]
 800aa2c:	6022      	str	r2, [r4, #0]
 800aa2e:	6822      	ldr	r2, [r4, #0]
 800aa30:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800aa34:	6022      	str	r2, [r4, #0]
 800aa36:	68a2      	ldr	r2, [r4, #8]
 800aa38:	1e51      	subs	r1, r2, #1
 800aa3a:	60a1      	str	r1, [r4, #8]
 800aa3c:	b192      	cbz	r2, 800aa64 <_scanf_i+0xb8>
 800aa3e:	6832      	ldr	r2, [r6, #0]
 800aa40:	1c51      	adds	r1, r2, #1
 800aa42:	6031      	str	r1, [r6, #0]
 800aa44:	7812      	ldrb	r2, [r2, #0]
 800aa46:	f805 2b01 	strb.w	r2, [r5], #1
 800aa4a:	6872      	ldr	r2, [r6, #4]
 800aa4c:	3a01      	subs	r2, #1
 800aa4e:	2a00      	cmp	r2, #0
 800aa50:	6072      	str	r2, [r6, #4]
 800aa52:	dc07      	bgt.n	800aa64 <_scanf_i+0xb8>
 800aa54:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	4790      	blx	r2
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f040 8085 	bne.w	800ab6e <_scanf_i+0x1c2>
 800aa64:	f10b 0b01 	add.w	fp, fp, #1
 800aa68:	f1bb 0f03 	cmp.w	fp, #3
 800aa6c:	d1cb      	bne.n	800aa06 <_scanf_i+0x5a>
 800aa6e:	6863      	ldr	r3, [r4, #4]
 800aa70:	b90b      	cbnz	r3, 800aa76 <_scanf_i+0xca>
 800aa72:	230a      	movs	r3, #10
 800aa74:	6063      	str	r3, [r4, #4]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	4945      	ldr	r1, [pc, #276]	@ (800ab90 <_scanf_i+0x1e4>)
 800aa7a:	6960      	ldr	r0, [r4, #20]
 800aa7c:	1ac9      	subs	r1, r1, r3
 800aa7e:	f000 f997 	bl	800adb0 <__sccl>
 800aa82:	f04f 0b00 	mov.w	fp, #0
 800aa86:	68a3      	ldr	r3, [r4, #8]
 800aa88:	6822      	ldr	r2, [r4, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d03d      	beq.n	800ab0a <_scanf_i+0x15e>
 800aa8e:	6831      	ldr	r1, [r6, #0]
 800aa90:	6960      	ldr	r0, [r4, #20]
 800aa92:	f891 c000 	ldrb.w	ip, [r1]
 800aa96:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d035      	beq.n	800ab0a <_scanf_i+0x15e>
 800aa9e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800aaa2:	d124      	bne.n	800aaee <_scanf_i+0x142>
 800aaa4:	0510      	lsls	r0, r2, #20
 800aaa6:	d522      	bpl.n	800aaee <_scanf_i+0x142>
 800aaa8:	f10b 0b01 	add.w	fp, fp, #1
 800aaac:	f1b9 0f00 	cmp.w	r9, #0
 800aab0:	d003      	beq.n	800aaba <_scanf_i+0x10e>
 800aab2:	3301      	adds	r3, #1
 800aab4:	f109 39ff 	add.w	r9, r9, #4294967295
 800aab8:	60a3      	str	r3, [r4, #8]
 800aaba:	6873      	ldr	r3, [r6, #4]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	6073      	str	r3, [r6, #4]
 800aac2:	dd1b      	ble.n	800aafc <_scanf_i+0x150>
 800aac4:	6833      	ldr	r3, [r6, #0]
 800aac6:	3301      	adds	r3, #1
 800aac8:	6033      	str	r3, [r6, #0]
 800aaca:	68a3      	ldr	r3, [r4, #8]
 800aacc:	3b01      	subs	r3, #1
 800aace:	60a3      	str	r3, [r4, #8]
 800aad0:	e7d9      	b.n	800aa86 <_scanf_i+0xda>
 800aad2:	f1bb 0f02 	cmp.w	fp, #2
 800aad6:	d1ae      	bne.n	800aa36 <_scanf_i+0x8a>
 800aad8:	6822      	ldr	r2, [r4, #0]
 800aada:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800aade:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800aae2:	d1bf      	bne.n	800aa64 <_scanf_i+0xb8>
 800aae4:	2110      	movs	r1, #16
 800aae6:	6061      	str	r1, [r4, #4]
 800aae8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aaec:	e7a2      	b.n	800aa34 <_scanf_i+0x88>
 800aaee:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800aaf2:	6022      	str	r2, [r4, #0]
 800aaf4:	780b      	ldrb	r3, [r1, #0]
 800aaf6:	f805 3b01 	strb.w	r3, [r5], #1
 800aafa:	e7de      	b.n	800aaba <_scanf_i+0x10e>
 800aafc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab00:	4631      	mov	r1, r6
 800ab02:	4650      	mov	r0, sl
 800ab04:	4798      	blx	r3
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d0df      	beq.n	800aaca <_scanf_i+0x11e>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	05d9      	lsls	r1, r3, #23
 800ab0e:	d50d      	bpl.n	800ab2c <_scanf_i+0x180>
 800ab10:	42bd      	cmp	r5, r7
 800ab12:	d909      	bls.n	800ab28 <_scanf_i+0x17c>
 800ab14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	4650      	mov	r0, sl
 800ab20:	4798      	blx	r3
 800ab22:	f105 39ff 	add.w	r9, r5, #4294967295
 800ab26:	464d      	mov	r5, r9
 800ab28:	42bd      	cmp	r5, r7
 800ab2a:	d028      	beq.n	800ab7e <_scanf_i+0x1d2>
 800ab2c:	6822      	ldr	r2, [r4, #0]
 800ab2e:	f012 0210 	ands.w	r2, r2, #16
 800ab32:	d113      	bne.n	800ab5c <_scanf_i+0x1b0>
 800ab34:	702a      	strb	r2, [r5, #0]
 800ab36:	6863      	ldr	r3, [r4, #4]
 800ab38:	9e01      	ldr	r6, [sp, #4]
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	47b0      	blx	r6
 800ab40:	f8d8 3000 	ldr.w	r3, [r8]
 800ab44:	6821      	ldr	r1, [r4, #0]
 800ab46:	1d1a      	adds	r2, r3, #4
 800ab48:	f8c8 2000 	str.w	r2, [r8]
 800ab4c:	f011 0f20 	tst.w	r1, #32
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	d00f      	beq.n	800ab74 <_scanf_i+0x1c8>
 800ab54:	6018      	str	r0, [r3, #0]
 800ab56:	68e3      	ldr	r3, [r4, #12]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	60e3      	str	r3, [r4, #12]
 800ab5c:	6923      	ldr	r3, [r4, #16]
 800ab5e:	1bed      	subs	r5, r5, r7
 800ab60:	445d      	add	r5, fp
 800ab62:	442b      	add	r3, r5
 800ab64:	6123      	str	r3, [r4, #16]
 800ab66:	2000      	movs	r0, #0
 800ab68:	b007      	add	sp, #28
 800ab6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6e:	f04f 0b00 	mov.w	fp, #0
 800ab72:	e7ca      	b.n	800ab0a <_scanf_i+0x15e>
 800ab74:	07ca      	lsls	r2, r1, #31
 800ab76:	bf4c      	ite	mi
 800ab78:	8018      	strhmi	r0, [r3, #0]
 800ab7a:	6018      	strpl	r0, [r3, #0]
 800ab7c:	e7eb      	b.n	800ab56 <_scanf_i+0x1aa>
 800ab7e:	2001      	movs	r0, #1
 800ab80:	e7f2      	b.n	800ab68 <_scanf_i+0x1bc>
 800ab82:	bf00      	nop
 800ab84:	0800b2d0 	.word	0x0800b2d0
 800ab88:	0800b09d 	.word	0x0800b09d
 800ab8c:	0800b17d 	.word	0x0800b17d
 800ab90:	0800b35f 	.word	0x0800b35f

0800ab94 <__sflush_r>:
 800ab94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	0716      	lsls	r6, r2, #28
 800ab9e:	4605      	mov	r5, r0
 800aba0:	460c      	mov	r4, r1
 800aba2:	d454      	bmi.n	800ac4e <__sflush_r+0xba>
 800aba4:	684b      	ldr	r3, [r1, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	dc02      	bgt.n	800abb0 <__sflush_r+0x1c>
 800abaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800abac:	2b00      	cmp	r3, #0
 800abae:	dd48      	ble.n	800ac42 <__sflush_r+0xae>
 800abb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	d045      	beq.n	800ac42 <__sflush_r+0xae>
 800abb6:	2300      	movs	r3, #0
 800abb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800abbc:	682f      	ldr	r7, [r5, #0]
 800abbe:	6a21      	ldr	r1, [r4, #32]
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	d030      	beq.n	800ac26 <__sflush_r+0x92>
 800abc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	0759      	lsls	r1, r3, #29
 800abca:	d505      	bpl.n	800abd8 <__sflush_r+0x44>
 800abcc:	6863      	ldr	r3, [r4, #4]
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abd2:	b10b      	cbz	r3, 800abd8 <__sflush_r+0x44>
 800abd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abd6:	1ad2      	subs	r2, r2, r3
 800abd8:	2300      	movs	r3, #0
 800abda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abdc:	6a21      	ldr	r1, [r4, #32]
 800abde:	4628      	mov	r0, r5
 800abe0:	47b0      	blx	r6
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	d106      	bne.n	800abf6 <__sflush_r+0x62>
 800abe8:	6829      	ldr	r1, [r5, #0]
 800abea:	291d      	cmp	r1, #29
 800abec:	d82b      	bhi.n	800ac46 <__sflush_r+0xb2>
 800abee:	4a2a      	ldr	r2, [pc, #168]	@ (800ac98 <__sflush_r+0x104>)
 800abf0:	410a      	asrs	r2, r1
 800abf2:	07d6      	lsls	r6, r2, #31
 800abf4:	d427      	bmi.n	800ac46 <__sflush_r+0xb2>
 800abf6:	2200      	movs	r2, #0
 800abf8:	6062      	str	r2, [r4, #4]
 800abfa:	04d9      	lsls	r1, r3, #19
 800abfc:	6922      	ldr	r2, [r4, #16]
 800abfe:	6022      	str	r2, [r4, #0]
 800ac00:	d504      	bpl.n	800ac0c <__sflush_r+0x78>
 800ac02:	1c42      	adds	r2, r0, #1
 800ac04:	d101      	bne.n	800ac0a <__sflush_r+0x76>
 800ac06:	682b      	ldr	r3, [r5, #0]
 800ac08:	b903      	cbnz	r3, 800ac0c <__sflush_r+0x78>
 800ac0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac0e:	602f      	str	r7, [r5, #0]
 800ac10:	b1b9      	cbz	r1, 800ac42 <__sflush_r+0xae>
 800ac12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac16:	4299      	cmp	r1, r3
 800ac18:	d002      	beq.n	800ac20 <__sflush_r+0x8c>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f7fe ff80 	bl	8009b20 <_free_r>
 800ac20:	2300      	movs	r3, #0
 800ac22:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac24:	e00d      	b.n	800ac42 <__sflush_r+0xae>
 800ac26:	2301      	movs	r3, #1
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	1c50      	adds	r0, r2, #1
 800ac30:	d1c9      	bne.n	800abc6 <__sflush_r+0x32>
 800ac32:	682b      	ldr	r3, [r5, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d0c6      	beq.n	800abc6 <__sflush_r+0x32>
 800ac38:	2b1d      	cmp	r3, #29
 800ac3a:	d001      	beq.n	800ac40 <__sflush_r+0xac>
 800ac3c:	2b16      	cmp	r3, #22
 800ac3e:	d11e      	bne.n	800ac7e <__sflush_r+0xea>
 800ac40:	602f      	str	r7, [r5, #0]
 800ac42:	2000      	movs	r0, #0
 800ac44:	e022      	b.n	800ac8c <__sflush_r+0xf8>
 800ac46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac4a:	b21b      	sxth	r3, r3
 800ac4c:	e01b      	b.n	800ac86 <__sflush_r+0xf2>
 800ac4e:	690f      	ldr	r7, [r1, #16]
 800ac50:	2f00      	cmp	r7, #0
 800ac52:	d0f6      	beq.n	800ac42 <__sflush_r+0xae>
 800ac54:	0793      	lsls	r3, r2, #30
 800ac56:	680e      	ldr	r6, [r1, #0]
 800ac58:	bf08      	it	eq
 800ac5a:	694b      	ldreq	r3, [r1, #20]
 800ac5c:	600f      	str	r7, [r1, #0]
 800ac5e:	bf18      	it	ne
 800ac60:	2300      	movne	r3, #0
 800ac62:	eba6 0807 	sub.w	r8, r6, r7
 800ac66:	608b      	str	r3, [r1, #8]
 800ac68:	f1b8 0f00 	cmp.w	r8, #0
 800ac6c:	dde9      	ble.n	800ac42 <__sflush_r+0xae>
 800ac6e:	6a21      	ldr	r1, [r4, #32]
 800ac70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac72:	4643      	mov	r3, r8
 800ac74:	463a      	mov	r2, r7
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b0      	blx	r6
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	dc08      	bgt.n	800ac90 <__sflush_r+0xfc>
 800ac7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac90:	4407      	add	r7, r0
 800ac92:	eba8 0800 	sub.w	r8, r8, r0
 800ac96:	e7e7      	b.n	800ac68 <__sflush_r+0xd4>
 800ac98:	dfbffffe 	.word	0xdfbffffe

0800ac9c <_fflush_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	690b      	ldr	r3, [r1, #16]
 800aca0:	4605      	mov	r5, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	b913      	cbnz	r3, 800acac <_fflush_r+0x10>
 800aca6:	2500      	movs	r5, #0
 800aca8:	4628      	mov	r0, r5
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	b118      	cbz	r0, 800acb6 <_fflush_r+0x1a>
 800acae:	6a03      	ldr	r3, [r0, #32]
 800acb0:	b90b      	cbnz	r3, 800acb6 <_fflush_r+0x1a>
 800acb2:	f7fe fcef 	bl	8009694 <__sinit>
 800acb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0f3      	beq.n	800aca6 <_fflush_r+0xa>
 800acbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acc0:	07d0      	lsls	r0, r2, #31
 800acc2:	d404      	bmi.n	800acce <_fflush_r+0x32>
 800acc4:	0599      	lsls	r1, r3, #22
 800acc6:	d402      	bmi.n	800acce <_fflush_r+0x32>
 800acc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acca:	f7fe ff26 	bl	8009b1a <__retarget_lock_acquire_recursive>
 800acce:	4628      	mov	r0, r5
 800acd0:	4621      	mov	r1, r4
 800acd2:	f7ff ff5f 	bl	800ab94 <__sflush_r>
 800acd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acd8:	07da      	lsls	r2, r3, #31
 800acda:	4605      	mov	r5, r0
 800acdc:	d4e4      	bmi.n	800aca8 <_fflush_r+0xc>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	059b      	lsls	r3, r3, #22
 800ace2:	d4e1      	bmi.n	800aca8 <_fflush_r+0xc>
 800ace4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ace6:	f7fe ff19 	bl	8009b1c <__retarget_lock_release_recursive>
 800acea:	e7dd      	b.n	800aca8 <_fflush_r+0xc>

0800acec <__swhatbuf_r>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	460c      	mov	r4, r1
 800acf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf4:	2900      	cmp	r1, #0
 800acf6:	b096      	sub	sp, #88	@ 0x58
 800acf8:	4615      	mov	r5, r2
 800acfa:	461e      	mov	r6, r3
 800acfc:	da0d      	bge.n	800ad1a <__swhatbuf_r+0x2e>
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad04:	f04f 0100 	mov.w	r1, #0
 800ad08:	bf14      	ite	ne
 800ad0a:	2340      	movne	r3, #64	@ 0x40
 800ad0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad10:	2000      	movs	r0, #0
 800ad12:	6031      	str	r1, [r6, #0]
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	b016      	add	sp, #88	@ 0x58
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
 800ad1a:	466a      	mov	r2, sp
 800ad1c:	f000 f8d6 	bl	800aecc <_fstat_r>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	dbec      	blt.n	800acfe <__swhatbuf_r+0x12>
 800ad24:	9901      	ldr	r1, [sp, #4]
 800ad26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad2e:	4259      	negs	r1, r3
 800ad30:	4159      	adcs	r1, r3
 800ad32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad36:	e7eb      	b.n	800ad10 <__swhatbuf_r+0x24>

0800ad38 <__smakebuf_r>:
 800ad38:	898b      	ldrh	r3, [r1, #12]
 800ad3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad3c:	079d      	lsls	r5, r3, #30
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460c      	mov	r4, r1
 800ad42:	d507      	bpl.n	800ad54 <__smakebuf_r+0x1c>
 800ad44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	6123      	str	r3, [r4, #16]
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	6163      	str	r3, [r4, #20]
 800ad50:	b003      	add	sp, #12
 800ad52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad54:	ab01      	add	r3, sp, #4
 800ad56:	466a      	mov	r2, sp
 800ad58:	f7ff ffc8 	bl	800acec <__swhatbuf_r>
 800ad5c:	9f00      	ldr	r7, [sp, #0]
 800ad5e:	4605      	mov	r5, r0
 800ad60:	4639      	mov	r1, r7
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7fe ff48 	bl	8009bf8 <_malloc_r>
 800ad68:	b948      	cbnz	r0, 800ad7e <__smakebuf_r+0x46>
 800ad6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6e:	059a      	lsls	r2, r3, #22
 800ad70:	d4ee      	bmi.n	800ad50 <__smakebuf_r+0x18>
 800ad72:	f023 0303 	bic.w	r3, r3, #3
 800ad76:	f043 0302 	orr.w	r3, r3, #2
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	e7e2      	b.n	800ad44 <__smakebuf_r+0xc>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	6020      	str	r0, [r4, #0]
 800ad82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad86:	81a3      	strh	r3, [r4, #12]
 800ad88:	9b01      	ldr	r3, [sp, #4]
 800ad8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad8e:	b15b      	cbz	r3, 800ada8 <__smakebuf_r+0x70>
 800ad90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad94:	4630      	mov	r0, r6
 800ad96:	f000 f8ab 	bl	800aef0 <_isatty_r>
 800ad9a:	b128      	cbz	r0, 800ada8 <__smakebuf_r+0x70>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f023 0303 	bic.w	r3, r3, #3
 800ada2:	f043 0301 	orr.w	r3, r3, #1
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	431d      	orrs	r5, r3
 800adac:	81a5      	strh	r5, [r4, #12]
 800adae:	e7cf      	b.n	800ad50 <__smakebuf_r+0x18>

0800adb0 <__sccl>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	780b      	ldrb	r3, [r1, #0]
 800adb4:	4604      	mov	r4, r0
 800adb6:	2b5e      	cmp	r3, #94	@ 0x5e
 800adb8:	bf0b      	itete	eq
 800adba:	784b      	ldrbeq	r3, [r1, #1]
 800adbc:	1c4a      	addne	r2, r1, #1
 800adbe:	1c8a      	addeq	r2, r1, #2
 800adc0:	2100      	movne	r1, #0
 800adc2:	bf08      	it	eq
 800adc4:	2101      	moveq	r1, #1
 800adc6:	3801      	subs	r0, #1
 800adc8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800adcc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800add0:	42a8      	cmp	r0, r5
 800add2:	d1fb      	bne.n	800adcc <__sccl+0x1c>
 800add4:	b90b      	cbnz	r3, 800adda <__sccl+0x2a>
 800add6:	1e50      	subs	r0, r2, #1
 800add8:	bd70      	pop	{r4, r5, r6, pc}
 800adda:	f081 0101 	eor.w	r1, r1, #1
 800adde:	54e1      	strb	r1, [r4, r3]
 800ade0:	4610      	mov	r0, r2
 800ade2:	4602      	mov	r2, r0
 800ade4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ade8:	2d2d      	cmp	r5, #45	@ 0x2d
 800adea:	d005      	beq.n	800adf8 <__sccl+0x48>
 800adec:	2d5d      	cmp	r5, #93	@ 0x5d
 800adee:	d016      	beq.n	800ae1e <__sccl+0x6e>
 800adf0:	2d00      	cmp	r5, #0
 800adf2:	d0f1      	beq.n	800add8 <__sccl+0x28>
 800adf4:	462b      	mov	r3, r5
 800adf6:	e7f2      	b.n	800adde <__sccl+0x2e>
 800adf8:	7846      	ldrb	r6, [r0, #1]
 800adfa:	2e5d      	cmp	r6, #93	@ 0x5d
 800adfc:	d0fa      	beq.n	800adf4 <__sccl+0x44>
 800adfe:	42b3      	cmp	r3, r6
 800ae00:	dcf8      	bgt.n	800adf4 <__sccl+0x44>
 800ae02:	3002      	adds	r0, #2
 800ae04:	461a      	mov	r2, r3
 800ae06:	3201      	adds	r2, #1
 800ae08:	4296      	cmp	r6, r2
 800ae0a:	54a1      	strb	r1, [r4, r2]
 800ae0c:	dcfb      	bgt.n	800ae06 <__sccl+0x56>
 800ae0e:	1af2      	subs	r2, r6, r3
 800ae10:	3a01      	subs	r2, #1
 800ae12:	1c5d      	adds	r5, r3, #1
 800ae14:	42b3      	cmp	r3, r6
 800ae16:	bfa8      	it	ge
 800ae18:	2200      	movge	r2, #0
 800ae1a:	18ab      	adds	r3, r5, r2
 800ae1c:	e7e1      	b.n	800ade2 <__sccl+0x32>
 800ae1e:	4610      	mov	r0, r2
 800ae20:	e7da      	b.n	800add8 <__sccl+0x28>

0800ae22 <__submore>:
 800ae22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ae2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae2e:	4299      	cmp	r1, r3
 800ae30:	d11d      	bne.n	800ae6e <__submore+0x4c>
 800ae32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ae36:	f7fe fedf 	bl	8009bf8 <_malloc_r>
 800ae3a:	b918      	cbnz	r0, 800ae44 <__submore+0x22>
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae48:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ae4a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ae4e:	6360      	str	r0, [r4, #52]	@ 0x34
 800ae50:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ae54:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ae58:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ae5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ae60:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ae64:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ae68:	6020      	str	r0, [r4, #0]
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e7e8      	b.n	800ae40 <__submore+0x1e>
 800ae6e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ae70:	0077      	lsls	r7, r6, #1
 800ae72:	463a      	mov	r2, r7
 800ae74:	f000 f86a 	bl	800af4c <_realloc_r>
 800ae78:	4605      	mov	r5, r0
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0de      	beq.n	800ae3c <__submore+0x1a>
 800ae7e:	eb00 0806 	add.w	r8, r0, r6
 800ae82:	4601      	mov	r1, r0
 800ae84:	4632      	mov	r2, r6
 800ae86:	4640      	mov	r0, r8
 800ae88:	f000 f852 	bl	800af30 <memcpy>
 800ae8c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ae90:	f8c4 8000 	str.w	r8, [r4]
 800ae94:	e7e9      	b.n	800ae6a <__submore+0x48>

0800ae96 <memmove>:
 800ae96:	4288      	cmp	r0, r1
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	eb01 0402 	add.w	r4, r1, r2
 800ae9e:	d902      	bls.n	800aea6 <memmove+0x10>
 800aea0:	4284      	cmp	r4, r0
 800aea2:	4623      	mov	r3, r4
 800aea4:	d807      	bhi.n	800aeb6 <memmove+0x20>
 800aea6:	1e43      	subs	r3, r0, #1
 800aea8:	42a1      	cmp	r1, r4
 800aeaa:	d008      	beq.n	800aebe <memmove+0x28>
 800aeac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeb4:	e7f8      	b.n	800aea8 <memmove+0x12>
 800aeb6:	4402      	add	r2, r0
 800aeb8:	4601      	mov	r1, r0
 800aeba:	428a      	cmp	r2, r1
 800aebc:	d100      	bne.n	800aec0 <memmove+0x2a>
 800aebe:	bd10      	pop	{r4, pc}
 800aec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aec4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aec8:	e7f7      	b.n	800aeba <memmove+0x24>
	...

0800aecc <_fstat_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	@ (800aeec <_fstat_r+0x20>)
 800aed0:	2300      	movs	r3, #0
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	602b      	str	r3, [r5, #0]
 800aeda:	f7f6 fa86 	bl	80013ea <_fstat>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d102      	bne.n	800aee8 <_fstat_r+0x1c>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	b103      	cbz	r3, 800aee8 <_fstat_r+0x1c>
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	bd38      	pop	{r3, r4, r5, pc}
 800aeea:	bf00      	nop
 800aeec:	20001ff4 	.word	0x20001ff4

0800aef0 <_isatty_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d06      	ldr	r5, [pc, #24]	@ (800af0c <_isatty_r+0x1c>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	f7f6 fa85 	bl	800140a <_isatty>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_isatty_r+0x1a>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_isatty_r+0x1a>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	20001ff4 	.word	0x20001ff4

0800af10 <_sbrk_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4d06      	ldr	r5, [pc, #24]	@ (800af2c <_sbrk_r+0x1c>)
 800af14:	2300      	movs	r3, #0
 800af16:	4604      	mov	r4, r0
 800af18:	4608      	mov	r0, r1
 800af1a:	602b      	str	r3, [r5, #0]
 800af1c:	f7f6 fa8e 	bl	800143c <_sbrk>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	d102      	bne.n	800af2a <_sbrk_r+0x1a>
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	b103      	cbz	r3, 800af2a <_sbrk_r+0x1a>
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
 800af2c:	20001ff4 	.word	0x20001ff4

0800af30 <memcpy>:
 800af30:	440a      	add	r2, r1
 800af32:	4291      	cmp	r1, r2
 800af34:	f100 33ff 	add.w	r3, r0, #4294967295
 800af38:	d100      	bne.n	800af3c <memcpy+0xc>
 800af3a:	4770      	bx	lr
 800af3c:	b510      	push	{r4, lr}
 800af3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af46:	4291      	cmp	r1, r2
 800af48:	d1f9      	bne.n	800af3e <memcpy+0xe>
 800af4a:	bd10      	pop	{r4, pc}

0800af4c <_realloc_r>:
 800af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af50:	4680      	mov	r8, r0
 800af52:	4615      	mov	r5, r2
 800af54:	460c      	mov	r4, r1
 800af56:	b921      	cbnz	r1, 800af62 <_realloc_r+0x16>
 800af58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af5c:	4611      	mov	r1, r2
 800af5e:	f7fe be4b 	b.w	8009bf8 <_malloc_r>
 800af62:	b92a      	cbnz	r2, 800af70 <_realloc_r+0x24>
 800af64:	f7fe fddc 	bl	8009b20 <_free_r>
 800af68:	2400      	movs	r4, #0
 800af6a:	4620      	mov	r0, r4
 800af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af70:	f000 f906 	bl	800b180 <_malloc_usable_size_r>
 800af74:	4285      	cmp	r5, r0
 800af76:	4606      	mov	r6, r0
 800af78:	d802      	bhi.n	800af80 <_realloc_r+0x34>
 800af7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af7e:	d8f4      	bhi.n	800af6a <_realloc_r+0x1e>
 800af80:	4629      	mov	r1, r5
 800af82:	4640      	mov	r0, r8
 800af84:	f7fe fe38 	bl	8009bf8 <_malloc_r>
 800af88:	4607      	mov	r7, r0
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d0ec      	beq.n	800af68 <_realloc_r+0x1c>
 800af8e:	42b5      	cmp	r5, r6
 800af90:	462a      	mov	r2, r5
 800af92:	4621      	mov	r1, r4
 800af94:	bf28      	it	cs
 800af96:	4632      	movcs	r2, r6
 800af98:	f7ff ffca 	bl	800af30 <memcpy>
 800af9c:	4621      	mov	r1, r4
 800af9e:	4640      	mov	r0, r8
 800afa0:	f7fe fdbe 	bl	8009b20 <_free_r>
 800afa4:	463c      	mov	r4, r7
 800afa6:	e7e0      	b.n	800af6a <_realloc_r+0x1e>

0800afa8 <_strtol_l.constprop.0>:
 800afa8:	2b24      	cmp	r3, #36	@ 0x24
 800afaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afae:	4686      	mov	lr, r0
 800afb0:	4690      	mov	r8, r2
 800afb2:	d801      	bhi.n	800afb8 <_strtol_l.constprop.0+0x10>
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d106      	bne.n	800afc6 <_strtol_l.constprop.0+0x1e>
 800afb8:	f7fe fd84 	bl	8009ac4 <__errno>
 800afbc:	2316      	movs	r3, #22
 800afbe:	6003      	str	r3, [r0, #0]
 800afc0:	2000      	movs	r0, #0
 800afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc6:	4834      	ldr	r0, [pc, #208]	@ (800b098 <_strtol_l.constprop.0+0xf0>)
 800afc8:	460d      	mov	r5, r1
 800afca:	462a      	mov	r2, r5
 800afcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afd0:	5d06      	ldrb	r6, [r0, r4]
 800afd2:	f016 0608 	ands.w	r6, r6, #8
 800afd6:	d1f8      	bne.n	800afca <_strtol_l.constprop.0+0x22>
 800afd8:	2c2d      	cmp	r4, #45	@ 0x2d
 800afda:	d12d      	bne.n	800b038 <_strtol_l.constprop.0+0x90>
 800afdc:	782c      	ldrb	r4, [r5, #0]
 800afde:	2601      	movs	r6, #1
 800afe0:	1c95      	adds	r5, r2, #2
 800afe2:	f033 0210 	bics.w	r2, r3, #16
 800afe6:	d109      	bne.n	800affc <_strtol_l.constprop.0+0x54>
 800afe8:	2c30      	cmp	r4, #48	@ 0x30
 800afea:	d12a      	bne.n	800b042 <_strtol_l.constprop.0+0x9a>
 800afec:	782a      	ldrb	r2, [r5, #0]
 800afee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aff2:	2a58      	cmp	r2, #88	@ 0x58
 800aff4:	d125      	bne.n	800b042 <_strtol_l.constprop.0+0x9a>
 800aff6:	786c      	ldrb	r4, [r5, #1]
 800aff8:	2310      	movs	r3, #16
 800affa:	3502      	adds	r5, #2
 800affc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b000:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b004:	2200      	movs	r2, #0
 800b006:	fbbc f9f3 	udiv	r9, ip, r3
 800b00a:	4610      	mov	r0, r2
 800b00c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b010:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b014:	2f09      	cmp	r7, #9
 800b016:	d81b      	bhi.n	800b050 <_strtol_l.constprop.0+0xa8>
 800b018:	463c      	mov	r4, r7
 800b01a:	42a3      	cmp	r3, r4
 800b01c:	dd27      	ble.n	800b06e <_strtol_l.constprop.0+0xc6>
 800b01e:	1c57      	adds	r7, r2, #1
 800b020:	d007      	beq.n	800b032 <_strtol_l.constprop.0+0x8a>
 800b022:	4581      	cmp	r9, r0
 800b024:	d320      	bcc.n	800b068 <_strtol_l.constprop.0+0xc0>
 800b026:	d101      	bne.n	800b02c <_strtol_l.constprop.0+0x84>
 800b028:	45a2      	cmp	sl, r4
 800b02a:	db1d      	blt.n	800b068 <_strtol_l.constprop.0+0xc0>
 800b02c:	fb00 4003 	mla	r0, r0, r3, r4
 800b030:	2201      	movs	r2, #1
 800b032:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b036:	e7eb      	b.n	800b010 <_strtol_l.constprop.0+0x68>
 800b038:	2c2b      	cmp	r4, #43	@ 0x2b
 800b03a:	bf04      	itt	eq
 800b03c:	782c      	ldrbeq	r4, [r5, #0]
 800b03e:	1c95      	addeq	r5, r2, #2
 800b040:	e7cf      	b.n	800afe2 <_strtol_l.constprop.0+0x3a>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1da      	bne.n	800affc <_strtol_l.constprop.0+0x54>
 800b046:	2c30      	cmp	r4, #48	@ 0x30
 800b048:	bf0c      	ite	eq
 800b04a:	2308      	moveq	r3, #8
 800b04c:	230a      	movne	r3, #10
 800b04e:	e7d5      	b.n	800affc <_strtol_l.constprop.0+0x54>
 800b050:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b054:	2f19      	cmp	r7, #25
 800b056:	d801      	bhi.n	800b05c <_strtol_l.constprop.0+0xb4>
 800b058:	3c37      	subs	r4, #55	@ 0x37
 800b05a:	e7de      	b.n	800b01a <_strtol_l.constprop.0+0x72>
 800b05c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b060:	2f19      	cmp	r7, #25
 800b062:	d804      	bhi.n	800b06e <_strtol_l.constprop.0+0xc6>
 800b064:	3c57      	subs	r4, #87	@ 0x57
 800b066:	e7d8      	b.n	800b01a <_strtol_l.constprop.0+0x72>
 800b068:	f04f 32ff 	mov.w	r2, #4294967295
 800b06c:	e7e1      	b.n	800b032 <_strtol_l.constprop.0+0x8a>
 800b06e:	1c53      	adds	r3, r2, #1
 800b070:	d108      	bne.n	800b084 <_strtol_l.constprop.0+0xdc>
 800b072:	2322      	movs	r3, #34	@ 0x22
 800b074:	f8ce 3000 	str.w	r3, [lr]
 800b078:	4660      	mov	r0, ip
 800b07a:	f1b8 0f00 	cmp.w	r8, #0
 800b07e:	d0a0      	beq.n	800afc2 <_strtol_l.constprop.0+0x1a>
 800b080:	1e69      	subs	r1, r5, #1
 800b082:	e006      	b.n	800b092 <_strtol_l.constprop.0+0xea>
 800b084:	b106      	cbz	r6, 800b088 <_strtol_l.constprop.0+0xe0>
 800b086:	4240      	negs	r0, r0
 800b088:	f1b8 0f00 	cmp.w	r8, #0
 800b08c:	d099      	beq.n	800afc2 <_strtol_l.constprop.0+0x1a>
 800b08e:	2a00      	cmp	r2, #0
 800b090:	d1f6      	bne.n	800b080 <_strtol_l.constprop.0+0xd8>
 800b092:	f8c8 1000 	str.w	r1, [r8]
 800b096:	e794      	b.n	800afc2 <_strtol_l.constprop.0+0x1a>
 800b098:	0800b36b 	.word	0x0800b36b

0800b09c <_strtol_r>:
 800b09c:	f7ff bf84 	b.w	800afa8 <_strtol_l.constprop.0>

0800b0a0 <_strtoul_l.constprop.0>:
 800b0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0a4:	4e34      	ldr	r6, [pc, #208]	@ (800b178 <_strtoul_l.constprop.0+0xd8>)
 800b0a6:	4686      	mov	lr, r0
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0b0:	5d37      	ldrb	r7, [r6, r4]
 800b0b2:	f017 0708 	ands.w	r7, r7, #8
 800b0b6:	d1f8      	bne.n	800b0aa <_strtoul_l.constprop.0+0xa>
 800b0b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b0ba:	d12f      	bne.n	800b11c <_strtoul_l.constprop.0+0x7c>
 800b0bc:	782c      	ldrb	r4, [r5, #0]
 800b0be:	2701      	movs	r7, #1
 800b0c0:	1c85      	adds	r5, r0, #2
 800b0c2:	f033 0010 	bics.w	r0, r3, #16
 800b0c6:	d109      	bne.n	800b0dc <_strtoul_l.constprop.0+0x3c>
 800b0c8:	2c30      	cmp	r4, #48	@ 0x30
 800b0ca:	d12c      	bne.n	800b126 <_strtoul_l.constprop.0+0x86>
 800b0cc:	7828      	ldrb	r0, [r5, #0]
 800b0ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b0d2:	2858      	cmp	r0, #88	@ 0x58
 800b0d4:	d127      	bne.n	800b126 <_strtoul_l.constprop.0+0x86>
 800b0d6:	786c      	ldrb	r4, [r5, #1]
 800b0d8:	2310      	movs	r3, #16
 800b0da:	3502      	adds	r5, #2
 800b0dc:	f04f 38ff 	mov.w	r8, #4294967295
 800b0e0:	2600      	movs	r6, #0
 800b0e2:	fbb8 f8f3 	udiv	r8, r8, r3
 800b0e6:	fb03 f908 	mul.w	r9, r3, r8
 800b0ea:	ea6f 0909 	mvn.w	r9, r9
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b0f4:	f1bc 0f09 	cmp.w	ip, #9
 800b0f8:	d81c      	bhi.n	800b134 <_strtoul_l.constprop.0+0x94>
 800b0fa:	4664      	mov	r4, ip
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	dd2a      	ble.n	800b156 <_strtoul_l.constprop.0+0xb6>
 800b100:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b104:	d007      	beq.n	800b116 <_strtoul_l.constprop.0+0x76>
 800b106:	4580      	cmp	r8, r0
 800b108:	d322      	bcc.n	800b150 <_strtoul_l.constprop.0+0xb0>
 800b10a:	d101      	bne.n	800b110 <_strtoul_l.constprop.0+0x70>
 800b10c:	45a1      	cmp	r9, r4
 800b10e:	db1f      	blt.n	800b150 <_strtoul_l.constprop.0+0xb0>
 800b110:	fb00 4003 	mla	r0, r0, r3, r4
 800b114:	2601      	movs	r6, #1
 800b116:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b11a:	e7e9      	b.n	800b0f0 <_strtoul_l.constprop.0+0x50>
 800b11c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b11e:	bf04      	itt	eq
 800b120:	782c      	ldrbeq	r4, [r5, #0]
 800b122:	1c85      	addeq	r5, r0, #2
 800b124:	e7cd      	b.n	800b0c2 <_strtoul_l.constprop.0+0x22>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1d8      	bne.n	800b0dc <_strtoul_l.constprop.0+0x3c>
 800b12a:	2c30      	cmp	r4, #48	@ 0x30
 800b12c:	bf0c      	ite	eq
 800b12e:	2308      	moveq	r3, #8
 800b130:	230a      	movne	r3, #10
 800b132:	e7d3      	b.n	800b0dc <_strtoul_l.constprop.0+0x3c>
 800b134:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b138:	f1bc 0f19 	cmp.w	ip, #25
 800b13c:	d801      	bhi.n	800b142 <_strtoul_l.constprop.0+0xa2>
 800b13e:	3c37      	subs	r4, #55	@ 0x37
 800b140:	e7dc      	b.n	800b0fc <_strtoul_l.constprop.0+0x5c>
 800b142:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b146:	f1bc 0f19 	cmp.w	ip, #25
 800b14a:	d804      	bhi.n	800b156 <_strtoul_l.constprop.0+0xb6>
 800b14c:	3c57      	subs	r4, #87	@ 0x57
 800b14e:	e7d5      	b.n	800b0fc <_strtoul_l.constprop.0+0x5c>
 800b150:	f04f 36ff 	mov.w	r6, #4294967295
 800b154:	e7df      	b.n	800b116 <_strtoul_l.constprop.0+0x76>
 800b156:	1c73      	adds	r3, r6, #1
 800b158:	d106      	bne.n	800b168 <_strtoul_l.constprop.0+0xc8>
 800b15a:	2322      	movs	r3, #34	@ 0x22
 800b15c:	f8ce 3000 	str.w	r3, [lr]
 800b160:	4630      	mov	r0, r6
 800b162:	b932      	cbnz	r2, 800b172 <_strtoul_l.constprop.0+0xd2>
 800b164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b168:	b107      	cbz	r7, 800b16c <_strtoul_l.constprop.0+0xcc>
 800b16a:	4240      	negs	r0, r0
 800b16c:	2a00      	cmp	r2, #0
 800b16e:	d0f9      	beq.n	800b164 <_strtoul_l.constprop.0+0xc4>
 800b170:	b106      	cbz	r6, 800b174 <_strtoul_l.constprop.0+0xd4>
 800b172:	1e69      	subs	r1, r5, #1
 800b174:	6011      	str	r1, [r2, #0]
 800b176:	e7f5      	b.n	800b164 <_strtoul_l.constprop.0+0xc4>
 800b178:	0800b36b 	.word	0x0800b36b

0800b17c <_strtoul_r>:
 800b17c:	f7ff bf90 	b.w	800b0a0 <_strtoul_l.constprop.0>

0800b180 <_malloc_usable_size_r>:
 800b180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b184:	1f18      	subs	r0, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfbc      	itt	lt
 800b18a:	580b      	ldrlt	r3, [r1, r0]
 800b18c:	18c0      	addlt	r0, r0, r3
 800b18e:	4770      	bx	lr

0800b190 <_init>:
 800b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b192:	bf00      	nop
 800b194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b196:	bc08      	pop	{r3}
 800b198:	469e      	mov	lr, r3
 800b19a:	4770      	bx	lr

0800b19c <_fini>:
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	bf00      	nop
 800b1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a2:	bc08      	pop	{r3}
 800b1a4:	469e      	mov	lr, r3
 800b1a6:	4770      	bx	lr
